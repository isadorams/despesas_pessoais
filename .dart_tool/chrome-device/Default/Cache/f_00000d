define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/scheduler/priority.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/foundation/key.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/painting/geometry.dart', 'packages/flutter/src/rendering/stack.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/services/system_chrome.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/foundation/observer_list.dart', 'packages/flutter/src/services/system_navigator.dart', 'packages/flutter/src/rendering/performance_overlay.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/services/system_sound.dart', 'packages/flutter/src/services/mouse_cursor.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/scheduler/ticker.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/services/keyboard_key.dart', 'packages/flutter/src/services/raw_keyboard_windows.dart', 'packages/flutter/src/services/text_input.dart', 'packages/flutter/src/painting/decoration.dart', 'packages/flutter/src/rendering/table.dart', 'packages/flutter/src/rendering/table_border.dart', 'packages/flutter/src/foundation/print.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/rendering/proxy_sliver.dart', 'packages/flutter/src/rendering/paragraph.dart', 'packages/flutter/src/services/clipboard.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/rendering/editable.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/gestures/force_press.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/gestures/constants.dart', 'packages/flutter/src/gestures/monodrag.dart', 'packages/flutter/src/rendering/viewport_offset.dart', 'packages/flutter/src/widgets/scroll_metrics.dart', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/physics/utils.dart', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/gestures/drag.dart', 'packages/flutter/src/physics/simulation.dart', 'packages/flutter/src/physics/spring_simulation.dart', 'packages/flutter/src/widgets/scroll_simulation.dart', 'packages/flutter/src/gestures/multitap.dart', 'packages/flutter/src/gestures/scale.dart', 'packages/flutter/src/gestures/binding.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/painting/image_resolution.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter/src/semantics/binding.dart', 'packages/flutter/src/rendering/sliver_list.dart', 'packages/flutter/src/rendering/sliver_fixed_extent_list.dart', 'packages/flutter/src/rendering/sliver_grid.dart', 'packages/flutter/src/rendering/sliver_multi_box_adaptor.dart', 'packages/flutter/src/services/text_formatter.dart', 'packages/flutter/src/rendering/error.dart', 'packages/flutter/src/painting/box_shadow.dart', 'packages/flutter/src/foundation/binding.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/rendering/rotated_box.dart', 'packages/flutter/src/rendering/shifted_box.dart', 'packages/flutter/src/rendering/custom_layout.dart', 'packages/flutter/src/rendering/sliver_padding.dart', 'packages/flutter/src/rendering/list_body.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/rendering/wrap.dart', 'packages/flutter/src/rendering/flow.dart', 'packages/flutter/src/rendering/image.dart'], (function load__packages__flutter__src__widgets__widget_span_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__scheduler__priority$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__foundation__key$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__painting__geometry$46dart, packages__flutter__src__rendering__stack$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__services__system_chrome$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__foundation__observer_list$46dart, packages__flutter__src__services__system_navigator$46dart, packages__flutter__src__rendering__performance_overlay$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__services__system_sound$46dart, packages__flutter__src__services__mouse_cursor$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__scheduler__ticker$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__services__keyboard_key$46dart, packages__flutter__src__services__raw_keyboard_windows$46dart, packages__flutter__src__services__text_input$46dart, packages__flutter__src__painting__decoration$46dart, packages__flutter__src__rendering__table$46dart, packages__flutter__src__rendering__table_border$46dart, packages__flutter__src__foundation__print$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__rendering__proxy_sliver$46dart, packages__flutter__src__rendering__paragraph$46dart, packages__flutter__src__services__clipboard$46dart, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__rendering__editable$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__gestures__force_press$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__gestures__constants$46dart, packages__flutter__src__gestures__monodrag$46dart, packages__flutter__src__rendering__viewport_offset$46dart, packages__flutter__src__widgets__scroll_metrics$46dart, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__physics__utils$46dart, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__gestures__drag$46dart, packages__flutter__src__physics__simulation$46dart, packages__flutter__src__physics__spring_simulation$46dart, packages__flutter__src__widgets__scroll_simulation$46dart, packages__flutter__src__gestures__multitap$46dart, packages__flutter__src__gestures__scale$46dart, packages__flutter__src__gestures__binding$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__painting__image_resolution$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter__src__semantics__binding$46dart, packages__flutter__src__rendering__sliver_list$46dart, packages__flutter__src__rendering__sliver_fixed_extent_list$46dart, packages__flutter__src__rendering__sliver_grid$46dart, packages__flutter__src__rendering__sliver_multi_box_adaptor$46dart, packages__flutter__src__services__text_formatter$46dart, packages__flutter__src__rendering__error$46dart, packages__flutter__src__painting__box_shadow$46dart, packages__flutter__src__foundation__binding$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__rendering__rotated_box$46dart, packages__flutter__src__rendering__shifted_box$46dart, packages__flutter__src__rendering__custom_layout$46dart, packages__flutter__src__rendering__sliver_padding$46dart, packages__flutter__src__rendering__list_body$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__rendering__wrap$46dart, packages__flutter__src__rendering__flow$46dart, packages__flutter__src__rendering__image$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const typed_data = dart_sdk.typed_data;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const convert = dart_sdk.convert;
  const collection = dart_sdk.collection;
  const developer = dart_sdk.developer;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const placeholder_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__placeholder_span;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const inline_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__inline_span;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const object$ = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const debug = packages__flutter__src__rendering__layer$46dart.src__rendering__debug;
  const binding = packages__flutter__src__rendering__layer$46dart.src__rendering__binding;
  const box$ = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const diagnostics$ = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const debug$ = packages__flutter__src__foundation__debug$46dart.src__foundation__debug;
  const binding$ = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const priority = packages__flutter__src__scheduler__priority$46dart.src__scheduler__priority;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const geometry = packages__flutter__src__painting__geometry$46dart.src__painting__geometry;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const strut_style = packages__flutter__src__painting__strut_style$46dart.src__painting__strut_style;
  const system_chrome = packages__flutter__src__services__system_chrome$46dart.src__services__system_chrome;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const alignment$ = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const observer_list = packages__flutter__src__foundation__observer_list$46dart.src__foundation__observer_list;
  const system_navigator = packages__flutter__src__services__system_navigator$46dart.src__services__system_navigator;
  const performance_overlay = packages__flutter__src__rendering__performance_overlay$46dart.src__rendering__performance_overlay;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const system_sound = packages__flutter__src__services__system_sound$46dart.src__services__system_sound;
  const mouse_cursor = packages__flutter__src__services__mouse_cursor$46dart.src__services__mouse_cursor;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const tap$ = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const binding$0 = packages__flutter__src__services__system_channels$46dart.src__services__binding;
  const restoration = packages__flutter__src__services__system_channels$46dart.src__services__restoration;
  const system_channels = packages__flutter__src__services__system_channels$46dart.src__services__system_channels;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const keyboard_key = packages__flutter__src__services__keyboard_key$46dart.src__services__keyboard_key;
  const raw_keyboard = packages__flutter__src__services__raw_keyboard_windows$46dart.src__services__raw_keyboard;
  const text_input = packages__flutter__src__services__text_input$46dart.src__services__text_input;
  const autofill = packages__flutter__src__services__text_input$46dart.src__services__autofill;
  const decoration = packages__flutter__src__painting__decoration$46dart.src__painting__decoration;
  const table = packages__flutter__src__rendering__table$46dart.src__rendering__table;
  const table_border = packages__flutter__src__rendering__table_border$46dart.src__rendering__table_border;
  const print = packages__flutter__src__foundation__print$46dart.src__foundation__print;
  const sliver = packages__flutter__src__rendering__sliver$46dart.src__rendering__sliver;
  const viewport$ = packages__flutter__src__rendering__sliver$46dart.src__rendering__viewport;
  const proxy_sliver = packages__flutter__src__rendering__proxy_sliver$46dart.src__rendering__proxy_sliver;
  const paragraph = packages__flutter__src__rendering__paragraph$46dart.src__rendering__paragraph;
  const clipboard = packages__flutter__src__services__clipboard$46dart.src__services__clipboard;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const editable = packages__flutter__src__rendering__editable$46dart.src__rendering__editable;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const force_press = packages__flutter__src__gestures__force_press$46dart.src__gestures__force_press;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const constants = packages__flutter__src__gestures__constants$46dart.src__gestures__constants;
  const monodrag = packages__flutter__src__gestures__monodrag$46dart.src__gestures__monodrag;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  const scroll_metrics = packages__flutter__src__widgets__scroll_metrics$46dart.src__widgets__scroll_metrics;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const utils = packages__flutter__src__physics__utils$46dart.src__physics__utils;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const drag = packages__flutter__src__gestures__drag$46dart.src__gestures__drag;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  const spring_simulation = packages__flutter__src__physics__spring_simulation$46dart.src__physics__spring_simulation;
  const scroll_simulation = packages__flutter__src__widgets__scroll_simulation$46dart.src__widgets__scroll_simulation;
  const multitap = packages__flutter__src__gestures__multitap$46dart.src__gestures__multitap;
  const scale = packages__flutter__src__gestures__scale$46dart.src__gestures__scale;
  const binding$1 = packages__flutter__src__gestures__binding$46dart.src__gestures__binding;
  const binding$2 = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const _network_image_web = packages__flutter__src__painting___network_image_web$46dart.src__painting___network_image_web;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const image_resolution = packages__flutter__src__painting__image_resolution$46dart.src__painting__image_resolution;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const binding$3 = packages__flutter__src__semantics__binding$46dart.src__semantics__binding;
  const sliver_list = packages__flutter__src__rendering__sliver_list$46dart.src__rendering__sliver_list;
  const sliver_fixed_extent_list = packages__flutter__src__rendering__sliver_fixed_extent_list$46dart.src__rendering__sliver_fixed_extent_list;
  const sliver_grid = packages__flutter__src__rendering__sliver_grid$46dart.src__rendering__sliver_grid;
  const sliver_multi_box_adaptor = packages__flutter__src__rendering__sliver_multi_box_adaptor$46dart.src__rendering__sliver_multi_box_adaptor;
  const text_formatter = packages__flutter__src__services__text_formatter$46dart.src__services__text_formatter;
  const error = packages__flutter__src__rendering__error$46dart.src__rendering__error;
  const box_shadow = packages__flutter__src__painting__box_shadow$46dart.src__painting__box_shadow;
  const binding$4 = packages__flutter__src__foundation__binding$46dart.src__foundation__binding;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const rotated_box = packages__flutter__src__rendering__rotated_box$46dart.src__rendering__rotated_box;
  const shifted_box = packages__flutter__src__rendering__shifted_box$46dart.src__rendering__shifted_box;
  const custom_layout = packages__flutter__src__rendering__custom_layout$46dart.src__rendering__custom_layout;
  const sliver_padding = packages__flutter__src__rendering__sliver_padding$46dart.src__rendering__sliver_padding;
  const list_body = packages__flutter__src__rendering__list_body$46dart.src__rendering__list_body;
  const flex$ = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const wrap = packages__flutter__src__rendering__wrap$46dart.src__rendering__wrap;
  const flow = packages__flutter__src__rendering__flow$46dart.src__rendering__flow;
  const image = packages__flutter__src__rendering__image$46dart.src__rendering__image;
  var widget_span = Object.create(dart.library);
  var widget_inspector = Object.create(dart.library);
  var title$ = Object.create(dart.library);
  var semantics_debugger = Object.create(dart.library);
  var router = Object.create(dart.library);
  var performance_overlay$ = Object.create(dart.library);
  var modal_barrier = Object.create(dart.library);
  var routes = Object.create(dart.library);
  var pages = Object.create(dart.library);
  var heroes = Object.create(dart.library);
  var navigator$ = Object.create(dart.library);
  var shortcuts$ = Object.create(dart.library);
  var default_text_editing_shortcuts = Object.create(dart.library);
  var text_editing_intents = Object.create(dart.library);
  var default_text_editing_actions = Object.create(dart.library);
  var table$ = Object.create(dart.library);
  var inherited_model = Object.create(dart.library);
  var visibility = Object.create(dart.library);
  var transitions = Object.create(dart.library);
  var overlay$ = Object.create(dart.library);
  var text_selection = Object.create(dart.library);
  var text_editing_action = Object.create(dart.library);
  var inherited_theme = Object.create(dart.library);
  var text = Object.create(dart.library);
  var viewport = Object.create(dart.library);
  var scrollbar = Object.create(dart.library);
  var scroll_configuration = Object.create(dart.library);
  var restoration_properties = Object.create(dart.library);
  var restoration$ = Object.create(dart.library);
  var scroll_position_with_single_context = Object.create(dart.library);
  var scroll_activity = Object.create(dart.library);
  var page_storage = Object.create(dart.library);
  var scroll_position = Object.create(dart.library);
  var scroll_notification = Object.create(dart.library);
  var overscroll_indicator = Object.create(dart.library);
  var scroll_physics = Object.create(dart.library);
  var ticker_provider = Object.create(dart.library);
  var scroll_context = Object.create(dart.library);
  var scroll_controller = Object.create(dart.library);
  var primary_scroll_controller = Object.create(dart.library);
  var gesture_detector = Object.create(dart.library);
  var scrollable$ = Object.create(dart.library);
  var scroll_aware_image_provider = Object.create(dart.library);
  var placeholder = Object.create(dart.library);
  var media_query = Object.create(dart.library);
  var disposable_build_context = Object.create(dart.library);
  var image$ = Object.create(dart.library);
  var container = Object.create(dart.library);
  var localizations = Object.create(dart.library);
  var sliver$ = Object.create(dart.library);
  var notification_listener = Object.create(dart.library);
  var automatic_keep_alive = Object.create(dart.library);
  var autofill$ = Object.create(dart.library);
  var editable_text = Object.create(dart.library);
  var focus_traversal = Object.create(dart.library);
  var inherited_notifier = Object.create(dart.library);
  var focus_scope = Object.create(dart.library);
  var focus_manager = Object.create(dart.library);
  var framework = Object.create(dart.library);
  var debug$0 = Object.create(dart.library);
  var banner = Object.create(dart.library);
  var app = Object.create(dart.library);
  var binding$5 = Object.create(dart.library);
  var basic = Object.create(dart.library);
  var actions$ = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListOfStringN: () => (T$.ListOfStringN = dart.constFn(core.List$(T$.StringN())))(),
    SetOf_InspectorReferenceData: () => (T$.SetOf_InspectorReferenceData = dart.constFn(core.Set$(widget_inspector._InspectorReferenceData)))(),
    IdentityMapOfString$SetOf_InspectorReferenceData: () => (T$.IdentityMapOfString$SetOf_InspectorReferenceData = dart.constFn(_js_helper.IdentityMap$(core.String, T$.SetOf_InspectorReferenceData())))(),
    IdentityMapOfString$_InspectorReferenceData: () => (T$.IdentityMapOfString$_InspectorReferenceData = dart.constFn(_js_helper.IdentityMap$(core.String, widget_inspector._InspectorReferenceData)))(),
    IdentityMapOfObject$String: () => (T$.IdentityMapOfObject$String = dart.constFn(_js_helper.IdentityMap$(core.Object, core.String)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    FutureOfMapOfString$ObjectN: () => (T$.FutureOfMapOfString$ObjectN = dart.constFn(async.Future$(T$.MapOfString$ObjectN())))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapOfString$StringToFutureOfMapOfString$ObjectN: () => (T$.MapOfString$StringToFutureOfMapOfString$ObjectN = dart.constFn(dart.fnType(T$.FutureOfMapOfString$ObjectN(), [T$.MapOfString$String()])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    FutureOfMapOfString$dynamic: () => (T$.FutureOfMapOfString$dynamic = dart.constFn(async.Future$(T$.MapOfString$dynamic())))(),
    MapOfString$StringToFutureOfMapOfString$dynamic: () => (T$.MapOfString$StringToFutureOfMapOfString$dynamic = dart.constFn(dart.fnType(T$.FutureOfMapOfString$dynamic(), [T$.MapOfString$String()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    VoidToFutureOfbool: () => (T$.VoidToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [])))(),
    boolToFutureOfvoid: () => (T$.boolToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [core.bool])))(),
    RenderObjectTovoid: () => (T$.RenderObjectTovoid = dart.constFn(dart.fnType(dart.void, [object$.RenderObject])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    StringToFutureOfNull: () => (T$.StringToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [core.String])))(),
    StringNAndStringToFutureOfNull: () => (T$.StringNAndStringToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [T$.StringN(), core.String])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringToFutureOfNull: () => (T$.ListOfStringToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [T$.ListOfString()])))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    _IdentityHashSetOf_InspectorReferenceData: () => (T$._IdentityHashSetOf_InspectorReferenceData = dart.constFn(collection._IdentityHashSet$(widget_inspector._InspectorReferenceData)))(),
    VoidToSetOf_InspectorReferenceData: () => (T$.VoidToSetOf_InspectorReferenceData = dart.constFn(dart.fnType(T$.SetOf_InspectorReferenceData(), [])))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics$.DiagnosticsNode)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    MapNOfString$ObjectN: () => (T$.MapNOfString$ObjectN = dart.constFn(dart.nullable(T$.MapOfString$ObjectN())))(),
    _DiagnosticsPathNodeToMapNOfString$ObjectN: () => (T$._DiagnosticsPathNodeToMapNOfString$ObjectN = dart.constFn(dart.fnType(T$.MapNOfString$ObjectN(), [widget_inspector._DiagnosticsPathNode])))(),
    _DiagnosticsPathNodeL: () => (T$._DiagnosticsPathNodeL = dart.constFn(dart.legacy(widget_inspector._DiagnosticsPathNode)))(),
    JSArrayOfRenderObject: () => (T$.JSArrayOfRenderObject = dart.constFn(_interceptors.JSArray$(object$.RenderObject)))(),
    RenderObjectN: () => (T$.RenderObjectN = dart.constFn(dart.nullable(object$.RenderObject)))(),
    DiagnosticsNodeTobool: () => (T$.DiagnosticsNodeTobool = dart.constFn(dart.fnType(core.bool, [diagnostics$.DiagnosticsNode])))(),
    DiagnosticsNodeN: () => (T$.DiagnosticsNodeN = dart.constFn(dart.nullable(diagnostics$.DiagnosticsNode)))(),
    DiagnosticsNodeL: () => (T$.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics$.DiagnosticsNode)))(),
    ImageN: () => (T$.ImageN = dart.constFn(dart.nullable(ui.Image)))(),
    _LocationL: () => (T$._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    DebugCreatorN: () => (T$.DebugCreatorN = dart.constFn(dart.nullable(framework.DebugCreator)))(),
    ElementTobool: () => (T$.ElementTobool = dart.constFn(dart.fnType(core.bool, [framework.Element])))(),
    _LocationCountN: () => (T$._LocationCountN = dart.constFn(dart.nullable(widget_inspector._LocationCount)))(),
    JSArrayOf_LocationCountN: () => (T$.JSArrayOf_LocationCountN = dart.constFn(_interceptors.JSArray$(T$._LocationCountN())))(),
    JSArrayOf_LocationCount: () => (T$.JSArrayOf_LocationCount = dart.constFn(_interceptors.JSArray$(widget_inspector._LocationCount)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    IdentityMapOfString$ListOfint: () => (T$.IdentityMapOfString$ListOfint = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfint())))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidToListOfint: () => (T$.VoidToListOfint = dart.constFn(dart.fnType(T$.ListOfint(), [])))(),
    StateOfStatefulWidget: () => (T$.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T$.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T$.StateOfStatefulWidget())))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    RenderObjectTodouble: () => (T$.RenderObjectTodouble = dart.constFn(dart.fnType(core.double, [object$.RenderObject])))(),
    RenderObjectAndRenderObjectToint: () => (T$.RenderObjectAndRenderObjectToint = dart.constFn(dart.fnType(core.int, [object$.RenderObject, object$.RenderObject])))(),
    LinkedHashSetOfRenderObject: () => (T$.LinkedHashSetOfRenderObject = dart.constFn(collection.LinkedHashSet$(object$.RenderObject)))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    EnumPropertyOf_StateLifecycle: () => (T$.EnumPropertyOf_StateLifecycle = dart.constFn(diagnostics$.EnumProperty$(framework._StateLifecycle)))(),
    ObjectFlagPropertyOfStatefulElement: () => (T$.ObjectFlagPropertyOfStatefulElement = dart.constFn(diagnostics$.ObjectFlagProperty$(framework.StatefulElement)))(),
    JSArrayOf_TransformedRect: () => (T$.JSArrayOf_TransformedRect = dart.constFn(_interceptors.JSArray$(widget_inspector._TransformedRect)))(),
    TextSpanN: () => (T$.TextSpanN = dart.constFn(dart.nullable(text_span.TextSpan)))(),
    JSArrayOfOffset: () => (T$.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    _LocationToMapOfString$ObjectN: () => (T$._LocationToMapOfString$ObjectN = dart.constFn(dart.fnType(T$.MapOfString$ObjectN(), [widget_inspector._Location])))(),
    JSArrayOf_DiagnosticsPathNode: () => (T$.JSArrayOf_DiagnosticsPathNode = dart.constFn(_interceptors.JSArray$(widget_inspector._DiagnosticsPathNode)))(),
    SyncIterableOfDiagnosticsNode: () => (T$.SyncIterableOfDiagnosticsNode = dart.constFn(_js_helper.SyncIterable$(diagnostics$.DiagnosticsNode)))(),
    LinkedMapOf_Location$int: () => (T$.LinkedMapOf_Location$int = dart.constFn(_js_helper.LinkedMap$(widget_inspector._Location, core.int)))(),
    JSArrayOf_Location: () => (T$.JSArrayOf_Location = dart.constFn(_interceptors.JSArray$(widget_inspector._Location)))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    SemanticsNodeTobool: () => (T$.SemanticsNodeTobool = dart.constFn(dart.fnType(core.bool, [semantics.SemanticsNode])))(),
    _IntentionToReportRouteInformationL: () => (T$._IntentionToReportRouteInformationL = dart.constFn(dart.legacy(router._IntentionToReportRouteInformation)))(),
    SynchronousFutureOfbool: () => (T$.SynchronousFutureOfbool = dart.constFn(synchronous_future.SynchronousFuture$(core.bool)))(),
    boolToSynchronousFutureOfbool: () => (T$.boolToSynchronousFutureOfbool = dart.constFn(dart.fnType(T$.SynchronousFutureOfbool(), [core.bool])))(),
    SynchronousFutureOfvoid: () => (T$.SynchronousFutureOfvoid = dart.constFn(synchronous_future.SynchronousFuture$(dart.void)))(),
    voidToFuture: () => (T$.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    IterableOfDiagnosticsNode: () => (T$.IterableOfDiagnosticsNode = dart.constFn(core.Iterable$(diagnostics$.DiagnosticsNode)))(),
    VoidToIterableOfDiagnosticsNode: () => (T$.VoidToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(T$.IterableOfDiagnosticsNode(), [])))(),
    LinkedHashSetOfChildBackButtonDispatcher: () => (T$.LinkedHashSetOfChildBackButtonDispatcher = dart.constFn(collection.LinkedHashSet$(router.ChildBackButtonDispatcher)))(),
    boolToFutureOfbool: () => (T$.boolToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [core.bool])))(),
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    AnimationOfColorN: () => (T$.AnimationOfColorN = dart.constFn(animation.Animation$(T$.ColorN())))(),
    DiagnosticsPropertyOfListenable: () => (T$.DiagnosticsPropertyOfListenable = dart.constFn(diagnostics$.DiagnosticsProperty$(change_notifier.Listenable)))(),
    GestureRecognizerFactoryOfGestureRecognizer: () => (T$.GestureRecognizerFactoryOfGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactory$(recognizer.GestureRecognizer)))(),
    LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer: () => (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer = dart.constFn(_js_helper.LinkedMap$(core.Type, T$.GestureRecognizerFactoryOfGestureRecognizer())))(),
    JSArrayOfOverlayEntry: () => (T$.JSArrayOfOverlayEntry = dart.constFn(_interceptors.JSArray$(overlay$.OverlayEntry)))(),
    ValueNotifierOfStringN: () => (T$.ValueNotifierOfStringN = dart.constFn(change_notifier.ValueNotifier$(T$.StringN())))(),
    OverlayEntryL: () => (T$.OverlayEntryL = dart.constFn(dart.legacy(overlay$.OverlayEntry)))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    _RouteEntryN: () => (T$._RouteEntryN = dart.constFn(dart.nullable(navigator$._RouteEntry)))(),
    _RouteEntryNTobool: () => (T$._RouteEntryNTobool = dart.constFn(dart.fnType(core.bool, [T$._RouteEntryN()])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    AnimationStatusTovoid: () => (T$.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    JSArrayOfLocalHistoryEntry: () => (T$.JSArrayOfLocalHistoryEntry = dart.constFn(_interceptors.JSArray$(routes.LocalHistoryEntry)))(),
    ActionOfIntent: () => (T$.ActionOfIntent = dart.constFn(actions$.Action$(actions$.Intent)))(),
    ActionOfIntentTovoid: () => (T$.ActionOfIntentTovoid = dart.constFn(dart.fnType(dart.void, [T$.ActionOfIntent()])))(),
    ObserverListOfActionOfIntentTovoid: () => (T$.ObserverListOfActionOfIntentTovoid = dart.constFn(observer_list.ObserverList$(T$.ActionOfIntentTovoid())))(),
    ListOfActionOfIntentTovoid: () => (T$.ListOfActionOfIntentTovoid = dart.constFn(core.List$(T$.ActionOfIntentTovoid())))(),
    JSArrayOfListenable: () => (T$.JSArrayOfListenable = dart.constFn(_interceptors.JSArray$(change_notifier.Listenable)))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToRestorationScope: () => (T$.BuildContextAndWidgetNToRestorationScope = dart.constFn(dart.fnType(restoration$.RestorationScope, [framework.BuildContext, T$.WidgetN()])))(),
    LinkedMapOfType$ActionOfIntent: () => (T$.LinkedMapOfType$ActionOfIntent = dart.constFn(_js_helper.LinkedMap$(core.Type, T$.ActionOfIntent())))(),
    ValueNotifierOfbool: () => (T$.ValueNotifierOfbool = dart.constFn(change_notifier.ValueNotifier$(core.bool)))(),
    BuildContextAndWidgetNToIgnorePointer: () => (T$.BuildContextAndWidgetNToIgnorePointer = dart.constFn(dart.fnType(basic.IgnorePointer, [framework.BuildContext, T$.WidgetN()])))(),
    BuildContextAndWidgetNToWidget: () => (T$.BuildContextAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.WidgetN()])))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    BuildContextToActions: () => (T$.BuildContextToActions = dart.constFn(dart.fnType(actions$.Actions, [framework.BuildContext])))(),
    JSArrayOfVoidToFutureOfbool: () => (T$.JSArrayOfVoidToFutureOfbool = dart.constFn(_interceptors.JSArray$(T$.VoidToFutureOfbool())))(),
    RouteTobool: () => (T$.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator$.Route])))(),
    ListOfVoidToFutureOfbool: () => (T$.ListOfVoidToFutureOfbool = dart.constFn(core.List$(T$.VoidToFutureOfbool())))(),
    SyncIterableOfOverlayEntry: () => (T$.SyncIterableOfOverlayEntry = dart.constFn(_js_helper.SyncIterable$(overlay$.OverlayEntry)))(),
    SetOfRouteAware: () => (T$.SetOfRouteAware = dart.constFn(core.Set$(routes.RouteAware)))(),
    LinkedHashSetOfRouteAware: () => (T$.LinkedHashSetOfRouteAware = dart.constFn(collection.LinkedHashSet$(routes.RouteAware)))(),
    VoidToSetOfRouteAware: () => (T$.VoidToSetOfRouteAware = dart.constFn(dart.fnType(T$.SetOfRouteAware(), [])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation.Animation$(core.double)))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble(), framework.Widget])))(),
    HeroFlightDirectionL: () => (T$.HeroFlightDirectionL = dart.constFn(dart.legacy(heroes.HeroFlightDirection)))(),
    LinkedMapOfObject$_HeroState: () => (T$.LinkedMapOfObject$_HeroState = dart.constFn(_js_helper.LinkedMap$(core.Object, heroes._HeroState)))(),
    DiagnosticsPropertyOfStatefulElement: () => (T$.DiagnosticsPropertyOfStatefulElement = dart.constFn(diagnostics$.DiagnosticsProperty$(framework.StatefulElement)))(),
    StatefulElementAndObjectTovoid: () => (T$.StatefulElementAndObjectTovoid = dart.constFn(dart.fnType(dart.void, [framework.StatefulElement, core.Object])))(),
    ElementTovoid: () => (T$.ElementTovoid = dart.constFn(dart.fnType(dart.void, [framework.Element])))(),
    DiagnosticsPropertyOfObject: () => (T$.DiagnosticsPropertyOfObject = dart.constFn(diagnostics$.DiagnosticsProperty$(core.Object)))(),
    BuildContextAndWidgetNToPositioned: () => (T$.BuildContextAndWidgetNToPositioned = dart.constFn(dart.fnType(basic.Positioned, [framework.BuildContext, T$.WidgetN()])))(),
    RenderBoxN: () => (T$.RenderBoxN = dart.constFn(dart.nullable(box$.RenderBox)))(),
    RectN: () => (T$.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    ReverseTweenOfRectN: () => (T$.ReverseTweenOfRectN = dart.constFn(tween.ReverseTween$(T$.RectN())))(),
    TweenOfdouble: () => (T$.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    LinkedMapOfObject$_HeroFlight: () => (T$.LinkedMapOfObject$_HeroFlight = dart.constFn(_js_helper.LinkedMap$(core.Object, heroes._HeroFlight)))(),
    _HeroFlightTobool: () => (T$._HeroFlightTobool = dart.constFn(dart.fnType(core.bool, [heroes._HeroFlight])))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    _HeroStateL: () => (T$._HeroStateL = dart.constFn(dart.legacy(heroes._HeroState)))(),
    RoutePopDispositionL: () => (T$.RoutePopDispositionL = dart.constFn(dart.legacy(navigator$.RoutePopDisposition)))(),
    JSArrayOfRouteTransitionRecord: () => (T$.JSArrayOfRouteTransitionRecord = dart.constFn(_interceptors.JSArray$(navigator$.RouteTransitionRecord)))(),
    RouteTransitionRecordN: () => (T$.RouteTransitionRecordN = dart.constFn(dart.nullable(navigator$.RouteTransitionRecord)))(),
    RouteTransitionRecordNAndboolTovoid: () => (T$.RouteTransitionRecordNAndboolTovoid = dart.constFn(dart.fnType(dart.void, [T$.RouteTransitionRecordN(), core.bool])))(),
    PageL: () => (T$.PageL = dart.constFn(dart.legacy(navigator$.Page)))(),
    ListOfRoute: () => (T$.ListOfRoute = dart.constFn(core.List$(navigator$.Route)))(),
    NavigatorStateAndStringToListOfRoute: () => (T$.NavigatorStateAndStringToListOfRoute = dart.constFn(dart.fnType(T$.ListOfRoute(), [navigator$.NavigatorState, core.String])))(),
    NavigatorObserverL: () => (T$.NavigatorObserverL = dart.constFn(dart.legacy(navigator$.NavigatorObserver)))(),
    RouteN: () => (T$.RouteN = dart.constFn(dart.nullable(navigator$.Route)))(),
    JSArrayOfRouteN: () => (T$.JSArrayOfRouteN = dart.constFn(_interceptors.JSArray$(T$.RouteN())))(),
    RouteNTobool: () => (T$.RouteNTobool = dart.constFn(dart.fnType(core.bool, [T$.RouteN()])))(),
    _RouteLifecycleL: () => (T$._RouteLifecycleL = dart.constFn(dart.legacy(navigator$._RouteLifecycle)))(),
    PageOfObjectN: () => (T$.PageOfObjectN = dart.constFn(navigator$.Page$(T$.ObjectN())))(),
    OverlayEntryTobool: () => (T$.OverlayEntryTobool = dart.constFn(dart.fnType(core.bool, [overlay$.OverlayEntry])))(),
    VoidToFn: () => (T$.VoidToFn = dart.constFn(dart.fnType(T$.VoidTovoid(), [])))(),
    FnTodynamic: () => (T$.FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.VoidTovoid()])))(),
    _RouteEntryTobool: () => (T$._RouteEntryTobool = dart.constFn(dart.fnType(core.bool, [navigator$._RouteEntry])))(),
    JSArrayOf_RouteEntry: () => (T$.JSArrayOf_RouteEntry = dart.constFn(_interceptors.JSArray$(navigator$._RouteEntry)))(),
    ListQueueOf_NavigatorObservation: () => (T$.ListQueueOf_NavigatorObservation = dart.constFn(collection.ListQueue$(navigator$._NavigatorObservation)))(),
    RestorableNumOfint: () => (T$.RestorableNumOfint = dart.constFn(restoration_properties.RestorableNum$(core.int)))(),
    LinkedHashSetOfint: () => (T$.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    HeroControllerScopeN: () => (T$.HeroControllerScopeN = dart.constFn(dart.nullable(navigator$.HeroControllerScope)))(),
    GlobalKeyOfOverlayState: () => (T$.GlobalKeyOfOverlayState = dart.constFn(framework.GlobalKey$(overlay$.OverlayState)))(),
    RouteTo_RouteEntry: () => (T$.RouteTo_RouteEntry = dart.constFn(dart.fnType(navigator$._RouteEntry, [navigator$.Route])))(),
    JSArrayOfNavigatorObserver: () => (T$.JSArrayOfNavigatorObserver = dart.constFn(_interceptors.JSArray$(navigator$.NavigatorObserver)))(),
    LinkedHashSetOfKey: () => (T$.LinkedHashSetOfKey = dart.constFn(collection.LinkedHashSet$(key.Key)))(),
    ListOf_RouteEntry: () => (T$.ListOf_RouteEntry = dart.constFn(core.List$(navigator$._RouteEntry)))(),
    LinkedMapOf_RouteEntryN$ListOf_RouteEntry: () => (T$.LinkedMapOf_RouteEntryN$ListOf_RouteEntry = dart.constFn(_js_helper.LinkedMap$(T$._RouteEntryN(), T$.ListOf_RouteEntry())))(),
    VoidToListOf_RouteEntry: () => (T$.VoidToListOf_RouteEntry = dart.constFn(dart.fnType(T$.ListOf_RouteEntry(), [])))(),
    LinkedMapOfLocalKey$_RouteEntry: () => (T$.LinkedMapOfLocalKey$_RouteEntry = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, navigator$._RouteEntry)))(),
    LinkedMapOfRouteTransitionRecordN$RouteTransitionRecord: () => (T$.LinkedMapOfRouteTransitionRecordN$RouteTransitionRecord = dart.constFn(_js_helper.LinkedMap$(T$.RouteTransitionRecordN(), navigator$.RouteTransitionRecord)))(),
    DiagnosticsPropertyOfNavigatorState: () => (T$.DiagnosticsPropertyOfNavigatorState = dart.constFn(diagnostics$.DiagnosticsProperty$(navigator$.NavigatorState)))(),
    ObjectNToString: () => (T$.ObjectNToString = dart.constFn(dart.fnType(core.String, [T$.ObjectN()])))(),
    LinkedHashSetOf_WidgetTicker: () => (T$.LinkedHashSetOf_WidgetTicker = dart.constFn(collection.LinkedHashSet$(ticker_provider._WidgetTicker)))(),
    SetOfTicker: () => (T$.SetOfTicker = dart.constFn(core.Set$(ticker.Ticker)))(),
    DiagnosticsPropertyOfSetOfTicker: () => (T$.DiagnosticsPropertyOfSetOfTicker = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.SetOfTicker())))(),
    RestorablePropertyOfObjectN: () => (T$.RestorablePropertyOfObjectN = dart.constFn(restoration$.RestorableProperty$(T$.ObjectN())))(),
    LinkedMapOfRestorablePropertyOfObjectN$VoidTovoid: () => (T$.LinkedMapOfRestorablePropertyOfObjectN$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(T$.RestorablePropertyOfObjectN(), T$.VoidTovoid())))(),
    RestorablePropertyOfObjectNToStringN: () => (T$.RestorablePropertyOfObjectNToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$.RestorablePropertyOfObjectN()])))(),
    RestorablePropertyOfObjectNToErrorDescription: () => (T$.RestorablePropertyOfObjectNToErrorDescription = dart.constFn(dart.fnType(assertions.ErrorDescription, [T$.RestorablePropertyOfObjectN()])))(),
    RestorablePropertyOfObjectNAndFnTovoid: () => (T$.RestorablePropertyOfObjectNAndFnTovoid = dart.constFn(dart.fnType(dart.void, [T$.RestorablePropertyOfObjectN(), T$.VoidTovoid()])))(),
    _RouteRestorationTypeL: () => (T$._RouteRestorationTypeL = dart.constFn(dart.legacy(navigator$._RouteRestorationType)))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    JSArrayOfObject: () => (T$.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    BuildContextAndObjectNToRoute: () => (T$.BuildContextAndObjectNToRoute = dart.constFn(dart.fnType(navigator$.Route, [framework.BuildContext, T$.ObjectN()])))(),
    ListOfObject: () => (T$.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    IdentityMapOfString$ListOfObject: () => (T$.IdentityMapOfString$ListOfObject = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfObject())))(),
    IdentityMapOfStringN$ListOfObject: () => (T$.IdentityMapOfStringN$ListOfObject = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$.ListOfObject())))(),
    MapEntryOfStringN$ListOfObject: () => (T$.MapEntryOfStringN$ListOfObject = dart.constFn(core.MapEntry$(T$.StringN(), T$.ListOfObject())))(),
    dynamicAnddynamicToMapEntryOfStringN$ListOfObject: () => (T$.dynamicAnddynamicToMapEntryOfStringN$ListOfObject = dart.constFn(dart.fnType(T$.MapEntryOfStringN$ListOfObject(), [dart.dynamic, dart.dynamic])))(),
    MapOfStringN$ListOfObject: () => (T$.MapOfStringN$ListOfObject = dart.constFn(core.Map$(T$.StringN(), T$.ListOfObject())))(),
    MapNOfStringN$ListOfObject: () => (T$.MapNOfStringN$ListOfObject = dart.constFn(dart.nullable(T$.MapOfStringN$ListOfObject())))(),
    BuildContextToNavigatorState: () => (T$.BuildContextToNavigatorState = dart.constFn(dart.fnType(navigator$.NavigatorState, [framework.BuildContext])))(),
    LogicalKeyboardKeyAndLogicalKeyboardKeyToint: () => (T$.LogicalKeyboardKeyAndLogicalKeyboardKeyToint = dart.constFn(dart.fnType(core.int, [keyboard_key.LogicalKeyboardKey, keyboard_key.LogicalKeyboardKey])))(),
    LogicalKeyboardKeyToString: () => (T$.LogicalKeyboardKeyToString = dart.constFn(dart.fnType(core.String, [keyboard_key.LogicalKeyboardKey])))(),
    SetOfLogicalKeyboardKey: () => (T$.SetOfLogicalKeyboardKey = dart.constFn(core.Set$(keyboard_key.LogicalKeyboardKey)))(),
    DiagnosticsPropertyOfSetOfLogicalKeyboardKey: () => (T$.DiagnosticsPropertyOfSetOfLogicalKeyboardKey = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.SetOfLogicalKeyboardKey())))(),
    LinkedHashSetOfLogicalKeyboardKey: () => (T$.LinkedHashSetOfLogicalKeyboardKey = dart.constFn(collection.LinkedHashSet$(keyboard_key.LogicalKeyboardKey)))(),
    LogicalKeySetToString: () => (T$.LogicalKeySetToString = dart.constFn(dart.fnType(core.String, [shortcuts$.LogicalKeySet])))(),
    LogicalKeySetL: () => (T$.LogicalKeySetL = dart.constFn(dart.legacy(shortcuts$.LogicalKeySet)))(),
    IntentL: () => (T$.IntentL = dart.constFn(dart.legacy(actions$.Intent)))(),
    MapOfLogicalKeySet$Intent: () => (T$.MapOfLogicalKeySet$Intent = dart.constFn(core.Map$(shortcuts$.LogicalKeySet, actions$.Intent)))(),
    DiagnosticsPropertyOfMapOfLogicalKeySet$Intent: () => (T$.DiagnosticsPropertyOfMapOfLogicalKeySet$Intent = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.MapOfLogicalKeySet$Intent())))(),
    DiagnosticsPropertyOfShortcutManager: () => (T$.DiagnosticsPropertyOfShortcutManager = dart.constFn(diagnostics$.DiagnosticsProperty$(shortcuts$.ShortcutManager)))(),
    LinkedMapOfLogicalKeySet$Intent: () => (T$.LinkedMapOfLogicalKeySet$Intent = dart.constFn(_js_helper.LinkedMap$(shortcuts$.LogicalKeySet, actions$.Intent)))(),
    InheritedElementTobool: () => (T$.InheritedElementTobool = dart.constFn(dart.fnType(core.bool, [framework.InheritedElement])))(),
    DiagnosticsPropertyOfActionDispatcher: () => (T$.DiagnosticsPropertyOfActionDispatcher = dart.constFn(diagnostics$.DiagnosticsProperty$(actions$.ActionDispatcher)))(),
    MapOfType$ActionOfIntent: () => (T$.MapOfType$ActionOfIntent = dart.constFn(core.Map$(core.Type, T$.ActionOfIntent())))(),
    DiagnosticsPropertyOfMapOfType$ActionOfIntent: () => (T$.DiagnosticsPropertyOfMapOfType$ActionOfIntent = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.MapOfType$ActionOfIntent())))(),
    TableRowL: () => (T$.TableRowL = dart.constFn(dart.legacy(table$.TableRow)))(),
    TableRowTobool: () => (T$.TableRowTobool = dart.constFn(dart.fnType(core.bool, [table$.TableRow])))(),
    WidgetTobool: () => (T$.WidgetTobool = dart.constFn(dart.fnType(core.bool, [framework.Widget])))(),
    DecorationN: () => (T$.DecorationN = dart.constFn(dart.nullable(decoration.Decoration)))(),
    TableRowToDecorationN: () => (T$.TableRowToDecorationN = dart.constFn(dart.fnType(T$.DecorationN(), [table$.TableRow])))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    TableRowToListOfWidget: () => (T$.TableRowToListOfWidget = dart.constFn(dart.fnType(T$.ListOfWidget(), [table$.TableRow])))(),
    _TableElementRowL: () => (T$._TableElementRowL = dart.constFn(dart.legacy(table$._TableElementRow)))(),
    _HashSetOfElement: () => (T$._HashSetOfElement = dart.constFn(collection._HashSet$(framework.Element)))(),
    WidgetToElement: () => (T$.WidgetToElement = dart.constFn(dart.fnType(framework.Element, [framework.Widget])))(),
    TableRowTo_TableElementRow: () => (T$.TableRowTo_TableElementRow = dart.constFn(dart.fnType(table$._TableElementRow, [table$.TableRow])))(),
    ListOfElement: () => (T$.ListOfElement = dart.constFn(core.List$(framework.Element)))(),
    LinkedMapOfLocalKey$ListOfElement: () => (T$.LinkedMapOfLocalKey$ListOfElement = dart.constFn(_js_helper.LinkedMap$(key.LocalKey, T$.ListOfElement())))(),
    _TableElementRowTobool: () => (T$._TableElementRowTobool = dart.constFn(dart.fnType(core.bool, [table$._TableElementRow])))(),
    JSArrayOf_TableElementRow: () => (T$.JSArrayOf_TableElementRow = dart.constFn(_interceptors.JSArray$(table$._TableElementRow)))(),
    LinkedHashSetOfListOfElement: () => (T$.LinkedHashSetOfListOfElement = dart.constFn(collection.LinkedHashSet$(T$.ListOfElement())))(),
    ElementL: () => (T$.ElementL = dart.constFn(dart.legacy(framework.Element)))(),
    ListOf_TableSlot: () => (T$.ListOf_TableSlot = dart.constFn(core.List$(table$._TableSlot)))(),
    intTo_TableSlot: () => (T$.intTo_TableSlot = dart.constFn(dart.fnType(table$._TableSlot, [core.int])))(),
    WidgetL: () => (T$.WidgetL = dart.constFn(dart.legacy(framework.Widget)))(),
    ListOfElementTobool: () => (T$.ListOfElementTobool = dart.constFn(dart.fnType(core.bool, [T$.ListOfElement()])))(),
    ElementToRenderBox: () => (T$.ElementToRenderBox = dart.constFn(dart.fnType(box$.RenderBox, [framework.Element])))(),
    IterableOfRenderBox: () => (T$.IterableOfRenderBox = dart.constFn(core.Iterable$(box$.RenderBox)))(),
    _TableElementRowToIterableOfRenderBox: () => (T$._TableElementRowToIterableOfRenderBox = dart.constFn(dart.fnType(T$.IterableOfRenderBox(), [table$._TableElementRow])))(),
    _TableElementRowToListOfElement: () => (T$._TableElementRowToListOfElement = dart.constFn(dart.fnType(T$.ListOfElement(), [table$._TableElementRow])))(),
    RenderObjectElementN: () => (T$.RenderObjectElementN = dart.constFn(dart.nullable(framework.RenderObjectElement)))(),
    ParentDataElementOfParentData: () => (T$.ParentDataElementOfParentData = dart.constFn(framework.ParentDataElement$(object$.ParentData)))(),
    JSArrayOfParentDataElementOfParentData: () => (T$.JSArrayOfParentDataElementOfParentData = dart.constFn(_interceptors.JSArray$(T$.ParentDataElementOfParentData())))(),
    ElementN: () => (T$.ElementN = dart.constFn(dart.nullable(framework.Element)))(),
    ElementToElementN: () => (T$.ElementToElementN = dart.constFn(dart.fnType(T$.ElementN(), [framework.Element])))(),
    IndexedSlotOfElementN: () => (T$.IndexedSlotOfElementN = dart.constFn(framework.IndexedSlot$(T$.ElementN())))(),
    intAndElementNToObjectN: () => (T$.intAndElementNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [core.int, T$.ElementN()])))(),
    LinkedMapOfKey$Element: () => (T$.LinkedMapOfKey$Element = dart.constFn(_js_helper.LinkedMap$(key.Key, framework.Element)))(),
    VoidToNever: () => (T$.VoidToNever = dart.constFn(dart.fnType(dart.Never, [])))(),
    DiagnosticsPropertyOfRenderObject: () => (T$.DiagnosticsPropertyOfRenderObject = dart.constFn(diagnostics$.DiagnosticsProperty$(object$.RenderObject)))(),
    JSArrayOfElement: () => (T$.JSArrayOfElement = dart.constFn(_interceptors.JSArray$(framework.Element)))(),
    DiagnosticsPropertyOfElement: () => (T$.DiagnosticsPropertyOfElement = dart.constFn(diagnostics$.DiagnosticsProperty$(framework.Element)))(),
    ElementToDiagnosticsPropertyOfElement: () => (T$.ElementToDiagnosticsPropertyOfElement = dart.constFn(dart.fnType(T$.DiagnosticsPropertyOfElement(), [framework.Element])))(),
    DiagnosticsPropertyOfGlobalKeyOfStateOfStatefulWidget: () => (T$.DiagnosticsPropertyOfGlobalKeyOfStateOfStatefulWidget = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.GlobalKeyOfStateOfStatefulWidget())))(),
    DiagnosticsPropertyOfWidget: () => (T$.DiagnosticsPropertyOfWidget = dart.constFn(diagnostics$.DiagnosticsProperty$(framework.Widget)))(),
    _HashSetOfInheritedElement: () => (T$._HashSetOfInheritedElement = dart.constFn(collection._HashSet$(framework.InheritedElement)))(),
    StatefulElementN: () => (T$.StatefulElementN = dart.constFn(dart.nullable(framework.StatefulElement)))(),
    ObjectFlagPropertyOfint: () => (T$.ObjectFlagPropertyOfint = dart.constFn(diagnostics$.ObjectFlagProperty$(core.int)))(),
    ObjectFlagPropertyOfWidget: () => (T$.ObjectFlagPropertyOfWidget = dart.constFn(diagnostics$.ObjectFlagProperty$(framework.Widget)))(),
    DiagnosticsPropertyOfKey: () => (T$.DiagnosticsPropertyOfKey = dart.constFn(diagnostics$.DiagnosticsProperty$(key.Key)))(),
    InheritedElementToDiagnosticsNode: () => (T$.InheritedElementToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics$.DiagnosticsNode, [framework.InheritedElement])))(),
    ListOfDiagnosticsNode: () => (T$.ListOfDiagnosticsNode = dart.constFn(core.List$(diagnostics$.DiagnosticsNode)))(),
    DiagnosticsPropertyOfListOfDiagnosticsNode: () => (T$.DiagnosticsPropertyOfListOfDiagnosticsNode = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.ListOfDiagnosticsNode())))(),
    EnumPropertyOfTableCellVerticalAlignment: () => (T$.EnumPropertyOfTableCellVerticalAlignment = dart.constFn(diagnostics$.EnumProperty$(table.TableCellVerticalAlignment)))(),
    JSArrayOfInheritedElement: () => (T$.JSArrayOfInheritedElement = dart.constFn(_interceptors.JSArray$(framework.InheritedElement)))(),
    LinkedMapOfElement$ObjectN: () => (T$.LinkedMapOfElement$ObjectN = dart.constFn(_js_helper.LinkedMap$(framework.Element, T$.ObjectN())))(),
    HashMapOfType$InheritedElement: () => (T$.HashMapOfType$InheritedElement = dart.constFn(collection.HashMap$(core.Type, framework.InheritedElement)))(),
    LinkedMapOfType$InheritedElement: () => (T$.LinkedMapOfType$InheritedElement = dart.constFn(_js_helper.LinkedMap$(core.Type, framework.InheritedElement)))(),
    AnimationOfOffset: () => (T$.AnimationOfOffset = dart.constFn(animation.Animation$(ui.Offset)))(),
    DiagnosticsPropertyOfAnimationOfdouble: () => (T$.DiagnosticsPropertyOfAnimationOfdouble = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.AnimationOfdouble())))(),
    AnimationOfRelativeRect: () => (T$.AnimationOfRelativeRect = dart.constFn(animation.Animation$(stack.RelativeRect)))(),
    AnimationOfRect: () => (T$.AnimationOfRect = dart.constFn(animation.Animation$(ui.Rect)))(),
    AnimationOfAlignmentGeometry: () => (T$.AnimationOfAlignmentGeometry = dart.constFn(animation.Animation$(alignment$.AlignmentGeometry)))(),
    AnimationOfTextStyle: () => (T$.AnimationOfTextStyle = dart.constFn(animation.Animation$(text_style.TextStyle)))(),
    GlobalKeyOf_OverlayEntryWidgetState: () => (T$.GlobalKeyOf_OverlayEntryWidgetState = dart.constFn(framework.GlobalKey$(overlay$._OverlayEntryWidgetState)))(),
    ListOfOverlayEntry: () => (T$.ListOfOverlayEntry = dart.constFn(core.List$(overlay$.OverlayEntry)))(),
    LinkedHashSetOfOverlayEntry: () => (T$.LinkedHashSetOfOverlayEntry = dart.constFn(collection.LinkedHashSet$(overlay$.OverlayEntry)))(),
    DiagnosticsPropertyOfListOfOverlayEntry: () => (T$.DiagnosticsPropertyOfListOfOverlayEntry = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.ListOfOverlayEntry())))(),
    ContainerParentDataMixinOfRenderObject: () => (T$.ContainerParentDataMixinOfRenderObject = dart.constFn(object$.ContainerParentDataMixin$(object$.RenderObject)))(),
    ContainerRenderObjectMixinOfRenderObject$ContainerParentDataMixinOfRenderObject: () => (T$.ContainerRenderObjectMixinOfRenderObject$ContainerParentDataMixinOfRenderObject = dart.constFn(object$.ContainerRenderObjectMixin$(object$.RenderObject, T$.ContainerParentDataMixinOfRenderObject())))(),
    RenderBoxTodouble: () => (T$.RenderBoxTodouble = dart.constFn(dart.fnType(core.double, [box$.RenderBox])))(),
    OffsetN: () => (T$.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T$.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box$.BoxHitTestResult, T$.OffsetN()])))(),
    EnumPropertyOfTextDirection: () => (T$.EnumPropertyOfTextDirection = dart.constFn(diagnostics$.EnumProperty$(ui.TextDirection)))(),
    TextSelectionHandleTypeL: () => (T$.TextSelectionHandleTypeL = dart.constFn(dart.legacy(text_selection.TextSelectionHandleType)))(),
    _TextSelectionHandlePositionL: () => (T$._TextSelectionHandlePositionL = dart.constFn(dart.legacy(text_selection._TextSelectionHandlePosition)))(),
    TextSelectionTovoid: () => (T$.TextSelectionTovoid = dart.constFn(dart.fnType(dart.void, [text_editing.TextSelection])))(),
    DiagnosticsPropertyOfTicker: () => (T$.DiagnosticsPropertyOfTicker = dart.constFn(diagnostics$.DiagnosticsProperty$(ticker.Ticker)))(),
    GestureRecognizerFactoryWithHandlersOf_TransparentTapGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOf_TransparentTapGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(text_selection._TransparentTapGestureRecognizer)))(),
    VoidTo_TransparentTapGestureRecognizer: () => (T$.VoidTo_TransparentTapGestureRecognizer = dart.constFn(dart.fnType(text_selection._TransparentTapGestureRecognizer, [])))(),
    _TransparentTapGestureRecognizerTovoid: () => (T$._TransparentTapGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [text_selection._TransparentTapGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfLongPressGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfLongPressGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(long_press.LongPressGestureRecognizer)))(),
    VoidToLongPressGestureRecognizer: () => (T$.VoidToLongPressGestureRecognizer = dart.constFn(dart.fnType(long_press.LongPressGestureRecognizer, [])))(),
    LongPressGestureRecognizerTovoid: () => (T$.LongPressGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfHorizontalDragGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfHorizontalDragGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(monodrag.HorizontalDragGestureRecognizer)))(),
    VoidToHorizontalDragGestureRecognizer: () => (T$.VoidToHorizontalDragGestureRecognizer = dart.constFn(dart.fnType(monodrag.HorizontalDragGestureRecognizer, [])))(),
    HorizontalDragGestureRecognizerTovoid: () => (T$.HorizontalDragGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [monodrag.HorizontalDragGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfForcePressGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfForcePressGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(force_press.ForcePressGestureRecognizer)))(),
    VoidToForcePressGestureRecognizer: () => (T$.VoidToForcePressGestureRecognizer = dart.constFn(dart.fnType(force_press.ForcePressGestureRecognizer, [])))(),
    ForcePressGestureRecognizerTovoid: () => (T$.ForcePressGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [force_press.ForcePressGestureRecognizer])))(),
    ClipboardStatusL: () => (T$.ClipboardStatusL = dart.constFn(dart.legacy(text_selection.ClipboardStatus)))(),
    InheritedThemeL: () => (T$.InheritedThemeL = dart.constFn(dart.legacy(inherited_theme.InheritedTheme)))(),
    JSArrayOfInheritedTheme: () => (T$.JSArrayOfInheritedTheme = dart.constFn(_interceptors.JSArray$(inherited_theme.InheritedTheme)))(),
    LinkedHashSetOfType: () => (T$.LinkedHashSetOfType = dart.constFn(collection.LinkedHashSet$(core.Type)))(),
    boolTodynamic: () => (T$.boolTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.bool])))(),
    BuildContextToDefaultTextStyle: () => (T$.BuildContextToDefaultTextStyle = dart.constFn(dart.fnType(text.DefaultTextStyle, [framework.BuildContext])))(),
    EnumPropertyOfTextAlign: () => (T$.EnumPropertyOfTextAlign = dart.constFn(diagnostics$.EnumProperty$(ui.TextAlign)))(),
    EnumPropertyOfTextOverflow: () => (T$.EnumPropertyOfTextOverflow = dart.constFn(diagnostics$.EnumProperty$(paragraph.TextOverflow)))(),
    EnumPropertyOfTextWidthBasis: () => (T$.EnumPropertyOfTextWidthBasis = dart.constFn(diagnostics$.EnumProperty$(text_painter.TextWidthBasis)))(),
    DiagnosticsPropertyOfTextHeightBehavior: () => (T$.DiagnosticsPropertyOfTextHeightBehavior = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.TextHeightBehavior)))(),
    JSArrayOfInlineSpan: () => (T$.JSArrayOfInlineSpan = dart.constFn(_interceptors.JSArray$(inline_span.InlineSpan)))(),
    DiagnosticsPropertyOfLocale: () => (T$.DiagnosticsPropertyOfLocale = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.Locale)))(),
    EnumPropertyOfAxisDirection: () => (T$.EnumPropertyOfAxisDirection = dart.constFn(diagnostics$.EnumProperty$(basic_types.AxisDirection)))(),
    DiagnosticsPropertyOfViewportOffset: () => (T$.DiagnosticsPropertyOfViewportOffset = dart.constFn(diagnostics$.DiagnosticsProperty$(viewport_offset.ViewportOffset)))(),
    DiagnosticsPropertyOfdouble: () => (T$.DiagnosticsPropertyOfdouble = dart.constFn(diagnostics$.DiagnosticsProperty$(core.double)))(),
    DiagnosticsPropertyOfCacheExtentStyle: () => (T$.DiagnosticsPropertyOfCacheExtentStyle = dart.constFn(diagnostics$.DiagnosticsProperty$(viewport$.CacheExtentStyle)))(),
    RenderSliverN: () => (T$.RenderSliverN = dart.constFn(dart.nullable(sliver.RenderSliver)))(),
    ListenableN: () => (T$.ListenableN = dart.constFn(dart.nullable(change_notifier.Listenable)))(),
    ScrollNotificationTobool: () => (T$.ScrollNotificationTobool = dart.constFn(dart.fnType(core.bool, [scroll_notification.ScrollNotification])))(),
    RawScrollbarStateOfRawScrollbar: () => (T$.RawScrollbarStateOfRawScrollbar = dart.constFn(scrollbar.RawScrollbarState$(scrollbar.RawScrollbar)))(),
    GestureRecognizerFactoryWithHandlersOf_ThumbPressGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOf_ThumbPressGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(scrollbar._ThumbPressGestureRecognizer)))(),
    VoidTo_ThumbPressGestureRecognizer: () => (T$.VoidTo_ThumbPressGestureRecognizer = dart.constFn(dart.fnType(scrollbar._ThumbPressGestureRecognizer, [])))(),
    LongPressStartDetailsTovoid: () => (T$.LongPressStartDetailsTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressStartDetails])))(),
    LongPressMoveUpdateDetailsTovoid: () => (T$.LongPressMoveUpdateDetailsTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails])))(),
    LongPressEndDetailsTovoid: () => (T$.LongPressEndDetailsTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressEndDetails])))(),
    _ThumbPressGestureRecognizerTovoid: () => (T$._ThumbPressGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [scrollbar._ThumbPressGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOf_TrackTapGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOf_TrackTapGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(scrollbar._TrackTapGestureRecognizer)))(),
    VoidTo_TrackTapGestureRecognizer: () => (T$.VoidTo_TrackTapGestureRecognizer = dart.constFn(dart.fnType(scrollbar._TrackTapGestureRecognizer, [])))(),
    _TrackTapGestureRecognizerTovoid: () => (T$._TrackTapGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [scrollbar._TrackTapGestureRecognizer])))(),
    NotificationListenerOfScrollNotification: () => (T$.NotificationListenerOfScrollNotification = dart.constFn(notification_listener.NotificationListener$(scroll_notification.ScrollNotification)))(),
    PointerExitEventTovoid: () => (T$.PointerExitEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerExitEvent])))(),
    PointerHoverEventTovoid: () => (T$.PointerHoverEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerHoverEvent])))(),
    PointerEventToIOSScrollViewFlingVelocityTracker: () => (T$.PointerEventToIOSScrollViewFlingVelocityTracker = dart.constFn(dart.fnType(velocity_tracker.IOSScrollViewFlingVelocityTracker, [events.PointerEvent])))(),
    PointerEventToVelocityTracker: () => (T$.PointerEventToVelocityTracker = dart.constFn(dart.fnType(velocity_tracker.VelocityTracker, [events.PointerEvent])))(),
    DiagnosticsPropertyOfScrollBehavior: () => (T$.DiagnosticsPropertyOfScrollBehavior = dart.constFn(diagnostics$.DiagnosticsProperty$(scroll_configuration.ScrollBehavior)))(),
    DateTimeN: () => (T$.DateTimeN = dart.constFn(dart.nullable(core.DateTime)))(),
    JSArrayOfTextSpan: () => (T$.JSArrayOfTextSpan = dart.constFn(_interceptors.JSArray$(text_span.TextSpan)))(),
    RestorationBucketN: () => (T$.RestorationBucketN = dart.constFn(dart.nullable(restoration.RestorationBucket)))(),
    RestorationBucketNToNull: () => (T$.RestorationBucketNToNull = dart.constFn(dart.fnType(core.Null, [T$.RestorationBucketN()])))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    LinkedHashSetOfSemanticsAction: () => (T$.LinkedHashSetOfSemanticsAction = dart.constFn(collection.LinkedHashSet$(ui.SemanticsAction)))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    JSArrayOfPageStorageKey: () => (T$.JSArrayOfPageStorageKey = dart.constFn(_interceptors.JSArray$(page_storage.PageStorageKey)))(),
    LinkedMapOfObject$dynamic: () => (T$.LinkedMapOfObject$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Object, dart.dynamic)))(),
    ScrollPositionAlignmentPolicyL: () => (T$.ScrollPositionAlignmentPolicyL = dart.constFn(dart.legacy(scroll_position.ScrollPositionAlignmentPolicy)))(),
    NotificationListenerOfNotification: () => (T$.NotificationListenerOfNotification = dart.constFn(notification_listener.NotificationListener$(notification_listener.Notification)))(),
    IdentityMapOfbool$bool: () => (T$.IdentityMapOfbool$bool = dart.constFn(_js_helper.IdentityMap$(core.bool, core.bool)))(),
    _GlowStateL: () => (T$._GlowStateL = dart.constFn(dart.legacy(overscroll_indicator._GlowState)))(),
    DiagnosticsPropertyOfScrollPhysics: () => (T$.DiagnosticsPropertyOfScrollPhysics = dart.constFn(diagnostics$.DiagnosticsProperty$(scroll_physics.ScrollPhysics)))(),
    DiagnosticsPropertyOfScrollMetrics: () => (T$.DiagnosticsPropertyOfScrollMetrics = dart.constFn(diagnostics$.DiagnosticsProperty$(scroll_metrics.ScrollMetrics)))(),
    JSArrayOfScrollPosition: () => (T$.JSArrayOfScrollPosition = dart.constFn(_interceptors.JSArray$(scroll_position.ScrollPosition)))(),
    JSArrayOfFutureOfvoid: () => (T$.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    ListOfScrollPosition: () => (T$.ListOfScrollPosition = dart.constFn(core.List$(scroll_position.ScrollPosition)))(),
    LinkedMapOfScrollPosition$VoidTovoid: () => (T$.LinkedMapOfScrollPosition$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(scroll_position.ScrollPosition, T$.VoidTovoid())))(),
    DiagnosticsPropertyOfScrollController: () => (T$.DiagnosticsPropertyOfScrollController = dart.constFn(diagnostics$.DiagnosticsProperty$(scroll_controller.ScrollController)))(),
    GestureRecognizerFactoryWithHandlersOfTapGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfTapGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(tap$.TapGestureRecognizer)))(),
    VoidToTapGestureRecognizer: () => (T$.VoidToTapGestureRecognizer = dart.constFn(dart.fnType(tap$.TapGestureRecognizer, [])))(),
    TapGestureRecognizerTovoid: () => (T$.TapGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [tap$.TapGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfDoubleTapGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfDoubleTapGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(multitap.DoubleTapGestureRecognizer)))(),
    VoidToDoubleTapGestureRecognizer: () => (T$.VoidToDoubleTapGestureRecognizer = dart.constFn(dart.fnType(multitap.DoubleTapGestureRecognizer, [])))(),
    DoubleTapGestureRecognizerTovoid: () => (T$.DoubleTapGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [multitap.DoubleTapGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfVerticalDragGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfVerticalDragGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(monodrag.VerticalDragGestureRecognizer)))(),
    VoidToVerticalDragGestureRecognizer: () => (T$.VoidToVerticalDragGestureRecognizer = dart.constFn(dart.fnType(monodrag.VerticalDragGestureRecognizer, [])))(),
    VerticalDragGestureRecognizerTovoid: () => (T$.VerticalDragGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [monodrag.VerticalDragGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfPanGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfPanGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(monodrag.PanGestureRecognizer)))(),
    VoidToPanGestureRecognizer: () => (T$.VoidToPanGestureRecognizer = dart.constFn(dart.fnType(monodrag.PanGestureRecognizer, [])))(),
    PanGestureRecognizerTovoid: () => (T$.PanGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [monodrag.PanGestureRecognizer])))(),
    GestureRecognizerFactoryWithHandlersOfScaleGestureRecognizer: () => (T$.GestureRecognizerFactoryWithHandlersOfScaleGestureRecognizer = dart.constFn(gesture_detector.GestureRecognizerFactoryWithHandlers$(scale.ScaleGestureRecognizer)))(),
    VoidToScaleGestureRecognizer: () => (T$.VoidToScaleGestureRecognizer = dart.constFn(dart.fnType(scale.ScaleGestureRecognizer, [])))(),
    ScaleGestureRecognizerTovoid: () => (T$.ScaleGestureRecognizerTovoid = dart.constFn(dart.fnType(dart.void, [scale.ScaleGestureRecognizer])))(),
    EnumPropertyOfDragStartBehavior: () => (T$.EnumPropertyOfDragStartBehavior = dart.constFn(diagnostics$.EnumProperty$(recognizer.DragStartBehavior)))(),
    TypeL: () => (T$.TypeL = dart.constFn(dart.legacy(core.Type)))(),
    GestureRecognizerL: () => (T$.GestureRecognizerL = dart.constFn(dart.legacy(recognizer.GestureRecognizer)))(),
    GestureRecognizerFactoryOfGestureRecognizerL: () => (T$.GestureRecognizerFactoryOfGestureRecognizerL = dart.constFn(gesture_detector.GestureRecognizerFactory$(T$.GestureRecognizerL())))(),
    GestureRecognizerFactoryLOfGestureRecognizerL: () => (T$.GestureRecognizerFactoryLOfGestureRecognizerL = dart.constFn(dart.legacy(T$.GestureRecognizerFactoryOfGestureRecognizerL())))(),
    RenderSemanticsGestureHandlerN: () => (T$.RenderSemanticsGestureHandlerN = dart.constFn(dart.nullable(proxy_box.RenderSemanticsGestureHandler)))(),
    LinkedMapOfType$GestureRecognizer: () => (T$.LinkedMapOfType$GestureRecognizer = dart.constFn(_js_helper.LinkedMap$(core.Type, recognizer.GestureRecognizer)))(),
    GestureRecognizerToString: () => (T$.GestureRecognizerToString = dart.constFn(dart.fnType(core.String, [recognizer.GestureRecognizer])))(),
    IterablePropertyOfString: () => (T$.IterablePropertyOfString = dart.constFn(diagnostics$.IterableProperty$(core.String)))(),
    IterablePropertyOfGestureRecognizer: () => (T$.IterablePropertyOfGestureRecognizer = dart.constFn(diagnostics$.IterableProperty$(recognizer.GestureRecognizer)))(),
    DiagnosticsPropertyOfbool: () => (T$.DiagnosticsPropertyOfbool = dart.constFn(diagnostics$.DiagnosticsProperty$(core.bool)))(),
    DiagnosticsPropertyOfSemanticsGestureDelegate: () => (T$.DiagnosticsPropertyOfSemanticsGestureDelegate = dart.constFn(diagnostics$.DiagnosticsProperty$(gesture_detector.SemanticsGestureDelegate)))(),
    EnumPropertyOfHitTestBehavior: () => (T$.EnumPropertyOfHitTestBehavior = dart.constFn(diagnostics$.EnumProperty$(proxy_box.HitTestBehavior)))(),
    TapGestureRecognizerN: () => (T$.TapGestureRecognizerN = dart.constFn(dart.nullable(tap$.TapGestureRecognizer)))(),
    LongPressGestureRecognizerN: () => (T$.LongPressGestureRecognizerN = dart.constFn(dart.nullable(long_press.LongPressGestureRecognizer)))(),
    HorizontalDragGestureRecognizerN: () => (T$.HorizontalDragGestureRecognizerN = dart.constFn(dart.nullable(monodrag.HorizontalDragGestureRecognizer)))(),
    PanGestureRecognizerN: () => (T$.PanGestureRecognizerN = dart.constFn(dart.nullable(monodrag.PanGestureRecognizer)))(),
    DragUpdateDetailsTovoid: () => (T$.DragUpdateDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragUpdateDetails])))(),
    VerticalDragGestureRecognizerN: () => (T$.VerticalDragGestureRecognizerN = dart.constFn(dart.nullable(monodrag.VerticalDragGestureRecognizer)))(),
    _ScrollableScopeN: () => (T$._ScrollableScopeN = dart.constFn(dart.nullable(scrollable$._ScrollableScope)))(),
    ListOfvoid: () => (T$.ListOfvoid = dart.constFn(core.List$(dart.void)))(),
    ListOfvoidToNull: () => (T$.ListOfvoidToNull = dart.constFn(dart.fnType(core.Null, [T$.ListOfvoid()])))(),
    GlobalKeyOfRawGestureDetectorState: () => (T$.GlobalKeyOfRawGestureDetectorState = dart.constFn(framework.GlobalKey$(gesture_detector.RawGestureDetectorState)))(),
    DiagnosticsPropertyOfScrollPosition: () => (T$.DiagnosticsPropertyOfScrollPosition = dart.constFn(diagnostics$.DiagnosticsProperty$(scroll_position.ScrollPosition)))(),
    JSArrayOfSemanticsNode: () => (T$.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(semantics.SemanticsNode)))(),
    ScrollIncrementTypeL: () => (T$.ScrollIncrementTypeL = dart.constFn(dart.legacy(scrollable$.ScrollIncrementType)))(),
    OrientationL: () => (T$.OrientationL = dart.constFn(dart.legacy(media_query.Orientation)))(),
    DiagnosticsPropertyOfMediaQueryData: () => (T$.DiagnosticsPropertyOfMediaQueryData = dart.constFn(diagnostics$.DiagnosticsProperty$(media_query.MediaQueryData)))(),
    NavigationModeL: () => (T$.NavigationModeL = dart.constFn(dart.legacy(media_query.NavigationMode)))(),
    ImageProviderOfObject: () => (T$.ImageProviderOfObject = dart.constFn(image_provider.ImageProvider$(core.Object)))(),
    DiagnosticsPropertyOfImageProviderOfObject: () => (T$.DiagnosticsPropertyOfImageProviderOfObject = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.ImageProviderOfObject())))(),
    DiagnosticsPropertyOfFunction: () => (T$.DiagnosticsPropertyOfFunction = dart.constFn(diagnostics$.DiagnosticsProperty$(core.Function)))(),
    EnumPropertyOfBlendMode: () => (T$.EnumPropertyOfBlendMode = dart.constFn(diagnostics$.EnumProperty$(ui.BlendMode)))(),
    EnumPropertyOfBoxFit: () => (T$.EnumPropertyOfBoxFit = dart.constFn(diagnostics$.EnumProperty$(box_fit.BoxFit)))(),
    DiagnosticsPropertyOfAlignmentGeometry: () => (T$.DiagnosticsPropertyOfAlignmentGeometry = dart.constFn(diagnostics$.DiagnosticsProperty$(alignment$.AlignmentGeometry)))(),
    EnumPropertyOfImageRepeat: () => (T$.EnumPropertyOfImageRepeat = dart.constFn(diagnostics$.EnumProperty$(decoration_image.ImageRepeat)))(),
    DiagnosticsPropertyOfRect: () => (T$.DiagnosticsPropertyOfRect = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.Rect)))(),
    EnumPropertyOfFilterQuality: () => (T$.EnumPropertyOfFilterQuality = dart.constFn(diagnostics$.EnumProperty$(ui.FilterQuality)))(),
    StateOfImage: () => (T$.StateOfImage = dart.constFn(framework.State$(image$.Image)))(),
    DisposableBuildContextOfStateOfImage: () => (T$.DisposableBuildContextOfStateOfImage = dart.constFn(disposable_build_context.DisposableBuildContext$(T$.StateOfImage())))(),
    ScrollAwareImageProviderOfObject: () => (T$.ScrollAwareImageProviderOfObject = dart.constFn(scroll_aware_image_provider.ScrollAwareImageProvider$(core.Object)))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ObjectAndStackTraceNTovoid: () => (T$.ObjectAndStackTraceNTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, T$.StackTraceN()])))(),
    ShadowL: () => (T$.ShadowL = dart.constFn(dart.legacy(ui.Shadow)))(),
    DiagnosticsPropertyOfImageStream: () => (T$.DiagnosticsPropertyOfImageStream = dart.constFn(diagnostics$.DiagnosticsProperty$(image_stream.ImageStream)))(),
    DiagnosticsPropertyOfImageInfo: () => (T$.DiagnosticsPropertyOfImageInfo = dart.constFn(diagnostics$.DiagnosticsProperty$(image_stream.ImageInfo)))(),
    DiagnosticsPropertyOfImageChunkEvent: () => (T$.DiagnosticsPropertyOfImageChunkEvent = dart.constFn(diagnostics$.DiagnosticsProperty$(image_stream.ImageChunkEvent)))(),
    DiagnosticsPropertyOfint: () => (T$.DiagnosticsPropertyOfint = dart.constFn(diagnostics$.DiagnosticsProperty$(core.int)))(),
    ImageInfoN: () => (T$.ImageInfoN = dart.constFn(dart.nullable(image_stream.ImageInfo)))(),
    ImageInfoNAndboolTovoid: () => (T$.ImageInfoNAndboolTovoid = dart.constFn(dart.fnType(dart.void, [T$.ImageInfoN(), core.bool])))(),
    EnumPropertyOfDecorationPosition: () => (T$.EnumPropertyOfDecorationPosition = dart.constFn(diagnostics$.EnumProperty$(proxy_box.DecorationPosition)))(),
    DiagnosticsPropertyOfDecoration: () => (T$.DiagnosticsPropertyOfDecoration = dart.constFn(diagnostics$.DiagnosticsProperty$(decoration.Decoration)))(),
    DiagnosticsPropertyOfEdgeInsetsGeometry: () => (T$.DiagnosticsPropertyOfEdgeInsetsGeometry = dart.constFn(diagnostics$.DiagnosticsProperty$(edge_insets.EdgeInsetsGeometry)))(),
    DiagnosticsPropertyOfClip: () => (T$.DiagnosticsPropertyOfClip = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.Clip)))(),
    DiagnosticsPropertyOfColor: () => (T$.DiagnosticsPropertyOfColor = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.Color)))(),
    DiagnosticsPropertyOfBoxConstraints: () => (T$.DiagnosticsPropertyOfBoxConstraints = dart.constFn(diagnostics$.DiagnosticsProperty$(box$.BoxConstraints)))(),
    ObjectFlagPropertyOfMatrix4: () => (T$.ObjectFlagPropertyOfMatrix4 = dart.constFn(diagnostics$.ObjectFlagProperty$(vector_math_64.Matrix4)))(),
    SynchronousFutureOfWidgetsLocalizations: () => (T$.SynchronousFutureOfWidgetsLocalizations = dart.constFn(synchronous_future.SynchronousFuture$(localizations.WidgetsLocalizations)))(),
    LocalizationsDelegateOfWidgetsLocalizations: () => (T$.LocalizationsDelegateOfWidgetsLocalizations = dart.constFn(localizations.LocalizationsDelegate$(localizations.WidgetsLocalizations)))(),
    LocalizationsDelegateTobool: () => (T$.LocalizationsDelegateTobool = dart.constFn(dart.fnType(core.bool, [localizations.LocalizationsDelegate])))(),
    ListOfLocalizationsDelegate: () => (T$.ListOfLocalizationsDelegate = dart.constFn(core.List$(localizations.LocalizationsDelegate)))(),
    IterablePropertyOfLocalizationsDelegate: () => (T$.IterablePropertyOfLocalizationsDelegate = dart.constFn(diagnostics$.IterableProperty$(localizations.LocalizationsDelegate)))(),
    LinkedMapOfType$dynamic: () => (T$.LinkedMapOfType$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Type, dart.dynamic)))(),
    MapOfType$dynamic: () => (T$.MapOfType$dynamic = dart.constFn(core.Map$(core.Type, dart.dynamic)))(),
    MapOfType$dynamicToMapOfType$dynamic: () => (T$.MapOfType$dynamicToMapOfType$dynamic = dart.constFn(dart.fnType(T$.MapOfType$dynamic(), [T$.MapOfType$dynamic()])))(),
    MapOfType$dynamicToNull: () => (T$.MapOfType$dynamicToNull = dart.constFn(dart.fnType(core.Null, [T$.MapOfType$dynamic()])))(),
    JSArrayOfLocalizationsDelegate: () => (T$.JSArrayOfLocalizationsDelegate = dart.constFn(_interceptors.JSArray$(localizations.LocalizationsDelegate)))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    JSArrayOf_Pending: () => (T$.JSArrayOf_Pending = dart.constFn(_interceptors.JSArray$(localizations._Pending)))(),
    SynchronousFutureOfMapOfType$dynamic: () => (T$.SynchronousFutureOfMapOfType$dynamic = dart.constFn(synchronous_future.SynchronousFuture$(T$.MapOfType$dynamic())))(),
    _PendingToFuture: () => (T$._PendingToFuture = dart.constFn(dart.fnType(async.Future, [localizations._Pending])))(),
    ListToMapOfType$dynamic: () => (T$.ListToMapOfType$dynamic = dart.constFn(dart.fnType(T$.MapOfType$dynamic(), [core.List])))(),
    WidgetAndintToint: () => (T$.WidgetAndintToint = dart.constFn(dart.fnType(core.int, [framework.Widget, core.int])))(),
    KeyN: () => (T$.KeyN = dart.constFn(dart.nullable(key.Key)))(),
    LinkedMapOfKeyN$int: () => (T$.LinkedMapOfKeyN$int = dart.constFn(_js_helper.LinkedMap$(T$.KeyN(), core.int)))(),
    DiagnosticsPropertyOfSliverChildDelegate: () => (T$.DiagnosticsPropertyOfSliverChildDelegate = dart.constFn(diagnostics$.DiagnosticsProperty$(sliver$.SliverChildDelegate)))(),
    SplayTreeMapOfint$ElementN: () => (T$.SplayTreeMapOfint$ElementN = dart.constFn(collection.SplayTreeMap$(core.int, T$.ElementN())))(),
    IdentityMapOfint$double: () => (T$.IdentityMapOfint$double = dart.constFn(_js_helper.IdentityMap$(core.int, core.double)))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    SliverMultiBoxAdaptorParentDataN: () => (T$.SliverMultiBoxAdaptorParentDataN = dart.constFn(dart.nullable(sliver_multi_box_adaptor.SliverMultiBoxAdaptorParentData)))(),
    VoidToElementN: () => (T$.VoidToElementN = dart.constFn(dart.fnType(T$.ElementN(), [])))(),
    ElementNTobool: () => (T$.ElementNTobool = dart.constFn(dart.fnType(core.bool, [T$.ElementN()])))(),
    RenderObjectWithChildMixinOfRenderObject: () => (T$.RenderObjectWithChildMixinOfRenderObject = dart.constFn(object$.RenderObjectWithChildMixin$(object$.RenderObject)))(),
    NotificationListenerOfKeepAliveNotification: () => (T$.NotificationListenerOfKeepAliveNotification = dart.constFn(notification_listener.NotificationListener$(automatic_keep_alive.KeepAliveNotification)))(),
    LinkedMapOfListenable$VoidTovoid: () => (T$.LinkedMapOfListenable$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(change_notifier.Listenable, T$.VoidTovoid())))(),
    ParentDataElementOfKeepAliveParentDataMixin: () => (T$.ParentDataElementOfKeepAliveParentDataMixin = dart.constFn(framework.ParentDataElement$(sliver_multi_box_adaptor.KeepAliveParentDataMixin)))(),
    ParentDataElementNOfKeepAliveParentDataMixin: () => (T$.ParentDataElementNOfKeepAliveParentDataMixin = dart.constFn(dart.nullable(T$.ParentDataElementOfKeepAliveParentDataMixin())))(),
    ParentDataWidgetOfKeepAliveParentDataMixin: () => (T$.ParentDataWidgetOfKeepAliveParentDataMixin = dart.constFn(framework.ParentDataWidget$(sliver_multi_box_adaptor.KeepAliveParentDataMixin)))(),
    MapOfListenable$VoidTovoid: () => (T$.MapOfListenable$VoidTovoid = dart.constFn(core.Map$(change_notifier.Listenable, T$.VoidTovoid())))(),
    DiagnosticsPropertyOfMapOfListenable$VoidTovoid: () => (T$.DiagnosticsPropertyOfMapOfListenable$VoidTovoid = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.MapOfListenable$VoidTovoid())))(),
    AutofillContextActionL: () => (T$.AutofillContextActionL = dart.constFn(dart.legacy(autofill$.AutofillContextAction)))(),
    IdentityMapOfString$AutofillClient: () => (T$.IdentityMapOfString$AutofillClient = dart.constFn(_js_helper.IdentityMap$(core.String, autofill.AutofillClient)))(),
    AutofillClientTobool: () => (T$.AutofillClientTobool = dart.constFn(dart.fnType(core.bool, [autofill.AutofillClient])))(),
    VoidToAutofillClient: () => (T$.VoidToAutofillClient = dart.constFn(dart.fnType(autofill.AutofillClient, [])))(),
    JSArrayOfTextInputFormatter: () => (T$.JSArrayOfTextInputFormatter = dart.constFn(_interceptors.JSArray$(text_formatter.TextInputFormatter)))(),
    TextInputFormatterL: () => (T$.TextInputFormatterL = dart.constFn(dart.legacy(text_formatter.TextInputFormatter)))(),
    EmptyIterableOfTextInputFormatterL: () => (T$.EmptyIterableOfTextInputFormatterL = dart.constFn(_internal.EmptyIterable$(T$.TextInputFormatterL())))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    TextInputTypeL: () => (T$.TextInputTypeL = dart.constFn(dart.legacy(text_input.TextInputType)))(),
    DiagnosticsPropertyOfTextEditingController: () => (T$.DiagnosticsPropertyOfTextEditingController = dart.constFn(diagnostics$.DiagnosticsProperty$(editable_text.TextEditingController)))(),
    DiagnosticsPropertyOfFocusNode: () => (T$.DiagnosticsPropertyOfFocusNode = dart.constFn(diagnostics$.DiagnosticsProperty$(focus_manager.FocusNode)))(),
    EnumPropertyOfSmartDashesType: () => (T$.EnumPropertyOfSmartDashesType = dart.constFn(diagnostics$.EnumProperty$(text_input.SmartDashesType)))(),
    EnumPropertyOfSmartQuotesType: () => (T$.EnumPropertyOfSmartQuotesType = dart.constFn(diagnostics$.EnumProperty$(text_input.SmartQuotesType)))(),
    DiagnosticsPropertyOfTextInputType: () => (T$.DiagnosticsPropertyOfTextInputType = dart.constFn(diagnostics$.DiagnosticsProperty$(text_input.TextInputType)))(),
    IterableOfString: () => (T$.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    DiagnosticsPropertyOfIterableOfString: () => (T$.DiagnosticsPropertyOfIterableOfString = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.IterableOfString())))()
  };
  var T$0 = {
    TextEditingValueAndTextInputFormatterToTextEditingValue: () => (T$0.TextEditingValueAndTextInputFormatterToTextEditingValue = dart.constFn(dart.fnType(text_input.TextEditingValue, [text_input.TextEditingValue, text_formatter.TextInputFormatter])))(),
    BuildContextAndViewportOffsetToCompositedTransformTarget: () => (T$0.BuildContextAndViewportOffsetToCompositedTransformTarget = dart.constFn(dart.fnType(basic.CompositedTransformTarget, [framework.BuildContext, viewport_offset.ViewportOffset])))(),
    JSArrayOfFocusNode: () => (T$0.JSArrayOfFocusNode = dart.constFn(_interceptors.JSArray$(focus_manager.FocusNode)))(),
    TraversalDirectionL: () => (T$0.TraversalDirectionL = dart.constFn(dart.legacy(focus_traversal.TraversalDirection)))(),
    _FocusTraversalGroupMarkerN: () => (T$0._FocusTraversalGroupMarkerN = dart.constFn(dart.nullable(focus_traversal._FocusTraversalGroupMarker)))(),
    FocusNodeN: () => (T$0.FocusNodeN = dart.constFn(dart.nullable(focus_manager.FocusNode)))(),
    LinkedMapOfFocusNodeN$_FocusTraversalGroupInfo: () => (T$0.LinkedMapOfFocusNodeN$_FocusTraversalGroupInfo = dart.constFn(_js_helper.LinkedMap$(T$0.FocusNodeN(), focus_traversal._FocusTraversalGroupInfo)))(),
    _FocusTraversalGroupInfoTovoid: () => (T$0._FocusTraversalGroupInfoTovoid = dart.constFn(dart.fnType(dart.void, [focus_traversal._FocusTraversalGroupInfo])))(),
    FocusNodeTobool: () => (T$0.FocusNodeTobool = dart.constFn(dart.fnType(core.bool, [focus_manager.FocusNode])))(),
    LinkedMapOfFocusScopeNode$_DirectionalPolicyData: () => (T$0.LinkedMapOfFocusScopeNode$_DirectionalPolicyData = dart.constFn(_js_helper.LinkedMap$(focus_manager.FocusScopeNode, focus_traversal._DirectionalPolicyData)))(),
    _DirectionalPolicyDataEntryTobool: () => (T$0._DirectionalPolicyDataEntryTobool = dart.constFn(dart.fnType(core.bool, [focus_traversal._DirectionalPolicyDataEntry])))(),
    FocusNodeAndFocusNodeToint: () => (T$0.FocusNodeAndFocusNodeToint = dart.constFn(dart.fnType(core.int, [focus_manager.FocusNode, focus_manager.FocusNode])))(),
    TraversalDirectionTobool: () => (T$0.TraversalDirectionTobool = dart.constFn(dart.fnType(core.bool, [focus_traversal.TraversalDirection])))(),
    JSArrayOf_DirectionalPolicyDataEntry: () => (T$0.JSArrayOf_DirectionalPolicyDataEntry = dart.constFn(_interceptors.JSArray$(focus_traversal._DirectionalPolicyDataEntry)))(),
    DirectionalityN: () => (T$0.DirectionalityN = dart.constFn(dart.nullable(basic.Directionality)))(),
    SetOfDirectionality: () => (T$0.SetOfDirectionality = dart.constFn(core.Set$(basic.Directionality)))(),
    _ReadingOrderSortDataToSetOfDirectionality: () => (T$0._ReadingOrderSortDataToSetOfDirectionality = dart.constFn(dart.fnType(T$0.SetOfDirectionality(), [focus_traversal._ReadingOrderSortData])))(),
    _ReadingOrderSortDataAnd_ReadingOrderSortDataToint: () => (T$0._ReadingOrderSortDataAnd_ReadingOrderSortDataToint = dart.constFn(dart.fnType(core.int, [focus_traversal._ReadingOrderSortData, focus_traversal._ReadingOrderSortData])))(),
    JSArrayOfDirectionality: () => (T$0.JSArrayOfDirectionality = dart.constFn(_interceptors.JSArray$(basic.Directionality)))(),
    ListOfDirectionality: () => (T$0.ListOfDirectionality = dart.constFn(core.List$(basic.Directionality)))(),
    BuildContextToListOfDirectionality: () => (T$0.BuildContextToListOfDirectionality = dart.constFn(dart.fnType(T$0.ListOfDirectionality(), [framework.BuildContext])))(),
    DiagnosticsPropertyOfTextDirection: () => (T$0.DiagnosticsPropertyOfTextDirection = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.TextDirection)))(),
    _ReadingOrderSortDataToRect: () => (T$0._ReadingOrderSortDataToRect = dart.constFn(dart.fnType(ui.Rect, [focus_traversal._ReadingOrderSortData])))(),
    _ReadingOrderDirectionalGroupDataAnd_ReadingOrderDirectionalGroupDataToint: () => (T$0._ReadingOrderDirectionalGroupDataAnd_ReadingOrderDirectionalGroupDataToint = dart.constFn(dart.fnType(core.int, [focus_traversal._ReadingOrderDirectionalGroupData, focus_traversal._ReadingOrderDirectionalGroupData])))(),
    _ReadingOrderSortDataToString: () => (T$0._ReadingOrderSortDataToString = dart.constFn(dart.fnType(core.String, [focus_traversal._ReadingOrderSortData])))(),
    JSArrayOf_ReadingOrderSortData: () => (T$0.JSArrayOf_ReadingOrderSortData = dart.constFn(_interceptors.JSArray$(focus_traversal._ReadingOrderSortData)))(),
    JSArrayOf_ReadingOrderDirectionalGroupData: () => (T$0.JSArrayOf_ReadingOrderDirectionalGroupData = dart.constFn(_interceptors.JSArray$(focus_traversal._ReadingOrderDirectionalGroupData)))(),
    _ReadingOrderSortDataTobool: () => (T$0._ReadingOrderSortDataTobool = dart.constFn(dart.fnType(core.bool, [focus_traversal._ReadingOrderSortData])))(),
    ListOf_ReadingOrderSortData: () => (T$0.ListOf_ReadingOrderSortData = dart.constFn(core.List$(focus_traversal._ReadingOrderSortData)))(),
    IterableOf_ReadingOrderSortData: () => (T$0.IterableOf_ReadingOrderSortData = dart.constFn(core.Iterable$(focus_traversal._ReadingOrderSortData)))(),
    _ReadingOrderSortDataAndIterableOf_ReadingOrderSortDataToListOf_ReadingOrderSortData: () => (T$0._ReadingOrderSortDataAndIterableOf_ReadingOrderSortDataToListOf_ReadingOrderSortData = dart.constFn(dart.fnType(T$0.ListOf_ReadingOrderSortData(), [focus_traversal._ReadingOrderSortData, T$0.IterableOf_ReadingOrderSortData()])))(),
    JSArrayOf_OrderedFocusInfo: () => (T$0.JSArrayOf_OrderedFocusInfo = dart.constFn(_interceptors.JSArray$(focus_traversal._OrderedFocusInfo)))(),
    _OrderedFocusInfoAnd_OrderedFocusInfoToint: () => (T$0._OrderedFocusInfoAnd_OrderedFocusInfoToint = dart.constFn(dart.fnType(core.int, [focus_traversal._OrderedFocusInfo, focus_traversal._OrderedFocusInfo])))(),
    _OrderedFocusInfoToFocusNode: () => (T$0._OrderedFocusInfoToFocusNode = dart.constFn(dart.fnType(focus_manager.FocusNode, [focus_traversal._OrderedFocusInfo])))(),
    FocusTraversalOrderN: () => (T$0.FocusTraversalOrderN = dart.constFn(dart.nullable(focus_traversal.FocusTraversalOrder)))(),
    DiagnosticsPropertyOfFocusOrder: () => (T$0.DiagnosticsPropertyOfFocusOrder = dart.constFn(diagnostics$.DiagnosticsProperty$(focus_traversal.FocusOrder)))(),
    DiagnosticsPropertyOfFocusTraversalPolicy: () => (T$0.DiagnosticsPropertyOfFocusTraversalPolicy = dart.constFn(diagnostics$.DiagnosticsProperty$(focus_traversal.FocusTraversalPolicy)))(),
    FocusNodeL: () => (T$0.FocusNodeL = dart.constFn(dart.legacy(focus_manager.FocusNode)))(),
    DiagnosticsPropertyOfBuildContext: () => (T$0.DiagnosticsPropertyOfBuildContext = dart.constFn(diagnostics$.DiagnosticsProperty$(framework.BuildContext)))(),
    FocusNodeToDiagnosticsNode: () => (T$0.FocusNodeToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics$.DiagnosticsNode, [focus_manager.FocusNode])))(),
    KeyEventResultL: () => (T$0.KeyEventResultL = dart.constFn(dart.legacy(focus_manager.KeyEventResult)))(),
    UnfocusDispositionL: () => (T$0.UnfocusDispositionL = dart.constFn(dart.legacy(focus_manager.UnfocusDisposition)))(),
    FocusNodeToString: () => (T$0.FocusNodeToString = dart.constFn(dart.fnType(core.String, [focus_manager.FocusNode])))(),
    FocusHighlightModeL: () => (T$0.FocusHighlightModeL = dart.constFn(dart.legacy(focus_manager.FocusHighlightMode)))(),
    FocusHighlightStrategyL: () => (T$0.FocusHighlightStrategyL = dart.constFn(dart.legacy(focus_manager.FocusHighlightStrategy)))(),
    FocusHighlightModeTovoid: () => (T$0.FocusHighlightModeTovoid = dart.constFn(dart.fnType(dart.void, [focus_manager.FocusHighlightMode])))(),
    HashedObserverListOfFocusHighlightModeTovoid: () => (T$0.HashedObserverListOfFocusHighlightModeTovoid = dart.constFn(observer_list.HashedObserverList$(T$0.FocusHighlightModeTovoid())))(),
    LinkedHashSetOfFocusNode: () => (T$0.LinkedHashSetOfFocusNode = dart.constFn(collection.LinkedHashSet$(focus_manager.FocusNode)))(),
    ListOfFocusHighlightModeTovoid: () => (T$0.ListOfFocusHighlightModeTovoid = dart.constFn(core.List$(T$0.FocusHighlightModeTovoid())))(),
    DiagnosticsPropertyOfFocusManager: () => (T$0.DiagnosticsPropertyOfFocusManager = dart.constFn(diagnostics$.DiagnosticsProperty$(focus_manager.FocusManager)))(),
    DiagnosticsPropertyOfString: () => (T$0.DiagnosticsPropertyOfString = dart.constFn(diagnostics$.DiagnosticsProperty$(core.String)))(),
    StatefulWidgetL: () => (T$0.StatefulWidgetL = dart.constFn(dart.legacy(framework.StatefulWidget)))(),
    StateOfStatefulWidgetL: () => (T$0.StateOfStatefulWidgetL = dart.constFn(framework.State$(T$0.StatefulWidgetL())))(),
    StateLOfStatefulWidgetL: () => (T$0.StateLOfStatefulWidgetL = dart.constFn(dart.legacy(T$0.StateOfStatefulWidgetL())))(),
    LabeledGlobalKeyOfStateLOfStatefulWidgetL: () => (T$0.LabeledGlobalKeyOfStateLOfStatefulWidgetL = dart.constFn(framework.LabeledGlobalKey$(T$0.StateLOfStatefulWidgetL())))(),
    _StateLifecycleL: () => (T$0._StateLifecycleL = dart.constFn(dart.legacy(framework._StateLifecycle)))(),
    _ElementLifecycleL: () => (T$0._ElementLifecycleL = dart.constFn(dart.legacy(framework._ElementLifecycle)))(),
    ElementAndElementToint: () => (T$0.ElementAndElementToint = dart.constFn(dart.fnType(core.int, [framework.Element, framework.Element])))(),
    LinkedMapOfGlobalKeyOfStateOfStatefulWidget$Element: () => (T$0.LinkedMapOfGlobalKeyOfStateOfStatefulWidget$Element = dart.constFn(_js_helper.LinkedMap$(T$.GlobalKeyOfStateOfStatefulWidget(), framework.Element)))(),
    MapOfElement$GlobalKeyOfStateOfStatefulWidget: () => (T$0.MapOfElement$GlobalKeyOfStateOfStatefulWidget = dart.constFn(core.Map$(framework.Element, T$.GlobalKeyOfStateOfStatefulWidget())))(),
    LinkedMapOfElement$MapOfElement$GlobalKeyOfStateOfStatefulWidget: () => (T$0.LinkedMapOfElement$MapOfElement$GlobalKeyOfStateOfStatefulWidget = dart.constFn(_js_helper.LinkedMap$(framework.Element, T$0.MapOfElement$GlobalKeyOfStateOfStatefulWidget())))(),
    SetOfGlobalKeyOfStateOfStatefulWidget: () => (T$0.SetOfGlobalKeyOfStateOfStatefulWidget = dart.constFn(core.Set$(T$.GlobalKeyOfStateOfStatefulWidget())))(),
    LinkedMapOfElement$SetOfGlobalKeyOfStateOfStatefulWidget: () => (T$0.LinkedMapOfElement$SetOfGlobalKeyOfStateOfStatefulWidget = dart.constFn(_js_helper.LinkedMap$(framework.Element, T$0.SetOfGlobalKeyOfStateOfStatefulWidget())))(),
    _HashSetOfGlobalKeyOfStateOfStatefulWidget: () => (T$0._HashSetOfGlobalKeyOfStateOfStatefulWidget = dart.constFn(collection._HashSet$(T$.GlobalKeyOfStateOfStatefulWidget())))(),
    HashSetOfGlobalKeyOfStateOfStatefulWidget: () => (T$0.HashSetOfGlobalKeyOfStateOfStatefulWidget = dart.constFn(collection.HashSet$(T$.GlobalKeyOfStateOfStatefulWidget())))(),
    VoidToHashSetOfGlobalKeyOfStateOfStatefulWidget: () => (T$0.VoidToHashSetOfGlobalKeyOfStateOfStatefulWidget = dart.constFn(dart.fnType(T$0.HashSetOfGlobalKeyOfStateOfStatefulWidget(), [])))(),
    LinkedMapOfElement$GlobalKeyOfStateOfStatefulWidget: () => (T$0.LinkedMapOfElement$GlobalKeyOfStateOfStatefulWidget = dart.constFn(_js_helper.LinkedMap$(framework.Element, T$.GlobalKeyOfStateOfStatefulWidget())))(),
    ElementAndGlobalKeyOfStateOfStatefulWidgetTovoid: () => (T$0.ElementAndGlobalKeyOfStateOfStatefulWidgetTovoid = dart.constFn(dart.fnType(dart.void, [framework.Element, T$.GlobalKeyOfStateOfStatefulWidget()])))(),
    ElementAndMapOfElement$GlobalKeyOfStateOfStatefulWidgetTovoid: () => (T$0.ElementAndMapOfElement$GlobalKeyOfStateOfStatefulWidgetTovoid = dart.constFn(dart.fnType(dart.void, [framework.Element, T$0.MapOfElement$GlobalKeyOfStateOfStatefulWidget()])))(),
    SetOfElement: () => (T$0.SetOfElement = dart.constFn(core.Set$(framework.Element)))(),
    LinkedMapOfGlobalKeyOfStateOfStatefulWidget$SetOfElement: () => (T$0.LinkedMapOfGlobalKeyOfStateOfStatefulWidget$SetOfElement = dart.constFn(_js_helper.LinkedMap$(T$.GlobalKeyOfStateOfStatefulWidget(), T$0.SetOfElement())))(),
    LinkedHashSetOfElement: () => (T$0.LinkedHashSetOfElement = dart.constFn(collection.LinkedHashSet$(framework.Element)))(),
    VoidToLinkedHashSetOfElement: () => (T$0.VoidToLinkedHashSetOfElement = dart.constFn(dart.fnType(T$0.LinkedHashSetOfElement(), [])))(),
    IdentityMapOfString$int: () => (T$0.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    GlobalKeyOfStateOfStatefulWidgetToString: () => (T$0.GlobalKeyOfStateOfStatefulWidgetToString = dart.constFn(dart.fnType(core.String, [T$.GlobalKeyOfStateOfStatefulWidget()])))(),
    intToint: () => (T$0.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    StringAndintTovoid: () => (T$0.StringAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.int])))(),
    ElementToString: () => (T$0.ElementToString = dart.constFn(dart.fnType(core.String, [framework.Element])))(),
    FlutterErrorDetailsToWidget: () => (T$0.FlutterErrorDetailsToWidget = dart.constFn(dart.fnType(framework.Widget, [assertions.FlutterErrorDetails])))(),
    DiagnosticsPropertyOfStateOfStatefulWidget: () => (T$0.DiagnosticsPropertyOfStateOfStatefulWidget = dart.constFn(diagnostics$.DiagnosticsProperty$(T$.StateOfStatefulWidget())))(),
    _HashSetOfKey: () => (T$0._HashSetOfKey = dart.constFn(collection._HashSet$(key.Key)))(),
    BannerLocationL: () => (T$0.BannerLocationL = dart.constFn(dart.legacy(banner.BannerLocation)))(),
    EnumPropertyOfBannerLocation: () => (T$0.EnumPropertyOfBannerLocation = dart.constFn(diagnostics$.EnumProperty$(banner.BannerLocation)))(),
    BuildContextL: () => (T$0.BuildContextL = dart.constFn(dart.legacy(framework.BuildContext)))(),
    BuildContextLToWidgetL: () => (T$0.BuildContextLToWidgetL = dart.constFn(dart.fnType(T$.WidgetL(), [T$0.BuildContextL()])))(),
    BuildContextLToLWidgetL: () => (T$0.BuildContextLToLWidgetL = dart.constFn(dart.legacy(T$0.BuildContextLToWidgetL())))(),
    LocaleL: () => (T$0.LocaleL = dart.constFn(dart.legacy(ui.Locale)))(),
    GlobalObjectKeyOfNavigatorState: () => (T$0.GlobalObjectKeyOfNavigatorState = dart.constFn(framework.GlobalObjectKey$(navigator$.NavigatorState)))(),
    IdentityMapOfString$Locale: () => (T$0.IdentityMapOfString$Locale = dart.constFn(_js_helper.IdentityMap$(core.String, ui.Locale)))(),
    IdentityMapOfStringN$Locale: () => (T$0.IdentityMapOfStringN$Locale = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), ui.Locale)))(),
    SyncIterableOfLocalizationsDelegate: () => (T$0.SyncIterableOfLocalizationsDelegate = dart.constFn(_js_helper.SyncIterable$(localizations.LocalizationsDelegate)))(),
    LocalizationsDelegateToType: () => (T$0.LocalizationsDelegateToType = dart.constFn(dart.fnType(core.Type, [localizations.LocalizationsDelegate])))(),
    TypeToString: () => (T$0.TypeToString = dart.constFn(dart.fnType(core.String, [core.Type])))(),
    RouterOfObject: () => (T$0.RouterOfObject = dart.constFn(router.Router$(core.Object)))(),
    BuildContextToTitle: () => (T$0.BuildContextToTitle = dart.constFn(dart.fnType(title$.Title, [framework.BuildContext])))(),
    JSArrayOfLocale: () => (T$0.JSArrayOfLocale = dart.constFn(_interceptors.JSArray$(ui.Locale)))(),
    JSArrayOfWidgetsBindingObserver: () => (T$0.JSArrayOfWidgetsBindingObserver = dart.constFn(_interceptors.JSArray$(binding$5.WidgetsBindingObserver)))(),
    IterableOfDiagnosticsNodeToIterableOfDiagnosticsNode: () => (T$0.IterableOfDiagnosticsNodeToIterableOfDiagnosticsNode = dart.constFn(dart.fnType(T$.IterableOfDiagnosticsNode(), [T$.IterableOfDiagnosticsNode()])))(),
    PartialStackFrameL: () => (T$0.PartialStackFrameL = dart.constFn(dart.legacy(assertions.PartialStackFrame)))(),
    MapOfString$Object: () => (T$0.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    FutureOfMapOfString$Object: () => (T$0.FutureOfMapOfString$Object = dart.constFn(async.Future$(T$0.MapOfString$Object())))(),
    MapOfString$StringToFutureOfMapOfString$Object: () => (T$0.MapOfString$StringToFutureOfMapOfString$Object = dart.constFn(dart.fnType(T$0.FutureOfMapOfString$Object(), [T$.MapOfString$String()])))(),
    IdentityMapOfString$String: () => (T$0.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    FutureOfMapOfString$String: () => (T$0.FutureOfMapOfString$String = dart.constFn(async.Future$(T$.MapOfString$String())))(),
    MapOfString$ObjectToFutureOfMapOfString$String: () => (T$0.MapOfString$ObjectToFutureOfMapOfString$String = dart.constFn(dart.fnType(T$0.FutureOfMapOfString$String(), [T$0.MapOfString$Object()])))(),
    ListOfWidgetsBindingObserver: () => (T$0.ListOfWidgetsBindingObserver = dart.constFn(core.List$(binding$5.WidgetsBindingObserver)))(),
    ListOfFrameTiming: () => (T$0.ListOfFrameTiming = dart.constFn(core.List$(ui.FrameTiming)))(),
    ListOfFrameTimingTovoid: () => (T$0.ListOfFrameTimingTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfFrameTiming()])))(),
    RenderObjectToWidgetAdapterOfRenderBox: () => (T$0.RenderObjectToWidgetAdapterOfRenderBox = dart.constFn(binding$5.RenderObjectToWidgetAdapter$(box$.RenderBox)))(),
    RenderObjectToWidgetElementOfRenderBox: () => (T$0.RenderObjectToWidgetElementOfRenderBox = dart.constFn(binding$5.RenderObjectToWidgetElement$(box$.RenderBox)))(),
    RenderObjectToWidgetElementNOfRenderBox: () => (T$0.RenderObjectToWidgetElementNOfRenderBox = dart.constFn(dart.nullable(T$0.RenderObjectToWidgetElementOfRenderBox())))(),
    GlobalObjectKeyOfStateOfStatefulWidget: () => (T$0.GlobalObjectKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalObjectKey$(T$.StateOfStatefulWidget())))(),
    CustomClipperOfRect: () => (T$0.CustomClipperOfRect = dart.constFn(proxy_box.CustomClipper$(ui.Rect)))(),
    DiagnosticsPropertyOfCustomClipperOfRect: () => (T$0.DiagnosticsPropertyOfCustomClipperOfRect = dart.constFn(diagnostics$.DiagnosticsProperty$(T$0.CustomClipperOfRect())))(),
    DiagnosticsPropertyOfBorderRadius: () => (T$0.DiagnosticsPropertyOfBorderRadius = dart.constFn(diagnostics$.DiagnosticsProperty$(border_radius.BorderRadius)))(),
    CustomClipperOfRRect: () => (T$0.CustomClipperOfRRect = dart.constFn(proxy_box.CustomClipper$(ui.RRect)))(),
    DiagnosticsPropertyOfCustomClipperOfRRect: () => (T$0.DiagnosticsPropertyOfCustomClipperOfRRect = dart.constFn(diagnostics$.DiagnosticsProperty$(T$0.CustomClipperOfRRect())))(),
    BuildContextToClipPath: () => (T$0.BuildContextToClipPath = dart.constFn(dart.fnType(basic.ClipPath, [framework.BuildContext])))(),
    CustomClipperOfPath: () => (T$0.CustomClipperOfPath = dart.constFn(proxy_box.CustomClipper$(ui.Path)))(),
    DiagnosticsPropertyOfCustomClipperOfPath: () => (T$0.DiagnosticsPropertyOfCustomClipperOfPath = dart.constFn(diagnostics$.DiagnosticsProperty$(T$0.CustomClipperOfPath())))(),
    EnumPropertyOfBoxShape: () => (T$0.EnumPropertyOfBoxShape = dart.constFn(diagnostics$.EnumProperty$(box_border.BoxShape)))(),
    ValueKeyOfObject: () => (T$0.ValueKeyOfObject = dart.constFn(key.ValueKey$(core.Object)))(),
    BoxConstraintsToBoxConstraints: () => (T$0.BoxConstraintsToBoxConstraints = dart.constFn(dart.fnType(box$.BoxConstraints, [box$.BoxConstraints])))(),
    LinkedMapOfBoxConstraintsToBoxConstraints$String: () => (T$0.LinkedMapOfBoxConstraintsToBoxConstraints$String = dart.constFn(_js_helper.LinkedMap$(T$0.BoxConstraintsToBoxConstraints(), core.String)))(),
    EnumPropertyOfAxis: () => (T$0.EnumPropertyOfAxis = dart.constFn(diagnostics$.EnumProperty$(basic_types.Axis)))(),
    DiagnosticsPropertyOfSize: () => (T$0.DiagnosticsPropertyOfSize = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.Size)))(),
    EnumPropertyOfStackFit: () => (T$0.EnumPropertyOfStackFit = dart.constFn(diagnostics$.EnumProperty$(stack.StackFit)))(),
    EnumPropertyOfClip: () => (T$0.EnumPropertyOfClip = dart.constFn(diagnostics$.EnumProperty$(ui.Clip)))(),
    EnumPropertyOfMainAxisAlignment: () => (T$0.EnumPropertyOfMainAxisAlignment = dart.constFn(diagnostics$.EnumProperty$(flex$.MainAxisAlignment)))(),
    EnumPropertyOfMainAxisSize: () => (T$0.EnumPropertyOfMainAxisSize = dart.constFn(diagnostics$.EnumProperty$(flex$.MainAxisSize)))(),
    EnumPropertyOfCrossAxisAlignment: () => (T$0.EnumPropertyOfCrossAxisAlignment = dart.constFn(diagnostics$.EnumProperty$(flex$.CrossAxisAlignment)))(),
    EnumPropertyOfVerticalDirection: () => (T$0.EnumPropertyOfVerticalDirection = dart.constFn(diagnostics$.EnumProperty$(basic_types.VerticalDirection)))(),
    EnumPropertyOfTextBaseline: () => (T$0.EnumPropertyOfTextBaseline = dart.constFn(diagnostics$.EnumProperty$(ui.TextBaseline)))(),
    EnumPropertyOfWrapAlignment: () => (T$0.EnumPropertyOfWrapAlignment = dart.constFn(diagnostics$.EnumProperty$(wrap.WrapAlignment)))(),
    InlineSpanTobool: () => (T$0.InlineSpanTobool = dart.constFn(dart.fnType(core.bool, [inline_span.InlineSpan])))(),
    DiagnosticsPropertyOfStrutStyle: () => (T$0.DiagnosticsPropertyOfStrutStyle = dart.constFn(diagnostics$.DiagnosticsProperty$(strut_style.StrutStyle)))(),
    DiagnosticsPropertyOfImage: () => (T$0.DiagnosticsPropertyOfImage = dart.constFn(diagnostics$.DiagnosticsProperty$(ui.Image)))(),
    DiagnosticsPropertyOfMouseCursor: () => (T$0.DiagnosticsPropertyOfMouseCursor = dart.constFn(diagnostics$.DiagnosticsProperty$(mouse_cursor.MouseCursor)))(),
    ValueKeyOfKey: () => (T$0.ValueKeyOfKey = dart.constFn(key.ValueKey$(key.Key)))(),
    ValueKeyOfint: () => (T$0.ValueKeyOfint = dart.constFn(key.ValueKey$(core.int)))(),
    JSArrayOfRepaintBoundary: () => (T$0.JSArrayOfRepaintBoundary = dart.constFn(_interceptors.JSArray$(basic.RepaintBoundary)))(),
    DiagnosticsPropertyOfSemanticsProperties: () => (T$0.DiagnosticsPropertyOfSemanticsProperties = dart.constFn(diagnostics$.DiagnosticsProperty$(semantics.SemanticsProperties)))(),
    ContextActionOfIntent: () => (T$0.ContextActionOfIntent = dart.constFn(actions$.ContextAction$(actions$.Intent)))(),
    LinkedHashSetOfActionOfIntent: () => (T$0.LinkedHashSetOfActionOfIntent = dart.constFn(collection.LinkedHashSet$(T$.ActionOfIntent())))(),
    FocusableActionDetectorTobool: () => (T$0.FocusableActionDetectorTobool = dart.constFn(dart.fnType(core.bool, [actions$.FocusableActionDetector])))(),
    VoidToBuildContext: () => (T$0.VoidToBuildContext = dart.constFn(dart.fnType(framework.BuildContext, [])))(),
    BuildContextTodynamic: () => (T$0.BuildContextTodynamic = dart.constFn(dart.fnType(dart.dynamic, [framework.BuildContext])))()
  };
  var S$ = {
    child: dart.privateName(widget_span, "WidgetSpan.child"),
    _name: dart.privateName(ui, "_name"),
    $length: dartx.length,
    $_get: dartx._get,
    $runtimeType: dartx.runtimeType,
    _layer: dart.privateName(widget_inspector, "_layer"),
    OffsetBase__dy: dart.privateName(ui, "OffsetBase._dy"),
    OffsetBase__dx: dart.privateName(ui, "OffsetBase._dx"),
    _main: dart.privateName(widget_inspector, "_main"),
    _screenshot: dart.privateName(widget_inspector, "_screenshot"),
    _screenshotCurrentLayer: dart.privateName(widget_inspector, "_screenshotCurrentLayer"),
    _screenshotRecorder: dart.privateName(widget_inspector, "_screenshotRecorder"),
    _screenshotCanvas: dart.privateName(widget_inspector, "_screenshotCanvas"),
    _multicastCanvas: dart.privateName(widget_inspector, "_multicastCanvas"),
    _data: dart.privateName(widget_inspector, "_data"),
    _startRecordingScreenshot: dart.privateName(widget_inspector, "_startRecordingScreenshot"),
    _isScreenshotRecording: dart.privateName(widget_inspector, "_isScreenshotRecording"),
    _stopRecordingScreenshotIfNeeded: dart.privateName(widget_inspector, "_stopRecordingScreenshotIfNeeded"),
    _serializeRingIndex: dart.privateName(widget_inspector, "_serializeRingIndex"),
    _nextId: dart.privateName(widget_inspector, "_nextId"),
    _pubRootDirectories: dart.privateName(widget_inspector, "_pubRootDirectories"),
    _trackRebuildDirtyWidgets: dart.privateName(widget_inspector, "_trackRebuildDirtyWidgets"),
    _trackRepaintWidgets: dart.privateName(widget_inspector, "_trackRepaintWidgets"),
    _structuredExceptionHandler: dart.privateName(widget_inspector, "_structuredExceptionHandler"),
    __WidgetInspectorService__registerServiceExtensionCallback: dart.privateName(widget_inspector, "_#WidgetInspectorService#_registerServiceExtensionCallback"),
    _registerServiceExtensionCallback: dart.privateName(widget_inspector, "_registerServiceExtensionCallback"),
    __WidgetInspectorService__registerServiceExtensionCallback_isSet: dart.privateName(widget_inspector, "_#WidgetInspectorService#_registerServiceExtensionCallback#isSet"),
    _errorsSinceReload: dart.privateName(widget_inspector, "_errorsSinceReload"),
    _widgetCreationTracked: dart.privateName(widget_inspector, "_widgetCreationTracked"),
    __WidgetInspectorService__frameStart: dart.privateName(widget_inspector, "_#WidgetInspectorService#_frameStart"),
    _frameStart: dart.privateName(widget_inspector, "_frameStart"),
    __WidgetInspectorService__frameStart_isSet: dart.privateName(widget_inspector, "_#WidgetInspectorService#_frameStart#isSet"),
    _serializeRing: dart.privateName(widget_inspector, "_serializeRing"),
    _groups: dart.privateName(widget_inspector, "_groups"),
    _idToReferenceData: dart.privateName(widget_inspector, "_idToReferenceData"),
    _objectToId: dart.privateName(widget_inspector, "_objectToId"),
    _registerSignalServiceExtension: dart.privateName(widget_inspector, "_registerSignalServiceExtension"),
    _registerObjectGroupServiceExtension: dart.privateName(widget_inspector, "_registerObjectGroupServiceExtension"),
    _registerBoolServiceExtension: dart.privateName(widget_inspector, "_registerBoolServiceExtension"),
    _postExtensionStateChangedEvent: dart.privateName(widget_inspector, "_postExtensionStateChangedEvent"),
    _registerServiceExtensionWithArg: dart.privateName(widget_inspector, "_registerServiceExtensionWithArg"),
    _registerServiceExtensionVarArgs: dart.privateName(widget_inspector, "_registerServiceExtensionVarArgs"),
    _reportError: dart.privateName(widget_inspector, "_reportError"),
    _resetErrorCount: dart.privateName(widget_inspector, "_resetErrorCount"),
    _clearStats: dart.privateName(widget_inspector, "_clearStats"),
    _decrementReferenceCount: dart.privateName(widget_inspector, "_decrementReferenceCount"),
    _devToolsInspectorUriForElement: dart.privateName(widget_inspector, "_devToolsInspectorUriForElement"),
    _getParentChain: dart.privateName(widget_inspector, "_getParentChain"),
    _pathNodeToJson: dart.privateName(widget_inspector, "_pathNodeToJson"),
    _getRawElementParentChain: dart.privateName(widget_inspector, "_getRawElementParentChain"),
    _getElementParentChain: dart.privateName(widget_inspector, "_getElementParentChain"),
    _getRenderObjectParentChain: dart.privateName(widget_inspector, "_getRenderObjectParentChain"),
    _nodeToJson: dart.privateName(widget_inspector, "_nodeToJson"),
    _isValueCreatedByLocalProject: dart.privateName(widget_inspector, "_isValueCreatedByLocalProject"),
    _isLocalCreationLocation: dart.privateName(widget_inspector, "_isLocalCreationLocation"),
    _safeJsonEncode: dart.privateName(widget_inspector, "_safeJsonEncode"),
    _truncateNodes: dart.privateName(widget_inspector, "_truncateNodes"),
    _nodesToJson: dart.privateName(widget_inspector, "_nodesToJson"),
    _getProperties: dart.privateName(widget_inspector, "_getProperties"),
    _getChildren: dart.privateName(widget_inspector, "_getChildren"),
    _getChildrenSummaryTree: dart.privateName(widget_inspector, "_getChildrenSummaryTree"),
    _getChildrenDetailsSubtree: dart.privateName(widget_inspector, "_getChildrenDetailsSubtree"),
    _shouldShowInSummaryTree: dart.privateName(widget_inspector, "_shouldShowInSummaryTree"),
    _getChildrenFiltered: dart.privateName(widget_inspector, "_getChildrenFiltered"),
    _filterChildren: dart.privateName(widget_inspector, "_filterChildren"),
    _getRootWidget: dart.privateName(widget_inspector, "_getRootWidget"),
    _getRootWidgetSummaryTree: dart.privateName(widget_inspector, "_getRootWidgetSummaryTree"),
    _getRootRenderObject: dart.privateName(widget_inspector, "_getRootRenderObject"),
    _getDetailsSubtree: dart.privateName(widget_inspector, "_getDetailsSubtree"),
    _getSelectedRenderObject: dart.privateName(widget_inspector, "_getSelectedRenderObject"),
    _getSelectedWidget: dart.privateName(widget_inspector, "_getSelectedWidget"),
    _getSelectedSummaryWidget: dart.privateName(widget_inspector, "_getSelectedSummaryWidget"),
    _onFrameStart: dart.privateName(widget_inspector, "_onFrameStart"),
    _onFrameEnd: dart.privateName(widget_inspector, "_onFrameEnd"),
    _postStatsEvent: dart.privateName(widget_inspector, "_postStatsEvent"),
    _rebuildStats: dart.privateName(widget_inspector, "_rebuildStats"),
    _repaintStats: dart.privateName(widget_inspector, "_repaintStats"),
    _onRebuildWidget: dart.privateName(widget_inspector, "_onRebuildWidget"),
    _onPaint: dart.privateName(widget_inspector, "_onPaint"),
    _serializeRing$1: dart.privateName(widget_inspector, "WidgetInspectorService._serializeRing"),
    _serializeRingIndex$1: dart.privateName(widget_inspector, "WidgetInspectorService._serializeRingIndex"),
    selection: dart.privateName(widget_inspector, "WidgetInspectorService.selection"),
    selectionChangedCallback: dart.privateName(widget_inspector, "WidgetInspectorService.selectionChangedCallback"),
    _groups$1: dart.privateName(widget_inspector, "WidgetInspectorService._groups"),
    _idToReferenceData$1: dart.privateName(widget_inspector, "WidgetInspectorService._idToReferenceData"),
    _objectToId$1: dart.privateName(widget_inspector, "WidgetInspectorService._objectToId"),
    _nextId$1: dart.privateName(widget_inspector, "WidgetInspectorService._nextId"),
    _pubRootDirectories$1: dart.privateName(widget_inspector, "WidgetInspectorService._pubRootDirectories"),
    _trackRebuildDirtyWidgets$1: dart.privateName(widget_inspector, "WidgetInspectorService._trackRebuildDirtyWidgets"),
    _trackRepaintWidgets$1: dart.privateName(widget_inspector, "WidgetInspectorService._trackRepaintWidgets"),
    _structuredExceptionHandler$1: dart.privateName(widget_inspector, "WidgetInspectorService._structuredExceptionHandler"),
    _$35WidgetInspectorService$35_registerServiceExtensionCallback: dart.privateName(widget_inspector, "WidgetInspectorService._#WidgetInspectorService#_registerServiceExtensionCallback"),
    _$35WidgetInspectorService$35_registerServiceExtensionCallback$35isSet: dart.privateName(widget_inspector, "WidgetInspectorService._#WidgetInspectorService#_registerServiceExtensionCallback#isSet"),
    _errorsSinceReload$1: dart.privateName(widget_inspector, "WidgetInspectorService._errorsSinceReload"),
    _widgetCreationTracked$1: dart.privateName(widget_inspector, "WidgetInspectorService._widgetCreationTracked"),
    _$35WidgetInspectorService$35_frameStart: dart.privateName(widget_inspector, "WidgetInspectorService._#WidgetInspectorService#_frameStart"),
    _$35WidgetInspectorService$35_frameStart$35isSet: dart.privateName(widget_inspector, "WidgetInspectorService._#WidgetInspectorService#_frameStart#isSet"),
    _rebuildStats$1: dart.privateName(widget_inspector, "WidgetInspectorService._rebuildStats"),
    _repaintStats$1: dart.privateName(widget_inspector, "WidgetInspectorService._repaintStats"),
    $containsKey: dartx.containsKey,
    $add: dartx.add,
    $_set: dartx._set,
    $trimRight: dartx.trimRight,
    $buffer: dartx.buffer,
    $clear: dartx.clear,
    $remove: dartx.remove,
    $forEach: dartx.forEach,
    $putIfAbsent: dartx.putIfAbsent,
    $map: dartx.map,
    $toList: dartx.toList,
    $indexOf: dartx.indexOf,
    $substring: dartx.substring,
    $take: dartx.take,
    $reversed: dartx.reversed,
    $contains: dartx.contains,
    $startsWith: dartx.startsWith,
    $modulo: dartx['%'],
    $every: dartx.every,
    $where: dartx.where,
    $isNotEmpty: dartx.isNotEmpty,
    $addAll: dartx.addAll,
    _Location_parameterLocations: dart.privateName(widget_inspector, "_Location.parameterLocations"),
    _Location_name: dart.privateName(widget_inspector, "_Location.name"),
    _Location_column: dart.privateName(widget_inspector, "_Location.column"),
    _Location_line: dart.privateName(widget_inspector, "_Location.line"),
    _Location_file: dart.privateName(widget_inspector, "_Location.file"),
    _count: dart.privateName(widget_inspector, "_count"),
    _stats: dart.privateName(widget_inspector, "_stats"),
    _location: dart.privateName(widget_inspector, "_location"),
    key: dart.privateName(framework, "Widget.key"),
    _location$1: dart.privateName(framework, "Widget._location"),
    $_equals: dartx._equals,
    $hashCode: dartx.hashCode,
    child$1: dart.privateName(widget_inspector, "WidgetInspector.child"),
    selectButtonBuilder: dart.privateName(widget_inspector, "WidgetInspector.selectButtonBuilder"),
    _lastPointerLocation: dart.privateName(widget_inspector, "_lastPointerLocation"),
    _ignorePointerKey: dart.privateName(widget_inspector, "_ignorePointerKey"),
    _selectionChangedCallback: dart.privateName(widget_inspector, "_selectionChangedCallback"),
    _hitTestHelper: dart.privateName(widget_inspector, "_hitTestHelper"),
    $compareTo: dartx.compareTo,
    $sort: dartx.sort,
    _inspectAt: dart.privateName(widget_inspector, "_inspectAt"),
    _handlePanDown: dart.privateName(widget_inspector, "_handlePanDown"),
    _handlePanUpdate: dart.privateName(widget_inspector, "_handlePanUpdate"),
    _handlePanEnd: dart.privateName(widget_inspector, "_handlePanEnd"),
    _handleTap: dart.privateName(widget_inspector, "_handleTap"),
    _handleEnableSelect: dart.privateName(widget_inspector, "_handleEnableSelect"),
    _widget: dart.privateName(framework, "State._widget"),
    _debugLifecycleState: dart.privateName(framework, "_debugLifecycleState"),
    _element: dart.privateName(framework, "_element"),
    _widget$1: dart.privateName(framework, "_widget"),
    _debugTypesAreRight: dart.privateName(framework, "_debugTypesAreRight"),
    _candidates: dart.privateName(widget_inspector, "_candidates"),
    _index: dart.privateName(widget_inspector, "_index"),
    _current: dart.privateName(widget_inspector, "_current"),
    _currentElement: dart.privateName(widget_inspector, "_currentElement"),
    _computeCurrent: dart.privateName(widget_inspector, "_computeCurrent"),
    selection$1: dart.privateName(widget_inspector, "_InspectorOverlay.selection"),
    _selection: dart.privateName(widget_inspector, "_selection"),
    overlayRect: dart.privateName(widget_inspector, "_InspectorOverlayRenderState.overlayRect"),
    selected: dart.privateName(widget_inspector, "_InspectorOverlayRenderState.selected"),
    candidates: dart.privateName(widget_inspector, "_InspectorOverlayRenderState.candidates"),
    tooltip: dart.privateName(widget_inspector, "_InspectorOverlayRenderState.tooltip"),
    textDirection: dart.privateName(widget_inspector, "_InspectorOverlayRenderState.textDirection"),
    _lastState: dart.privateName(widget_inspector, "_lastState"),
    ___InspectorOverlayLayer__picture: dart.privateName(widget_inspector, "_#_InspectorOverlayLayer#_picture"),
    ___InspectorOverlayLayer__picture_isSet: dart.privateName(widget_inspector, "_#_InspectorOverlayLayer#_picture#isSet"),
    _textPainter: dart.privateName(widget_inspector, "_textPainter"),
    _textPainterMaxWidth: dart.privateName(widget_inspector, "_textPainterMaxWidth"),
    _picture: dart.privateName(widget_inspector, "_picture"),
    _isInInspectorRenderObjectTree: dart.privateName(widget_inspector, "_isInInspectorRenderObjectTree"),
    _buildPicture: dart.privateName(widget_inspector, "_buildPicture"),
    _paintDescription: dart.privateName(widget_inspector, "_paintDescription"),
    file: dart.privateName(widget_inspector, "_Location.file"),
    line: dart.privateName(widget_inspector, "_Location.line"),
    column: dart.privateName(widget_inspector, "_Location.column"),
    name: dart.privateName(widget_inspector, "_Location.name"),
    parameterLocations: dart.privateName(widget_inspector, "_Location.parameterLocations"),
    $join: dartx.join,
    service: dart.privateName(widget_inspector, "InspectorSerializationDelegate.service"),
    groupName: dart.privateName(widget_inspector, "InspectorSerializationDelegate.groupName"),
    summaryTree: dart.privateName(widget_inspector, "InspectorSerializationDelegate.summaryTree"),
    maxDescendentsTruncatableNode: dart.privateName(widget_inspector, "InspectorSerializationDelegate.maxDescendentsTruncatableNode"),
    includeProperties: dart.privateName(widget_inspector, "InspectorSerializationDelegate.includeProperties"),
    subtreeDepth: dart.privateName(widget_inspector, "InspectorSerializationDelegate.subtreeDepth"),
    expandPropertyValues: dart.privateName(widget_inspector, "InspectorSerializationDelegate.expandPropertyValues"),
    addAdditionalPropertiesCallback: dart.privateName(widget_inspector, "InspectorSerializationDelegate.addAdditionalPropertiesCallback"),
    _nodesCreatedByLocalProject: dart.privateName(widget_inspector, "_nodesCreatedByLocalProject"),
    _interactive: dart.privateName(widget_inspector, "_interactive"),
    $isEmpty: dartx.isEmpty,
    $first: dartx.first,
    Color_value: dart.privateName(ui, "Color.value"),
    TextStyle_fontFeatures: dart.privateName(text_style, "TextStyle.fontFeatures"),
    TextStyle_shadows: dart.privateName(text_style, "TextStyle.shadows"),
    TextStyle_debugLabel: dart.privateName(text_style, "TextStyle.debugLabel"),
    TextStyle_decorationThickness: dart.privateName(text_style, "TextStyle.decorationThickness"),
    TextStyle_decorationStyle: dart.privateName(text_style, "TextStyle.decorationStyle"),
    TextStyle_decorationColor: dart.privateName(text_style, "TextStyle.decorationColor"),
    TextStyle_decoration: dart.privateName(text_style, "TextStyle.decoration"),
    TextStyle_background: dart.privateName(text_style, "TextStyle.background"),
    TextStyle_foreground: dart.privateName(text_style, "TextStyle.foreground"),
    TextStyle_locale: dart.privateName(text_style, "TextStyle.locale"),
    TextStyle_leadingDistribution: dart.privateName(text_style, "TextStyle.leadingDistribution"),
    TextStyle_height: dart.privateName(text_style, "TextStyle.height"),
    TextStyle_textBaseline: dart.privateName(text_style, "TextStyle.textBaseline"),
    TextStyle_wordSpacing: dart.privateName(text_style, "TextStyle.wordSpacing"),
    TextStyle_letterSpacing: dart.privateName(text_style, "TextStyle.letterSpacing"),
    TextStyle_fontStyle: dart.privateName(text_style, "TextStyle.fontStyle"),
    TextStyle_fontWeight: dart.privateName(text_style, "TextStyle.fontWeight"),
    TextStyle_fontSize: dart.privateName(text_style, "TextStyle.fontSize"),
    TextStyle__package: dart.privateName(text_style, "TextStyle._package"),
    TextStyle__fontFamilyFallback: dart.privateName(text_style, "TextStyle._fontFamilyFallback"),
    TextStyle_fontFamily: dart.privateName(text_style, "TextStyle.fontFamily"),
    TextStyle_backgroundColor: dart.privateName(text_style, "TextStyle.backgroundColor"),
    TextStyle_color: dart.privateName(text_style, "TextStyle.color"),
    TextStyle_inherit: dart.privateName(text_style, "TextStyle.inherit"),
    title: dart.privateName(title$, "Title.title"),
    color: dart.privateName(title$, "Title.color"),
    child$2: dart.privateName(title$, "Title.child"),
    child$3: dart.privateName(semantics_debugger, "SemanticsDebugger.child"),
    labelStyle: dart.privateName(semantics_debugger, "SemanticsDebugger.labelStyle"),
    ___SemanticsDebuggerState__client: dart.privateName(semantics_debugger, "_#_SemanticsDebuggerState#_client"),
    ___SemanticsDebuggerState__client_isSet: dart.privateName(semantics_debugger, "_#_SemanticsDebuggerState#_client#isSet"),
    _lastPointerDownLocation: dart.privateName(semantics_debugger, "_lastPointerDownLocation"),
    _client: dart.privateName(semantics_debugger, "_client"),
    _update: dart.privateName(semantics_debugger, "_update"),
    _handlePointerDown: dart.privateName(semantics_debugger, "_handlePointerDown"),
    _performAction: dart.privateName(semantics_debugger, "_performAction"),
    _handleTap$1: dart.privateName(semantics_debugger, "_handleTap"),
    _handleLongPress: dart.privateName(semantics_debugger, "_handleLongPress"),
    $abs: dartx.abs,
    $sign: dartx.sign,
    _handlePanEnd$1: dart.privateName(semantics_debugger, "_handlePanEnd"),
    _pipelineOwner: dart.privateName(semantics_debugger, "_pipelineOwner"),
    _semanticsHandle: dart.privateName(semantics_debugger, "_semanticsHandle"),
    _didUpdateSemantics: dart.privateName(semantics_debugger, "_didUpdateSemantics"),
    owner: dart.privateName(semantics_debugger, "_SemanticsDebuggerPainter.owner"),
    generation: dart.privateName(semantics_debugger, "_SemanticsDebuggerPainter.generation"),
    pointerPosition: dart.privateName(semantics_debugger, "_SemanticsDebuggerPainter.pointerPosition"),
    devicePixelRatio: dart.privateName(semantics_debugger, "_SemanticsDebuggerPainter.devicePixelRatio"),
    labelStyle$1: dart.privateName(semantics_debugger, "_SemanticsDebuggerPainter.labelStyle"),
    _rootSemanticsNode: dart.privateName(semantics_debugger, "_rootSemanticsNode"),
    _findDepth: dart.privateName(semantics_debugger, "_findDepth"),
    _paint: dart.privateName(semantics_debugger, "_paint"),
    $insert: dartx.insert,
    $trim: dartx.trim,
    _paintMessage: dart.privateName(semantics_debugger, "_paintMessage"),
    location: dart.privateName(router, "RouteInformation.location"),
    state: dart.privateName(router, "RouteInformation.state"),
    routeInformationProvider: dart.privateName(router, "Router.routeInformationProvider"),
    routeInformationParser: dart.privateName(router, "Router.routeInformationParser"),
    routerDelegate: dart.privateName(router, "Router.routerDelegate"),
    backButtonDispatcher: dart.privateName(router, "Router.backButtonDispatcher"),
    _setStateWithExplicitReportStatus: dart.privateName(router, "_setStateWithExplicitReportStatus"),
    _name$1: dart.privateName(router, "_name"),
    _currentRouteInformationParserTransaction: dart.privateName(router, "_currentRouteInformationParserTransaction"),
    _currentRouterDelegateTransaction: dart.privateName(router, "_currentRouterDelegateTransaction"),
    ___RouterState__currentIntentionToReport: dart.privateName(router, "_#_RouterState#_currentIntentionToReport"),
    ___RouterState__currentIntentionToReport_isSet: dart.privateName(router, "_#_RouterState#_currentIntentionToReport#isSet"),
    _routeInformationReportingTaskScheduled: dart.privateName(router, "_routeInformationReportingTaskScheduled"),
    _lastSeenLocation: dart.privateName(router, "_lastSeenLocation"),
    _currentIntentionToReport: dart.privateName(router, "_currentIntentionToReport"),
    _handleRouteInformationProviderNotification: dart.privateName(router, "_handleRouteInformationProviderNotification"),
    _handleBackButtonDispatcherNotification: dart.privateName(router, "_handleBackButtonDispatcherNotification"),
    _handleRouterDelegateNotification: dart.privateName(router, "_handleRouterDelegateNotification"),
    _processInitialRoute: dart.privateName(router, "_processInitialRoute"),
    _reportRouteInformation: dart.privateName(router, "_reportRouteInformation"),
    _scheduleRouteInformationReportingTask: dart.privateName(router, "_scheduleRouteInformationReportingTask"),
    _retrieveNewRouteInformation: dart.privateName(router, "_retrieveNewRouteInformation"),
    FlutterErrorDetails_silent: dart.privateName(assertions, "FlutterErrorDetails.silent"),
    FlutterErrorDetails_informationCollector: dart.privateName(assertions, "FlutterErrorDetails.informationCollector"),
    FlutterErrorDetails_stackFilter: dart.privateName(assertions, "FlutterErrorDetails.stackFilter"),
    FlutterErrorDetails_context: dart.privateName(assertions, "FlutterErrorDetails.context"),
    FlutterErrorDetails_library: dart.privateName(assertions, "FlutterErrorDetails.library"),
    FlutterErrorDetails_stack: dart.privateName(assertions, "FlutterErrorDetails.stack"),
    FlutterErrorDetails_exception: dart.privateName(assertions, "FlutterErrorDetails.exception"),
    _maybeNeedToReportRouteInformation: dart.privateName(router, "_maybeNeedToReportRouteInformation"),
    _verifyRouteInformationParserStillCurrent: dart.privateName(router, "_verifyRouteInformationParserStillCurrent"),
    _verifyRouterDelegatePushStillCurrent: dart.privateName(router, "_verifyRouterDelegatePushStillCurrent"),
    _rebuild: dart.privateName(router, "_rebuild"),
    _verifyRouterDelegatePopStillCurrent: dart.privateName(router, "_verifyRouterDelegatePopStillCurrent"),
    routeInformationProvider$1: dart.privateName(router, "_RouterScope.routeInformationProvider"),
    backButtonDispatcher$1: dart.privateName(router, "_RouterScope.backButtonDispatcher"),
    routeInformationParser$1: dart.privateName(router, "_RouterScope.routeInformationParser"),
    routerDelegate$1: dart.privateName(router, "_RouterScope.routerDelegate"),
    routerState: dart.privateName(router, "_RouterScope.routerState"),
    child$4: dart.privateName(framework, "ProxyWidget.child"),
    _callbacks: dart.privateName(router, "_callbacks"),
    $single: dartx.single,
    __BackButtonDispatcher__children: dart.privateName(router, "_#BackButtonDispatcher#_children"),
    __BackButtonDispatcher__children_isSet: dart.privateName(router, "_#BackButtonDispatcher#_children#isSet"),
    _children: dart.privateName(router, "_children"),
    parent: dart.privateName(router, "ChildBackButtonDispatcher.parent"),
    child$5: dart.privateName(router, "BackButtonListener.child"),
    onBackButtonPressed: dart.privateName(router, "BackButtonListener.onBackButtonPressed"),
    _value: dart.privateName(router, "_value"),
    _platformReportsNewRouteInformation: dart.privateName(router, "_platformReportsNewRouteInformation"),
    optionsMask: dart.privateName(performance_overlay$, "PerformanceOverlay.optionsMask"),
    rasterizerThreshold: dart.privateName(performance_overlay$, "PerformanceOverlay.rasterizerThreshold"),
    checkerboardRasterCacheImages: dart.privateName(performance_overlay$, "PerformanceOverlay.checkerboardRasterCacheImages"),
    checkerboardOffscreenLayers: dart.privateName(performance_overlay$, "PerformanceOverlay.checkerboardOffscreenLayers"),
    $leftShift: dartx['<<'],
    color$1: dart.privateName(modal_barrier, "ModalBarrier.color"),
    dismissible: dart.privateName(modal_barrier, "ModalBarrier.dismissible"),
    barrierSemanticsDismissible: dart.privateName(modal_barrier, "ModalBarrier.barrierSemanticsDismissible"),
    semanticsLabel: dart.privateName(modal_barrier, "ModalBarrier.semanticsLabel"),
    _name$2: dart.privateName(platform, "_name"),
    BoxConstraints_maxHeight: dart.privateName(box$, "BoxConstraints.maxHeight"),
    BoxConstraints_minHeight: dart.privateName(box$, "BoxConstraints.minHeight"),
    BoxConstraints_maxWidth: dart.privateName(box$, "BoxConstraints.maxWidth"),
    BoxConstraints_minWidth: dart.privateName(box$, "BoxConstraints.minWidth"),
    dismissible$1: dart.privateName(modal_barrier, "AnimatedModalBarrier.dismissible"),
    semanticsLabel$1: dart.privateName(modal_barrier, "AnimatedModalBarrier.semanticsLabel"),
    barrierSemanticsDismissible$1: dart.privateName(modal_barrier, "AnimatedModalBarrier.barrierSemanticsDismissible"),
    listenable: dart.privateName(transitions, "AnimatedWidget.listenable"),
    onDismiss: dart.privateName(modal_barrier, "_ModalBarrierSemanticsDelegate.onDismiss"),
    onAnyTapUp: dart.privateName(modal_barrier, "_AnyTapGestureRecognizerFactory.onAnyTapUp"),
    _debugAssertTypeMatches: dart.privateName(gesture_detector, "_debugAssertTypeMatches"),
    child$6: dart.privateName(modal_barrier, "_ModalBarrierGestureDetector.child"),
    onDismiss$1: dart.privateName(modal_barrier, "_ModalBarrierGestureDetector.onDismiss"),
    _overlayEntries: dart.privateName(routes, "_overlayEntries"),
    _navigator: dart.privateName(navigator$, "_navigator"),
    _restorationScopeId: dart.privateName(navigator$, "_restorationScopeId"),
    _popCompleter: dart.privateName(navigator$, "_popCompleter"),
    _settings: dart.privateName(navigator$, "_settings"),
    RouteSettings_arguments: dart.privateName(navigator$, "RouteSettings.arguments"),
    RouteSettings_name: dart.privateName(navigator$, "RouteSettings.name"),
    _updateSettings: dart.privateName(navigator$, "_updateSettings"),
    _updateRestorationId: dart.privateName(navigator$, "_updateRestorationId"),
    _history: dart.privateName(navigator$, "_history"),
    $cast: dartx.cast,
    $lastWhere: dartx.lastWhere,
    $firstWhere: dartx.firstWhere,
    _transitionCompleter: dart.privateName(routes, "_transitionCompleter"),
    _animation: dart.privateName(routes, "_animation"),
    _controller: dart.privateName(routes, "_controller"),
    _secondaryAnimation: dart.privateName(routes, "_secondaryAnimation"),
    _result: dart.privateName(routes, "_result"),
    _trainHoppingListenerRemover: dart.privateName(routes, "_trainHoppingListenerRemover"),
    _name$3: dart.privateName(animation, "_name"),
    _handleStatusChanged: dart.privateName(routes, "_handleStatusChanged"),
    _updateSecondaryAnimation: dart.privateName(routes, "_updateSecondaryAnimation"),
    _setSecondaryAnimation: dart.privateName(routes, "_setSecondaryAnimation"),
    onRemove: dart.privateName(routes, "LocalHistoryEntry.onRemove"),
    _owner: dart.privateName(routes, "_owner"),
    _notifyRemoved: dart.privateName(routes, "_notifyRemoved"),
    _localHistory: dart.privateName(routes, "LocalHistoryRoute._localHistory"),
    _localHistory$1: dart.privateName(routes, "_localHistory"),
    $removeLast: dartx.removeLast,
    _listeners: dart.privateName(actions$, "_listeners"),
    isCurrent: dart.privateName(routes, "_ModalScopeStatus.isCurrent"),
    canPop: dart.privateName(routes, "_ModalScopeStatus.canPop"),
    route: dart.privateName(routes, "_ModalScopeStatus.route"),
    route$1: dart.privateName(routes, "_ModalScope.route"),
    _page: dart.privateName(routes, "_page"),
    ___ModalScopeState__listenable: dart.privateName(routes, "_#_ModalScopeState#_listenable"),
    ___ModalScopeState__listenable_isSet: dart.privateName(routes, "_#_ModalScopeState#_listenable#isSet"),
    _listenable: dart.privateName(routes, "_listenable"),
    _forceRebuildPage: dart.privateName(routes, "_forceRebuildPage"),
    _shouldIgnoreFocusRequest: dart.privateName(routes, "_shouldIgnoreFocusRequest"),
    _routeSetState: dart.privateName(routes, "_routeSetState"),
    _storageBucket: dart.privateName(routes, "_storageBucket"),
    _subtreeKey: dart.privateName(routes, "_subtreeKey"),
    filter: dart.privateName(routes, "ModalRoute.filter"),
    _offstage: dart.privateName(routes, "_offstage"),
    _animationProxy: dart.privateName(routes, "_animationProxy"),
    _secondaryAnimationProxy: dart.privateName(routes, "_secondaryAnimationProxy"),
    _willPopCallbacks: dart.privateName(routes, "_willPopCallbacks"),
    _scopeKey: dart.privateName(routes, "_scopeKey"),
    __ModalRoute__modalBarrier: dart.privateName(routes, "_#ModalRoute#_modalBarrier"),
    __ModalRoute__modalBarrier_isSet: dart.privateName(routes, "_#ModalRoute#_modalBarrier#isSet"),
    _modalScopeCache: dart.privateName(routes, "_modalScopeCache"),
    __ModalRoute__modalScope: dart.privateName(routes, "_#ModalRoute#_modalScope"),
    __ModalRoute__modalScope_isSet: dart.privateName(routes, "_#ModalRoute#_modalScope#isSet"),
    _modalBarrier: dart.privateName(routes, "_modalBarrier"),
    _modalScope: dart.privateName(routes, "_modalScope"),
    SemanticsSortKey_name: dart.privateName(semantics, "SemanticsSortKey.name"),
    OrdinalSortKey_order: dart.privateName(semantics, "OrdinalSortKey.order"),
    _buildModalBarrier: dart.privateName(routes, "_buildModalBarrier"),
    _buildModalScope: dart.privateName(routes, "_buildModalScope"),
    _listeners$1: dart.privateName(routes, "_listeners"),
    $keys: dartx.keys,
    Duration__duration: dart.privateName(core, "Duration._duration"),
    _pageBuilder: dart.privateName(routes, "_pageBuilder"),
    _barrierDismissible: dart.privateName(routes, "_barrierDismissible"),
    _barrierLabel: dart.privateName(routes, "_barrierLabel"),
    _barrierColor: dart.privateName(routes, "_barrierColor"),
    _transitionDuration: dart.privateName(routes, "_transitionDuration"),
    _transitionBuilder: dart.privateName(routes, "_transitionBuilder"),
    fullscreenDialog: dart.privateName(pages, "PageRoute.fullscreenDialog"),
    pageBuilder: dart.privateName(pages, "PageRouteBuilder.pageBuilder"),
    transitionsBuilder: dart.privateName(pages, "PageRouteBuilder.transitionsBuilder"),
    transitionDuration: dart.privateName(pages, "PageRouteBuilder.transitionDuration"),
    reverseTransitionDuration: dart.privateName(pages, "PageRouteBuilder.reverseTransitionDuration"),
    opaque: dart.privateName(pages, "PageRouteBuilder.opaque"),
    barrierDismissible: dart.privateName(pages, "PageRouteBuilder.barrierDismissible"),
    barrierColor: dart.privateName(pages, "PageRouteBuilder.barrierColor"),
    barrierLabel: dart.privateName(pages, "PageRouteBuilder.barrierLabel"),
    maintainState: dart.privateName(pages, "PageRouteBuilder.maintainState"),
    _name$4: dart.privateName(heroes, "_name"),
    tag: dart.privateName(heroes, "Hero.tag"),
    createRectTween: dart.privateName(heroes, "Hero.createRectTween"),
    child$7: dart.privateName(heroes, "Hero.child"),
    flightShuttleBuilder: dart.privateName(heroes, "Hero.flightShuttleBuilder"),
    placeholderBuilder: dart.privateName(heroes, "Hero.placeholderBuilder"),
    transitionOnUserGestures: dart.privateName(heroes, "Hero.transitionOnUserGestures"),
    _key: dart.privateName(heroes, "_key"),
    _placeholderSize: dart.privateName(heroes, "_placeholderSize"),
    _shouldIncludeChild: dart.privateName(heroes, "_shouldIncludeChild"),
    ___HeroFlightManifest_fromHeroLocation: dart.privateName(heroes, "_#_HeroFlightManifest#fromHeroLocation"),
    ___HeroFlightManifest_fromHeroLocation_isSet: dart.privateName(heroes, "_#_HeroFlightManifest#fromHeroLocation#isSet"),
    ___HeroFlightManifest_toHeroLocation: dart.privateName(heroes, "_#_HeroFlightManifest#toHeroLocation"),
    ___HeroFlightManifest_toHeroLocation_isSet: dart.privateName(heroes, "_#_HeroFlightManifest#toHeroLocation#isSet"),
    ___HeroFlightManifest_isValid: dart.privateName(heroes, "_#_HeroFlightManifest#isValid"),
    ___HeroFlightManifest_isValid_isSet: dart.privateName(heroes, "_#_HeroFlightManifest#isValid#isSet"),
    ___HeroFlight_heroRectTween: dart.privateName(heroes, "_#_HeroFlight#heroRectTween"),
    ___HeroFlight_heroRectTween_isSet: dart.privateName(heroes, "_#_HeroFlight#heroRectTween#isSet"),
    _heroOpacity: dart.privateName(heroes, "_heroOpacity"),
    ___HeroFlight__proxyAnimation: dart.privateName(heroes, "_#_HeroFlight#_proxyAnimation"),
    ___HeroFlight__proxyAnimation_isSet: dart.privateName(heroes, "_#_HeroFlight#_proxyAnimation#isSet"),
    ___HeroFlight_manifest: dart.privateName(heroes, "_#_HeroFlight#manifest"),
    ___HeroFlight_manifest_isSet: dart.privateName(heroes, "_#_HeroFlight#manifest#isSet"),
    _aborted: dart.privateName(heroes, "_aborted"),
    _scheduledPerformAnimtationUpdate: dart.privateName(heroes, "_scheduledPerformAnimtationUpdate"),
    _proxyAnimation: dart.privateName(heroes, "_proxyAnimation"),
    _handleAnimationUpdate: dart.privateName(heroes, "_handleAnimationUpdate"),
    _buildOverlay: dart.privateName(heroes, "_buildOverlay"),
    _performAnimationUpdate: dart.privateName(heroes, "_performAnimationUpdate"),
    createRectTween$1: dart.privateName(heroes, "HeroController.createRectTween"),
    _flights: dart.privateName(heroes, "_flights"),
    _maybeStartHeroTransition: dart.privateName(heroes, "_maybeStartHeroTransition"),
    $values: dartx.values,
    _startHeroTransition: dart.privateName(heroes, "_startHeroTransition"),
    $entries: dartx.entries,
    _defaultHeroFlightShuttleBuilder: dart.privateName(heroes, "_defaultHeroFlightShuttleBuilder"),
    _handleFlightEnded: dart.privateName(heroes, "_handleFlightEnded"),
    child$8: dart.privateName(heroes, "HeroMode.child"),
    enabled: dart.privateName(heroes, "HeroMode.enabled"),
    _name$5: dart.privateName(navigator$, "_name"),
    name$1: dart.privateName(navigator$, "RouteSettings.name"),
    $arguments: dart.privateName(navigator$, "RouteSettings.arguments"),
    key$1: dart.privateName(navigator$, "Page.key"),
    restorationId: dart.privateName(navigator$, "Page.restorationId"),
    controller: dart.privateName(navigator$, "HeroControllerScope.controller"),
    $toSet: dartx.toSet,
    _transition: dart.privateName(navigator$, "_transition"),
    $last: dartx.last,
    pages: dart.privateName(navigator$, "Navigator.pages"),
    onPopPage: dart.privateName(navigator$, "Navigator.onPopPage"),
    transitionDelegate: dart.privateName(navigator$, "Navigator.transitionDelegate"),
    initialRoute: dart.privateName(navigator$, "Navigator.initialRoute"),
    onGenerateRoute: dart.privateName(navigator$, "Navigator.onGenerateRoute"),
    onUnknownRoute: dart.privateName(navigator$, "Navigator.onUnknownRoute"),
    observers: dart.privateName(navigator$, "Navigator.observers"),
    restorationScopeId: dart.privateName(navigator$, "Navigator.restorationScopeId"),
    onGenerateInitialRoutes: dart.privateName(navigator$, "Navigator.onGenerateInitialRoutes"),
    reportsRouteUpdateToEngine: dart.privateName(navigator$, "Navigator.reportsRouteUpdateToEngine"),
    _routeNamed: dart.privateName(navigator$, "_routeNamed"),
    $split: dartx.split,
    $removeWhere: dartx.removeWhere,
    route$2: dart.privateName(navigator$, "_RouteEntry.route"),
    _reportRemovalToObserver: dart.privateName(navigator$, "_reportRemovalToObserver"),
    _isWaitingForExitingDecision: dart.privateName(navigator$, "_isWaitingForExitingDecision"),
    _debugLocked: dart.privateName(navigator$, "_debugLocked"),
    _observedRouteAdditions: dart.privateName(navigator$, "_observedRouteAdditions"),
    _flushHistoryUpdates: dart.privateName(navigator$, "_flushHistoryUpdates"),
    _observedRouteDeletions: dart.privateName(navigator$, "_observedRouteDeletions"),
    focusScopeNode: dart.privateName(navigator$, "NavigatorState.focusScopeNode"),
    userGestureInProgressNotifier: dart.privateName(navigator$, "NavigatorState.userGestureInProgressNotifier"),
    __NavigatorState__overlayKey: dart.privateName(navigator$, "_#NavigatorState#_overlayKey"),
    __NavigatorState__overlayKey_isSet: dart.privateName(navigator$, "_#NavigatorState#_overlayKey#isSet"),
    _serializableHistory: dart.privateName(navigator$, "_serializableHistory"),
    _heroControllerFromScope: dart.privateName(navigator$, "_heroControllerFromScope"),
    __NavigatorState__effectiveObservers: dart.privateName(navigator$, "_#NavigatorState#_effectiveObservers"),
    __NavigatorState__effectiveObservers_isSet: dart.privateName(navigator$, "_#NavigatorState#_effectiveObservers#isSet"),
    _rawNextPagelessRestorationScopeId: dart.privateName(navigator$, "_rawNextPagelessRestorationScopeId"),
    _lastAnnouncedRouteName: dart.privateName(navigator$, "_lastAnnouncedRouteName"),
    _debugUpdatingPage: dart.privateName(navigator$, "_debugUpdatingPage"),
    _userGesturesInProgressCount: dart.privateName(navigator$, "_userGesturesInProgressCount"),
    _activePointers: dart.privateName(navigator$, "_activePointers"),
    _overlayKey: dart.privateName(navigator$, "_overlayKey"),
    _effectiveObservers: dart.privateName(navigator$, "_effectiveObservers"),
    _updateHeroController: dart.privateName(navigator$, "_updateHeroController"),
    _nextPagelessRestorationScopeId: dart.privateName(navigator$, "_nextPagelessRestorationScopeId"),
    _updateEffectiveObservers: dart.privateName(navigator$, "_updateEffectiveObservers"),
    $plus: dartx['+'],
    _updatePages: dart.privateName(navigator$, "_updatePages"),
    _debugCheckDuplicatedPageKeys: dart.privateName(navigator$, "_debugCheckDuplicatedPageKeys"),
    _allRouteOverlayEntries: dart.privateName(navigator$, "_allRouteOverlayEntries"),
    _getRouteBefore: dart.privateName(navigator$, "_getRouteBefore"),
    $removeAt: dartx.removeAt,
    _flushObserverNotifications: dart.privateName(navigator$, "_flushObserverNotifications"),
    _flushRouteAnnouncement: dart.privateName(navigator$, "_flushRouteAnnouncement"),
    _getRouteAfter: dart.privateName(navigator$, "_getRouteAfter"),
    _getIndexBefore: dart.privateName(navigator$, "_getIndexBefore"),
    _pushEntry: dart.privateName(navigator$, "_pushEntry"),
    _pushReplacementEntry: dart.privateName(navigator$, "_pushReplacementEntry"),
    _pushEntryAndRemoveUntil: dart.privateName(navigator$, "_pushEntryAndRemoveUntil"),
    _debugCheckIsPagelessRoute: dart.privateName(navigator$, "_debugCheckIsPagelessRoute"),
    _debugIsStaticCallback: dart.privateName(navigator$, "_debugIsStaticCallback")
  };
  var S$0 = {
    _afterNavigation: dart.privateName(navigator$, "_afterNavigation"),
    _cancelActivePointers: dart.privateName(navigator$, "_cancelActivePointers"),
    $any: dartx.any,
    _replaceEntry: dart.privateName(navigator$, "_replaceEntry"),
    $indexWhere: dartx.indexWhere,
    _replaceEntryBelow: dart.privateName(navigator$, "_replaceEntryBelow"),
    $iterator: dartx.iterator,
    _getRouteById: dart.privateName(navigator$, "_getRouteById"),
    _userGesturesInProgress: dart.privateName(navigator$, "_userGesturesInProgress"),
    _handlePointerDown$1: dart.privateName(navigator$, "_handlePointerDown"),
    _handlePointerUpOrCancel: dart.privateName(navigator$, "_handlePointerUpOrCancel"),
    _tickers: dart.privateName(ticker_provider, "_tickers"),
    _removeTicker: dart.privateName(ticker_provider, "_removeTicker"),
    _bucket: dart.privateName(restoration$, "RestorationMixin._bucket"),
    _properties: dart.privateName(restoration$, "RestorationMixin._properties"),
    _debugPropertiesWaitingForReregistration: dart.privateName(restoration$, "RestorationMixin._debugPropertiesWaitingForReregistration"),
    _firstRestorePending: dart.privateName(restoration$, "RestorationMixin._firstRestorePending"),
    _currentParent: dart.privateName(restoration$, "RestorationMixin._currentParent"),
    _bucket$1: dart.privateName(restoration$, "_bucket"),
    _properties$1: dart.privateName(restoration$, "_properties"),
    _debugPropertiesWaitingForReregistration$1: dart.privateName(restoration$, "_debugPropertiesWaitingForReregistration"),
    _firstRestorePending$1: dart.privateName(restoration$, "_firstRestorePending"),
    _currentParent$1: dart.privateName(restoration$, "_currentParent"),
    _restorationId: dart.privateName(restoration$, "_restorationId"),
    _debugDoingRestore: dart.privateName(restoration$, "_debugDoingRestore"),
    _register: dart.privateName(restoration$, "_register"),
    _updateProperty: dart.privateName(restoration$, "_updateProperty"),
    _owner$1: dart.privateName(restoration$, "_owner"),
    _unregister: dart.privateName(restoration$, "_unregister"),
    _updateBucketIfNecessary: dart.privateName(restoration$, "_updateBucketIfNecessary"),
    _doRestore: dart.privateName(restoration$, "_doRestore"),
    _setNewBucketIfNecessary: dart.privateName(restoration$, "_setNewBucketIfNecessary"),
    _disposed: dart.privateName(restoration$, "_disposed"),
    _serializableData: dart.privateName(navigator$, "_serializableData"),
    $sublist: dartx.sublist,
    restorationScopeId$1: dart.privateName(navigator$, "_NamedRestorationInformation.restorationScopeId"),
    restorationScopeId$2: dart.privateName(navigator$, "_AnonymousRestorationInformation.restorationScopeId"),
    _pageToPagelessRoutes: dart.privateName(navigator$, "_pageToPagelessRoutes"),
    _finalizePage: dart.privateName(navigator$, "_finalizePage"),
    _debugMapsEqual: dart.privateName(navigator$, "_debugMapsEqual"),
    _debugAssertNotDisposed: dart.privateName(restoration$, "_debugAssertNotDisposed"),
    navigatorFinder: dart.privateName(navigator$, "RestorableRouteFuture.navigatorFinder"),
    onPresent: dart.privateName(navigator$, "RestorableRouteFuture.onPresent"),
    onComplete: dart.privateName(navigator$, "RestorableRouteFuture.onComplete"),
    _route: dart.privateName(navigator$, "_route"),
    _disposed$1: dart.privateName(navigator$, "_disposed"),
    _hookOntoRouteFuture: dart.privateName(navigator$, "_hookOntoRouteFuture"),
    __KeySet_hashCode: dart.privateName(shortcuts$, "_#KeySet#hashCode"),
    __KeySet_hashCode_isSet: dart.privateName(shortcuts$, "_#KeySet#hashCode#isSet"),
    _keys: dart.privateName(shortcuts$, "_keys"),
    $toString: dartx.toString,
    _name$6: dart.privateName(diagnostics$, "_name"),
    modal: dart.privateName(shortcuts$, "ShortcutManager.modal"),
    _shortcuts: dart.privateName(shortcuts$, "_shortcuts"),
    _find: dart.privateName(shortcuts$, "_find"),
    manager: dart.privateName(shortcuts$, "Shortcuts.manager"),
    shortcuts: dart.privateName(shortcuts$, "Shortcuts.shortcuts"),
    child$9: dart.privateName(shortcuts$, "Shortcuts.child"),
    debugLabel: dart.privateName(shortcuts$, "Shortcuts.debugLabel"),
    _internalManager: dart.privateName(shortcuts$, "_internalManager"),
    _handleOnKey: dart.privateName(shortcuts$, "_handleOnKey"),
    notifier: dart.privateName(inherited_notifier, "InheritedNotifier.notifier"),
    dispatcher: dart.privateName(actions$, "Actions.dispatcher"),
    actions: dart.privateName(actions$, "Actions.actions"),
    child$10: dart.privateName(actions$, "Actions.child"),
    key$2: dart.privateName(table$, "TableRow.key"),
    decoration: dart.privateName(table$, "TableRow.decoration"),
    children: dart.privateName(table$, "TableRow.children"),
    key$3: dart.privateName(table$, "_TableElementRow.key"),
    children$1: dart.privateName(table$, "_TableElementRow.children"),
    children$2: dart.privateName(table$, "Table.children"),
    columnWidths: dart.privateName(table$, "Table.columnWidths"),
    defaultColumnWidth: dart.privateName(table$, "Table.defaultColumnWidth"),
    textDirection$1: dart.privateName(table$, "Table.textDirection"),
    border: dart.privateName(table$, "Table.border"),
    defaultVerticalAlignment: dart.privateName(table$, "Table.defaultVerticalAlignment"),
    textBaseline: dart.privateName(table$, "Table.textBaseline"),
    FlexColumnWidth_value: dart.privateName(table, "FlexColumnWidth.value"),
    _name$7: dart.privateName(table, "_name"),
    _rowDecorations: dart.privateName(table$, "_rowDecorations"),
    $expand: dartx.expand,
    _children$1: dart.privateName(table$, "_children"),
    _doingMountOrUpdate: dart.privateName(table$, "_doingMountOrUpdate"),
    _forgottenChildren: dart.privateName(table$, "_forgottenChildren"),
    _updateRenderObjectChildren: dart.privateName(table$, "_updateRenderObjectChildren"),
    _renderObject: dart.privateName(framework, "_renderObject"),
    _debugDoingBuild: dart.privateName(framework, "_debugDoingBuild"),
    _ancestorRenderObjectElement: dart.privateName(framework, "_ancestorRenderObjectElement"),
    _parent: dart.privateName(framework, "_parent"),
    _findAncestorRenderObjectElement: dart.privateName(framework, "_findAncestorRenderObjectElement"),
    $stackTrace: dartx.stackTrace,
    _findAncestorParentDataElement: dart.privateName(framework, "_findAncestorParentDataElement"),
    _debugUpdateRenderObjectOwner: dart.privateName(framework, "_debugUpdateRenderObjectOwner"),
    _slot: dart.privateName(framework, "_slot"),
    _dirty: dart.privateName(framework, "_dirty"),
    _lifecycleState: dart.privateName(framework, "_lifecycleState"),
    _debugDescribeIncorrectParentDataType: dart.privateName(framework, "_debugDescribeIncorrectParentDataType"),
    _updateParentData: dart.privateName(framework, "_updateParentData"),
    _updateSlot: dart.privateName(framework, "_updateSlot"),
    _cachedHash: dart.privateName(framework, "_cachedHash"),
    __Element__depth: dart.privateName(framework, "_#Element#_depth"),
    __Element__depth_isSet: dart.privateName(framework, "_#Element#_depth#isSet"),
    _owner$2: dart.privateName(framework, "_owner"),
    _debugForgottenChildrenWithGlobalKey: dart.privateName(framework, "_debugForgottenChildrenWithGlobalKey"),
    _inheritedWidgets: dart.privateName(framework, "_inheritedWidgets"),
    _dependencies: dart.privateName(framework, "_dependencies"),
    _hadUnsatisfiedDependencies: dart.privateName(framework, "_hadUnsatisfiedDependencies"),
    _inDirtyList: dart.privateName(framework, "_inDirtyList"),
    _debugBuiltOnce: dart.privateName(framework, "_debugBuiltOnce"),
    _debugAllowIgnoredCallsToMarkNeedsBuild: dart.privateName(framework, "_debugAllowIgnoredCallsToMarkNeedsBuild"),
    _depth: dart.privateName(framework, "_depth"),
    _debugIsInScope: dart.privateName(framework, "_debugIsInScope"),
    _debugStateLocked: dart.privateName(framework, "_debugStateLocked"),
    _debugElementWasRebuilt: dart.privateName(framework, "_debugElementWasRebuilt"),
    _debugRemoveGlobalKeyReservation: dart.privateName(framework, "_debugRemoveGlobalKeyReservation"),
    _debugReserveGlobalKeyFor: dart.privateName(framework, "_debugReserveGlobalKeyFor"),
    _registerGlobalKey: dart.privateName(framework, "_registerGlobalKey"),
    _updateInheritance: dart.privateName(framework, "_updateInheritance"),
    _debugRemoveGlobalKeyReservationFor: dart.privateName(framework, "_debugRemoveGlobalKeyReservationFor"),
    _updateDepth: dart.privateName(framework, "_updateDepth"),
    _currentElement$1: dart.privateName(framework, "_currentElement"),
    _debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans: dart.privateName(framework, "_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans"),
    _inactiveElements: dart.privateName(framework, "_inactiveElements"),
    _retakeInactiveElement: dart.privateName(framework, "_retakeInactiveElement"),
    _debugCheckForCycles: dart.privateName(framework, "_debugCheckForCycles"),
    _activateWithParent: dart.privateName(framework, "_activateWithParent"),
    _dependents: dart.privateName(framework, "_dependents"),
    _unregisterGlobalKey: dart.privateName(framework, "_unregisterGlobalKey"),
    _debugBuilding: dart.privateName(framework, "_debugBuilding"),
    _debugCheckStateIsActiveForAncestorLookup: dart.privateName(framework, "_debugCheckStateIsActiveForAncestorLookup"),
    _debugCheckOwnerBuildTargetExists: dart.privateName(framework, "_debugCheckOwnerBuildTargetExists"),
    _debugCurrentBuildTarget: dart.privateName(framework, "_debugCurrentBuildTarget"),
    _debugSetAllowIgnoredCallsToMarkNeedsBuild: dart.privateName(framework, "_debugSetAllowIgnoredCallsToMarkNeedsBuild"),
    verticalAlignment: dart.privateName(table$, "TableCell.verticalAlignment"),
    column$1: dart.privateName(table$, "_TableSlot.column"),
    row: dart.privateName(table$, "_TableSlot.row"),
    _child: dart.privateName(framework, "_child"),
    _firstBuild: dart.privateName(framework, "_firstBuild"),
    child$11: dart.privateName(visibility, "Visibility.child"),
    replacement: dart.privateName(visibility, "Visibility.replacement"),
    visible: dart.privateName(visibility, "Visibility.visible"),
    maintainState$1: dart.privateName(visibility, "Visibility.maintainState"),
    maintainAnimation: dart.privateName(visibility, "Visibility.maintainAnimation"),
    maintainSize: dart.privateName(visibility, "Visibility.maintainSize"),
    maintainSemantics: dart.privateName(visibility, "Visibility.maintainSemantics"),
    maintainInteractivity: dart.privateName(visibility, "Visibility.maintainInteractivity"),
    SingleChildRenderObjectWidget_child: dart.privateName(framework, "SingleChildRenderObjectWidget.child"),
    SizedBox_height: dart.privateName(basic, "SizedBox.height"),
    SizedBox_width: dart.privateName(basic, "SizedBox.width"),
    sliver: dart.privateName(visibility, "SliverVisibility.sliver"),
    replacementSliver: dart.privateName(visibility, "SliverVisibility.replacementSliver"),
    visible$1: dart.privateName(visibility, "SliverVisibility.visible"),
    maintainState$2: dart.privateName(visibility, "SliverVisibility.maintainState"),
    maintainAnimation$1: dart.privateName(visibility, "SliverVisibility.maintainAnimation"),
    maintainSize$1: dart.privateName(visibility, "SliverVisibility.maintainSize"),
    maintainSemantics$1: dart.privateName(visibility, "SliverVisibility.maintainSemantics"),
    maintainInteractivity$1: dart.privateName(visibility, "SliverVisibility.maintainInteractivity"),
    _handleChange: dart.privateName(transitions, "_handleChange"),
    textDirection$2: dart.privateName(transitions, "SlideTransition.textDirection"),
    transformHitTests: dart.privateName(transitions, "SlideTransition.transformHitTests"),
    child$12: dart.privateName(transitions, "SlideTransition.child"),
    alignment: dart.privateName(transitions, "ScaleTransition.alignment"),
    child$13: dart.privateName(transitions, "ScaleTransition.child"),
    Alignment_y: dart.privateName(alignment$, "Alignment.y"),
    Alignment_x: dart.privateName(alignment$, "Alignment.x"),
    alignment$1: dart.privateName(transitions, "RotationTransition.alignment"),
    child$14: dart.privateName(transitions, "RotationTransition.child"),
    axis: dart.privateName(transitions, "SizeTransition.axis"),
    axisAlignment: dart.privateName(transitions, "SizeTransition.axisAlignment"),
    child$15: dart.privateName(transitions, "SizeTransition.child"),
    _name$8: dart.privateName(basic_types, "_name"),
    opacity: dart.privateName(transitions, "FadeTransition.opacity"),
    alwaysIncludeSemantics: dart.privateName(transitions, "FadeTransition.alwaysIncludeSemantics"),
    child$16: dart.privateName(framework, "SingleChildRenderObjectWidget.child"),
    opacity$1: dart.privateName(transitions, "SliverFadeTransition.opacity"),
    alwaysIncludeSemantics$1: dart.privateName(transitions, "SliverFadeTransition.alwaysIncludeSemantics"),
    child$17: dart.privateName(transitions, "PositionedTransition.child"),
    size: dart.privateName(transitions, "RelativePositionedTransition.size"),
    child$18: dart.privateName(transitions, "RelativePositionedTransition.child"),
    decoration$1: dart.privateName(transitions, "DecoratedBoxTransition.decoration"),
    position: dart.privateName(transitions, "DecoratedBoxTransition.position"),
    child$19: dart.privateName(transitions, "DecoratedBoxTransition.child"),
    _name$9: dart.privateName(proxy_box, "_name"),
    widthFactor: dart.privateName(transitions, "AlignTransition.widthFactor"),
    heightFactor: dart.privateName(transitions, "AlignTransition.heightFactor"),
    child$20: dart.privateName(transitions, "AlignTransition.child"),
    textAlign: dart.privateName(transitions, "DefaultTextStyleTransition.textAlign"),
    softWrap: dart.privateName(transitions, "DefaultTextStyleTransition.softWrap"),
    overflow: dart.privateName(transitions, "DefaultTextStyleTransition.overflow"),
    maxLines: dart.privateName(transitions, "DefaultTextStyleTransition.maxLines"),
    child$21: dart.privateName(transitions, "DefaultTextStyleTransition.child"),
    _name$10: dart.privateName(paragraph, "_name"),
    builder: dart.privateName(transitions, "AnimatedBuilder.builder"),
    child$22: dart.privateName(transitions, "AnimatedBuilder.child"),
    builder$1: dart.privateName(overlay$, "OverlayEntry.builder"),
    _mounted: dart.privateName(overlay$, "_mounted"),
    _overlay: dart.privateName(overlay$, "_overlay"),
    _key$1: dart.privateName(overlay$, "_key"),
    _opaque: dart.privateName(overlay$, "_opaque"),
    _maintainState: dart.privateName(overlay$, "_maintainState"),
    _didChangeEntryOpacity: dart.privateName(overlay$, "_didChangeEntryOpacity"),
    _updateMounted: dart.privateName(overlay$, "_updateMounted"),
    _entries: dart.privateName(overlay$, "_entries"),
    _markDirty: dart.privateName(overlay$, "_markDirty"),
    _markNeedsBuild: dart.privateName(overlay$, "_markNeedsBuild"),
    entry: dart.privateName(overlay$, "_OverlayEntryWidget.entry"),
    tickerEnabled: dart.privateName(overlay$, "_OverlayEntryWidget.tickerEnabled"),
    initialEntries: dart.privateName(overlay$, "Overlay.initialEntries"),
    clipBehavior: dart.privateName(overlay$, "Overlay.clipBehavior"),
    _insertionIndex: dart.privateName(overlay$, "_insertionIndex"),
    _debugVerifyInsertPosition: dart.privateName(overlay$, "_debugVerifyInsertPosition"),
    $insertAll: dartx.insertAll,
    $lastIndexOf: dartx.lastIndexOf,
    children$3: dart.privateName(framework, "MultiChildRenderObjectWidget.children"),
    $skip: dartx.skip,
    __MultiChildRenderObjectElement__children: dart.privateName(framework, "_#MultiChildRenderObjectElement#_children"),
    __MultiChildRenderObjectElement__children_isSet: dart.privateName(framework, "_#MultiChildRenderObjectElement#_children#isSet"),
    _forgottenChildren$1: dart.privateName(framework, "_forgottenChildren"),
    _children$2: dart.privateName(framework, "_children"),
    _debugCheckHasAssociatedRenderObject: dart.privateName(framework, "_debugCheckHasAssociatedRenderObject"),
    _hasVisualOverflow: dart.privateName(overlay$, "_hasVisualOverflow"),
    _resolvedAlignment: dart.privateName(overlay$, "_resolvedAlignment"),
    _clipBehavior: dart.privateName(overlay$, "_clipBehavior"),
    _clipRectLayer: dart.privateName(overlay$, "_clipRectLayer"),
    _textDirection: dart.privateName(overlay$, "_textDirection"),
    _skipCount: dart.privateName(overlay$, "_skipCount"),
    _resolve: dart.privateName(overlay$, "_resolve"),
    _markNeedResolution: dart.privateName(overlay$, "_markNeedResolution"),
    _firstOnstageChild: dart.privateName(overlay$, "_firstOnstageChild"),
    _lastOnstageChild: dart.privateName(overlay$, "_lastOnstageChild"),
    _onstageChildCount: dart.privateName(overlay$, "_onstageChildCount"),
    _name$11: dart.privateName(text_selection, "_name"),
    shouldPaint: dart.privateName(text_selection, "ToolbarItemsParentData.shouldPaint"),
    context: dart.privateName(text_selection, "TextSelectionOverlay.context"),
    debugRequiredFor: dart.privateName(text_selection, "TextSelectionOverlay.debugRequiredFor"),
    toolbarLayerLink: dart.privateName(text_selection, "TextSelectionOverlay.toolbarLayerLink"),
    startHandleLayerLink: dart.privateName(text_selection, "TextSelectionOverlay.startHandleLayerLink"),
    endHandleLayerLink: dart.privateName(text_selection, "TextSelectionOverlay.endHandleLayerLink"),
    renderObject: dart.privateName(text_selection, "TextSelectionOverlay.renderObject"),
    selectionControls: dart.privateName(text_selection, "TextSelectionOverlay.selectionControls"),
    selectionDelegate: dart.privateName(text_selection, "TextSelectionOverlay.selectionDelegate"),
    dragStartBehavior: dart.privateName(text_selection, "TextSelectionOverlay.dragStartBehavior"),
    onSelectionHandleTapped: dart.privateName(text_selection, "TextSelectionOverlay.onSelectionHandleTapped"),
    clipboardStatus: dart.privateName(text_selection, "TextSelectionOverlay.clipboardStatus"),
    _name$12: dart.privateName(recognizer, "_name"),
    __TextSelectionOverlay__toolbarController: dart.privateName(text_selection, "_#TextSelectionOverlay#_toolbarController"),
    __TextSelectionOverlay__toolbarController_isSet: dart.privateName(text_selection, "_#TextSelectionOverlay#_toolbarController#isSet"),
    _handles: dart.privateName(text_selection, "_handles"),
    _toolbar: dart.privateName(text_selection, "_toolbar"),
    _handlesVisible: dart.privateName(text_selection, "_handlesVisible"),
    _value$1: dart.privateName(text_selection, "_value"),
    _toolbarController: dart.privateName(text_selection, "_toolbarController"),
    _toolbarOpacity: dart.privateName(text_selection, "_toolbarOpacity"),
    _selection$1: dart.privateName(text_selection, "_selection"),
    _markNeedsBuild$1: dart.privateName(text_selection, "_markNeedsBuild"),
    _buildHandle: dart.privateName(text_selection, "_buildHandle"),
    _buildToolbar: dart.privateName(text_selection, "_buildToolbar"),
    _handleSelectionHandleChanged: dart.privateName(text_selection, "_handleSelectionHandleChanged"),
    selection$2: dart.privateName(text_selection, "_TextSelectionHandleOverlay.selection"),
    position$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.position"),
    startHandleLayerLink$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.startHandleLayerLink"),
    endHandleLayerLink$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.endHandleLayerLink"),
    renderObject$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.renderObject"),
    onSelectionHandleChanged: dart.privateName(text_selection, "_TextSelectionHandleOverlay.onSelectionHandleChanged"),
    onSelectionHandleTapped$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.onSelectionHandleTapped"),
    selectionControls$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.selectionControls"),
    dragStartBehavior$1: dart.privateName(text_selection, "_TextSelectionHandleOverlay.dragStartBehavior"),
    _visibility: dart.privateName(text_selection, "_visibility"),
    ___TextSelectionHandleOverlayState__dragPosition: dart.privateName(text_selection, "_#_TextSelectionHandleOverlayState#_dragPosition"),
    ___TextSelectionHandleOverlayState__dragPosition_isSet: dart.privateName(text_selection, "_#_TextSelectionHandleOverlayState#_dragPosition#isSet"),
    ___TextSelectionHandleOverlayState__controller: dart.privateName(text_selection, "_#_TextSelectionHandleOverlayState#_controller"),
    ___TextSelectionHandleOverlayState__controller_isSet: dart.privateName(text_selection, "_#_TextSelectionHandleOverlayState#_controller#isSet"),
    _dragPosition: dart.privateName(text_selection, "_dragPosition"),
    _controller$1: dart.privateName(text_selection, "_controller"),
    _opacity: dart.privateName(text_selection, "_opacity"),
    _handleVisibilityChanged: dart.privateName(text_selection, "_handleVisibilityChanged"),
    _handleDragStart: dart.privateName(text_selection, "_handleDragStart"),
    _handleDragUpdate: dart.privateName(text_selection, "_handleDragUpdate"),
    _handleTap$2: dart.privateName(text_selection, "_handleTap"),
    _chooseType: dart.privateName(text_selection, "_chooseType"),
    _ticker: dart.privateName(ticker_provider, "_ticker"),
    delegate: dart.privateName(text_selection, "TextSelectionGestureDetectorBuilder.delegate"),
    _shouldShowSelectionToolbar: dart.privateName(text_selection, "_shouldShowSelectionToolbar"),
    _lastSecondaryTapWasOnSelection: dart.privateName(text_selection, "_lastSecondaryTapWasOnSelection"),
    onTapDown: dart.privateName(text_selection, "TextSelectionGestureDetector.onTapDown"),
    onForcePressStart: dart.privateName(text_selection, "TextSelectionGestureDetector.onForcePressStart"),
    onForcePressEnd: dart.privateName(text_selection, "TextSelectionGestureDetector.onForcePressEnd"),
    onSecondaryTap: dart.privateName(text_selection, "TextSelectionGestureDetector.onSecondaryTap"),
    onSecondaryTapDown: dart.privateName(text_selection, "TextSelectionGestureDetector.onSecondaryTapDown"),
    onSingleTapUp: dart.privateName(text_selection, "TextSelectionGestureDetector.onSingleTapUp"),
    onSingleTapCancel: dart.privateName(text_selection, "TextSelectionGestureDetector.onSingleTapCancel"),
    onSingleLongTapStart: dart.privateName(text_selection, "TextSelectionGestureDetector.onSingleLongTapStart"),
    onSingleLongTapMoveUpdate: dart.privateName(text_selection, "TextSelectionGestureDetector.onSingleLongTapMoveUpdate"),
    onSingleLongTapEnd: dart.privateName(text_selection, "TextSelectionGestureDetector.onSingleLongTapEnd"),
    onDoubleTapDown: dart.privateName(text_selection, "TextSelectionGestureDetector.onDoubleTapDown"),
    onDragSelectionStart: dart.privateName(text_selection, "TextSelectionGestureDetector.onDragSelectionStart"),
    onDragSelectionUpdate: dart.privateName(text_selection, "TextSelectionGestureDetector.onDragSelectionUpdate"),
    onDragSelectionEnd: dart.privateName(text_selection, "TextSelectionGestureDetector.onDragSelectionEnd"),
    behavior: dart.privateName(text_selection, "TextSelectionGestureDetector.behavior"),
    child$23: dart.privateName(text_selection, "TextSelectionGestureDetector.child"),
    _doubleTapTimer: dart.privateName(text_selection, "_doubleTapTimer"),
    _lastTapOffset: dart.privateName(text_selection, "_lastTapOffset"),
    _isDoubleTap: dart.privateName(text_selection, "_isDoubleTap"),
    _lastDragStartDetails: dart.privateName(text_selection, "_lastDragStartDetails"),
    _lastDragUpdateDetails: dart.privateName(text_selection, "_lastDragUpdateDetails"),
    _dragUpdateThrottleTimer: dart.privateName(text_selection, "_dragUpdateThrottleTimer"),
    _isWithinDoubleTapTolerance: dart.privateName(text_selection, "_isWithinDoubleTapTolerance"),
    _doubleTapTimeout: dart.privateName(text_selection, "_doubleTapTimeout"),
    _handleTapDown: dart.privateName(text_selection, "_handleTapDown"),
    _handleTapUp: dart.privateName(text_selection, "_handleTapUp"),
    _handleTapCancel: dart.privateName(text_selection, "_handleTapCancel"),
    _handleDragUpdateThrottled: dart.privateName(text_selection, "_handleDragUpdateThrottled"),
    _handleDragEnd: dart.privateName(text_selection, "_handleDragEnd"),
    _forcePressStarted: dart.privateName(text_selection, "_forcePressStarted"),
    _forcePressEnded: dart.privateName(text_selection, "_forcePressEnded"),
    _handleLongPressStart: dart.privateName(text_selection, "_handleLongPressStart"),
    _handleLongPressMoveUpdate: dart.privateName(text_selection, "_handleLongPressMoveUpdate"),
    _handleLongPressEnd: dart.privateName(text_selection, "_handleLongPressEnd"),
    _disposed$2: dart.privateName(text_selection, "_disposed"),
    _themes: dart.privateName(inherited_theme, "_themes"),
    themes: dart.privateName(inherited_theme, "_CaptureAll.themes"),
    child$24: dart.privateName(inherited_theme, "_CaptureAll.child"),
    style: dart.privateName(text, "DefaultTextStyle.style"),
    textAlign$1: dart.privateName(text, "DefaultTextStyle.textAlign"),
    softWrap$1: dart.privateName(text, "DefaultTextStyle.softWrap"),
    overflow$1: dart.privateName(text, "DefaultTextStyle.overflow"),
    maxLines$1: dart.privateName(text, "DefaultTextStyle.maxLines"),
    textWidthBasis: dart.privateName(text, "DefaultTextStyle.textWidthBasis"),
    textHeightBehavior: dart.privateName(text, "DefaultTextStyle.textHeightBehavior"),
    _name$13: dart.privateName(text_painter, "_name"),
    textHeightBehavior$1: dart.privateName(text, "DefaultTextHeightBehavior.textHeightBehavior"),
    data: dart.privateName(text, "Text.data"),
    textSpan: dart.privateName(text, "Text.textSpan"),
    style$1: dart.privateName(text, "Text.style"),
    strutStyle: dart.privateName(text, "Text.strutStyle"),
    textAlign$2: dart.privateName(text, "Text.textAlign"),
    textDirection$3: dart.privateName(text, "Text.textDirection"),
    locale: dart.privateName(text, "Text.locale"),
    softWrap$2: dart.privateName(text, "Text.softWrap"),
    overflow$2: dart.privateName(text, "Text.overflow"),
    textScaleFactor: dart.privateName(text, "Text.textScaleFactor"),
    maxLines$2: dart.privateName(text, "Text.maxLines"),
    semanticsLabel$2: dart.privateName(text, "Text.semanticsLabel"),
    textWidthBasis$1: dart.privateName(text, "Text.textWidthBasis"),
    textHeightBehavior$2: dart.privateName(text, "Text.textHeightBehavior"),
    FontWeight_index: dart.privateName(ui, "FontWeight.index"),
    axisDirection: dart.privateName(viewport, "Viewport.axisDirection"),
    crossAxisDirection: dart.privateName(viewport, "Viewport.crossAxisDirection"),
    anchor: dart.privateName(viewport, "Viewport.anchor"),
    offset: dart.privateName(viewport, "Viewport.offset"),
    center: dart.privateName(viewport, "Viewport.center"),
    cacheExtent: dart.privateName(viewport, "Viewport.cacheExtent"),
    cacheExtentStyle: dart.privateName(viewport, "Viewport.cacheExtentStyle"),
    clipBehavior$1: dart.privateName(viewport, "Viewport.clipBehavior"),
    _name$14: dart.privateName(viewport$, "_name"),
    _updateCenter: dart.privateName(viewport, "_updateCenter"),
    $singleWhere: dartx.singleWhere,
    axisDirection$1: dart.privateName(viewport, "ShrinkWrappingViewport.axisDirection"),
    crossAxisDirection$1: dart.privateName(viewport, "ShrinkWrappingViewport.crossAxisDirection"),
    offset$1: dart.privateName(viewport, "ShrinkWrappingViewport.offset"),
    clipBehavior$2: dart.privateName(viewport, "ShrinkWrappingViewport.clipBehavior"),
    fadeoutOpacityAnimation: dart.privateName(scrollbar, "ScrollbarPainter.fadeoutOpacityAnimation"),
    EdgeInsets_bottom: dart.privateName(edge_insets, "EdgeInsets.bottom"),
    EdgeInsets_right: dart.privateName(edge_insets, "EdgeInsets.right"),
    EdgeInsets_top: dart.privateName(edge_insets, "EdgeInsets.top"),
    EdgeInsets_left: dart.privateName(edge_insets, "EdgeInsets.left"),
    _lastMetrics: dart.privateName(scrollbar, "_lastMetrics"),
    _lastAxisDirection: dart.privateName(scrollbar, "_lastAxisDirection"),
    _thumbRect: dart.privateName(scrollbar, "_thumbRect"),
    _trackRect: dart.privateName(scrollbar, "_trackRect"),
    __ScrollbarPainter__thumbOffset: dart.privateName(scrollbar, "_#ScrollbarPainter#_thumbOffset"),
    __ScrollbarPainter__thumbOffset_isSet: dart.privateName(scrollbar, "_#ScrollbarPainter#_thumbOffset#isSet"),
    _color: dart.privateName(scrollbar, "_color"),
    _textDirection$1: dart.privateName(scrollbar, "_textDirection"),
    _thickness: dart.privateName(scrollbar, "_thickness"),
    _radius: dart.privateName(scrollbar, "_radius"),
    _padding: dart.privateName(scrollbar, "_padding"),
    _mainAxisMargin: dart.privateName(scrollbar, "_mainAxisMargin"),
    _crossAxisMargin: dart.privateName(scrollbar, "_crossAxisMargin"),
    _minLength: dart.privateName(scrollbar, "_minLength"),
    _trackColor: dart.privateName(scrollbar, "_trackColor"),
    _trackBorderColor: dart.privateName(scrollbar, "_trackBorderColor"),
    _minOverscrollLength: dart.privateName(scrollbar, "_minOverscrollLength"),
    _thumbOffset: dart.privateName(scrollbar, "_thumbOffset"),
    _paintThumb: dart.privateName(scrollbar, "_paintThumb"),
    _paintTrack: dart.privateName(scrollbar, "_paintTrack"),
    _trackExtent: dart.privateName(scrollbar, "_trackExtent"),
    _paintScrollbar: dart.privateName(scrollbar, "_paintScrollbar"),
    _mainAxisPadding: dart.privateName(scrollbar, "_mainAxisPadding"),
    _totalContentExtent: dart.privateName(scrollbar, "_totalContentExtent"),
    $clamp: dartx.clamp,
    _beforeExtent: dart.privateName(scrollbar, "_beforeExtent"),
    _afterExtent: dart.privateName(scrollbar, "_afterExtent"),
    _thumbExtent: dart.privateName(scrollbar, "_thumbExtent"),
    _isVertical: dart.privateName(scrollbar, "_isVertical"),
    _isReversed: dart.privateName(scrollbar, "_isReversed"),
    _getScrollToTrack: dart.privateName(scrollbar, "_getScrollToTrack"),
    $isInfinite: dartx.isInfinite,
    _repaint: dart.privateName(scrollbar, "_repaint"),
    $noSuchMethod: dartx.noSuchMethod,
    _repaint$1: dart.privateName(custom_paint, "_repaint"),
    child$25: dart.privateName(scrollbar, "RawScrollbar.child"),
    controller$1: dart.privateName(scrollbar, "RawScrollbar.controller"),
    isAlwaysShown: dart.privateName(scrollbar, "RawScrollbar.isAlwaysShown"),
    radius: dart.privateName(scrollbar, "RawScrollbar.radius"),
    thickness: dart.privateName(scrollbar, "RawScrollbar.thickness"),
    thumbColor: dart.privateName(scrollbar, "RawScrollbar.thumbColor"),
    fadeDuration: dart.privateName(scrollbar, "RawScrollbar.fadeDuration"),
    timeToFade: dart.privateName(scrollbar, "RawScrollbar.timeToFade"),
    pressDuration: dart.privateName(scrollbar, "RawScrollbar.pressDuration"),
    notificationPredicate: dart.privateName(scrollbar, "RawScrollbar.notificationPredicate"),
    interactive: dart.privateName(scrollbar, "RawScrollbar.interactive"),
    _dragScrollbarAxisPosition: dart.privateName(scrollbar, "_dragScrollbarAxisPosition"),
    _currentController: dart.privateName(scrollbar, "_currentController"),
    _fadeoutTimer: dart.privateName(scrollbar, "_fadeoutTimer"),
    __RawScrollbarState__fadeoutAnimationController: dart.privateName(scrollbar, "_#RawScrollbarState#_fadeoutAnimationController"),
    __RawScrollbarState__fadeoutAnimationController_isSet: dart.privateName(scrollbar, "_#RawScrollbarState#_fadeoutAnimationController#isSet"),
    __RawScrollbarState__fadeoutOpacityAnimation: dart.privateName(scrollbar, "_#RawScrollbarState#_fadeoutOpacityAnimation"),
    __RawScrollbarState__fadeoutOpacityAnimation_isSet: dart.privateName(scrollbar, "_#RawScrollbarState#_fadeoutOpacityAnimation#isSet"),
    _scrollbarPainterKey: dart.privateName(scrollbar, "_scrollbarPainterKey"),
    _hoverIsActive: dart.privateName(scrollbar, "_hoverIsActive"),
    __RawScrollbarState_scrollbarPainter: dart.privateName(scrollbar, "_#RawScrollbarState#scrollbarPainter"),
    __RawScrollbarState_scrollbarPainter_isSet: dart.privateName(scrollbar, "_#RawScrollbarState#scrollbarPainter#isSet"),
    _fadeoutAnimationController: dart.privateName(scrollbar, "_fadeoutAnimationController"),
    _fadeoutOpacityAnimation: dart.privateName(scrollbar, "_fadeoutOpacityAnimation"),
    _maybeTriggerScrollbar: dart.privateName(scrollbar, "_maybeTriggerScrollbar"),
    _updateScrollPosition: dart.privateName(scrollbar, "_updateScrollPosition"),
    _maybeStartFadeoutTimer: dart.privateName(scrollbar, "_maybeStartFadeoutTimer"),
    _handleTrackTapDown: dart.privateName(scrollbar, "_handleTrackTapDown"),
    _handleScrollNotification: dart.privateName(scrollbar, "_handleScrollNotification"),
    _gestures: dart.privateName(scrollbar, "_gestures"),
    _customPaintKey: dart.privateName(scrollbar, "_customPaintKey"),
    _hitTestInteractive: dart.privateName(scrollbar, "_hitTestInteractive"),
    ScrollPhysics_parent: dart.privateName(scroll_physics, "ScrollPhysics.parent"),
    delegate$1: dart.privateName(scroll_configuration, "_WrappedScrollBehavior.delegate"),
    scrollbar: dart.privateName(scroll_configuration, "_WrappedScrollBehavior.scrollbar"),
    overscrollIndicator: dart.privateName(scroll_configuration, "_WrappedScrollBehavior.overscrollIndicator"),
    physics: dart.privateName(scroll_configuration, "_WrappedScrollBehavior.physics"),
    platform: dart.privateName(scroll_configuration, "_WrappedScrollBehavior.platform"),
    behavior$1: dart.privateName(scroll_configuration, "ScrollConfiguration.behavior"),
    _value$2: dart.privateName(restoration_properties, "_value"),
    _defaultValue: dart.privateName(restoration_properties, "_defaultValue"),
    _disposeOldValue: dart.privateName(restoration_properties, "_disposeOldValue"),
    _initialValue: dart.privateName(restoration_properties, "_initialValue"),
    TextRange_end: dart.privateName(ui, "TextRange.end"),
    TextRange_start: dart.privateName(ui, "TextRange.start"),
    TextSelection_isDirectional: dart.privateName(text_editing, "TextSelection.isDirectional"),
    TextSelection_affinity: dart.privateName(text_editing, "TextSelection.affinity"),
    TextSelection_extentOffset: dart.privateName(text_editing, "TextSelection.extentOffset"),
    TextSelection_baseOffset: dart.privateName(text_editing, "TextSelection.baseOffset"),
    TextDecoration__mask: dart.privateName(ui, "TextDecoration._mask"),
    _isSelectionWithinComposingRange: dart.privateName(editable_text, "_isSelectionWithinComposingRange"),
    TextEditingValue_composing: dart.privateName(text_input, "TextEditingValue.composing"),
    TextEditingValue_selection: dart.privateName(text_input, "TextEditingValue.selection"),
    TextEditingValue_text: dart.privateName(text_input, "TextEditingValue.text"),
    child$26: dart.privateName(restoration$, "RestorationScope.child"),
    restorationId$1: dart.privateName(restoration$, "RestorationScope.restorationId"),
    bucket: dart.privateName(restoration$, "UnmanagedRestorationScope.bucket"),
    child$27: dart.privateName(restoration$, "RootRestorationScope.child"),
    restorationId$2: dart.privateName(restoration$, "RootRestorationScope.restorationId"),
    _okToRenderBlankContainer: dart.privateName(restoration$, "_okToRenderBlankContainer"),
    _rootBucketValid: dart.privateName(restoration$, "_rootBucketValid"),
    _rootBucket: dart.privateName(restoration$, "_rootBucket"),
    _ancestorBucket: dart.privateName(restoration$, "_ancestorBucket"),
    _isLoadingRootBucket: dart.privateName(restoration$, "_isLoadingRootBucket"),
    _loadRootBucketIfNecessary: dart.privateName(restoration$, "_loadRootBucketIfNecessary"),
    _needsRootBucketInserted: dart.privateName(restoration$, "_needsRootBucketInserted"),
    _isWaitingForRootBucket: dart.privateName(restoration$, "_isWaitingForRootBucket"),
    _replaceRootBucket: dart.privateName(restoration$, "_replaceRootBucket"),
    _heldPreviousVelocity: dart.privateName(scroll_position_with_single_context, "_heldPreviousVelocity"),
    _userScrollDirection: dart.privateName(scroll_position_with_single_context, "_userScrollDirection"),
    _currentDrag: dart.privateName(scroll_position_with_single_context, "_currentDrag"),
    physics$1: dart.privateName(scroll_position, "ScrollPosition.physics"),
    context$1: dart.privateName(scroll_position, "ScrollPosition.context"),
    keepScrollOffset: dart.privateName(scroll_position, "ScrollPosition.keepScrollOffset"),
    debugLabel$1: dart.privateName(scroll_position, "ScrollPosition.debugLabel"),
    isScrollingNotifier: dart.privateName(scroll_position, "ScrollPosition.isScrollingNotifier"),
    _minScrollExtent: dart.privateName(scroll_position, "_minScrollExtent"),
    _maxScrollExtent: dart.privateName(scroll_position, "_maxScrollExtent"),
    _impliedVelocity: dart.privateName(scroll_position, "_impliedVelocity"),
    _pixels: dart.privateName(scroll_position, "_pixels"),
    _viewportDimension: dart.privateName(scroll_position, "_viewportDimension"),
    _haveDimensions: dart.privateName(scroll_position, "_haveDimensions"),
    _didChangeViewportDimensionOrReceiveCorrection: dart.privateName(scroll_position, "_didChangeViewportDimensionOrReceiveCorrection"),
    _pendingDimensions: dart.privateName(scroll_position, "_pendingDimensions"),
    _lastMetrics$1: dart.privateName(scroll_position, "_lastMetrics"),
    _semanticActions: dart.privateName(scroll_position, "_semanticActions"),
    _activity: dart.privateName(scroll_position, "_activity"),
    $toStringAsFixed: dartx.toStringAsFixed,
    _updateSemanticActions: dart.privateName(scroll_position, "_updateSemanticActions"),
    Cubic_d: dart.privateName(curves, "Cubic.d"),
    Cubic_c: dart.privateName(curves, "Cubic.c"),
    Cubic_b: dart.privateName(curves, "Cubic.b"),
    Cubic_a: dart.privateName(curves, "Cubic.a"),
    _name$15: dart.privateName(scroll_position, "_name"),
    _delegate: dart.privateName(scroll_activity, "_delegate"),
    onHoldCanceled: dart.privateName(scroll_activity, "HoldScrollActivity.onHoldCanceled"),
    onDragCanceled: dart.privateName(scroll_activity, "ScrollDragController.onDragCanceled"),
    carriedVelocity: dart.privateName(scroll_activity, "ScrollDragController.carriedVelocity"),
    motionStartDistanceThreshold: dart.privateName(scroll_activity, "ScrollDragController.motionStartDistanceThreshold")
  };
  var S = {
    _lastDetails: dart.privateName(scroll_activity, "_lastDetails"),
    _retainMomentum: dart.privateName(scroll_activity, "_retainMomentum"),
    _lastNonStationaryTimestamp: dart.privateName(scroll_activity, "_lastNonStationaryTimestamp"),
    _offsetSinceLastStop: dart.privateName(scroll_activity, "_offsetSinceLastStop"),
    _reversed: dart.privateName(scroll_activity, "_reversed"),
    _maybeLoseMomentum: dart.privateName(scroll_activity, "_maybeLoseMomentum"),
    _adjustForScrollStartThreshold: dart.privateName(scroll_activity, "_adjustForScrollStartThreshold"),
    _controller$2: dart.privateName(scroll_activity, "_controller"),
    __BallisticScrollActivity__controller: dart.privateName(scroll_activity, "_#BallisticScrollActivity#_controller"),
    __BallisticScrollActivity__controller_isSet: dart.privateName(scroll_activity, "_#BallisticScrollActivity#_controller#isSet"),
    _tick: dart.privateName(scroll_activity, "_tick"),
    _end: dart.privateName(scroll_activity, "_end"),
    __DrivenScrollActivity__completer: dart.privateName(scroll_activity, "_#DrivenScrollActivity#_completer"),
    __DrivenScrollActivity__completer_isSet: dart.privateName(scroll_activity, "_#DrivenScrollActivity#_completer#isSet"),
    __DrivenScrollActivity__controller: dart.privateName(scroll_activity, "_#DrivenScrollActivity#_controller"),
    __DrivenScrollActivity__controller_isSet: dart.privateName(scroll_activity, "_#DrivenScrollActivity#_controller#isSet"),
    _completer: dart.privateName(scroll_activity, "_completer"),
    keys: dart.privateName(page_storage, "_StorageEntryIdentifier.keys"),
    _storage: dart.privateName(page_storage, "_storage"),
    _allKeys: dart.privateName(page_storage, "_allKeys"),
    _computeIdentifier: dart.privateName(page_storage, "_computeIdentifier"),
    child$28: dart.privateName(page_storage, "PageStorage.child"),
    bucket$1: dart.privateName(page_storage, "PageStorage.bucket"),
    _depth$1: dart.privateName(scroll_notification, "ViewportNotificationMixin._depth"),
    _depth$2: dart.privateName(scroll_notification, "_depth"),
    _dispatch: dart.privateName(notification_listener, "_dispatch"),
    metrics: dart.privateName(scroll_notification, "ScrollNotification.metrics"),
    context$2: dart.privateName(scroll_notification, "ScrollNotification.context"),
    dragDetails: dart.privateName(scroll_notification, "ScrollStartNotification.dragDetails"),
    dragDetails$1: dart.privateName(scroll_notification, "ScrollUpdateNotification.dragDetails"),
    scrollDelta: dart.privateName(scroll_notification, "ScrollUpdateNotification.scrollDelta"),
    dragDetails$2: dart.privateName(scroll_notification, "OverscrollNotification.dragDetails"),
    overscroll: dart.privateName(scroll_notification, "OverscrollNotification.overscroll"),
    velocity: dart.privateName(scroll_notification, "OverscrollNotification.velocity"),
    $isFinite: dartx.isFinite,
    dragDetails$3: dart.privateName(scroll_notification, "ScrollEndNotification.dragDetails"),
    direction: dart.privateName(scroll_notification, "UserScrollNotification.direction"),
    showLeading: dart.privateName(overscroll_indicator, "GlowingOverscrollIndicator.showLeading"),
    showTrailing: dart.privateName(overscroll_indicator, "GlowingOverscrollIndicator.showTrailing"),
    axisDirection$2: dart.privateName(overscroll_indicator, "GlowingOverscrollIndicator.axisDirection"),
    color$2: dart.privateName(overscroll_indicator, "GlowingOverscrollIndicator.color"),
    notificationPredicate$1: dart.privateName(overscroll_indicator, "GlowingOverscrollIndicator.notificationPredicate"),
    child$29: dart.privateName(overscroll_indicator, "GlowingOverscrollIndicator.child"),
    _leadingController: dart.privateName(overscroll_indicator, "_leadingController"),
    _trailingController: dart.privateName(overscroll_indicator, "_trailingController"),
    _leadingAndTrailingListener: dart.privateName(overscroll_indicator, "_leadingAndTrailingListener"),
    _lastNotificationType: dart.privateName(overscroll_indicator, "_lastNotificationType"),
    _accepted: dart.privateName(overscroll_indicator, "_accepted"),
    _paintOffsetScrollPixels: dart.privateName(overscroll_indicator, "_paintOffsetScrollPixels"),
    _paintOffset: dart.privateName(overscroll_indicator, "_paintOffset"),
    _handleScrollNotification$1: dart.privateName(overscroll_indicator, "_handleScrollNotification"),
    _name$16: dart.privateName(overscroll_indicator, "_name"),
    _state: dart.privateName(overscroll_indicator, "_state"),
    ___GlowController__glowController: dart.privateName(overscroll_indicator, "_#_GlowController#_glowController"),
    ___GlowController__glowController_isSet: dart.privateName(overscroll_indicator, "_#_GlowController#_glowController#isSet"),
    _pullRecedeTimer: dart.privateName(overscroll_indicator, "_pullRecedeTimer"),
    _glowOpacityTween: dart.privateName(overscroll_indicator, "_glowOpacityTween"),
    ___GlowController__glowOpacity: dart.privateName(overscroll_indicator, "_#_GlowController#_glowOpacity"),
    ___GlowController__glowOpacity_isSet: dart.privateName(overscroll_indicator, "_#_GlowController#_glowOpacity#isSet"),
    _glowSizeTween: dart.privateName(overscroll_indicator, "_glowSizeTween"),
    ___GlowController__glowSize: dart.privateName(overscroll_indicator, "_#_GlowController#_glowSize"),
    ___GlowController__glowSize_isSet: dart.privateName(overscroll_indicator, "_#_GlowController#_glowSize#isSet"),
    ___GlowController__displacementTicker: dart.privateName(overscroll_indicator, "_#_GlowController#_displacementTicker"),
    ___GlowController__displacementTicker_isSet: dart.privateName(overscroll_indicator, "_#_GlowController#_displacementTicker#isSet"),
    _displacementTickerLastElapsed: dart.privateName(overscroll_indicator, "_displacementTickerLastElapsed"),
    _displacementTarget: dart.privateName(overscroll_indicator, "_displacementTarget"),
    _displacement: dart.privateName(overscroll_indicator, "_displacement"),
    _pullDistance: dart.privateName(overscroll_indicator, "_pullDistance"),
    _color$1: dart.privateName(overscroll_indicator, "_color"),
    _axis: dart.privateName(overscroll_indicator, "_axis"),
    _glowController: dart.privateName(overscroll_indicator, "_glowController"),
    _changePhase: dart.privateName(overscroll_indicator, "_changePhase"),
    _glowOpacity: dart.privateName(overscroll_indicator, "_glowOpacity"),
    _glowSize: dart.privateName(overscroll_indicator, "_glowSize"),
    _displacementTicker: dart.privateName(overscroll_indicator, "_displacementTicker"),
    _tickDisplacement: dart.privateName(overscroll_indicator, "_tickDisplacement"),
    $round: dartx.round,
    _recede: dart.privateName(overscroll_indicator, "_recede"),
    $toDouble: dartx.toDouble,
    _paintSide: dart.privateName(overscroll_indicator, "_paintSide"),
    leading: dart.privateName(overscroll_indicator, "OverscrollIndicatorNotification.leading"),
    paintOffset: dart.privateName(overscroll_indicator, "OverscrollIndicatorNotification.paintOffset"),
    parent$1: dart.privateName(scroll_physics, "ScrollPhysics.parent"),
    enabled$1: dart.privateName(ticker_provider, "TickerMode.enabled"),
    child$30: dart.privateName(ticker_provider, "TickerMode.child"),
    enabled$2: dart.privateName(ticker_provider, "_EffectiveTickerMode.enabled"),
    _creator: dart.privateName(ticker_provider, "_creator"),
    keepScrollOffset$1: dart.privateName(scroll_controller, "ScrollController.keepScrollOffset"),
    debugLabel$2: dart.privateName(scroll_controller, "ScrollController.debugLabel"),
    _positions: dart.privateName(scroll_controller, "_positions"),
    _initialScrollOffset: dart.privateName(scroll_controller, "_initialScrollOffset"),
    _positionToListener: dart.privateName(scroll_controller, "_positionToListener"),
    _lastUpdated: dart.privateName(scroll_controller, "_lastUpdated"),
    _lastUpdatedOffset: dart.privateName(scroll_controller, "_lastUpdatedOffset"),
    controller$2: dart.privateName(primary_scroll_controller, "PrimaryScrollController.controller"),
    _constructor: dart.privateName(gesture_detector, "GestureRecognizerFactoryWithHandlers._constructor"),
    _initializer: dart.privateName(gesture_detector, "GestureRecognizerFactoryWithHandlers._initializer"),
    _constructor$1: dart.privateName(gesture_detector, "_constructor"),
    _initializer$1: dart.privateName(gesture_detector, "_initializer"),
    child$31: dart.privateName(gesture_detector, "GestureDetector.child"),
    onTapDown$1: dart.privateName(gesture_detector, "GestureDetector.onTapDown"),
    onTapUp: dart.privateName(gesture_detector, "GestureDetector.onTapUp"),
    onTap: dart.privateName(gesture_detector, "GestureDetector.onTap"),
    onTapCancel: dart.privateName(gesture_detector, "GestureDetector.onTapCancel"),
    onSecondaryTap$1: dart.privateName(gesture_detector, "GestureDetector.onSecondaryTap"),
    onSecondaryTapDown$1: dart.privateName(gesture_detector, "GestureDetector.onSecondaryTapDown"),
    onSecondaryTapUp: dart.privateName(gesture_detector, "GestureDetector.onSecondaryTapUp"),
    onSecondaryTapCancel: dart.privateName(gesture_detector, "GestureDetector.onSecondaryTapCancel"),
    onTertiaryTapDown: dart.privateName(gesture_detector, "GestureDetector.onTertiaryTapDown"),
    onTertiaryTapUp: dart.privateName(gesture_detector, "GestureDetector.onTertiaryTapUp"),
    onTertiaryTapCancel: dart.privateName(gesture_detector, "GestureDetector.onTertiaryTapCancel"),
    onDoubleTapDown$1: dart.privateName(gesture_detector, "GestureDetector.onDoubleTapDown"),
    onDoubleTap: dart.privateName(gesture_detector, "GestureDetector.onDoubleTap"),
    onDoubleTapCancel: dart.privateName(gesture_detector, "GestureDetector.onDoubleTapCancel"),
    onLongPress: dart.privateName(gesture_detector, "GestureDetector.onLongPress"),
    onLongPressStart: dart.privateName(gesture_detector, "GestureDetector.onLongPressStart"),
    onLongPressMoveUpdate: dart.privateName(gesture_detector, "GestureDetector.onLongPressMoveUpdate"),
    onLongPressUp: dart.privateName(gesture_detector, "GestureDetector.onLongPressUp"),
    onLongPressEnd: dart.privateName(gesture_detector, "GestureDetector.onLongPressEnd"),
    onSecondaryLongPress: dart.privateName(gesture_detector, "GestureDetector.onSecondaryLongPress"),
    onSecondaryLongPressStart: dart.privateName(gesture_detector, "GestureDetector.onSecondaryLongPressStart"),
    onSecondaryLongPressMoveUpdate: dart.privateName(gesture_detector, "GestureDetector.onSecondaryLongPressMoveUpdate"),
    onSecondaryLongPressUp: dart.privateName(gesture_detector, "GestureDetector.onSecondaryLongPressUp"),
    onSecondaryLongPressEnd: dart.privateName(gesture_detector, "GestureDetector.onSecondaryLongPressEnd"),
    onVerticalDragDown: dart.privateName(gesture_detector, "GestureDetector.onVerticalDragDown"),
    onVerticalDragStart: dart.privateName(gesture_detector, "GestureDetector.onVerticalDragStart"),
    onVerticalDragUpdate: dart.privateName(gesture_detector, "GestureDetector.onVerticalDragUpdate"),
    onVerticalDragEnd: dart.privateName(gesture_detector, "GestureDetector.onVerticalDragEnd"),
    onVerticalDragCancel: dart.privateName(gesture_detector, "GestureDetector.onVerticalDragCancel"),
    onHorizontalDragDown: dart.privateName(gesture_detector, "GestureDetector.onHorizontalDragDown"),
    onHorizontalDragStart: dart.privateName(gesture_detector, "GestureDetector.onHorizontalDragStart"),
    onHorizontalDragUpdate: dart.privateName(gesture_detector, "GestureDetector.onHorizontalDragUpdate"),
    onHorizontalDragEnd: dart.privateName(gesture_detector, "GestureDetector.onHorizontalDragEnd"),
    onHorizontalDragCancel: dart.privateName(gesture_detector, "GestureDetector.onHorizontalDragCancel"),
    onPanDown: dart.privateName(gesture_detector, "GestureDetector.onPanDown"),
    onPanStart: dart.privateName(gesture_detector, "GestureDetector.onPanStart"),
    onPanUpdate: dart.privateName(gesture_detector, "GestureDetector.onPanUpdate"),
    onPanEnd: dart.privateName(gesture_detector, "GestureDetector.onPanEnd"),
    onPanCancel: dart.privateName(gesture_detector, "GestureDetector.onPanCancel"),
    onScaleStart: dart.privateName(gesture_detector, "GestureDetector.onScaleStart"),
    onScaleUpdate: dart.privateName(gesture_detector, "GestureDetector.onScaleUpdate"),
    onScaleEnd: dart.privateName(gesture_detector, "GestureDetector.onScaleEnd"),
    onForcePressStart$1: dart.privateName(gesture_detector, "GestureDetector.onForcePressStart"),
    onForcePressPeak: dart.privateName(gesture_detector, "GestureDetector.onForcePressPeak"),
    onForcePressUpdate: dart.privateName(gesture_detector, "GestureDetector.onForcePressUpdate"),
    onForcePressEnd$1: dart.privateName(gesture_detector, "GestureDetector.onForcePressEnd"),
    behavior$2: dart.privateName(gesture_detector, "GestureDetector.behavior"),
    excludeFromSemantics: dart.privateName(gesture_detector, "GestureDetector.excludeFromSemantics"),
    dragStartBehavior$2: dart.privateName(gesture_detector, "GestureDetector.dragStartBehavior"),
    child$32: dart.privateName(gesture_detector, "RawGestureDetector.child"),
    gestures: dart.privateName(gesture_detector, "RawGestureDetector.gestures"),
    behavior$3: dart.privateName(gesture_detector, "RawGestureDetector.behavior"),
    excludeFromSemantics$1: dart.privateName(gesture_detector, "RawGestureDetector.excludeFromSemantics"),
    semantics: dart.privateName(gesture_detector, "RawGestureDetector.semantics"),
    _recognizers: dart.privateName(gesture_detector, "_recognizers"),
    _semantics: dart.privateName(gesture_detector, "_semantics"),
    _syncAll: dart.privateName(gesture_detector, "_syncAll"),
    _updateSemanticsForRenderObject: dart.privateName(gesture_detector, "_updateSemanticsForRenderObject"),
    _handlePointerDown$2: dart.privateName(gesture_detector, "_handlePointerDown"),
    _defaultBehavior: dart.privateName(gesture_detector, "_defaultBehavior"),
    behavior$4: dart.privateName(gesture_detector, "_GestureSemantics.behavior"),
    assignSemantics: dart.privateName(gesture_detector, "_GestureSemantics.assignSemantics"),
    _getTapHandler: dart.privateName(gesture_detector, "_getTapHandler"),
    _getLongPressHandler: dart.privateName(gesture_detector, "_getLongPressHandler"),
    _getHorizontalDragUpdateHandler: dart.privateName(gesture_detector, "_getHorizontalDragUpdateHandler"),
    _getVerticalDragUpdateHandler: dart.privateName(gesture_detector, "_getVerticalDragUpdateHandler"),
    LongPressStartDetails_localPosition: dart.privateName(long_press, "LongPressStartDetails.localPosition"),
    LongPressStartDetails_globalPosition: dart.privateName(long_press, "LongPressStartDetails.globalPosition"),
    Velocity_pixelsPerSecond: dart.privateName(velocity_tracker, "Velocity.pixelsPerSecond"),
    LongPressEndDetails_velocity: dart.privateName(long_press, "LongPressEndDetails.velocity"),
    LongPressEndDetails_localPosition: dart.privateName(long_press, "LongPressEndDetails.localPosition"),
    LongPressEndDetails_globalPosition: dart.privateName(long_press, "LongPressEndDetails.globalPosition"),
    axisDirection$3: dart.privateName(scrollable$, "Scrollable.axisDirection"),
    controller$3: dart.privateName(scrollable$, "Scrollable.controller"),
    physics$2: dart.privateName(scrollable$, "Scrollable.physics"),
    viewportBuilder: dart.privateName(scrollable$, "Scrollable.viewportBuilder"),
    incrementCalculator: dart.privateName(scrollable$, "Scrollable.incrementCalculator"),
    excludeFromSemantics$2: dart.privateName(scrollable$, "Scrollable.excludeFromSemantics"),
    semanticChildCount: dart.privateName(scrollable$, "Scrollable.semanticChildCount"),
    dragStartBehavior$3: dart.privateName(scrollable$, "Scrollable.dragStartBehavior"),
    restorationId$3: dart.privateName(scrollable$, "Scrollable.restorationId"),
    scrollBehavior: dart.privateName(scrollable$, "Scrollable.scrollBehavior"),
    scrollable: dart.privateName(scrollable$, "_ScrollableScope.scrollable"),
    position$2: dart.privateName(scrollable$, "_ScrollableScope.position"),
    _position: dart.privateName(scrollable$, "_position"),
    _persistedScrollOffset: dart.privateName(scrollable$, "_persistedScrollOffset"),
    __ScrollableState__configuration: dart.privateName(scrollable$, "_#ScrollableState#_configuration"),
    __ScrollableState__configuration_isSet: dart.privateName(scrollable$, "_#ScrollableState#_configuration#isSet"),
    _physics: dart.privateName(scrollable$, "_physics"),
    _fallbackScrollController: dart.privateName(scrollable$, "_fallbackScrollController"),
    _scrollSemanticsKey: dart.privateName(scrollable$, "_scrollSemanticsKey"),
    _gestureDetectorKey: dart.privateName(scrollable$, "_gestureDetectorKey"),
    _ignorePointerKey$1: dart.privateName(scrollable$, "_ignorePointerKey"),
    _gestureRecognizers: dart.privateName(scrollable$, "_gestureRecognizers"),
    _shouldIgnorePointer: dart.privateName(scrollable$, "_shouldIgnorePointer"),
    _lastCanDrag: dart.privateName(scrollable$, "_lastCanDrag"),
    _lastAxisDirection$1: dart.privateName(scrollable$, "_lastAxisDirection"),
    _drag: dart.privateName(scrollable$, "_drag"),
    _hold: dart.privateName(scrollable$, "_hold"),
    _configuration: dart.privateName(scrollable$, "_configuration"),
    _effectiveScrollController: dart.privateName(scrollable$, "_effectiveScrollController"),
    _updatePosition: dart.privateName(scrollable$, "_updatePosition"),
    _shouldUpdatePosition: dart.privateName(scrollable$, "_shouldUpdatePosition"),
    _handleDragCancel: dart.privateName(scrollable$, "_handleDragCancel"),
    _handleDragDown: dart.privateName(scrollable$, "_handleDragDown"),
    _handleDragStart$1: dart.privateName(scrollable$, "_handleDragStart"),
    _handleDragUpdate$1: dart.privateName(scrollable$, "_handleDragUpdate"),
    _handleDragEnd$1: dart.privateName(scrollable$, "_handleDragEnd"),
    _disposeHold: dart.privateName(scrollable$, "_disposeHold"),
    _disposeDrag: dart.privateName(scrollable$, "_disposeDrag"),
    _targetScrollOffsetForPointerScroll: dart.privateName(scrollable$, "_targetScrollOffsetForPointerScroll"),
    _pointerSignalEventDelta: dart.privateName(scrollable$, "_pointerSignalEventDelta"),
    _handlePointerScroll: dart.privateName(scrollable$, "_handlePointerScroll"),
    _receivedPointerSignal: dart.privateName(scrollable$, "_receivedPointerSignal"),
    direction$1: dart.privateName(scrollable$, "ScrollableDetails.direction"),
    controller$4: dart.privateName(scrollable$, "ScrollableDetails.controller"),
    position$3: dart.privateName(scrollable$, "_ScrollSemantics.position"),
    allowImplicitScrolling: dart.privateName(scrollable$, "_ScrollSemantics.allowImplicitScrolling"),
    semanticChildCount$1: dart.privateName(scrollable$, "_ScrollSemantics.semanticChildCount"),
    _innerNode: dart.privateName(scrollable$, "_innerNode"),
    _allowImplicitScrolling: dart.privateName(scrollable$, "_allowImplicitScrolling"),
    _semanticChildCount: dart.privateName(scrollable$, "_semanticChildCount"),
    _name$17: dart.privateName(scrollable$, "_name"),
    type: dart.privateName(scrollable$, "ScrollIncrementDetails.type"),
    metrics$1: dart.privateName(scrollable$, "ScrollIncrementDetails.metrics"),
    direction$2: dart.privateName(scrollable$, "ScrollIntent.direction"),
    type$1: dart.privateName(scrollable$, "ScrollIntent.type"),
    _calculateScrollIncrement: dart.privateName(scrollable$, "_calculateScrollIncrement"),
    _getIncrement: dart.privateName(scrollable$, "_getIncrement"),
    context$3: dart.privateName(scroll_aware_image_provider, "ScrollAwareImageProvider.context"),
    imageProvider: dart.privateName(scroll_aware_image_provider, "ScrollAwareImageProvider.imageProvider"),
    color$3: dart.privateName(placeholder, "_PlaceholderPainter.color"),
    strokeWidth: dart.privateName(placeholder, "_PlaceholderPainter.strokeWidth"),
    color$4: dart.privateName(placeholder, "Placeholder.color"),
    strokeWidth$1: dart.privateName(placeholder, "Placeholder.strokeWidth"),
    fallbackWidth: dart.privateName(placeholder, "Placeholder.fallbackWidth"),
    fallbackHeight: dart.privateName(placeholder, "Placeholder.fallbackHeight"),
    _name$18: dart.privateName(media_query, "_name"),
    size$1: dart.privateName(media_query, "MediaQueryData.size"),
    devicePixelRatio$1: dart.privateName(media_query, "MediaQueryData.devicePixelRatio"),
    textScaleFactor$1: dart.privateName(media_query, "MediaQueryData.textScaleFactor"),
    platformBrightness: dart.privateName(media_query, "MediaQueryData.platformBrightness"),
    viewInsets: dart.privateName(media_query, "MediaQueryData.viewInsets"),
    padding: dart.privateName(media_query, "MediaQueryData.padding"),
    viewPadding: dart.privateName(media_query, "MediaQueryData.viewPadding"),
    systemGestureInsets: dart.privateName(media_query, "MediaQueryData.systemGestureInsets"),
    alwaysUse24HourFormat: dart.privateName(media_query, "MediaQueryData.alwaysUse24HourFormat"),
    accessibleNavigation: dart.privateName(media_query, "MediaQueryData.accessibleNavigation"),
    invertColors: dart.privateName(media_query, "MediaQueryData.invertColors"),
    highContrast: dart.privateName(media_query, "MediaQueryData.highContrast"),
    disableAnimations: dart.privateName(media_query, "MediaQueryData.disableAnimations"),
    boldText: dart.privateName(media_query, "MediaQueryData.boldText"),
    navigationMode: dart.privateName(media_query, "MediaQueryData.navigationMode"),
    data$1: dart.privateName(media_query, "MediaQuery.data"),
    _state$1: dart.privateName(disposable_build_context, "_state"),
    _debugValidate: dart.privateName(disposable_build_context, "_debugValidate"),
    image: dart.privateName(image$, "Image.image"),
    frameBuilder: dart.privateName(image$, "Image.frameBuilder"),
    loadingBuilder: dart.privateName(image$, "Image.loadingBuilder"),
    errorBuilder: dart.privateName(image$, "Image.errorBuilder"),
    width: dart.privateName(image$, "Image.width"),
    height: dart.privateName(image$, "Image.height"),
    color$5: dart.privateName(image$, "Image.color"),
    filterQuality: dart.privateName(image$, "Image.filterQuality"),
    colorBlendMode: dart.privateName(image$, "Image.colorBlendMode"),
    fit: dart.privateName(image$, "Image.fit"),
    alignment$2: dart.privateName(image$, "Image.alignment"),
    repeat: dart.privateName(image$, "Image.repeat"),
    centerSlice: dart.privateName(image$, "Image.centerSlice"),
    matchTextDirection: dart.privateName(image$, "Image.matchTextDirection"),
    gaplessPlayback: dart.privateName(image$, "Image.gaplessPlayback"),
    semanticLabel: dart.privateName(image$, "Image.semanticLabel"),
    excludeFromSemantics$3: dart.privateName(image$, "Image.excludeFromSemantics"),
    isAntiAlias: dart.privateName(image$, "Image.isAntiAlias"),
    _name$19: dart.privateName(decoration_image, "_name"),
    _imageStream: dart.privateName(image$, "_imageStream"),
    _imageInfo: dart.privateName(image$, "_imageInfo"),
    _loadingProgress: dart.privateName(image$, "_loadingProgress"),
    _isListeningToStream: dart.privateName(image$, "_isListeningToStream"),
    ___ImageState__invertColors: dart.privateName(image$, "_#_ImageState#_invertColors"),
    ___ImageState__invertColors_isSet: dart.privateName(image$, "_#_ImageState#_invertColors#isSet"),
    _frameNumber: dart.privateName(image$, "_frameNumber"),
    _wasSynchronouslyLoaded: dart.privateName(image$, "_wasSynchronouslyLoaded"),
    ___ImageState__scrollAwareContext: dart.privateName(image$, "_#_ImageState#_scrollAwareContext"),
    ___ImageState__scrollAwareContext_isSet: dart.privateName(image$, "_#_ImageState#_scrollAwareContext#isSet"),
    _lastException: dart.privateName(image$, "_lastException"),
    _lastStack: dart.privateName(image$, "_lastStack"),
    _completerHandle: dart.privateName(image$, "_completerHandle"),
    _imageStreamListener: dart.privateName(image$, "_imageStreamListener"),
    _invertColors: dart.privateName(image$, "_invertColors"),
    _scrollAwareContext: dart.privateName(image$, "_scrollAwareContext"),
    _stopListeningToStream: dart.privateName(image$, "_stopListeningToStream"),
    _replaceImage: dart.privateName(image$, "_replaceImage"),
    _updateInvertColors: dart.privateName(image$, "_updateInvertColors"),
    _resolveImage: dart.privateName(image$, "_resolveImage"),
    _listenToStream: dart.privateName(image$, "_listenToStream"),
    _getListener: dart.privateName(image$, "_getListener"),
    _updateSourceStream: dart.privateName(image$, "_updateSourceStream"),
    _handleImageFrame: dart.privateName(image$, "_handleImageFrame"),
    _handleImageChunk: dart.privateName(image$, "_handleImageChunk"),
    Positioned_height: dart.privateName(basic, "Positioned.height"),
    Positioned_width: dart.privateName(basic, "Positioned.width"),
    Positioned_bottom: dart.privateName(basic, "Positioned.bottom"),
    Positioned_right: dart.privateName(basic, "Positioned.right"),
    Positioned_top: dart.privateName(basic, "Positioned.top"),
    Positioned_left: dart.privateName(basic, "Positioned.left"),
    Shadow_blurRadius: dart.privateName(ui, "Shadow.blurRadius"),
    Shadow_offset: dart.privateName(ui, "Shadow.offset"),
    Shadow_color: dart.privateName(ui, "Shadow.color"),
    _debugBuildErrorWidget: dart.privateName(image$, "_debugBuildErrorWidget"),
    decoration$2: dart.privateName(container, "DecoratedBox.decoration"),
    position$4: dart.privateName(container, "DecoratedBox.position"),
    child$33: dart.privateName(container, "Container.child"),
    alignment$3: dart.privateName(container, "Container.alignment"),
    padding$1: dart.privateName(container, "Container.padding"),
    color$6: dart.privateName(container, "Container.color"),
    decoration$3: dart.privateName(container, "Container.decoration"),
    foregroundDecoration: dart.privateName(container, "Container.foregroundDecoration"),
    constraints: dart.privateName(container, "Container.constraints"),
    margin: dart.privateName(container, "Container.margin"),
    transform: dart.privateName(container, "Container.transform"),
    transformAlignment: dart.privateName(container, "Container.transformAlignment"),
    clipBehavior$3: dart.privateName(container, "Container.clipBehavior"),
    _paddingIncludingDecoration: dart.privateName(container, "_paddingIncludingDecoration"),
    locale$1: dart.privateName(localizations, "_LocalizationsScope.locale"),
    localizationsState: dart.privateName(localizations, "_LocalizationsScope.localizationsState"),
    typeToResources: dart.privateName(localizations, "_LocalizationsScope.typeToResources"),
    locale$2: dart.privateName(localizations, "Localizations.locale"),
    delegates: dart.privateName(localizations, "Localizations.delegates"),
    child$34: dart.privateName(localizations, "Localizations.child"),
    _localizedResourcesScopeKey: dart.privateName(localizations, "_localizedResourcesScopeKey"),
    _typeToResources: dart.privateName(localizations, "_typeToResources"),
    _locale: dart.privateName(localizations, "_locale"),
    _anyDelegatesShouldReload: dart.privateName(localizations, "_anyDelegatesShouldReload"),
    _textDirection$2: dart.privateName(localizations, "_textDirection"),
    builder$2: dart.privateName(sliver$, "SliverChildBuilderDelegate.builder"),
    childCount: dart.privateName(sliver$, "SliverChildBuilderDelegate.childCount"),
    addAutomaticKeepAlives: dart.privateName(sliver$, "SliverChildBuilderDelegate.addAutomaticKeepAlives"),
    addRepaintBoundaries: dart.privateName(sliver$, "SliverChildBuilderDelegate.addRepaintBoundaries"),
    addSemanticIndexes: dart.privateName(sliver$, "SliverChildBuilderDelegate.addSemanticIndexes"),
    semanticIndexOffset: dart.privateName(sliver$, "SliverChildBuilderDelegate.semanticIndexOffset"),
    semanticIndexCallback: dart.privateName(sliver$, "SliverChildBuilderDelegate.semanticIndexCallback"),
    findChildIndexCallback: dart.privateName(sliver$, "SliverChildBuilderDelegate.findChildIndexCallback"),
    addAutomaticKeepAlives$1: dart.privateName(sliver$, "SliverChildListDelegate.addAutomaticKeepAlives"),
    addRepaintBoundaries$1: dart.privateName(sliver$, "SliverChildListDelegate.addRepaintBoundaries"),
    addSemanticIndexes$1: dart.privateName(sliver$, "SliverChildListDelegate.addSemanticIndexes"),
    semanticIndexOffset$1: dart.privateName(sliver$, "SliverChildListDelegate.semanticIndexOffset"),
    semanticIndexCallback$1: dart.privateName(sliver$, "SliverChildListDelegate.semanticIndexCallback"),
    children$4: dart.privateName(sliver$, "SliverChildListDelegate.children"),
    _keyToIndex: dart.privateName(sliver$, "SliverChildListDelegate._keyToIndex"),
    _keyToIndex$1: dart.privateName(sliver$, "_keyToIndex"),
    _isConstantInstance: dart.privateName(sliver$, "_isConstantInstance"),
    _findChildIndex: dart.privateName(sliver$, "_findChildIndex"),
    delegate$2: dart.privateName(sliver$, "SliverMultiBoxAdaptorWidget.delegate"),
    itemExtent: dart.privateName(sliver$, "SliverFixedExtentList.itemExtent"),
    gridDelegate: dart.privateName(sliver$, "SliverGrid.gridDelegate"),
    _childElements: dart.privateName(sliver$, "_childElements"),
    _currentBeforeChild: dart.privateName(sliver$, "_currentBeforeChild"),
    _currentlyUpdatingChildIndex: dart.privateName(sliver$, "_currentlyUpdatingChildIndex"),
    _didUnderflow: dart.privateName(sliver$, "_didUnderflow"),
    _replaceMovedChildren: dart.privateName(sliver$, "_replaceMovedChildren"),
    _build: dart.privateName(sliver$, "_build"),
    $truncate: dartx.truncate,
    opacity$2: dart.privateName(sliver$, "SliverOpacity.opacity"),
    alwaysIncludeSemantics$2: dart.privateName(sliver$, "SliverOpacity.alwaysIncludeSemantics"),
    ignoring: dart.privateName(sliver$, "SliverIgnorePointer.ignoring"),
    ignoringSemantics: dart.privateName(sliver$, "SliverIgnorePointer.ignoringSemantics"),
    offstage: dart.privateName(sliver$, "SliverOffstage.offstage"),
    keepAlive: dart.privateName(sliver$, "KeepAlive.keepAlive"),
    child$35: dart.privateName(notification_listener, "NotificationListener.child"),
    onNotification: dart.privateName(notification_listener, "NotificationListener.onNotification"),
    child$36: dart.privateName(automatic_keep_alive, "AutomaticKeepAlive.child"),
    _handles$1: dart.privateName(automatic_keep_alive, "_handles"),
    _child$1: dart.privateName(automatic_keep_alive, "_child"),
    _keepingAlive: dart.privateName(automatic_keep_alive, "_keepingAlive"),
    _updateChild: dart.privateName(automatic_keep_alive, "_updateChild"),
    _addClient: dart.privateName(automatic_keep_alive, "_addClient"),
    _createCallback: dart.privateName(automatic_keep_alive, "_createCallback"),
    _getChildElement: dart.privateName(automatic_keep_alive, "_getChildElement"),
    _updateParentDataOfChild: dart.privateName(automatic_keep_alive, "_updateParentDataOfChild"),
    handle: dart.privateName(automatic_keep_alive, "KeepAliveNotification.handle"),
    _keepAliveHandle: dart.privateName(automatic_keep_alive, "_keepAliveHandle"),
    _ensureKeepAlive: dart.privateName(automatic_keep_alive, "_ensureKeepAlive"),
    _releaseKeepAlive: dart.privateName(automatic_keep_alive, "_releaseKeepAlive"),
    _name$20: dart.privateName(autofill$, "_name"),
    child$37: dart.privateName(autofill$, "AutofillGroup.child"),
    onDisposeAction: dart.privateName(autofill$, "AutofillGroup.onDisposeAction"),
    _scope: dart.privateName(autofill$, "_scope"),
    _clients: dart.privateName(autofill$, "_clients"),
    _isTopmostAutofillGroup: dart.privateName(autofill$, "_isTopmostAutofillGroup"),
    _scope$1: dart.privateName(autofill$, "_AutofillScope._scope"),
    copy: dart.privateName(editable_text, "ToolbarOptions.copy"),
    cut: dart.privateName(editable_text, "ToolbarOptions.cut"),
    paste: dart.privateName(editable_text, "ToolbarOptions.paste"),
    selectAll: dart.privateName(editable_text, "ToolbarOptions.selectAll"),
    controller$5: dart.privateName(editable_text, "EditableText.controller"),
    focusNode: dart.privateName(editable_text, "EditableText.focusNode"),
    obscuringCharacter: dart.privateName(editable_text, "EditableText.obscuringCharacter"),
    obscureText: dart.privateName(editable_text, "EditableText.obscureText"),
    textHeightBehavior$3: dart.privateName(editable_text, "EditableText.textHeightBehavior"),
    textWidthBasis$2: dart.privateName(editable_text, "EditableText.textWidthBasis"),
    readOnly: dart.privateName(editable_text, "EditableText.readOnly"),
    forceLine: dart.privateName(editable_text, "EditableText.forceLine"),
    toolbarOptions: dart.privateName(editable_text, "EditableText.toolbarOptions"),
    showSelectionHandles: dart.privateName(editable_text, "EditableText.showSelectionHandles"),
    showCursor: dart.privateName(editable_text, "EditableText.showCursor"),
    autocorrect: dart.privateName(editable_text, "EditableText.autocorrect"),
    smartDashesType: dart.privateName(editable_text, "EditableText.smartDashesType"),
    smartQuotesType: dart.privateName(editable_text, "EditableText.smartQuotesType"),
    enableSuggestions: dart.privateName(editable_text, "EditableText.enableSuggestions"),
    style$2: dart.privateName(editable_text, "EditableText.style"),
    textAlign$3: dart.privateName(editable_text, "EditableText.textAlign"),
    textDirection$4: dart.privateName(editable_text, "EditableText.textDirection"),
    textCapitalization: dart.privateName(editable_text, "EditableText.textCapitalization"),
    locale$3: dart.privateName(editable_text, "EditableText.locale"),
    textScaleFactor$2: dart.privateName(editable_text, "EditableText.textScaleFactor"),
    cursorColor: dart.privateName(editable_text, "EditableText.cursorColor"),
    autocorrectionTextRectColor: dart.privateName(editable_text, "EditableText.autocorrectionTextRectColor"),
    backgroundCursorColor: dart.privateName(editable_text, "EditableText.backgroundCursorColor"),
    maxLines$3: dart.privateName(editable_text, "EditableText.maxLines"),
    minLines: dart.privateName(editable_text, "EditableText.minLines"),
    expands: dart.privateName(editable_text, "EditableText.expands"),
    autofocus: dart.privateName(editable_text, "EditableText.autofocus"),
    selectionColor: dart.privateName(editable_text, "EditableText.selectionColor"),
    selectionControls$2: dart.privateName(editable_text, "EditableText.selectionControls"),
    keyboardType: dart.privateName(editable_text, "EditableText.keyboardType"),
    textInputAction: dart.privateName(editable_text, "EditableText.textInputAction"),
    onChanged: dart.privateName(editable_text, "EditableText.onChanged"),
    onEditingComplete: dart.privateName(editable_text, "EditableText.onEditingComplete"),
    onSubmitted: dart.privateName(editable_text, "EditableText.onSubmitted"),
    onAppPrivateCommand: dart.privateName(editable_text, "EditableText.onAppPrivateCommand"),
    onSelectionChanged: dart.privateName(editable_text, "EditableText.onSelectionChanged"),
    onSelectionHandleTapped$2: dart.privateName(editable_text, "EditableText.onSelectionHandleTapped"),
    inputFormatters: dart.privateName(editable_text, "EditableText.inputFormatters"),
    mouseCursor: dart.privateName(editable_text, "EditableText.mouseCursor"),
    rendererIgnoresPointer: dart.privateName(editable_text, "EditableText.rendererIgnoresPointer"),
    cursorWidth: dart.privateName(editable_text, "EditableText.cursorWidth"),
    cursorHeight: dart.privateName(editable_text, "EditableText.cursorHeight"),
    cursorRadius: dart.privateName(editable_text, "EditableText.cursorRadius"),
    cursorOpacityAnimates: dart.privateName(editable_text, "EditableText.cursorOpacityAnimates"),
    cursorOffset: dart.privateName(editable_text, "EditableText.cursorOffset"),
    paintCursorAboveText: dart.privateName(editable_text, "EditableText.paintCursorAboveText"),
    selectionHeightStyle: dart.privateName(editable_text, "EditableText.selectionHeightStyle"),
    selectionWidthStyle: dart.privateName(editable_text, "EditableText.selectionWidthStyle"),
    keyboardAppearance: dart.privateName(editable_text, "EditableText.keyboardAppearance"),
    scrollPadding: dart.privateName(editable_text, "EditableText.scrollPadding"),
    enableInteractiveSelection: dart.privateName(editable_text, "EditableText.enableInteractiveSelection"),
    dragStartBehavior$4: dart.privateName(editable_text, "EditableText.dragStartBehavior"),
    scrollController: dart.privateName(editable_text, "EditableText.scrollController"),
    scrollPhysics: dart.privateName(editable_text, "EditableText.scrollPhysics"),
    autofillHints: dart.privateName(editable_text, "EditableText.autofillHints"),
    clipBehavior$4: dart.privateName(editable_text, "EditableText.clipBehavior"),
    restorationId$4: dart.privateName(editable_text, "EditableText.restorationId"),
    scrollBehavior$1: dart.privateName(editable_text, "EditableText.scrollBehavior"),
    _name$21: dart.privateName(text_input, "_name"),
    _strutStyle: dart.privateName(editable_text, "_strutStyle"),
    TextInputType_decimal: dart.privateName(text_input, "TextInputType.decimal"),
    TextInputType_signed: dart.privateName(text_input, "TextInputType.signed"),
    TextInputType_index: dart.privateName(text_input, "TextInputType.index"),
    _cursorTimer: dart.privateName(editable_text, "_cursorTimer"),
    _targetCursorVisibility: dart.privateName(editable_text, "_targetCursorVisibility"),
    _cursorVisibilityNotifier: dart.privateName(editable_text, "_cursorVisibilityNotifier"),
    _editableKey: dart.privateName(editable_text, "_editableKey"),
    _clipboardStatus: dart.privateName(editable_text, "_clipboardStatus"),
    _textInputConnection: dart.privateName(editable_text, "_textInputConnection"),
    _selectionOverlay: dart.privateName(editable_text, "_selectionOverlay"),
    _scrollController: dart.privateName(editable_text, "_scrollController"),
    __EditableTextState__cursorBlinkOpacityController: dart.privateName(editable_text, "_#EditableTextState#_cursorBlinkOpacityController"),
    __EditableTextState__cursorBlinkOpacityController_isSet: dart.privateName(editable_text, "_#EditableTextState#_cursorBlinkOpacityController#isSet"),
    _toolbarLayerLink: dart.privateName(editable_text, "_toolbarLayerLink"),
    _startHandleLayerLink: dart.privateName(editable_text, "_startHandleLayerLink"),
    _endHandleLayerLink: dart.privateName(editable_text, "_endHandleLayerLink"),
    _didAutoFocus: dart.privateName(editable_text, "_didAutoFocus"),
    _focusAttachment: dart.privateName(editable_text, "_focusAttachment"),
    _currentAutofillScope: dart.privateName(editable_text, "_currentAutofillScope"),
    _isInAutofillContext: dart.privateName(editable_text, "_isInAutofillContext"),
    __EditableTextState__floatingCursorResetController: dart.privateName(editable_text, "_#EditableTextState#_floatingCursorResetController"),
    __EditableTextState__floatingCursorResetController_isSet: dart.privateName(editable_text, "_#EditableTextState#_floatingCursorResetController#isSet"),
    _lastKnownRemoteTextEditingValue: dart.privateName(editable_text, "_lastKnownRemoteTextEditingValue"),
    _startCaretRect: dart.privateName(editable_text, "_startCaretRect"),
    _lastTextPosition: dart.privateName(editable_text, "_lastTextPosition"),
    _pointOffsetOrigin: dart.privateName(editable_text, "_pointOffsetOrigin"),
    _lastBoundedOffset: dart.privateName(editable_text, "_lastBoundedOffset"),
    _batchEditDepth: dart.privateName(editable_text, "_batchEditDepth"),
    _currentCaretRect: dart.privateName(editable_text, "_currentCaretRect"),
    _showCaretOnScreenScheduled: dart.privateName(editable_text, "_showCaretOnScreenScheduled"),
    __EditableTextState__lastBottomViewInset: dart.privateName(editable_text, "_#EditableTextState#_lastBottomViewInset"),
    __EditableTextState__lastBottomViewInset_isSet: dart.privateName(editable_text, "_#EditableTextState#_lastBottomViewInset#isSet"),
    _obscureShowCharTicksPending: dart.privateName(editable_text, "_obscureShowCharTicksPending"),
    _obscureLatestCharIndex: dart.privateName(editable_text, "_obscureLatestCharIndex"),
    _currentPromptRectRange: dart.privateName(editable_text, "_currentPromptRectRange"),
    _cursorBlinkOpacityController: dart.privateName(editable_text, "_cursorBlinkOpacityController"),
    _shouldCreateInputConnection: dart.privateName(editable_text, "_shouldCreateInputConnection"),
    _floatingCursorResetController: dart.privateName(editable_text, "_floatingCursorResetController"),
    _cursorColor: dart.privateName(editable_text, "_cursorColor"),
    _onChangedClipboardStatus: dart.privateName(editable_text, "_onChangedClipboardStatus"),
    _didChangeTextEditingValue: dart.privateName(editable_text, "_didChangeTextEditingValue"),
    _handleFocusChanged: dart.privateName(editable_text, "_handleFocusChanged"),
    _onCursorColorTick: dart.privateName(editable_text, "_onCursorColorTick"),
    _onFloatingCursorResetTick: dart.privateName(editable_text, "_onFloatingCursorResetTick")
  };
  var S$1 = {
    _shouldBeInAutofillContext: dart.privateName(editable_text, "_shouldBeInAutofillContext"),
    _updateRemoteEditingValueIfNeeded: dart.privateName(editable_text, "_updateRemoteEditingValueIfNeeded"),
    _value$3: dart.privateName(editable_text, "_value"),
    _closeInputConnectionIfNeeded: dart.privateName(editable_text, "_closeInputConnectionIfNeeded"),
    _hasFocus: dart.privateName(editable_text, "_hasFocus"),
    _openInputConnection: dart.privateName(editable_text, "_openInputConnection"),
    _hasInputConnection: dart.privateName(editable_text, "_hasInputConnection"),
    _textDirection$3: dart.privateName(editable_text, "_textDirection"),
    _stopCursorTimer: dart.privateName(editable_text, "_stopCursorTimer"),
    _handleSelectionChanged: dart.privateName(editable_text, "_handleSelectionChanged"),
    _formatAndSetValue: dart.privateName(editable_text, "_formatAndSetValue"),
    _scheduleShowCaretOnScreen: dart.privateName(editable_text, "_scheduleShowCaretOnScreen"),
    _startCursorTimer: dart.privateName(editable_text, "_startCursorTimer"),
    _isMultiline: dart.privateName(editable_text, "_isMultiline"),
    _finalizeEditing: dart.privateName(editable_text, "_finalizeEditing"),
    _floatingCursorOffset: dart.privateName(editable_text, "_floatingCursorOffset"),
    _getOffsetToRevealCaret: dart.privateName(editable_text, "_getOffsetToRevealCaret"),
    _needsAutofill: dart.privateName(editable_text, "_needsAutofill"),
    _createTextInputConfiguration: dart.privateName(editable_text, "_createTextInputConfiguration"),
    _updateSizeAndTransform: dart.privateName(editable_text, "_updateSizeAndTransform"),
    _updateComposingRectIfNeeded: dart.privateName(editable_text, "_updateComposingRectIfNeeded"),
    _updateCaretRectIfNeeded: dart.privateName(editable_text, "_updateCaretRectIfNeeded"),
    _openOrCloseInputConnectionIfNeeded: dart.privateName(editable_text, "_openOrCloseInputConnectionIfNeeded"),
    _updateOrDisposeSelectionOverlayIfNeeded: dart.privateName(editable_text, "_updateOrDisposeSelectionOverlayIfNeeded"),
    _handleCaretChanged: dart.privateName(editable_text, "_handleCaretChanged"),
    _lastBottomViewInset: dart.privateName(editable_text, "_lastBottomViewInset"),
    $fold: dartx.fold,
    _cursorTick: dart.privateName(editable_text, "_cursorTick"),
    _cursorWaitForStart: dart.privateName(editable_text, "_cursorWaitForStart"),
    _startOrStopCursorTimerIfNeeded: dart.privateName(editable_text, "_startOrStopCursorTimerIfNeeded"),
    _devicePixelRatio: dart.privateName(editable_text, "_devicePixelRatio"),
    _semanticsOnCopy: dart.privateName(editable_text, "_semanticsOnCopy"),
    _semanticsOnCut: dart.privateName(editable_text, "_semanticsOnCut"),
    _semanticsOnPaste: dart.privateName(editable_text, "_semanticsOnPaste"),
    $times: dartx['*'],
    $replaceRange: dartx.replaceRange,
    textSpan$1: dart.privateName(editable_text, "_Editable.textSpan"),
    value: dart.privateName(editable_text, "_Editable.value"),
    cursorColor$1: dart.privateName(editable_text, "_Editable.cursorColor"),
    startHandleLayerLink$2: dart.privateName(editable_text, "_Editable.startHandleLayerLink"),
    endHandleLayerLink$2: dart.privateName(editable_text, "_Editable.endHandleLayerLink"),
    backgroundCursorColor$1: dart.privateName(editable_text, "_Editable.backgroundCursorColor"),
    showCursor$1: dart.privateName(editable_text, "_Editable.showCursor"),
    forceLine$1: dart.privateName(editable_text, "_Editable.forceLine"),
    readOnly$1: dart.privateName(editable_text, "_Editable.readOnly"),
    hasFocus: dart.privateName(editable_text, "_Editable.hasFocus"),
    maxLines$4: dart.privateName(editable_text, "_Editable.maxLines"),
    minLines$1: dart.privateName(editable_text, "_Editable.minLines"),
    expands$1: dart.privateName(editable_text, "_Editable.expands"),
    strutStyle$1: dart.privateName(editable_text, "_Editable.strutStyle"),
    selectionColor$1: dart.privateName(editable_text, "_Editable.selectionColor"),
    textScaleFactor$3: dart.privateName(editable_text, "_Editable.textScaleFactor"),
    textAlign$4: dart.privateName(editable_text, "_Editable.textAlign"),
    textDirection$5: dart.privateName(editable_text, "_Editable.textDirection"),
    locale$4: dart.privateName(editable_text, "_Editable.locale"),
    obscuringCharacter$1: dart.privateName(editable_text, "_Editable.obscuringCharacter"),
    obscureText$1: dart.privateName(editable_text, "_Editable.obscureText"),
    textHeightBehavior$4: dart.privateName(editable_text, "_Editable.textHeightBehavior"),
    textWidthBasis$3: dart.privateName(editable_text, "_Editable.textWidthBasis"),
    autocorrect$1: dart.privateName(editable_text, "_Editable.autocorrect"),
    smartDashesType$1: dart.privateName(editable_text, "_Editable.smartDashesType"),
    smartQuotesType$1: dart.privateName(editable_text, "_Editable.smartQuotesType"),
    enableSuggestions$1: dart.privateName(editable_text, "_Editable.enableSuggestions"),
    offset$2: dart.privateName(editable_text, "_Editable.offset"),
    onCaretChanged: dart.privateName(editable_text, "_Editable.onCaretChanged"),
    rendererIgnoresPointer$1: dart.privateName(editable_text, "_Editable.rendererIgnoresPointer"),
    cursorWidth$1: dart.privateName(editable_text, "_Editable.cursorWidth"),
    cursorHeight$1: dart.privateName(editable_text, "_Editable.cursorHeight"),
    cursorRadius$1: dart.privateName(editable_text, "_Editable.cursorRadius"),
    cursorOffset$1: dart.privateName(editable_text, "_Editable.cursorOffset"),
    paintCursorAboveText$1: dart.privateName(editable_text, "_Editable.paintCursorAboveText"),
    selectionHeightStyle$1: dart.privateName(editable_text, "_Editable.selectionHeightStyle"),
    selectionWidthStyle$1: dart.privateName(editable_text, "_Editable.selectionWidthStyle"),
    enableInteractiveSelection$1: dart.privateName(editable_text, "_Editable.enableInteractiveSelection"),
    textSelectionDelegate: dart.privateName(editable_text, "_Editable.textSelectionDelegate"),
    devicePixelRatio$2: dart.privateName(editable_text, "_Editable.devicePixelRatio"),
    promptRectRange: dart.privateName(editable_text, "_Editable.promptRectRange"),
    promptRectColor: dart.privateName(editable_text, "_Editable.promptRectColor"),
    clipBehavior$5: dart.privateName(editable_text, "_Editable.clipBehavior"),
    _name$22: dart.privateName(focus_traversal, "_name"),
    _findInitialFocus: dart.privateName(focus_traversal, "_findInitialFocus"),
    _sortAllDescendants: dart.privateName(focus_traversal, "_sortAllDescendants"),
    _moveFocus: dart.privateName(focus_traversal, "_moveFocus"),
    _getMarker: dart.privateName(focus_traversal, "_getMarker"),
    direction$3: dart.privateName(focus_traversal, "_DirectionalPolicyDataEntry.direction"),
    node: dart.privateName(focus_traversal, "_DirectionalPolicyDataEntry.node"),
    history: dart.privateName(focus_traversal, "_DirectionalPolicyData.history"),
    _policyData: dart.privateName(focus_traversal, "DirectionalFocusTraversalPolicyMixin._policyData"),
    _policyData$1: dart.privateName(focus_traversal, "_policyData"),
    _sortAndFindInitial: dart.privateName(focus_traversal, "_sortAndFindInitial"),
    _sortAndFilterHorizontally: dart.privateName(focus_traversal, "_sortAndFilterHorizontally"),
    _sortAndFilterVertically: dart.privateName(focus_traversal, "_sortAndFilterVertically"),
    _popPolicyDataIfNeeded: dart.privateName(focus_traversal, "_popPolicyDataIfNeeded"),
    _pushPolicyData: dart.privateName(focus_traversal, "_pushPolicyData"),
    _directionalAncestors: dart.privateName(focus_traversal, "_directionalAncestors"),
    _rect: dart.privateName(focus_traversal, "_rect"),
    _memberAncestors: dart.privateName(focus_traversal, "_memberAncestors"),
    _collectDirectionalityGroups: dart.privateName(focus_traversal, "_collectDirectionalityGroups"),
    _pickNext: dart.privateName(focus_traversal, "_pickNext"),
    order: dart.privateName(focus_traversal, "NumericFocusOrder.order"),
    order$1: dart.privateName(focus_traversal, "LexicalFocusOrder.order"),
    node$1: dart.privateName(focus_traversal, "_OrderedFocusInfo.node"),
    order$2: dart.privateName(focus_traversal, "_OrderedFocusInfo.order"),
    secondary: dart.privateName(focus_traversal, "OrderedTraversalPolicy.secondary"),
    $followedBy: dartx.followedBy,
    order$3: dart.privateName(focus_traversal, "FocusTraversalOrder.order"),
    policy: dart.privateName(focus_traversal, "FocusTraversalGroup.policy"),
    descendantsAreFocusable: dart.privateName(focus_traversal, "FocusTraversalGroup.descendantsAreFocusable"),
    child$38: dart.privateName(focus_traversal, "FocusTraversalGroup.child"),
    policy$1: dart.privateName(focus_traversal, "_FocusTraversalGroupMarker.policy"),
    focusNode$1: dart.privateName(focus_traversal, "_FocusTraversalGroupMarker.focusNode"),
    focusNode$2: dart.privateName(focus_traversal, "RequestFocusIntent.focusNode"),
    direction$4: dart.privateName(focus_traversal, "DirectionalFocusIntent.direction"),
    ignoreTextFields: dart.privateName(focus_traversal, "DirectionalFocusIntent.ignoreTextFields"),
    _dirty$1: dart.privateName(inherited_notifier, "_dirty"),
    _handleUpdate: dart.privateName(inherited_notifier, "_handleUpdate"),
    debugLabel$3: dart.privateName(focus_scope, "Focus.debugLabel"),
    child$39: dart.privateName(focus_scope, "Focus.child"),
    onKey: dart.privateName(focus_scope, "Focus.onKey"),
    onFocusChange: dart.privateName(focus_scope, "Focus.onFocusChange"),
    autofocus$1: dart.privateName(focus_scope, "Focus.autofocus"),
    focusNode$3: dart.privateName(focus_scope, "Focus.focusNode"),
    skipTraversal: dart.privateName(focus_scope, "Focus.skipTraversal"),
    includeSemantics: dart.privateName(focus_scope, "Focus.includeSemantics"),
    canRequestFocus: dart.privateName(focus_scope, "Focus.canRequestFocus"),
    descendantsAreFocusable$1: dart.privateName(focus_scope, "Focus.descendantsAreFocusable"),
    _internalNode: dart.privateName(focus_scope, "_internalNode"),
    _hasPrimaryFocus: dart.privateName(focus_scope, "_hasPrimaryFocus"),
    _canRequestFocus: dart.privateName(focus_scope, "_canRequestFocus"),
    _descendantsAreFocusable: dart.privateName(focus_scope, "_descendantsAreFocusable"),
    _didAutofocus: dart.privateName(focus_scope, "_didAutofocus"),
    _focusAttachment$1: dart.privateName(focus_scope, "_focusAttachment"),
    _initNode: dart.privateName(focus_scope, "_initNode"),
    _createNode: dart.privateName(focus_scope, "_createNode"),
    _handleFocusChanged$1: dart.privateName(focus_scope, "_handleFocusChanged"),
    _handleAutofocus: dart.privateName(focus_scope, "_handleAutofocus"),
    onKey$1: dart.privateName(focus_manager, "FocusNode.onKey"),
    _context: dart.privateName(focus_manager, "_context"),
    _manager: dart.privateName(focus_manager, "_manager"),
    _ancestors: dart.privateName(focus_manager, "_ancestors"),
    _descendants: dart.privateName(focus_manager, "_descendants"),
    _hasKeyboardToken: dart.privateName(focus_manager, "_hasKeyboardToken"),
    _parent$1: dart.privateName(focus_manager, "_parent"),
    _children$3: dart.privateName(focus_manager, "_children"),
    _debugLabel: dart.privateName(focus_manager, "_debugLabel"),
    _attachment: dart.privateName(focus_manager, "_attachment"),
    _requestFocusWhenReparented: dart.privateName(focus_manager, "_requestFocusWhenReparented"),
    _skipTraversal: dart.privateName(focus_manager, "_skipTraversal"),
    _canRequestFocus$1: dart.privateName(focus_manager, "_canRequestFocus"),
    _descendantsAreFocusable$1: dart.privateName(focus_manager, "_descendantsAreFocusable"),
    _markPropertiesChanged: dart.privateName(focus_manager, "_markPropertiesChanged"),
    _name$23: dart.privateName(focus_manager, "_name"),
    _markedForFocus: dart.privateName(focus_manager, "_markedForFocus"),
    _focusedChildren: dart.privateName(focus_manager, "_focusedChildren"),
    _doRequestFocus: dart.privateName(focus_manager, "_doRequestFocus"),
    _markNextFocus: dart.privateName(focus_manager, "_markNextFocus"),
    _setAsFocusedChildForScope: dart.privateName(focus_manager, "_setAsFocusedChildForScope"),
    _notify: dart.privateName(focus_manager, "_notify"),
    _removeChild: dart.privateName(focus_manager, "_removeChild"),
    _updateManager: dart.privateName(focus_manager, "_updateManager"),
    _reparent: dart.privateName(focus_manager, "_reparent"),
    $whereType: dartx.whereType,
    excluding: dart.privateName(focus_scope, "ExcludeFocus.excluding"),
    child$40: dart.privateName(focus_scope, "ExcludeFocus.child"),
    _node: dart.privateName(focus_manager, "_node"),
    _markDetached: dart.privateName(focus_manager, "_markDetached"),
    _listeners$2: dart.privateName(focus_manager, "FocusManager._listeners"),
    rootScope: dart.privateName(focus_manager, "FocusManager.rootScope"),
    _highlightStrategy: dart.privateName(focus_manager, "_highlightStrategy"),
    _highlightMode: dart.privateName(focus_manager, "_highlightMode"),
    _lastInteractionWasTouch: dart.privateName(focus_manager, "_lastInteractionWasTouch"),
    _primaryFocus: dart.privateName(focus_manager, "_primaryFocus"),
    _dirtyNodes: dart.privateName(focus_manager, "_dirtyNodes"),
    _haveScheduledUpdate: dart.privateName(focus_manager, "_haveScheduledUpdate"),
    _listeners$3: dart.privateName(focus_manager, "_listeners"),
    _handleRawKeyEvent: dart.privateName(focus_manager, "_handleRawKeyEvent"),
    _handlePointerEvent: dart.privateName(focus_manager, "_handlePointerEvent"),
    _updateHighlightMode: dart.privateName(focus_manager, "_updateHighlightMode"),
    _notifyHighlightModeListeners: dart.privateName(focus_manager, "_notifyHighlightModeListeners"),
    _markNeedsUpdate: dart.privateName(focus_manager, "_markNeedsUpdate"),
    _applyFocusChange: dart.privateName(focus_manager, "_applyFocusChange"),
    value$1: dart.privateName(framework, "ObjectKey.value"),
    _globalKeyRegistry: dart.privateName(framework, "_globalKeyRegistry"),
    _debugLabel$1: dart.privateName(framework, "_debugLabel"),
    value$2: dart.privateName(framework, "GlobalObjectKey.value"),
    $endsWith: dartx.endsWith,
    _name$24: dart.privateName(framework, "_name"),
    _locked: dart.privateName(framework, "_locked"),
    _elements: dart.privateName(framework, "_elements"),
    _unmount: dart.privateName(framework, "_unmount"),
    _unmountAll: dart.privateName(framework, "_unmountAll"),
    onBuildScheduled: dart.privateName(framework, "BuildOwner.onBuildScheduled"),
    focusManager: dart.privateName(framework, "BuildOwner.focusManager"),
    _dirtyElements: dart.privateName(framework, "_dirtyElements"),
    _scheduledFlushDirtyElements: dart.privateName(framework, "_scheduledFlushDirtyElements"),
    _dirtyElementsNeedsResorting: dart.privateName(framework, "_dirtyElementsNeedsResorting"),
    _debugStateLockLevel: dart.privateName(framework, "_debugStateLockLevel"),
    _debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans: dart.privateName(framework, "_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans"),
    _debugIllFatedElements: dart.privateName(framework, "_debugIllFatedElements"),
    _debugGlobalKeyReservations: dart.privateName(framework, "_debugGlobalKeyReservations"),
    _debugIsInBuildScope: dart.privateName(framework, "_debugIsInBuildScope"),
    _debugVerifyGlobalKeyReservation: dart.privateName(framework, "_debugVerifyGlobalKeyReservation"),
    _debugVerifyIllFatedPopulation: dart.privateName(framework, "_debugVerifyIllFatedPopulation"),
    $update: dartx.update,
    message: dart.privateName(framework, "ErrorWidget.message"),
    _flutterError: dart.privateName(framework, "_flutterError"),
    state$1: dart.privateName(framework, "StatefulElement.state"),
    _didChangeDependencies: dart.privateName(framework, "_didChangeDependencies"),
    _applyParentData: dart.privateName(framework, "_applyParentData"),
    element: dart.privateName(framework, "DebugCreator.element"),
    value$3: dart.privateName(framework, "IndexedSlot.value"),
    index: dart.privateName(framework, "IndexedSlot.index"),
    _name$25: dart.privateName(banner, "_name"),
    message$1: dart.privateName(banner, "BannerPainter.message"),
    textDirection$6: dart.privateName(banner, "BannerPainter.textDirection"),
    location$1: dart.privateName(banner, "BannerPainter.location"),
    layoutDirection: dart.privateName(banner, "BannerPainter.layoutDirection"),
    color$7: dart.privateName(banner, "BannerPainter.color"),
    textStyle: dart.privateName(banner, "BannerPainter.textStyle"),
    _prepared: dart.privateName(banner, "_prepared"),
    __BannerPainter__textPainter: dart.privateName(banner, "_#BannerPainter#_textPainter"),
    __BannerPainter__textPainter_isSet: dart.privateName(banner, "_#BannerPainter#_textPainter#isSet"),
    __BannerPainter__paintShadow: dart.privateName(banner, "_#BannerPainter#_paintShadow"),
    __BannerPainter__paintShadow_isSet: dart.privateName(banner, "_#BannerPainter#_paintShadow#isSet"),
    __BannerPainter__paintBanner: dart.privateName(banner, "_#BannerPainter#_paintBanner"),
    __BannerPainter__paintBanner_isSet: dart.privateName(banner, "_#BannerPainter#_paintBanner#isSet"),
    _textPainter$1: dart.privateName(banner, "_textPainter"),
    _paintShadow: dart.privateName(banner, "_paintShadow"),
    _paintBanner: dart.privateName(banner, "_paintBanner"),
    _prepare: dart.privateName(banner, "_prepare"),
    _translationX: dart.privateName(banner, "_translationX"),
    _translationY: dart.privateName(banner, "_translationY"),
    _rotation: dart.privateName(banner, "_rotation"),
    BoxShadow_spreadRadius: dart.privateName(box_shadow, "BoxShadow.spreadRadius"),
    child$41: dart.privateName(banner, "Banner.child"),
    message$2: dart.privateName(banner, "Banner.message"),
    textDirection$7: dart.privateName(banner, "Banner.textDirection"),
    location$2: dart.privateName(banner, "Banner.location"),
    layoutDirection$1: dart.privateName(banner, "Banner.layoutDirection"),
    color$8: dart.privateName(banner, "Banner.color"),
    textStyle$1: dart.privateName(banner, "Banner.textStyle"),
    child$42: dart.privateName(banner, "CheckedModeBanner.child"),
    Rect_bottom: dart.privateName(ui, "Rect.bottom"),
    Rect_right: dart.privateName(ui, "Rect.right"),
    Rect_top: dart.privateName(ui, "Rect.top"),
    Rect_left: dart.privateName(ui, "Rect.left"),
    navigatorKey: dart.privateName(app, "WidgetsApp.navigatorKey"),
    onGenerateRoute$1: dart.privateName(app, "WidgetsApp.onGenerateRoute"),
    onGenerateInitialRoutes$1: dart.privateName(app, "WidgetsApp.onGenerateInitialRoutes"),
    pageRouteBuilder: dart.privateName(app, "WidgetsApp.pageRouteBuilder"),
    routeInformationParser$2: dart.privateName(app, "WidgetsApp.routeInformationParser"),
    routerDelegate$2: dart.privateName(app, "WidgetsApp.routerDelegate"),
    backButtonDispatcher$2: dart.privateName(app, "WidgetsApp.backButtonDispatcher"),
    routeInformationProvider$2: dart.privateName(app, "WidgetsApp.routeInformationProvider"),
    home: dart.privateName(app, "WidgetsApp.home"),
    routes: dart.privateName(app, "WidgetsApp.routes"),
    onUnknownRoute$1: dart.privateName(app, "WidgetsApp.onUnknownRoute"),
    initialRoute$1: dart.privateName(app, "WidgetsApp.initialRoute"),
    navigatorObservers: dart.privateName(app, "WidgetsApp.navigatorObservers"),
    builder$3: dart.privateName(app, "WidgetsApp.builder"),
    title$1: dart.privateName(app, "WidgetsApp.title"),
    onGenerateTitle: dart.privateName(app, "WidgetsApp.onGenerateTitle"),
    textStyle$2: dart.privateName(app, "WidgetsApp.textStyle"),
    color$9: dart.privateName(app, "WidgetsApp.color"),
    locale$5: dart.privateName(app, "WidgetsApp.locale"),
    localizationsDelegates: dart.privateName(app, "WidgetsApp.localizationsDelegates"),
    localeListResolutionCallback: dart.privateName(app, "WidgetsApp.localeListResolutionCallback"),
    localeResolutionCallback: dart.privateName(app, "WidgetsApp.localeResolutionCallback"),
    supportedLocales: dart.privateName(app, "WidgetsApp.supportedLocales"),
    showPerformanceOverlay: dart.privateName(app, "WidgetsApp.showPerformanceOverlay"),
    checkerboardRasterCacheImages$1: dart.privateName(app, "WidgetsApp.checkerboardRasterCacheImages"),
    checkerboardOffscreenLayers$1: dart.privateName(app, "WidgetsApp.checkerboardOffscreenLayers"),
    showSemanticsDebugger: dart.privateName(app, "WidgetsApp.showSemanticsDebugger"),
    debugShowWidgetInspector: dart.privateName(app, "WidgetsApp.debugShowWidgetInspector"),
    inspectorSelectButtonBuilder: dart.privateName(app, "WidgetsApp.inspectorSelectButtonBuilder"),
    debugShowCheckedModeBanner: dart.privateName(app, "WidgetsApp.debugShowCheckedModeBanner"),
    shortcuts$1: dart.privateName(app, "WidgetsApp.shortcuts"),
    actions$1: dart.privateName(app, "WidgetsApp.actions"),
    restorationScopeId$3: dart.privateName(app, "WidgetsApp.restorationScopeId"),
    Locale__countryCode: dart.privateName(ui, "Locale._countryCode"),
    Locale_scriptCode: dart.privateName(ui, "Locale.scriptCode"),
    Locale__languageCode: dart.privateName(ui, "Locale._languageCode"),
    PrioritizedIntents_orderedIntents: dart.privateName(actions$, "PrioritizedIntents.orderedIntents"),
    _defaultRouteInformationProvider: dart.privateName(app, "_defaultRouteInformationProvider"),
    _navigator$1: dart.privateName(app, "_navigator"),
    _locale$1: dart.privateName(app, "_locale"),
    _initialRouteName: dart.privateName(app, "_initialRouteName"),
    _updateRouting: dart.privateName(app, "_updateRouting"),
    _resolveLocales: dart.privateName(app, "_resolveLocales"),
    _usesRouter: dart.privateName(app, "_usesRouter"),
    _usesNavigator: dart.privateName(app, "_usesNavigator"),
    _effectiveRouteInformationProvider: dart.privateName(app, "_effectiveRouteInformationProvider"),
    _onGenerateRoute: dart.privateName(app, "_onGenerateRoute"),
    _onUnknownRoute: dart.privateName(app, "_onUnknownRoute"),
    _localizationsDelegates: dart.privateName(app, "_localizationsDelegates"),
    _debugCheckLocalizations: dart.privateName(app, "_debugCheckLocalizations"),
    child$43: dart.privateName(app, "_MediaQueryFromWindow.child"),
    _buildOwner: dart.privateName(binding$5, "WidgetsBinding._buildOwner"),
    _observers: dart.privateName(binding$5, "WidgetsBinding._observers"),
    _needToReportFirstFrame: dart.privateName(binding$5, "WidgetsBinding._needToReportFirstFrame"),
    _firstFrameCompleter: dart.privateName(binding$5, "WidgetsBinding._firstFrameCompleter"),
    debugBuildingDirtyElements: dart.privateName(binding$5, "WidgetsBinding.debugBuildingDirtyElements"),
    _renderViewElement: dart.privateName(binding$5, "WidgetsBinding._renderViewElement"),
    _readyToProduceFrames: dart.privateName(binding$5, "WidgetsBinding._readyToProduceFrames"),
    _buildOwner$1: dart.privateName(binding$5, "_buildOwner"),
    _observers$1: dart.privateName(binding$5, "_observers"),
    _needToReportFirstFrame$1: dart.privateName(binding$5, "_needToReportFirstFrame"),
    _firstFrameCompleter$1: dart.privateName(binding$5, "_firstFrameCompleter"),
    _renderViewElement$1: dart.privateName(binding$5, "_renderViewElement"),
    _readyToProduceFrames$1: dart.privateName(binding$5, "_readyToProduceFrames"),
    _debugAddStackFilters: dart.privateName(binding$5, "_debugAddStackFilters"),
    _handleBuildScheduled: dart.privateName(binding$5, "_handleBuildScheduled"),
    _handleNavigationInvocation: dart.privateName(binding$5, "_handleNavigationInvocation"),
    PartialStackFrame_method: dart.privateName(assertions, "PartialStackFrame.method"),
    PartialStackFrame_className: dart.privateName(assertions, "PartialStackFrame.className"),
    PartialStackFrame_package: dart.privateName(assertions, "PartialStackFrame.package"),
    RepetitiveStackFrameFilter_replacement: dart.privateName(assertions, "RepetitiveStackFrameFilter.replacement"),
    RepetitiveStackFrameFilter_frames: dart.privateName(assertions, "RepetitiveStackFrameFilter.frames"),
    _forceRebuild: dart.privateName(binding$5, "_forceRebuild"),
    _handlePushRouteInformation: dart.privateName(binding$5, "_handlePushRouteInformation"),
    child$44: dart.privateName(binding$5, "RenderObjectToWidgetAdapter.child"),
    container: dart.privateName(binding$5, "RenderObjectToWidgetAdapter.container"),
    debugShortDescription: dart.privateName(binding$5, "RenderObjectToWidgetAdapter.debugShortDescription"),
    _newWidget: dart.privateName(binding$5, "_newWidget"),
    _child$2: dart.privateName(binding$5, "_child"),
    _rebuild$1: dart.privateName(binding$5, "_rebuild"),
    textDirection$8: dart.privateName(basic, "Directionality.textDirection"),
    opacity$3: dart.privateName(basic, "Opacity.opacity"),
    alwaysIncludeSemantics$3: dart.privateName(basic, "Opacity.alwaysIncludeSemantics"),
    shaderCallback: dart.privateName(basic, "ShaderMask.shaderCallback"),
    blendMode: dart.privateName(basic, "ShaderMask.blendMode"),
    filter$1: dart.privateName(basic, "BackdropFilter.filter"),
    painter: dart.privateName(basic, "CustomPaint.painter"),
    foregroundPainter: dart.privateName(basic, "CustomPaint.foregroundPainter"),
    size$2: dart.privateName(basic, "CustomPaint.size"),
    isComplex: dart.privateName(basic, "CustomPaint.isComplex"),
    willChange: dart.privateName(basic, "CustomPaint.willChange"),
    clipper: dart.privateName(basic, "ClipRect.clipper"),
    clipBehavior$6: dart.privateName(basic, "ClipRect.clipBehavior"),
    borderRadius: dart.privateName(basic, "ClipRRect.borderRadius"),
    clipper$1: dart.privateName(basic, "ClipRRect.clipper"),
    clipBehavior$7: dart.privateName(basic, "ClipRRect.clipBehavior"),
    Radius_y: dart.privateName(ui, "Radius.y"),
    Radius_x: dart.privateName(ui, "Radius.x"),
    BorderRadius_bottomRight: dart.privateName(border_radius, "BorderRadius.bottomRight"),
    BorderRadius_bottomLeft: dart.privateName(border_radius, "BorderRadius.bottomLeft"),
    BorderRadius_topRight: dart.privateName(border_radius, "BorderRadius.topRight"),
    BorderRadius_topLeft: dart.privateName(border_radius, "BorderRadius.topLeft"),
    clipper$2: dart.privateName(basic, "ClipOval.clipper"),
    clipBehavior$8: dart.privateName(basic, "ClipOval.clipBehavior"),
    clipper$3: dart.privateName(basic, "ClipPath.clipper"),
    clipBehavior$9: dart.privateName(basic, "ClipPath.clipBehavior"),
    shape: dart.privateName(basic, "PhysicalModel.shape"),
    clipBehavior$10: dart.privateName(basic, "PhysicalModel.clipBehavior"),
    borderRadius$1: dart.privateName(basic, "PhysicalModel.borderRadius"),
    elevation: dart.privateName(basic, "PhysicalModel.elevation"),
    color$10: dart.privateName(basic, "PhysicalModel.color"),
    shadowColor: dart.privateName(basic, "PhysicalModel.shadowColor"),
    _name$26: dart.privateName(box_border, "_name"),
    clipper$4: dart.privateName(basic, "PhysicalShape.clipper"),
    clipBehavior$11: dart.privateName(basic, "PhysicalShape.clipBehavior"),
    elevation$1: dart.privateName(basic, "PhysicalShape.elevation"),
    color$11: dart.privateName(basic, "PhysicalShape.color"),
    shadowColor$1: dart.privateName(basic, "PhysicalShape.shadowColor"),
    transform$1: dart.privateName(basic, "Transform.transform"),
    origin: dart.privateName(basic, "Transform.origin"),
    alignment$4: dart.privateName(basic, "Transform.alignment"),
    transformHitTests$1: dart.privateName(basic, "Transform.transformHitTests"),
    link: dart.privateName(basic, "CompositedTransformTarget.link"),
    link$1: dart.privateName(basic, "CompositedTransformFollower.link"),
    showWhenUnlinked: dart.privateName(basic, "CompositedTransformFollower.showWhenUnlinked"),
    targetAnchor: dart.privateName(basic, "CompositedTransformFollower.targetAnchor"),
    followerAnchor: dart.privateName(basic, "CompositedTransformFollower.followerAnchor"),
    offset$3: dart.privateName(basic, "CompositedTransformFollower.offset"),
    fit$1: dart.privateName(basic, "FittedBox.fit"),
    alignment$5: dart.privateName(basic, "FittedBox.alignment"),
    clipBehavior$12: dart.privateName(basic, "FittedBox.clipBehavior"),
    _name$27: dart.privateName(box_fit, "_name"),
    translation: dart.privateName(basic, "FractionalTranslation.translation"),
    transformHitTests$2: dart.privateName(basic, "FractionalTranslation.transformHitTests"),
    quarterTurns: dart.privateName(basic, "RotatedBox.quarterTurns"),
    padding$2: dart.privateName(basic, "Padding.padding"),
    alignment$6: dart.privateName(basic, "Align.alignment"),
    widthFactor$1: dart.privateName(basic, "Align.widthFactor"),
    heightFactor$1: dart.privateName(basic, "Align.heightFactor"),
    delegate$3: dart.privateName(basic, "CustomSingleChildLayout.delegate"),
    id: dart.privateName(basic, "LayoutId.id"),
    delegate$4: dart.privateName(basic, "CustomMultiChildLayout.delegate"),
    width$1: dart.privateName(basic, "SizedBox.width"),
    height$1: dart.privateName(basic, "SizedBox.height"),
    _additionalConstraints: dart.privateName(basic, "_additionalConstraints"),
    constraints$1: dart.privateName(basic, "ConstrainedBox.constraints"),
    textDirection$9: dart.privateName(basic, "ConstraintsTransformBox.textDirection"),
    alignment$7: dart.privateName(basic, "ConstraintsTransformBox.alignment"),
    constraintsTransform: dart.privateName(basic, "ConstraintsTransformBox.constraintsTransform"),
    clipBehavior$13: dart.privateName(basic, "ConstraintsTransformBox.clipBehavior"),
    _debugTransformLabel: dart.privateName(basic, "ConstraintsTransformBox._debugTransformLabel"),
    _debugTransformLabel$1: dart.privateName(basic, "_debugTransformLabel"),
    textDirection$10: dart.privateName(basic, "UnconstrainedBox.textDirection"),
    alignment$8: dart.privateName(basic, "UnconstrainedBox.alignment"),
    constrainedAxis: dart.privateName(basic, "UnconstrainedBox.constrainedAxis"),
    clipBehavior$14: dart.privateName(basic, "UnconstrainedBox.clipBehavior"),
    child$45: dart.privateName(basic, "UnconstrainedBox.child"),
    _axisToTransform: dart.privateName(basic, "_axisToTransform"),
    widthFactor$2: dart.privateName(basic, "FractionallySizedBox.widthFactor"),
    heightFactor$2: dart.privateName(basic, "FractionallySizedBox.heightFactor"),
    alignment$9: dart.privateName(basic, "FractionallySizedBox.alignment"),
    maxWidth: dart.privateName(basic, "LimitedBox.maxWidth"),
    maxHeight: dart.privateName(basic, "LimitedBox.maxHeight"),
    alignment$10: dart.privateName(basic, "OverflowBox.alignment"),
    minWidth: dart.privateName(basic, "OverflowBox.minWidth"),
    maxWidth$1: dart.privateName(basic, "OverflowBox.maxWidth"),
    minHeight: dart.privateName(basic, "OverflowBox.minHeight"),
    maxHeight$1: dart.privateName(basic, "OverflowBox.maxHeight"),
    alignment$11: dart.privateName(basic, "SizedOverflowBox.alignment"),
    size$3: dart.privateName(basic, "SizedOverflowBox.size"),
    offstage$1: dart.privateName(basic, "Offstage.offstage"),
    aspectRatio: dart.privateName(basic, "AspectRatio.aspectRatio"),
    stepWidth: dart.privateName(basic, "IntrinsicWidth.stepWidth"),
    stepHeight: dart.privateName(basic, "IntrinsicWidth.stepHeight"),
    _stepWidth: dart.privateName(basic, "_stepWidth"),
    _stepHeight: dart.privateName(basic, "_stepHeight"),
    baseline: dart.privateName(basic, "Baseline.baseline"),
    baselineType: dart.privateName(basic, "Baseline.baselineType"),
    padding$3: dart.privateName(basic, "SliverPadding.padding"),
    mainAxis: dart.privateName(basic, "ListBody.mainAxis"),
    reverse: dart.privateName(basic, "ListBody.reverse"),
    _getDirection: dart.privateName(basic, "_getDirection"),
    alignment$12: dart.privateName(basic, "Stack.alignment"),
    textDirection$11: dart.privateName(basic, "Stack.textDirection"),
    fit$2: dart.privateName(basic, "Stack.fit"),
    overflow$3: dart.privateName(basic, "Stack.overflow"),
    clipBehavior$15: dart.privateName(basic, "Stack.clipBehavior"),
    AlignmentDirectional_y: dart.privateName(alignment$, "AlignmentDirectional.y"),
    AlignmentDirectional_start: dart.privateName(alignment$, "AlignmentDirectional.start"),
    _name$28: dart.privateName(stack, "_name"),
    _debugCheckHasDirectionality: dart.privateName(basic, "_debugCheckHasDirectionality"),
    index$1: dart.privateName(basic, "IndexedStack.index"),
    left: dart.privateName(basic, "Positioned.left"),
    top: dart.privateName(basic, "Positioned.top"),
    right: dart.privateName(basic, "Positioned.right"),
    bottom: dart.privateName(basic, "Positioned.bottom"),
    width$2: dart.privateName(basic, "Positioned.width"),
    height$2: dart.privateName(basic, "Positioned.height"),
    start: dart.privateName(basic, "PositionedDirectional.start"),
    top$1: dart.privateName(basic, "PositionedDirectional.top"),
    end: dart.privateName(basic, "PositionedDirectional.end"),
    bottom$1: dart.privateName(basic, "PositionedDirectional.bottom"),
    width$3: dart.privateName(basic, "PositionedDirectional.width"),
    height$3: dart.privateName(basic, "PositionedDirectional.height"),
    child$46: dart.privateName(basic, "PositionedDirectional.child"),
    direction$5: dart.privateName(basic, "Flex.direction"),
    mainAxisAlignment: dart.privateName(basic, "Flex.mainAxisAlignment"),
    mainAxisSize: dart.privateName(basic, "Flex.mainAxisSize"),
    crossAxisAlignment: dart.privateName(basic, "Flex.crossAxisAlignment"),
    textDirection$12: dart.privateName(basic, "Flex.textDirection"),
    verticalDirection: dart.privateName(basic, "Flex.verticalDirection"),
    textBaseline$1: dart.privateName(basic, "Flex.textBaseline"),
    clipBehavior$16: dart.privateName(basic, "Flex.clipBehavior"),
    _name$29: dart.privateName(flex$, "_name"),
    _needTextDirection: dart.privateName(basic, "_needTextDirection"),
    flex: dart.privateName(basic, "Flexible.flex"),
    fit$3: dart.privateName(basic, "Flexible.fit"),
    direction$6: dart.privateName(basic, "Wrap.direction"),
    alignment$13: dart.privateName(basic, "Wrap.alignment"),
    spacing: dart.privateName(basic, "Wrap.spacing"),
    runAlignment: dart.privateName(basic, "Wrap.runAlignment"),
    runSpacing: dart.privateName(basic, "Wrap.runSpacing"),
    crossAxisAlignment$1: dart.privateName(basic, "Wrap.crossAxisAlignment"),
    textDirection$13: dart.privateName(basic, "Wrap.textDirection"),
    verticalDirection$1: dart.privateName(basic, "Wrap.verticalDirection"),
    clipBehavior$17: dart.privateName(basic, "Wrap.clipBehavior"),
    _name$30: dart.privateName(wrap, "_name"),
    delegate$5: dart.privateName(basic, "Flow.delegate"),
    clipBehavior$18: dart.privateName(basic, "Flow.clipBehavior"),
    text: dart.privateName(basic, "RichText.text"),
    textAlign$5: dart.privateName(basic, "RichText.textAlign"),
    textDirection$14: dart.privateName(basic, "RichText.textDirection"),
    softWrap$3: dart.privateName(basic, "RichText.softWrap"),
    overflow$4: dart.privateName(basic, "RichText.overflow"),
    textScaleFactor$4: dart.privateName(basic, "RichText.textScaleFactor"),
    maxLines$5: dart.privateName(basic, "RichText.maxLines"),
    locale$6: dart.privateName(basic, "RichText.locale"),
    strutStyle$2: dart.privateName(basic, "RichText.strutStyle"),
    textWidthBasis$4: dart.privateName(basic, "RichText.textWidthBasis"),
    textHeightBehavior$5: dart.privateName(basic, "RichText.textHeightBehavior"),
    image$1: dart.privateName(basic, "RawImage.image"),
    debugImageLabel: dart.privateName(basic, "RawImage.debugImageLabel"),
    width$4: dart.privateName(basic, "RawImage.width"),
    height$4: dart.privateName(basic, "RawImage.height"),
    scale: dart.privateName(basic, "RawImage.scale"),
    color$12: dart.privateName(basic, "RawImage.color"),
    filterQuality$1: dart.privateName(basic, "RawImage.filterQuality"),
    colorBlendMode$1: dart.privateName(basic, "RawImage.colorBlendMode"),
    fit$4: dart.privateName(basic, "RawImage.fit"),
    alignment$14: dart.privateName(basic, "RawImage.alignment"),
    repeat$1: dart.privateName(basic, "RawImage.repeat"),
    centerSlice$1: dart.privateName(basic, "RawImage.centerSlice"),
    matchTextDirection$1: dart.privateName(basic, "RawImage.matchTextDirection"),
    invertColors$1: dart.privateName(basic, "RawImage.invertColors")
  };
  var S$2 = {
    isAntiAlias$1: dart.privateName(basic, "RawImage.isAntiAlias"),
    bundle: dart.privateName(basic, "DefaultAssetBundle.bundle"),
    renderBox: dart.privateName(basic, "WidgetToRenderBoxAdapter.renderBox"),
    onBuild: dart.privateName(basic, "WidgetToRenderBoxAdapter.onBuild"),
    onPointerDown: dart.privateName(basic, "Listener.onPointerDown"),
    onPointerMove: dart.privateName(basic, "Listener.onPointerMove"),
    onPointerUp: dart.privateName(basic, "Listener.onPointerUp"),
    onPointerHover: dart.privateName(basic, "Listener.onPointerHover"),
    onPointerCancel: dart.privateName(basic, "Listener.onPointerCancel"),
    onPointerSignal: dart.privateName(basic, "Listener.onPointerSignal"),
    behavior$5: dart.privateName(basic, "Listener.behavior"),
    onEnter: dart.privateName(basic, "MouseRegion.onEnter"),
    onHover: dart.privateName(basic, "MouseRegion.onHover"),
    onExit: dart.privateName(basic, "MouseRegion.onExit"),
    cursor: dart.privateName(basic, "MouseRegion.cursor"),
    opaque$1: dart.privateName(basic, "MouseRegion.opaque"),
    child$47: dart.privateName(basic, "MouseRegion.child"),
    ignoring$1: dart.privateName(basic, "IgnorePointer.ignoring"),
    ignoringSemantics$1: dart.privateName(basic, "IgnorePointer.ignoringSemantics"),
    absorbing: dart.privateName(basic, "AbsorbPointer.absorbing"),
    ignoringSemantics$2: dart.privateName(basic, "AbsorbPointer.ignoringSemantics"),
    metaData: dart.privateName(basic, "MetaData.metaData"),
    behavior$6: dart.privateName(basic, "MetaData.behavior"),
    properties: dart.privateName(basic, "Semantics.properties"),
    container$1: dart.privateName(basic, "Semantics.container"),
    explicitChildNodes: dart.privateName(basic, "Semantics.explicitChildNodes"),
    excludeSemantics: dart.privateName(basic, "Semantics.excludeSemantics"),
    _getTextDirection: dart.privateName(basic, "_getTextDirection"),
    blocking: dart.privateName(basic, "BlockSemantics.blocking"),
    excluding$1: dart.privateName(basic, "ExcludeSemantics.excluding"),
    index$2: dart.privateName(basic, "IndexedSemantics.index"),
    child$48: dart.privateName(basic, "KeyedSubtree.child"),
    builder$4: dart.privateName(basic, "Builder.builder"),
    builder$5: dart.privateName(basic, "StatefulBuilder.builder"),
    color$13: dart.privateName(basic, "ColoredBox.color"),
    _color$2: dart.privateName(basic, "_color"),
    listener: dart.privateName(actions$, "ActionListener.listener"),
    action: dart.privateName(actions$, "ActionListener.action"),
    child$49: dart.privateName(actions$, "ActionListener.child"),
    onInvoke: dart.privateName(actions$, "CallbackAction.onInvoke"),
    _updateActionListeners: dart.privateName(actions$, "_updateActionListeners"),
    _handleActionChanged: dart.privateName(actions$, "_handleActionChanged"),
    dispatcher$1: dart.privateName(actions$, "_ActionsMarker.dispatcher"),
    actions$2: dart.privateName(actions$, "_ActionsMarker.actions"),
    rebuildKey: dart.privateName(actions$, "_ActionsMarker.rebuildKey"),
    enabled$3: dart.privateName(actions$, "FocusableActionDetector.enabled"),
    focusNode$4: dart.privateName(actions$, "FocusableActionDetector.focusNode"),
    autofocus$2: dart.privateName(actions$, "FocusableActionDetector.autofocus"),
    descendantsAreFocusable$2: dart.privateName(actions$, "FocusableActionDetector.descendantsAreFocusable"),
    actions$3: dart.privateName(actions$, "FocusableActionDetector.actions"),
    shortcuts$2: dart.privateName(actions$, "FocusableActionDetector.shortcuts"),
    onShowFocusHighlight: dart.privateName(actions$, "FocusableActionDetector.onShowFocusHighlight"),
    onShowHoverHighlight: dart.privateName(actions$, "FocusableActionDetector.onShowHoverHighlight"),
    onFocusChange$1: dart.privateName(actions$, "FocusableActionDetector.onFocusChange"),
    mouseCursor$1: dart.privateName(actions$, "FocusableActionDetector.mouseCursor"),
    child$50: dart.privateName(actions$, "FocusableActionDetector.child"),
    _canShowHighlight: dart.privateName(actions$, "_canShowHighlight"),
    _hovering: dart.privateName(actions$, "_hovering"),
    _focused: dart.privateName(actions$, "_focused"),
    _mouseRegionKey: dart.privateName(actions$, "_mouseRegionKey"),
    _updateHighlightMode$1: dart.privateName(actions$, "_updateHighlightMode"),
    _handleFocusHighlightModeChange: dart.privateName(actions$, "_handleFocusHighlightModeChange"),
    _mayTriggerCallback: dart.privateName(actions$, "_mayTriggerCallback"),
    _handleMouseEnter: dart.privateName(actions$, "_handleMouseEnter"),
    _handleMouseExit: dart.privateName(actions$, "_handleMouseExit"),
    _handleFocusChange: dart.privateName(actions$, "_handleFocusChange"),
    _canRequestFocus$2: dart.privateName(actions$, "_canRequestFocus"),
    _consumesKey: dart.privateName(actions$, "_consumesKey"),
    orderedIntents: dart.privateName(actions$, "PrioritizedIntents.orderedIntents"),
    __PrioritizedAction__selectedAction: dart.privateName(actions$, "_#PrioritizedAction#_selectedAction"),
    __PrioritizedAction__selectedAction_isSet: dart.privateName(actions$, "_#PrioritizedAction#_selectedAction#isSet"),
    __PrioritizedAction__selectedIntent: dart.privateName(actions$, "_#PrioritizedAction#_selectedIntent"),
    __PrioritizedAction__selectedIntent_isSet: dart.privateName(actions$, "_#PrioritizedAction#_selectedIntent#isSet"),
    _selectedAction: dart.privateName(actions$, "_selectedAction"),
    _selectedIntent: dart.privateName(actions$, "_selectedIntent")
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [S$._name]: "PlaceholderAlignment.bottom",
        index: 4
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$.OffsetBase__dy]: 0,
        [S$.OffsetBase__dx]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [S$._name]: "ClipOp.intersect",
        index: 1
      });
    },
    get C3() {
      return C[3] = dart.constList([], T$._DiagnosticsPathNodeL());
    },
    get C4() {
      return C[4] = dart.constList([], T$.DiagnosticsNodeL());
    },
    get C6() {
      return C[6] = dart.constList([], T$._LocationL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 32,
        [S$._Location_line]: 1881,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart"
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoring",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2366,
        [S$._Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2367,
        [S$._Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoringSemantics",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2368,
        [S$._Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2369,
        [S$._Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.constList([C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12], T$._LocationL());
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[8] || CT.C8,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 2365,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onTap",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2359,
        [S$._Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPanDown",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2360,
        [S$._Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPanEnd",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2361,
        [S$._Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPanUpdate",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2362,
        [S$._Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2363,
        [S$._Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excludeFromSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2364,
        [S$._Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2365,
        [S$._Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.constList([C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21], T$._LocationL());
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[14] || CT.C14,
        [S$._Location_name]: null,
        [S$._Location_column]: 7,
        [S$._Location_line]: 2358,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart"
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "left",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2374,
        [S$._Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bottom",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2375,
        [S$._Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 2376,
        [S$._Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.constList([C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26], T$._LocationL());
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[23] || CT.C23,
        [S$._Location_name]: null,
        [S$._Location_column]: 9,
        [S$._Location_line]: 2373,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart"
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selection",
        [S$._Location_column]: 25,
        [S$._Location_line]: 2378,
        [S$._Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.constList([C[29] || CT.C29], T$._LocationL());
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[28] || CT.C28,
        [S$._Location_name]: null,
        [S$._Location_column]: 7,
        [S$._Location_line]: 2378,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart"
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "children",
        [S$._Location_column]: 18,
        [S$._Location_line]: 2357,
        [S$._Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.constList([C[32] || CT.C32], T$._LocationL());
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[31] || CT.C31,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 2357,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$.OffsetBase__dy]: 10,
        [S$.OffsetBase__dx]: 10
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$.OffsetBase__dy]: 5,
        [S$.OffsetBase__dx]: 5
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 3862707260.0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2155905279.0
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2151694464.0
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 4294967295.0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: null,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: null,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: 1.2,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: null,
        [S$.TextStyle_fontSize]: 10,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: C[39] || CT.C39,
        [S$.TextStyle_inherit]: true
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 4278190080.0
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: null,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: null,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: 0.8,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: null,
        [S$.TextStyle_fontSize]: 10,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: C[41] || CT.C41,
        [S$.TextStyle_inherit]: true
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoringSemantics",
        [S$._Location_column]: 13,
        [S$._Location_line]: 175,
        [S$._Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 176,
        [S$._Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44, C[45] || CT.C45], T$._LocationL());
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[43] || CT.C43,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 174,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/semantics_debugger.dart"
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPointerDown",
        [S$._Location_column]: 11,
        [S$._Location_line]: 172,
        [S$._Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 11,
        [S$._Location_line]: 173,
        [S$._Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 174,
        [S$._Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.constList([C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50], T$._LocationL());
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[47] || CT.C47,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 171,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/semantics_debugger.dart"
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 9,
        [S$._Location_line]: 166,
        [S$._Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onTap",
        [S$._Location_column]: 9,
        [S$._Location_line]: 167,
        [S$._Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onLongPress",
        [S$._Location_column]: 9,
        [S$._Location_line]: 168,
        [S$._Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPanEnd",
        [S$._Location_column]: 9,
        [S$._Location_line]: 169,
        [S$._Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excludeFromSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 170,
        [S$._Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 171,
        [S$._Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.constList([C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58], T$._LocationL());
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[52] || CT.C52,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 165,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/semantics_debugger.dart"
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "foregroundPainter",
        [S$._Location_column]: 7,
        [S$._Location_line]: 158,
        [S$._Location_file]: null
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 165,
        [S$._Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.constList([C[61] || CT.C61, C[62] || CT.C62], T$._LocationL());
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[60] || CT.C60,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 157,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/semantics_debugger.dart"
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2130743551
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [S$._name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [S$._name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: router._IntentionToReportRouteInformation.prototype,
        [S$._name$1]: "_IntentionToReportRouteInformation.none",
        index: 0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: router._IntentionToReportRouteInformation.prototype,
        [S$._name$1]: "_IntentionToReportRouteInformation.maybe",
        index: 1
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: router._IntentionToReportRouteInformation.prototype,
        [S$._name$1]: "_IntentionToReportRouteInformation.must",
        index: 2
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: router._IntentionToReportRouteInformation.prototype,
        [S$._name$1]: "_IntentionToReportRouteInformation.ignore",
        index: 3
      });
    },
    get C70() {
      return C[70] = dart.constList([C[66] || CT.C66, C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69], T$._IntentionToReportRouteInformationL());
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: assertions.FlutterErrorDetails.prototype,
        [S$.FlutterErrorDetails_silent]: false,
        [S$.FlutterErrorDetails_informationCollector]: null,
        [S$.FlutterErrorDetails_stackFilter]: null,
        [S$.FlutterErrorDetails_context]: null,
        [S$.FlutterErrorDetails_library]: "Flutter framework",
        [S$.FlutterErrorDetails_stack]: null,
        [S$.FlutterErrorDetails_exception]: "Router.routeInformationParser returns a null RouteInformation. If you opt for route information reporting, the routeInformationParser must not report null for a given configuration."
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: assertions.FlutterErrorDetails.prototype,
        [S$.FlutterErrorDetails_silent]: false,
        [S$.FlutterErrorDetails_informationCollector]: null,
        [S$.FlutterErrorDetails_stackFilter]: null,
        [S$.FlutterErrorDetails_context]: null,
        [S$.FlutterErrorDetails_library]: "Flutter framework",
        [S$.FlutterErrorDetails_stack]: null,
        [S$.FlutterErrorDetails_exception]: "Both Router.navigate and Router.neglect have been called in this build cycle, and the Router cannot decide whether to report the route information. Please make sure only one of them is called within the same build cycle."
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 9,
        [S$._Location_line]: 685,
        [S$._Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.constList([C[75] || CT.C75], T$._LocationL());
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[74] || CT.C74,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 682,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/router.dart"
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routeInformationProvider",
        [S$._Location_column]: 7,
        [S$._Location_line]: 677,
        [S$._Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "backButtonDispatcher",
        [S$._Location_column]: 7,
        [S$._Location_line]: 678,
        [S$._Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routeInformationParser",
        [S$._Location_column]: 7,
        [S$._Location_line]: 679,
        [S$._Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routerDelegate",
        [S$._Location_column]: 7,
        [S$._Location_line]: 680,
        [S$._Location_file]: null
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routerState",
        [S$._Location_column]: 7,
        [S$._Location_line]: 681,
        [S$._Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 682,
        [S$._Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.constList([C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83], T$._LocationL());
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[77] || CT.C77,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 676,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/router.dart"
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [S$._name$2]: "TargetPlatform.android",
        index: 0
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [S$._name$2]: "TargetPlatform.fuchsia",
        index: 1
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [S$._name$2]: "TargetPlatform.linux",
        index: 3
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [S$._name$2]: "TargetPlatform.windows",
        index: 5
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [S$._name$2]: "TargetPlatform.iOS",
        index: 2
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [S$._name$2]: "TargetPlatform.macOS",
        index: 4
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: box$.BoxConstraints.prototype,
        [S$.BoxConstraints_maxHeight]: 1 / 0,
        [S$.BoxConstraints_minHeight]: 1 / 0,
        [S$.BoxConstraints_maxWidth]: 1 / 0,
        [S$.BoxConstraints_minWidth]: 1 / 0
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 19,
        [S$._Location_line]: 122,
        [S$._Location_file]: null
      });
    },
    get C92() {
      return C[92] = dart.constList([C[93] || CT.C93], T$._LocationL());
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[92] || CT.C92,
        [S$._Location_name]: null,
        [S$._Location_column]: 47,
        [S$._Location_line]: 121,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "constraints",
        [S$._Location_column]: 17,
        [S$._Location_line]: 120,
        [S$._Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 17,
        [S$._Location_line]: 121,
        [S$._Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.constList([C[96] || CT.C96, C[97] || CT.C97], T$._LocationL());
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[95] || CT.C95,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 119,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursor",
        [S$._Location_column]: 15,
        [S$._Location_line]: 117,
        [S$._Location_file]: null
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opaque",
        [S$._Location_column]: 15,
        [S$._Location_line]: 118,
        [S$._Location_file]: null
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 119,
        [S$._Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.constList([C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102], T$._LocationL());
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[99] || CT.C99,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 116,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "label",
        [S$._Location_column]: 13,
        [S$._Location_line]: 113,
        [S$._Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onDismiss",
        [S$._Location_column]: 13,
        [S$._Location_line]: 114,
        [S$._Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 13,
        [S$._Location_line]: 115,
        [S$._Location_file]: null
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 116,
        [S$._Location_file]: null
      });
    },
    get C104() {
      return C[104] = dart.constList([C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108], T$._LocationL());
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[104] || CT.C104,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 112,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onDismiss",
        [S$._Location_column]: 11,
        [S$._Location_line]: 106,
        [S$._Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 112,
        [S$._Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.constList([C[111] || CT.C111, C[112] || CT.C112], T$._LocationL());
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[110] || CT.C110,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 105,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excluding",
        [S$._Location_column]: 9,
        [S$._Location_line]: 104,
        [S$._Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 105,
        [S$._Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.constList([C[115] || CT.C115, C[116] || CT.C116], T$._LocationL());
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[114] || CT.C114,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 101,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 101,
        [S$._Location_file]: null
      });
    },
    get C118() {
      return C[118] = dart.constList([C[119] || CT.C119], T$._LocationL());
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[118] || CT.C118,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 100,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 7,
        [S$._Location_line]: 196,
        [S$._Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dismissible",
        [S$._Location_column]: 7,
        [S$._Location_line]: 197,
        [S$._Location_file]: null
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "semanticsLabel",
        [S$._Location_column]: 7,
        [S$._Location_line]: 198,
        [S$._Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "barrierSemanticsDismissible",
        [S$._Location_column]: 7,
        [S$._Location_line]: 199,
        [S$._Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.constList([C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125], T$._LocationL());
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[121] || CT.C121,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 195,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "gestures",
        [S$._Location_column]: 7,
        [S$._Location_line]: 296,
        [S$._Location_file]: null
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 297,
        [S$._Location_file]: null
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "semantics",
        [S$._Location_column]: 7,
        [S$._Location_line]: 298,
        [S$._Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 299,
        [S$._Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.constList([C[128] || CT.C128, C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131], T$._LocationL());
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[127] || CT.C127,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 295,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart"
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: navigator$.RouteSettings.prototype,
        [S$.RouteSettings_arguments]: null,
        [S$.RouteSettings_name]: null
      });
    },
    get C133() {
      return C[133] = dart.constList([], T$.OverlayEntryL());
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._name$3]: "AnimationStatus.completed",
        index: 3
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._name$3]: "AnimationStatus.forward",
        index: 1
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._name$3]: "AnimationStatus.reverse",
        index: 2
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._name$3]: "AnimationStatus.dismissed",
        index: 0
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: actions$.DoNothingIntent.prototype
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "restorationId",
        [S$._Location_column]: 11,
        [S$._Location_line]: 791,
        [S$._Location_file]: null
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 792,
        [S$._Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.constList([C[141] || CT.C141, C[142] || CT.C142], T$._LocationL());
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[140] || CT.C140,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 790,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoring",
        [S$._Location_column]: 37,
        [S$._Location_line]: 831,
        [S$._Location_file]: null
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 37,
        [S$._Location_line]: 832,
        [S$._Location_file]: null
      });
    },
    get C144() {
      return C[144] = dart.constList([C[145] || CT.C145, C[146] || CT.C146], T$._LocationL());
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[144] || CT.C144,
        [S$._Location_name]: null,
        [S$._Location_column]: 42,
        [S$._Location_line]: 830,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "animation",
        [S$._Location_column]: 33,
        [S$._Location_line]: 826,
        [S$._Location_file]: null
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 33,
        [S$._Location_line]: 827,
        [S$._Location_file]: null
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 33,
        [S$._Location_line]: 835,
        [S$._Location_file]: null
      });
    },
    get C148() {
      return C[148] = dart.constList([C[149] || CT.C149, C[150] || CT.C150, C[151] || CT.C151], T$._LocationL());
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[148] || CT.C148,
        [S$._Location_name]: null,
        [S$._Location_column]: 31,
        [S$._Location_line]: 825,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 31,
        [S$._Location_line]: 842,
        [S$._Location_file]: null
      });
    },
    get C153() {
      return C[153] = dart.constList([C[154] || CT.C154], T$._LocationL());
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[153] || CT.C153,
        [S$._Location_name]: null,
        [S$._Location_column]: 36,
        [S$._Location_line]: 841,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 29,
        [S$._Location_line]: 840,
        [S$._Location_file]: null
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 29,
        [S$._Location_line]: 841,
        [S$._Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.constList([C[157] || CT.C157, C[158] || CT.C158], T$._LocationL());
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[156] || CT.C156,
        [S$._Location_name]: null,
        [S$._Location_column]: 44,
        [S$._Location_line]: 839,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "animation",
        [S$._Location_column]: 27,
        [S$._Location_line]: 815,
        [S$._Location_file]: null
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 27,
        [S$._Location_line]: 816,
        [S$._Location_file]: null
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 27,
        [S$._Location_line]: 839,
        [S$._Location_file]: null
      });
    },
    get C160() {
      return C[160] = dart.constList([C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163], T$._LocationL());
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[160] || CT.C160,
        [S$._Location_name]: null,
        [S$._Location_column]: 32,
        [S$._Location_line]: 814,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 25,
        [S$._Location_line]: 814,
        [S$._Location_file]: null
      });
    },
    get C165() {
      return C[165] = dart.constList([C[166] || CT.C166], T$._LocationL());
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[165] || CT.C165,
        [S$._Location_name]: null,
        [S$._Location_column]: 30,
        [S$._Location_line]: 813,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "node",
        [S$._Location_column]: 23,
        [S$._Location_line]: 812,
        [S$._Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 23,
        [S$._Location_line]: 813,
        [S$._Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.constList([C[169] || CT.C169, C[170] || CT.C170], T$._LocationL());
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[168] || CT.C168,
        [S$._Location_name]: null,
        [S$._Location_column]: 28,
        [S$._Location_line]: 811,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "controller",
        [S$._Location_column]: 21,
        [S$._Location_line]: 810,
        [S$._Location_file]: null
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 21,
        [S$._Location_line]: 811,
        [S$._Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.constList([C[173] || CT.C173, C[174] || CT.C174], T$._LocationL());
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[172] || CT.C172,
        [S$._Location_name]: null,
        [S$._Location_column]: 26,
        [S$._Location_line]: 809,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "actions",
        [S$._Location_column]: 19,
        [S$._Location_line]: 806,
        [S$._Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 19,
        [S$._Location_line]: 809,
        [S$._Location_file]: null
      });
    },
    get C176() {
      return C[176] = dart.constList([C[177] || CT.C177, C[178] || CT.C178], T$._LocationL());
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[176] || CT.C176,
        [S$._Location_name]: null,
        [S$._Location_column]: 24,
        [S$._Location_line]: 805,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 15,
        [S$._Location_line]: 804,
        [S$._Location_file]: null
      });
    },
    get C180() {
      return C[180] = dart.constList([C[181] || CT.C181], T$._LocationL());
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[180] || CT.C180,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 803,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bucket",
        [S$._Location_column]: 13,
        [S$._Location_line]: 802,
        [S$._Location_file]: null
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 803,
        [S$._Location_file]: null
      });
    },
    get C183() {
      return C[183] = dart.constList([C[184] || CT.C184, C[185] || CT.C185], T$._LocationL());
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[183] || CT.C183,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 801,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offstage",
        [S$._Location_column]: 11,
        [S$._Location_line]: 800,
        [S$._Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 801,
        [S$._Location_file]: null
      });
    },
    get C187() {
      return C[187] = dart.constList([C[188] || CT.C188, C[189] || CT.C189], T$._LocationL());
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[187] || CT.C187,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 799,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "route",
        [S$._Location_column]: 9,
        [S$._Location_line]: 796,
        [S$._Location_file]: null
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "isCurrent",
        [S$._Location_column]: 9,
        [S$._Location_line]: 797,
        [S$._Location_file]: null
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "canPop",
        [S$._Location_column]: 9,
        [S$._Location_line]: 798,
        [S$._Location_file]: null
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 799,
        [S$._Location_file]: null
      });
    },
    get C191() {
      return C[191] = dart.constList([C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194, C[195] || CT.C195], T$._LocationL());
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[191] || CT.C191,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 795,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "animation",
        [S$._Location_column]: 7,
        [S$._Location_line]: 787,
        [S$._Location_file]: null
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 7,
        [S$._Location_line]: 788,
        [S$._Location_file]: null
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 795,
        [S$._Location_file]: null
      });
    },
    get C197() {
      return C[197] = dart.constList([C[198] || CT.C198, C[199] || CT.C199, C[200] || CT.C200], T$._LocationL());
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[197] || CT.C197,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 786,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1516,
        [S$._Location_file]: null
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dismissible",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1517,
        [S$._Location_file]: null
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "semanticsLabel",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1518,
        [S$._Location_file]: null
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "barrierSemanticsDismissible",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1519,
        [S$._Location_file]: null
      });
    },
    get C202() {
      return C[202] = dart.constList([C[203] || CT.C203, C[204] || CT.C204, C[205] || CT.C205, C[206] || CT.C206], T$._LocationL());
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[202] || CT.C202,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 1515,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dismissible",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1523,
        [S$._Location_file]: null
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "semanticsLabel",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1524,
        [S$._Location_file]: null
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "barrierSemanticsDismissible",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1525,
        [S$._Location_file]: null
      });
    },
    get C208() {
      return C[208] = dart.constList([C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211], T$._LocationL());
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[208] || CT.C208,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 1522,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "filter",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1530,
        [S$._Location_file]: null
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1531,
        [S$._Location_file]: null
      });
    },
    get C213() {
      return C[213] = dart.constList([C[214] || CT.C214, C[215] || CT.C215], T$._LocationL());
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[213] || CT.C213,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 1529,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoring",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1535,
        [S$._Location_file]: null
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1537,
        [S$._Location_file]: null
      });
    },
    get C217() {
      return C[217] = dart.constList([C[218] || CT.C218, C[219] || CT.C219], T$._LocationL());
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[217] || CT.C217,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 1534,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: semantics.OrdinalSortKey.prototype,
        [S$.SemanticsSortKey_name]: null,
        [S$.OrdinalSortKey_order]: 1
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "sortKey",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1542,
        [S$._Location_file]: null
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1543,
        [S$._Location_file]: null
      });
    },
    get C222() {
      return C[222] = dart.constList([C[223] || CT.C223, C[224] || CT.C224], T$._LocationL());
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[222] || CT.C222,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 1541,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: semantics.OrdinalSortKey.prototype,
        [S$.SemanticsSortKey_name]: null,
        [S$.OrdinalSortKey_order]: 0
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1559,
        [S$._Location_file]: null
      });
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "route",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1560,
        [S$._Location_file]: null
      });
    },
    get C227() {
      return C[227] = dart.constList([C[228] || CT.C228, C[229] || CT.C229], T$._LocationL());
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[227] || CT.C227,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 1558,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "sortKey",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1557,
        [S$._Location_file]: null
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1558,
        [S$._Location_file]: null
      });
    },
    get C231() {
      return C[231] = dart.constList([C[232] || CT.C232, C[233] || CT.C233], T$._LocationL());
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[231] || CT.C231,
        [S$._Location_name]: null,
        [S$._Location_column]: 33,
        [S$._Location_line]: 1556,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2147483648.0
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 200000
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1825,
        [S$._Location_file]: null
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "scopesRoute",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1826,
        [S$._Location_file]: null
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "explicitChildNodes",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1827,
        [S$._Location_file]: null
      });
    },
    get C237() {
      return C[237] = dart.constList([C[238] || CT.C238, C[239] || CT.C239, C[240] || CT.C240], T$._LocationL());
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[237] || CT.C237,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1824,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opacity",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1835,
        [S$._Location_file]: null
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1839,
        [S$._Location_file]: null
      });
    },
    get C242() {
      return C[242] = dart.constList([C[243] || CT.C243, C[244] || CT.C244], T$._LocationL());
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[242] || CT.C242,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 1834,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart"
      });
    },
    get C245() {
      return C[245] = dart.fn(pages._defaultTransitionsBuilder, T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget());
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 300000
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: heroes.HeroFlightDirection.prototype,
        [S$._name$4]: "HeroFlightDirection.push",
        index: 0
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: heroes.HeroFlightDirection.prototype,
        [S$._name$4]: "HeroFlightDirection.pop",
        index: 1
      });
    },
    get C249() {
      return C[249] = dart.constList([C[247] || CT.C247, C[248] || CT.C248], T$.HeroFlightDirectionL());
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "width",
        [S$._Location_column]: 9,
        [S$._Location_line]: 451,
        [S$._Location_file]: null
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "height",
        [S$._Location_column]: 9,
        [S$._Location_line]: 452,
        [S$._Location_file]: null
      });
    },
    get C251() {
      return C[251] = dart.constList([C[252] || CT.C252, C[253] || CT.C253], T$._LocationL());
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[251] || CT.C251,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 450,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 31,
        [S$._Location_line]: 463,
        [S$._Location_file]: null
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 42,
        [S$._Location_line]: 463,
        [S$._Location_file]: null
      });
    },
    get C255() {
      return C[255] = dart.constList([C[256] || CT.C256, C[257] || CT.C257], T$._LocationL());
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[255] || CT.C255,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 463,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enabled",
        [S$._Location_column]: 11,
        [S$._Location_line]: 462,
        [S$._Location_file]: null
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 463,
        [S$._Location_file]: null
      });
    },
    get C259() {
      return C[259] = dart.constList([C[260] || CT.C260, C[261] || CT.C261], T$._LocationL());
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[259] || CT.C259,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 461,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offstage",
        [S$._Location_column]: 9,
        [S$._Location_line]: 460,
        [S$._Location_file]: null
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 461,
        [S$._Location_file]: null
      });
    },
    get C263() {
      return C[263] = dart.constList([C[264] || CT.C264, C[265] || CT.C265], T$._LocationL());
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[263] || CT.C263,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 459,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "width",
        [S$._Location_column]: 7,
        [S$._Location_line]: 457,
        [S$._Location_file]: null
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "height",
        [S$._Location_column]: 7,
        [S$._Location_line]: 458,
        [S$._Location_file]: null
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 459,
        [S$._Location_file]: null
      });
    },
    get C267() {
      return C[267] = dart.constList([C[268] || CT.C268, C[269] || CT.C269, C[270] || CT.C270], T$._LocationL());
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[267] || CT.C267,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 456,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opacity",
        [S$._Location_column]: 17,
        [S$._Location_line]: 600,
        [S$._Location_file]: null
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 17,
        [S$._Location_line]: 601,
        [S$._Location_file]: null
      });
    },
    get C272() {
      return C[272] = dart.constList([C[273] || CT.C273, C[274] || CT.C274], T$._LocationL());
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[272] || CT.C272,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 599,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 599,
        [S$._Location_file]: null
      });
    },
    get C276() {
      return C[276] = dart.constList([C[277] || CT.C277], T$._LocationL());
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[276] || CT.C276,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 598,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 598,
        [S$._Location_file]: null
      });
    },
    get C279() {
      return C[279] = dart.constList([C[280] || CT.C280], T$._LocationL());
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[279] || CT.C279,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 597,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "top",
        [S$._Location_column]: 11,
        [S$._Location_line]: 593,
        [S$._Location_file]: null
      });
    },
    get C284() {
      return C[284] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "right",
        [S$._Location_column]: 11,
        [S$._Location_line]: 594,
        [S$._Location_file]: null
      });
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bottom",
        [S$._Location_column]: 11,
        [S$._Location_line]: 595,
        [S$._Location_file]: null
      });
    },
    get C286() {
      return C[286] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "left",
        [S$._Location_column]: 11,
        [S$._Location_line]: 596,
        [S$._Location_file]: null
      });
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 597,
        [S$._Location_file]: null
      });
    },
    get C282() {
      return C[282] = dart.constList([C[283] || CT.C283, C[284] || CT.C284, C[285] || CT.C285, C[286] || CT.C286, C[287] || CT.C287], T$._LocationL());
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[282] || CT.C282,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 592,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "animation",
        [S$._Location_column]: 7,
        [S$._Location_line]: 587,
        [S$._Location_file]: null
      });
    },
    get C291() {
      return C[291] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 588,
        [S$._Location_file]: null
      });
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 7,
        [S$._Location_line]: 589,
        [S$._Location_file]: null
      });
    },
    get C289() {
      return C[289] = dart.constList([C[290] || CT.C290, C[291] || CT.C291, C[292] || CT.C292], T$._LocationL());
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[289] || CT.C289,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 586,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart"
      });
    },
    get C293() {
      return C[293] = dart.constMap(T$.ObjectL(), T$._HeroStateL(), []);
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: navigator$.RoutePopDisposition.prototype,
        [S$._name$5]: "RoutePopDisposition.pop",
        index: 0
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: navigator$.RoutePopDisposition.prototype,
        [S$._name$5]: "RoutePopDisposition.doNotPop",
        index: 1
      });
    },
    get C296() {
      return C[296] = dart.const({
        __proto__: navigator$.RoutePopDisposition.prototype,
        [S$._name$5]: "RoutePopDisposition.bubble",
        index: 2
      });
    },
    get C297() {
      return C[297] = dart.constList([C[294] || CT.C294, C[295] || CT.C295, C[296] || CT.C296], T$.RoutePopDispositionL());
    },
    get C298() {
      return C[298] = dart.constList([], T$.PageL());
    },
    get C299() {
      return C[299] = dart.fn(navigator$.Navigator.defaultGenerateInitialRoutes, T$.NavigatorStateAndStringToListOfRoute());
    },
    get C300() {
      return C[300] = dart.const({
        __proto__: navigator$.DefaultTransitionDelegate.prototype
      });
    },
    get C301() {
      return C[301] = dart.constList([], T$.NavigatorObserverL());
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.staging",
        index: 0
      });
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.add",
        index: 1
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.adding",
        index: 2
      });
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.push",
        index: 3
      });
    },
    get C306() {
      return C[306] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.pushReplace",
        index: 4
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.pushing",
        index: 5
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.replace",
        index: 6
      });
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.idle",
        index: 7
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.pop",
        index: 8
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.remove",
        index: 9
      });
    },
    get C312() {
      return C[312] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.popping",
        index: 10
      });
    },
    get C313() {
      return C[313] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.removing",
        index: 11
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.dispose",
        index: 12
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: navigator$._RouteLifecycle.prototype,
        [S$._name$5]: "_RouteLifecycle.disposed",
        index: 13
      });
    },
    get C316() {
      return C[316] = dart.constList([C[302] || CT.C302, C[303] || CT.C303, C[304] || CT.C304, C[305] || CT.C305, C[306] || CT.C306, C[307] || CT.C307, C[308] || CT.C308, C[309] || CT.C309, C[310] || CT.C310, C[311] || CT.C311, C[312] || CT.C312, C[313] || CT.C313, C[314] || CT.C314, C[315] || CT.C315], T$._RouteLifecycleL());
    },
    get C317() {
      return C[317] = dart.fn(navigator$._RouteEntry.isPresentPredicate, T$._RouteEntryTobool());
    },
    get C318() {
      return C[318] = dart.fn(navigator$._RouteEntry.willBePresentPredicate, T$._RouteEntryTobool());
    },
    get C319() {
      return C[319] = dart.fn(navigator$._RouteEntry.suitableForTransitionAnimationPredicate, T$._RouteEntryTobool());
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 17,
        [S$._Location_line]: 5325,
        [S$._Location_file]: null
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "initialEntries",
        [S$._Location_column]: 17,
        [S$._Location_line]: 5326,
        [S$._Location_file]: null
      });
    },
    get C321() {
      return C[321] = dart.constList([C[322] || CT.C322, C[323] || CT.C323], T$._LocationL());
    },
    get C320() {
      return C[320] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[321] || CT.C321,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 5324,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart"
      });
    },
    get C326() {
      return C[326] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bucket",
        [S$._Location_column]: 15,
        [S$._Location_line]: 5323,
        [S$._Location_file]: null
      });
    },
    get C327() {
      return C[327] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 5324,
        [S$._Location_file]: null
      });
    },
    get C325() {
      return C[325] = dart.constList([C[326] || CT.C326, C[327] || CT.C327], T$._LocationL());
    },
    get C324() {
      return C[324] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[325] || CT.C325,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 5322,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart"
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "node",
        [S$._Location_column]: 13,
        [S$._Location_line]: 5320,
        [S$._Location_file]: null
      });
    },
    get C331() {
      return C[331] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "autofocus",
        [S$._Location_column]: 13,
        [S$._Location_line]: 5321,
        [S$._Location_file]: null
      });
    },
    get C332() {
      return C[332] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 5322,
        [S$._Location_file]: null
      });
    },
    get C329() {
      return C[329] = dart.constList([C[330] || CT.C330, C[331] || CT.C331, C[332] || CT.C332], T$._LocationL());
    },
    get C328() {
      return C[328] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[329] || CT.C329,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 5319,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart"
      });
    },
    get C335() {
      return C[335] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "absorbing",
        [S$._Location_column]: 11,
        [S$._Location_line]: 5318,
        [S$._Location_file]: null
      });
    },
    get C336() {
      return C[336] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 5319,
        [S$._Location_file]: null
      });
    },
    get C334() {
      return C[334] = dart.constList([C[335] || CT.C335, C[336] || CT.C336], T$._LocationL());
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[334] || CT.C334,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 5317,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart"
      });
    },
    get C339() {
      return C[339] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPointerDown",
        [S$._Location_column]: 9,
        [S$._Location_line]: 5314,
        [S$._Location_file]: null
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPointerUp",
        [S$._Location_column]: 9,
        [S$._Location_line]: 5315,
        [S$._Location_file]: null
      });
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPointerCancel",
        [S$._Location_column]: 9,
        [S$._Location_line]: 5316,
        [S$._Location_file]: null
      });
    },
    get C342() {
      return C[342] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 5317,
        [S$._Location_file]: null
      });
    },
    get C338() {
      return C[338] = dart.constList([C[339] || CT.C339, C[340] || CT.C340, C[341] || CT.C341, C[342] || CT.C342], T$._LocationL());
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[338] || CT.C338,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 5313,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart"
      });
    },
    get C345() {
      return C[345] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 5313,
        [S$._Location_file]: null
      });
    },
    get C344() {
      return C[344] = dart.constList([C[345] || CT.C345], T$._LocationL());
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[344] || CT.C344,
        [S$._Location_name]: null,
        [S$._Location_column]: 32,
        [S$._Location_line]: 5312,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart"
      });
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: navigator$._RouteRestorationType.prototype,
        [S$._name$5]: "_RouteRestorationType.named",
        index: 0
      });
    },
    get C347() {
      return C[347] = dart.const({
        __proto__: navigator$._RouteRestorationType.prototype,
        [S$._name$5]: "_RouteRestorationType.anonymous",
        index: 1
      });
    },
    get C348() {
      return C[348] = dart.constList([C[346] || CT.C346, C[347] || CT.C347], T$._RouteRestorationTypeL());
    },
    get C349() {
      return C[349] = dart.constList([], T$.ObjectL());
    },
    get C350() {
      return C[350] = dart.fn(navigator$.RestorableRouteFuture._defaultNavigatorFinder, T$.BuildContextToNavigatorState());
    },
    get C351() {
      return C[351] = dart.const({
        __proto__: diagnostics$._NoDefaultValue.prototype
      });
    },
    get C352() {
      return C[352] = dart.const({
        __proto__: diagnostics$.DiagnosticLevel.prototype,
        [S$0._name$6]: "DiagnosticLevel.info",
        index: 3
      });
    },
    get C353() {
      return C[353] = dart.constMap(T$.LogicalKeySetL(), T$.IntentL(), []);
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "manager",
        [S$._Location_column]: 9,
        [S$._Location_line]: 718,
        [S$._Location_file]: null
      });
    },
    get C357() {
      return C[357] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 719,
        [S$._Location_file]: null
      });
    },
    get C355() {
      return C[355] = dart.constList([C[356] || CT.C356, C[357] || CT.C357], T$._LocationL());
    },
    get C354() {
      return C[354] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[355] || CT.C355,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 717,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/shortcuts.dart"
      });
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "debugLabel",
        [S$._Location_column]: 7,
        [S$._Location_line]: 714,
        [S$._Location_file]: null
      });
    },
    get C361() {
      return C[361] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "canRequestFocus",
        [S$._Location_column]: 7,
        [S$._Location_line]: 715,
        [S$._Location_file]: null
      });
    },
    get C362() {
      return C[362] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onKey",
        [S$._Location_column]: 7,
        [S$._Location_line]: 716,
        [S$._Location_file]: null
      });
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 717,
        [S$._Location_file]: null
      });
    },
    get C359() {
      return C[359] = dart.constList([C[360] || CT.C360, C[361] || CT.C361, C[362] || CT.C362, C[363] || CT.C363], T$._LocationL());
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[359] || CT.C359,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 713,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/shortcuts.dart"
      });
    },
    get C364() {
      return C[364] = dart.const({
        __proto__: text_editing_intents.MoveSelectionToEndTextIntent.prototype
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: text_editing_intents.MoveSelectionLeftByLineTextIntent.prototype
      });
    },
    get C366() {
      return C[366] = dart.const({
        __proto__: text_editing_intents.MoveSelectionRightByLineTextIntent.prototype
      });
    },
    get C367() {
      return C[367] = dart.const({
        __proto__: text_editing_intents.MoveSelectionToStartTextIntent.prototype
      });
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: text_editing_intents.ExpandSelectionToEndTextIntent.prototype
      });
    },
    get C369() {
      return C[369] = dart.const({
        __proto__: text_editing_intents.ExpandSelectionLeftByLineTextIntent.prototype
      });
    },
    get C370() {
      return C[370] = dart.const({
        __proto__: text_editing_intents.ExpandSelectionRightByLineTextIntent.prototype
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: text_editing_intents.ExpandSelectionToStartTextIntent.prototype
      });
    },
    get C372() {
      return C[372] = dart.const({
        __proto__: text_editing_intents.MoveSelectionDownTextIntent.prototype
      });
    },
    get C373() {
      return C[373] = dart.const({
        __proto__: text_editing_intents.MoveSelectionLeftTextIntent.prototype
      });
    },
    get C374() {
      return C[374] = dart.const({
        __proto__: text_editing_intents.MoveSelectionRightTextIntent.prototype
      });
    },
    get C375() {
      return C[375] = dart.const({
        __proto__: text_editing_intents.MoveSelectionUpTextIntent.prototype
      });
    },
    get C376() {
      return C[376] = dart.const({
        __proto__: text_editing_intents.MoveSelectionLeftByWordTextIntent.prototype
      });
    },
    get C377() {
      return C[377] = dart.const({
        __proto__: text_editing_intents.MoveSelectionRightByWordTextIntent.prototype
      });
    },
    get C378() {
      return C[378] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionLeftByWordTextIntent.prototype
      });
    },
    get C379() {
      return C[379] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionRightByWordTextIntent.prototype
      });
    },
    get C380() {
      return C[380] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionDownTextIntent.prototype
      });
    },
    get C381() {
      return C[381] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionLeftTextIntent.prototype
      });
    },
    get C382() {
      return C[382] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionRightTextIntent.prototype
      });
    },
    get C383() {
      return C[383] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionUpTextIntent.prototype
      });
    },
    get C384() {
      return C[384] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionRightByLineTextIntent.prototype
      });
    },
    get C385() {
      return C[385] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent.prototype
      });
    },
    get C386() {
      return C[386] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent.prototype
      });
    },
    get C387() {
      return C[387] = dart.const({
        __proto__: text_editing_intents.ExtendSelectionLeftByLineTextIntent.prototype
      });
    },
    get C388() {
      return C[388] = dart.const({
        __proto__: text_editing_intents.DoNothingAndStopPropagationTextIntent.prototype
      });
    },
    get C389() {
      return C[389] = dart.const({
        __proto__: actions$.ActionDispatcher.prototype
      });
    },
    get C390() {
      return C[390] = dart.constList([], T$.TableRowL());
    },
    get C391() {
      return C[391] = dart.const({
        __proto__: table.FlexColumnWidth.prototype,
        [S$0.FlexColumnWidth_value]: 1
      });
    },
    get C392() {
      return C[392] = dart.const({
        __proto__: table.TableCellVerticalAlignment.prototype,
        [S$0._name$7]: "TableCellVerticalAlignment.top",
        index: 0
      });
    },
    get C393() {
      return C[393] = dart.constList([], T$._TableElementRowL());
    },
    get C394() {
      return C[394] = dart.constList([], T$.ElementL());
    },
    get C395() {
      return C[395] = dart.constList([], T$.WidgetL());
    },
    get C396() {
      return C[396] = dart.const({
        __proto__: diagnostics$.DiagnosticsTreeStyle.prototype,
        [S$0._name$6]: "DiagnosticsTreeStyle.errorProperty",
        index: 9
      });
    },
    get C397() {
      return C[397] = dart.fn(framework.Element._activateRecursively, T$.ElementTovoid());
    },
    get C399() {
      return C[399] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 30,
        [S$._Location_line]: 58,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C398() {
      return C[398] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [S$._location$1]: C[399] || CT.C399,
        [S$.key]: null,
        [S$0.SingleChildRenderObjectWidget_child]: null,
        [S$0.SizedBox_height]: 0,
        [S$0.SizedBox_width]: 0
      });
    },
    get C402() {
      return C[402] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 221,
        [S$._Location_file]: null
      });
    },
    get C403() {
      return C[403] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoring",
        [S$._Location_column]: 11,
        [S$._Location_line]: 222,
        [S$._Location_file]: null
      });
    },
    get C404() {
      return C[404] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoringSemantics",
        [S$._Location_column]: 11,
        [S$._Location_line]: 223,
        [S$._Location_file]: null
      });
    },
    get C401() {
      return C[401] = dart.constList([C[402] || CT.C402, C[403] || CT.C403, C[404] || CT.C404], T$._LocationL());
    },
    get C400() {
      return C[400] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[401] || CT.C401,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 220,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C407() {
      return C[407] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opacity",
        [S$._Location_column]: 9,
        [S$._Location_line]: 227,
        [S$._Location_file]: null
      });
    },
    get C408() {
      return C[408] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alwaysIncludeSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 228,
        [S$._Location_file]: null
      });
    },
    get C409() {
      return C[409] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 229,
        [S$._Location_file]: null
      });
    },
    get C406() {
      return C[406] = dart.constList([C[407] || CT.C407, C[408] || CT.C408, C[409] || CT.C409], T$._LocationL());
    },
    get C405() {
      return C[405] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[406] || CT.C406,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 226,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C412() {
      return C[412] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 29,
        [S$._Location_line]: 238,
        [S$._Location_file]: null
      });
    },
    get C413() {
      return C[413] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enabled",
        [S$._Location_column]: 43,
        [S$._Location_line]: 238,
        [S$._Location_file]: null
      });
    },
    get C411() {
      return C[411] = dart.constList([C[412] || CT.C412, C[413] || CT.C413], T$._LocationL());
    },
    get C410() {
      return C[410] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[411] || CT.C411,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 238,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C416() {
      return C[416] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 240,
        [S$._Location_file]: null
      });
    },
    get C417() {
      return C[417] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offstage",
        [S$._Location_column]: 9,
        [S$._Location_line]: 241,
        [S$._Location_file]: null
      });
    },
    get C415() {
      return C[415] = dart.constList([C[416] || CT.C416, C[417] || CT.C417], T$._LocationL());
    },
    get C414() {
      return C[414] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[415] || CT.C415,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 239,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C419() {
      return C[419] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 36,
        [S$._Location_line]: 303,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C418() {
      return C[418] = dart.const({
        __proto__: basic.SliverToBoxAdapter.prototype,
        [S$._location$1]: C[419] || CT.C419,
        [S$.key]: null,
        [S$0.SingleChildRenderObjectWidget_child]: null
      });
    },
    get C422() {
      return C[422] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "sliver",
        [S$._Location_column]: 11,
        [S$._Location_line]: 459,
        [S$._Location_file]: null
      });
    },
    get C423() {
      return C[423] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoring",
        [S$._Location_column]: 11,
        [S$._Location_line]: 460,
        [S$._Location_file]: null
      });
    },
    get C424() {
      return C[424] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoringSemantics",
        [S$._Location_column]: 11,
        [S$._Location_line]: 461,
        [S$._Location_file]: null
      });
    },
    get C421() {
      return C[421] = dart.constList([C[422] || CT.C422, C[423] || CT.C423, C[424] || CT.C424], T$._LocationL());
    },
    get C420() {
      return C[420] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[421] || CT.C421,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 458,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C427() {
      return C[427] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opacity",
        [S$._Location_column]: 9,
        [S$._Location_line]: 465,
        [S$._Location_file]: null
      });
    },
    get C428() {
      return C[428] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alwaysIncludeSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 466,
        [S$._Location_file]: null
      });
    },
    get C429() {
      return C[429] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "sliver",
        [S$._Location_column]: 9,
        [S$._Location_line]: 467,
        [S$._Location_file]: null
      });
    },
    get C426() {
      return C[426] = dart.constList([C[427] || CT.C427, C[428] || CT.C428, C[429] || CT.C429], T$._LocationL());
    },
    get C425() {
      return C[425] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[426] || CT.C426,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 464,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C432() {
      return C[432] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 29,
        [S$._Location_line]: 476,
        [S$._Location_file]: null
      });
    },
    get C433() {
      return C[433] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enabled",
        [S$._Location_column]: 44,
        [S$._Location_line]: 476,
        [S$._Location_file]: null
      });
    },
    get C431() {
      return C[431] = dart.constList([C[432] || CT.C432, C[433] || CT.C433], T$._LocationL());
    },
    get C430() {
      return C[430] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[431] || CT.C431,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 476,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C436() {
      return C[436] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "sliver",
        [S$._Location_column]: 9,
        [S$._Location_line]: 478,
        [S$._Location_file]: null
      });
    },
    get C437() {
      return C[437] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offstage",
        [S$._Location_column]: 9,
        [S$._Location_line]: 479,
        [S$._Location_file]: null
      });
    },
    get C435() {
      return C[435] = dart.constList([C[436] || CT.C436, C[437] || CT.C437], T$._LocationL());
    },
    get C434() {
      return C[434] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[435] || CT.C435,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 477,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart"
      });
    },
    get C440() {
      return C[440] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "translation",
        [S$._Location_column]: 7,
        [S$._Location_line]: 291,
        [S$._Location_file]: null
      });
    },
    get C441() {
      return C[441] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "transformHitTests",
        [S$._Location_column]: 7,
        [S$._Location_line]: 292,
        [S$._Location_file]: null
      });
    },
    get C442() {
      return C[442] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 293,
        [S$._Location_file]: null
      });
    },
    get C439() {
      return C[439] = dart.constList([C[440] || CT.C440, C[441] || CT.C441, C[442] || CT.C442], T$._LocationL());
    },
    get C438() {
      return C[438] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[439] || CT.C439,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 290,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C443() {
      return C[443] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$0.Alignment_y]: 0,
        [S$0.Alignment_x]: 0
      });
    },
    get C446() {
      return C[446] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "transform",
        [S$._Location_column]: 7,
        [S$._Location_line]: 387,
        [S$._Location_file]: null
      });
    },
    get C447() {
      return C[447] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 7,
        [S$._Location_line]: 388,
        [S$._Location_file]: null
      });
    },
    get C448() {
      return C[448] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 389,
        [S$._Location_file]: null
      });
    },
    get C445() {
      return C[445] = dart.constList([C[446] || CT.C446, C[447] || CT.C447, C[448] || CT.C448], T$._LocationL());
    },
    get C444() {
      return C[444] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[445] || CT.C445,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 386,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C451() {
      return C[451] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "transform",
        [S$._Location_column]: 7,
        [S$._Location_line]: 479,
        [S$._Location_file]: null
      });
    },
    get C452() {
      return C[452] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 7,
        [S$._Location_line]: 480,
        [S$._Location_file]: null
      });
    },
    get C453() {
      return C[453] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 481,
        [S$._Location_file]: null
      });
    },
    get C450() {
      return C[450] = dart.constList([C[451] || CT.C451, C[452] || CT.C452, C[453] || CT.C453], T$._LocationL());
    },
    get C449() {
      return C[449] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[450] || CT.C450,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 478,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C454() {
      return C[454] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [S$0._name$8]: "Axis.vertical",
        index: 1
      });
    },
    get C457() {
      return C[457] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 9,
        [S$._Location_line]: 609,
        [S$._Location_file]: null
      });
    },
    get C458() {
      return C[458] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "heightFactor",
        [S$._Location_column]: 9,
        [S$._Location_line]: 610,
        [S$._Location_file]: null
      });
    },
    get C459() {
      return C[459] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "widthFactor",
        [S$._Location_column]: 9,
        [S$._Location_line]: 611,
        [S$._Location_file]: null
      });
    },
    get C460() {
      return C[460] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 612,
        [S$._Location_file]: null
      });
    },
    get C456() {
      return C[456] = dart.constList([C[457] || CT.C457, C[458] || CT.C458, C[459] || CT.C459, C[460] || CT.C460], T$._LocationL());
    },
    get C455() {
      return C[455] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[456] || CT.C456,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 608,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C463() {
      return C[463] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 608,
        [S$._Location_file]: null
      });
    },
    get C462() {
      return C[462] = dart.constList([C[463] || CT.C463], T$._LocationL());
    },
    get C461() {
      return C[461] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[462] || CT.C462,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 607,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C466() {
      return C[466] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "rect",
        [S$._Location_column]: 7,
        [S$._Location_line]: 955,
        [S$._Location_file]: null
      });
    },
    get C467() {
      return C[467] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 956,
        [S$._Location_file]: null
      });
    },
    get C465() {
      return C[465] = dart.constList([C[466] || CT.C466, C[467] || CT.C467], T$._LocationL());
    },
    get C464() {
      return C[464] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[465] || CT.C465,
        [S$._Location_name]: null,
        [S$._Location_column]: 23,
        [S$._Location_line]: 954,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C470() {
      return C[470] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "top",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1069,
        [S$._Location_file]: null
      });
    },
    get C471() {
      return C[471] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "right",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1070,
        [S$._Location_file]: null
      });
    },
    get C472() {
      return C[472] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bottom",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1071,
        [S$._Location_file]: null
      });
    },
    get C473() {
      return C[473] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "left",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1072,
        [S$._Location_file]: null
      });
    },
    get C474() {
      return C[474] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1073,
        [S$._Location_file]: null
      });
    },
    get C469() {
      return C[469] = dart.constList([C[470] || CT.C470, C[471] || CT.C471, C[472] || CT.C472, C[473] || CT.C473, C[474] || CT.C474], T$._LocationL());
    },
    get C468() {
      return C[468] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[469] || CT.C469,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1068,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C475() {
      return C[475] = dart.const({
        __proto__: proxy_box.DecorationPosition.prototype,
        [S$0._name$9]: "DecorationPosition.background",
        index: 0
      });
    },
    get C478() {
      return C[478] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "decoration",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1187,
        [S$._Location_file]: null
      });
    },
    get C479() {
      return C[479] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "position",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1188,
        [S$._Location_file]: null
      });
    },
    get C480() {
      return C[480] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1189,
        [S$._Location_file]: null
      });
    },
    get C477() {
      return C[477] = dart.constList([C[478] || CT.C478, C[479] || CT.C479, C[480] || CT.C480], T$._LocationL());
    },
    get C476() {
      return C[476] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[477] || CT.C477,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1186,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C483() {
      return C[483] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1248,
        [S$._Location_file]: null
      });
    },
    get C484() {
      return C[484] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "widthFactor",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1249,
        [S$._Location_file]: null
      });
    },
    get C485() {
      return C[485] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "heightFactor",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1250,
        [S$._Location_file]: null
      });
    },
    get C486() {
      return C[486] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1251,
        [S$._Location_file]: null
      });
    },
    get C482() {
      return C[482] = dart.constList([C[483] || CT.C483, C[484] || CT.C484, C[485] || CT.C485, C[486] || CT.C486], T$._LocationL());
    },
    get C481() {
      return C[481] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[482] || CT.C482,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1247,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C487() {
      return C[487] = dart.const({
        __proto__: paragraph.TextOverflow.prototype,
        [S$0._name$10]: "TextOverflow.clip",
        index: 0
      });
    },
    get C490() {
      return C[490] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "style",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1353,
        [S$._Location_file]: null
      });
    },
    get C491() {
      return C[491] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textAlign",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1354,
        [S$._Location_file]: null
      });
    },
    get C492() {
      return C[492] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "softWrap",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1355,
        [S$._Location_file]: null
      });
    },
    get C493() {
      return C[493] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "overflow",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1356,
        [S$._Location_file]: null
      });
    },
    get C494() {
      return C[494] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxLines",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1357,
        [S$._Location_file]: null
      });
    },
    get C495() {
      return C[495] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1358,
        [S$._Location_file]: null
      });
    },
    get C489() {
      return C[489] = dart.constList([C[490] || CT.C490, C[491] || CT.C491, C[492] || CT.C492, C[493] || CT.C493, C[494] || CT.C494, C[495] || CT.C495], T$._LocationL());
    },
    get C488() {
      return C[488] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[489] || CT.C489,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1352,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart"
      });
    },
    get C498() {
      return C[498] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enabled",
        [S$._Location_column]: 7,
        [S$._Location_line]: 207,
        [S$._Location_file]: null
      });
    },
    get C499() {
      return C[499] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 208,
        [S$._Location_file]: null
      });
    },
    get C497() {
      return C[497] = dart.constList([C[498] || CT.C498, C[499] || CT.C499], T$._LocationL());
    },
    get C496() {
      return C[496] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[497] || CT.C497,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 206,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overlay.dart"
      });
    },
    get C500() {
      return C[500] = dart.const({
        __proto__: ui.Clip.prototype,
        [S$._name]: "Clip.hardEdge",
        index: 1
      });
    },
    get C503() {
      return C[503] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 11,
        [S$._Location_line]: 493,
        [S$._Location_file]: null
      });
    },
    get C504() {
      return C[504] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "entry",
        [S$._Location_column]: 11,
        [S$._Location_line]: 494,
        [S$._Location_file]: null
      });
    },
    get C502() {
      return C[502] = dart.constList([C[503] || CT.C503, C[504] || CT.C504], T$._LocationL());
    },
    get C501() {
      return C[501] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[502] || CT.C502,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 492,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overlay.dart"
      });
    },
    get C507() {
      return C[507] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 11,
        [S$._Location_line]: 500,
        [S$._Location_file]: null
      });
    },
    get C508() {
      return C[508] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "entry",
        [S$._Location_column]: 11,
        [S$._Location_line]: 501,
        [S$._Location_file]: null
      });
    },
    get C509() {
      return C[509] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "tickerEnabled",
        [S$._Location_column]: 11,
        [S$._Location_line]: 502,
        [S$._Location_file]: null
      });
    },
    get C506() {
      return C[506] = dart.constList([C[507] || CT.C507, C[508] || CT.C508, C[509] || CT.C509], T$._LocationL());
    },
    get C505() {
      return C[505] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[506] || CT.C506,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 499,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overlay.dart"
      });
    },
    get C512() {
      return C[512] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "skipCount",
        [S$._Location_column]: 7,
        [S$._Location_line]: 507,
        [S$._Location_file]: null
      });
    },
    get C513() {
      return C[513] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "children",
        [S$._Location_column]: 7,
        [S$._Location_line]: 508,
        [S$._Location_file]: null
      });
    },
    get C514() {
      return C[514] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipBehavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 509,
        [S$._Location_file]: null
      });
    },
    get C511() {
      return C[511] = dart.constList([C[512] || CT.C512, C[513] || CT.C513, C[514] || CT.C514], T$._LocationL());
    },
    get C510() {
      return C[510] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[511] || CT.C511,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 506,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overlay.dart"
      });
    },
    get C515() {
      return C[515] = dart.const({
        __proto__: text_selection.TextSelectionHandleType.prototype,
        [S$0._name$11]: "TextSelectionHandleType.left",
        index: 0
      });
    },
    get C516() {
      return C[516] = dart.const({
        __proto__: text_selection.TextSelectionHandleType.prototype,
        [S$0._name$11]: "TextSelectionHandleType.right",
        index: 1
      });
    },
    get C517() {
      return C[517] = dart.const({
        __proto__: text_selection.TextSelectionHandleType.prototype,
        [S$0._name$11]: "TextSelectionHandleType.collapsed",
        index: 2
      });
    },
    get C518() {
      return C[518] = dart.constList([C[515] || CT.C515, C[516] || CT.C516, C[517] || CT.C517], T$.TextSelectionHandleTypeL());
    },
    get C519() {
      return C[519] = dart.const({
        __proto__: text_selection._TextSelectionHandlePosition.prototype,
        [S$0._name$11]: "_TextSelectionHandlePosition.start",
        index: 0
      });
    },
    get C520() {
      return C[520] = dart.const({
        __proto__: text_selection._TextSelectionHandlePosition.prototype,
        [S$0._name$11]: "_TextSelectionHandlePosition.end",
        index: 1
      });
    },
    get C521() {
      return C[521] = dart.constList([C[519] || CT.C519, C[520] || CT.C520], T$._TextSelectionHandlePositionL());
    },
    get C522() {
      return C[522] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [S$0._name$12]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C523() {
      return C[523] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 573,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C526() {
      return C[526] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSelectionHandleChanged",
        [S$._Location_column]: 11,
        [S$._Location_line]: 578,
        [S$._Location_file]: null
      });
    },
    get C527() {
      return C[527] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSelectionHandleTapped",
        [S$._Location_column]: 11,
        [S$._Location_line]: 581,
        [S$._Location_file]: null
      });
    },
    get C528() {
      return C[528] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "startHandleLayerLink",
        [S$._Location_column]: 11,
        [S$._Location_line]: 582,
        [S$._Location_file]: null
      });
    },
    get C529() {
      return C[529] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "endHandleLayerLink",
        [S$._Location_column]: 11,
        [S$._Location_line]: 583,
        [S$._Location_file]: null
      });
    },
    get C530() {
      return C[530] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "renderObject",
        [S$._Location_column]: 11,
        [S$._Location_line]: 584,
        [S$._Location_file]: null
      });
    },
    get C531() {
      return C[531] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selection",
        [S$._Location_column]: 11,
        [S$._Location_line]: 585,
        [S$._Location_file]: null
      });
    },
    get C532() {
      return C[532] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selectionControls",
        [S$._Location_column]: 11,
        [S$._Location_line]: 586,
        [S$._Location_file]: null
      });
    },
    get C533() {
      return C[533] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "position",
        [S$._Location_column]: 11,
        [S$._Location_line]: 587,
        [S$._Location_file]: null
      });
    },
    get C534() {
      return C[534] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dragStartBehavior",
        [S$._Location_column]: 11,
        [S$._Location_line]: 588,
        [S$._Location_file]: null
      });
    },
    get C525() {
      return C[525] = dart.constList([C[526] || CT.C526, C[527] || CT.C527, C[528] || CT.C528, C[529] || CT.C529, C[530] || CT.C530, C[531] || CT.C531, C[532] || CT.C532, C[533] || CT.C533, C[534] || CT.C534], T$._LocationL());
    },
    get C524() {
      return C[524] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[525] || CT.C525,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 577,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C537() {
      return C[537] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "visible",
        [S$._Location_column]: 9,
        [S$._Location_line]: 576,
        [S$._Location_file]: null
      });
    },
    get C538() {
      return C[538] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 577,
        [S$._Location_file]: null
      });
    },
    get C536() {
      return C[536] = dart.constList([C[537] || CT.C537, C[538] || CT.C538], T$._LocationL());
    },
    get C535() {
      return C[535] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[536] || CT.C536,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 575,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C541() {
      return C[541] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 593,
        [S$._Location_file]: null
      });
    },
    get C540() {
      return C[540] = dart.constList([C[541] || CT.C541], T$._LocationL());
    },
    get C539() {
      return C[539] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[540] || CT.C540,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 592,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C542() {
      return C[542] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 599,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C545() {
      return C[545] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 13,
        [S$._Location_line]: 634,
        [S$._Location_file]: null
      });
    },
    get C544() {
      return C[544] = dart.constList([C[545] || CT.C545], T$._LocationL());
    },
    get C543() {
      return C[543] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[544] || CT.C544,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 633,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C548() {
      return C[548] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "link",
        [S$._Location_column]: 11,
        [S$._Location_line]: 630,
        [S$._Location_file]: null
      });
    },
    get C549() {
      return C[549] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "showWhenUnlinked",
        [S$._Location_column]: 11,
        [S$._Location_line]: 631,
        [S$._Location_file]: null
      });
    },
    get C550() {
      return C[550] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offset",
        [S$._Location_column]: 11,
        [S$._Location_line]: 632,
        [S$._Location_file]: null
      });
    },
    get C551() {
      return C[551] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 633,
        [S$._Location_file]: null
      });
    },
    get C547() {
      return C[547] = dart.constList([C[548] || CT.C548, C[549] || CT.C549, C[550] || CT.C550, C[551] || CT.C551], T$._LocationL());
    },
    get C546() {
      return C[546] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[547] || CT.C547,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 629,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C554() {
      return C[554] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opacity",
        [S$._Location_column]: 9,
        [S$._Location_line]: 628,
        [S$._Location_file]: null
      });
    },
    get C555() {
      return C[555] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 629,
        [S$._Location_file]: null
      });
    },
    get C553() {
      return C[553] = dart.constList([C[554] || CT.C554, C[555] || CT.C555], T$._LocationL());
    },
    get C552() {
      return C[552] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[553] || CT.C553,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 627,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C558() {
      return C[558] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 7,
        [S$._Location_line]: 626,
        [S$._Location_file]: null
      });
    },
    get C559() {
      return C[559] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 627,
        [S$._Location_file]: null
      });
    },
    get C557() {
      return C[557] = dart.constList([C[558] || CT.C558, C[559] || CT.C559], T$._LocationL());
    },
    get C556() {
      return C[556] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[557] || CT.C557,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 625,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C560() {
      return C[560] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 150000
      });
    },
    get C563() {
      return C[563] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "padding",
        [S$._Location_column]: 15,
        [S$._Location_line]: 859,
        [S$._Location_file]: null
      });
    },
    get C564() {
      return C[564] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 865,
        [S$._Location_file]: null
      });
    },
    get C562() {
      return C[562] = dart.constList([C[563] || CT.C563, C[564] || CT.C564], T$._LocationL());
    },
    get C561() {
      return C[561] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[562] || CT.C562,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 858,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C567() {
      return C[567] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 13,
        [S$._Location_line]: 853,
        [S$._Location_file]: null
      });
    },
    get C568() {
      return C[568] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dragStartBehavior",
        [S$._Location_column]: 13,
        [S$._Location_line]: 854,
        [S$._Location_file]: null
      });
    },
    get C569() {
      return C[569] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPanStart",
        [S$._Location_column]: 13,
        [S$._Location_line]: 855,
        [S$._Location_file]: null
      });
    },
    get C570() {
      return C[570] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPanUpdate",
        [S$._Location_column]: 13,
        [S$._Location_line]: 856,
        [S$._Location_file]: null
      });
    },
    get C571() {
      return C[571] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onTap",
        [S$._Location_column]: 13,
        [S$._Location_line]: 857,
        [S$._Location_file]: null
      });
    },
    get C572() {
      return C[572] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 858,
        [S$._Location_file]: null
      });
    },
    get C566() {
      return C[566] = dart.constList([C[567] || CT.C567, C[568] || CT.C568, C[569] || CT.C569, C[570] || CT.C570, C[571] || CT.C571, C[572] || CT.C572], T$._LocationL());
    },
    get C565() {
      return C[565] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[566] || CT.C566,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 852,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C575() {
      return C[575] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 11,
        [S$._Location_line]: 849,
        [S$._Location_file]: null
      });
    },
    get C576() {
      return C[576] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "width",
        [S$._Location_column]: 11,
        [S$._Location_line]: 850,
        [S$._Location_file]: null
      });
    },
    get C577() {
      return C[577] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "height",
        [S$._Location_column]: 11,
        [S$._Location_line]: 851,
        [S$._Location_file]: null
      });
    },
    get C578() {
      return C[578] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 852,
        [S$._Location_file]: null
      });
    },
    get C574() {
      return C[574] = dart.constList([C[575] || CT.C575, C[576] || CT.C576, C[577] || CT.C577, C[578] || CT.C578], T$._LocationL());
    },
    get C573() {
      return C[573] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[574] || CT.C574,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 848,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C581() {
      return C[581] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "opacity",
        [S$._Location_column]: 9,
        [S$._Location_line]: 847,
        [S$._Location_file]: null
      });
    },
    get C582() {
      return C[582] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 848,
        [S$._Location_file]: null
      });
    },
    get C580() {
      return C[580] = dart.constList([C[581] || CT.C581, C[582] || CT.C582], T$._LocationL());
    },
    get C579() {
      return C[579] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[580] || CT.C580,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 846,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C585() {
      return C[585] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "link",
        [S$._Location_column]: 7,
        [S$._Location_line]: 843,
        [S$._Location_file]: null
      });
    },
    get C586() {
      return C[586] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offset",
        [S$._Location_column]: 7,
        [S$._Location_line]: 844,
        [S$._Location_file]: null
      });
    },
    get C587() {
      return C[587] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "showWhenUnlinked",
        [S$._Location_column]: 7,
        [S$._Location_line]: 845,
        [S$._Location_file]: null
      });
    },
    get C588() {
      return C[588] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 846,
        [S$._Location_file]: null
      });
    },
    get C584() {
      return C[584] = dart.constList([C[585] || CT.C585, C[586] || CT.C586, C[587] || CT.C587, C[588] || CT.C588], T$._LocationL());
    },
    get C583() {
      return C[583] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[584] || CT.C584,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 842,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C591() {
      return C[591] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1243,
        [S$._Location_file]: null
      });
    },
    get C592() {
      return C[592] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onTapDown",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1244,
        [S$._Location_file]: null
      });
    },
    get C593() {
      return C[593] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onForcePressStart",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1245,
        [S$._Location_file]: null
      });
    },
    get C594() {
      return C[594] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onForcePressEnd",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1246,
        [S$._Location_file]: null
      });
    },
    get C595() {
      return C[595] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSecondaryTap",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1247,
        [S$._Location_file]: null
      });
    },
    get C596() {
      return C[596] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSecondaryTapDown",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1248,
        [S$._Location_file]: null
      });
    },
    get C597() {
      return C[597] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSingleTapUp",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1249,
        [S$._Location_file]: null
      });
    },
    get C598() {
      return C[598] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSingleTapCancel",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1250,
        [S$._Location_file]: null
      });
    },
    get C599() {
      return C[599] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSingleLongTapStart",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1251,
        [S$._Location_file]: null
      });
    },
    get C600() {
      return C[600] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSingleLongTapMoveUpdate",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1252,
        [S$._Location_file]: null
      });
    },
    get C601() {
      return C[601] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onSingleLongTapEnd",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1253,
        [S$._Location_file]: null
      });
    },
    get C602() {
      return C[602] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onDoubleTapDown",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1254,
        [S$._Location_file]: null
      });
    },
    get C603() {
      return C[603] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onDragSelectionStart",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1255,
        [S$._Location_file]: null
      });
    },
    get C604() {
      return C[604] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onDragSelectionUpdate",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1256,
        [S$._Location_file]: null
      });
    },
    get C605() {
      return C[605] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onDragSelectionEnd",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1257,
        [S$._Location_file]: null
      });
    },
    get C606() {
      return C[606] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1258,
        [S$._Location_file]: null
      });
    },
    get C607() {
      return C[607] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1259,
        [S$._Location_file]: null
      });
    },
    get C590() {
      return C[590] = dart.constList([C[591] || CT.C591, C[592] || CT.C592, C[593] || CT.C593, C[594] || CT.C594, C[595] || CT.C595, C[596] || CT.C596, C[597] || CT.C597, C[598] || CT.C598, C[599] || CT.C599, C[600] || CT.C600, C[601] || CT.C601, C[602] || CT.C602, C[603] || CT.C603, C[604] || CT.C604, C[605] || CT.C605, C[606] || CT.C606, C[607] || CT.C607], T$._LocationL());
    },
    get C589() {
      return C[589] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[590] || CT.C590,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1242,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C610() {
      return C[610] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "gestures",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1571,
        [S$._Location_file]: null
      });
    },
    get C611() {
      return C[611] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excludeFromSemantics",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1572,
        [S$._Location_file]: null
      });
    },
    get C612() {
      return C[612] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1573,
        [S$._Location_file]: null
      });
    },
    get C613() {
      return C[613] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1574,
        [S$._Location_file]: null
      });
    },
    get C609() {
      return C[609] = dart.constList([C[610] || CT.C610, C[611] || CT.C611, C[612] || CT.C612, C[613] || CT.C613], T$._LocationL());
    },
    get C608() {
      return C[608] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[609] || CT.C609,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1570,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart"
      });
    },
    get C614() {
      return C[614] = dart.const({
        __proto__: text_selection.ClipboardStatus.prototype,
        [S$0._name$11]: "ClipboardStatus.unknown",
        index: 1
      });
    },
    get C615() {
      return C[615] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._name]: "AppLifecycleState.resumed",
        index: 0
      });
    },
    get C616() {
      return C[616] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._name]: "AppLifecycleState.detached",
        index: 3
      });
    },
    get C617() {
      return C[617] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._name]: "AppLifecycleState.inactive",
        index: 1
      });
    },
    get C618() {
      return C[618] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._name]: "AppLifecycleState.paused",
        index: 2
      });
    },
    get C619() {
      return C[619] = dart.const({
        __proto__: text_selection.ClipboardStatus.prototype,
        [S$0._name$11]: "ClipboardStatus.pasteable",
        index: 0
      });
    },
    get C620() {
      return C[620] = dart.const({
        __proto__: text_selection.ClipboardStatus.prototype,
        [S$0._name$11]: "ClipboardStatus.notPasteable",
        index: 2
      });
    },
    get C621() {
      return C[621] = dart.constList([C[619] || CT.C619, C[614] || CT.C614, C[620] || CT.C620], T$.ClipboardStatusL());
    },
    get C622() {
      return C[622] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 50000
      });
    },
    get C623() {
      return C[623] = dart.constList([], T$.InheritedThemeL());
    },
    get C626() {
      return C[626] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "themes",
        [S$._Location_column]: 24,
        [S$._Location_line]: 202,
        [S$._Location_file]: null
      });
    },
    get C627() {
      return C[627] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 41,
        [S$._Location_line]: 202,
        [S$._Location_file]: null
      });
    },
    get C625() {
      return C[625] = dart.constList([C[626] || CT.C626, C[627] || CT.C627], T$._LocationL());
    },
    get C624() {
      return C[624] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[625] || CT.C625,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 202,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/inherited_theme.dart"
      });
    },
    get C628() {
      return C[628] = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [S$0._name$13]: "TextWidthBasis.parent",
        index: 0
      });
    },
    get C629() {
      return C[629] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: null,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: null,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: null,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: null,
        [S$.TextStyle_fontSize]: null,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: null,
        [S$.TextStyle_inherit]: true
      });
    },
    get C631() {
      return C[631] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 36,
        [S$._Location_line]: 71,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C630() {
      return C[630] = dart.const({
        __proto__: text._NullWidget.prototype,
        [S$._location$1]: C[631] || CT.C631,
        [S$.key]: null
      });
    },
    get C634() {
      return C[634] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 11,
        [S$._Location_line]: 104,
        [S$._Location_file]: null
      });
    },
    get C635() {
      return C[635] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "style",
        [S$._Location_column]: 11,
        [S$._Location_line]: 105,
        [S$._Location_file]: null
      });
    },
    get C636() {
      return C[636] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textAlign",
        [S$._Location_column]: 11,
        [S$._Location_line]: 106,
        [S$._Location_file]: null
      });
    },
    get C637() {
      return C[637] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "softWrap",
        [S$._Location_column]: 11,
        [S$._Location_line]: 107,
        [S$._Location_file]: null
      });
    },
    get C638() {
      return C[638] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "overflow",
        [S$._Location_column]: 11,
        [S$._Location_line]: 108,
        [S$._Location_file]: null
      });
    },
    get C639() {
      return C[639] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxLines",
        [S$._Location_column]: 11,
        [S$._Location_line]: 109,
        [S$._Location_file]: null
      });
    },
    get C640() {
      return C[640] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textWidthBasis",
        [S$._Location_column]: 11,
        [S$._Location_line]: 110,
        [S$._Location_file]: null
      });
    },
    get C641() {
      return C[641] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 111,
        [S$._Location_file]: null
      });
    },
    get C633() {
      return C[633] = dart.constList([C[634] || CT.C634, C[635] || CT.C635, C[636] || CT.C636, C[637] || CT.C637, C[638] || CT.C638, C[639] || CT.C639, C[640] || CT.C640, C[641] || CT.C641], T$._LocationL());
    },
    get C632() {
      return C[632] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[633] || CT.C633,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 103,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C644() {
      return C[644] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 7,
        [S$._Location_line]: 101,
        [S$._Location_file]: null
      });
    },
    get C643() {
      return C[643] = dart.constList([C[644] || CT.C644], T$._LocationL());
    },
    get C642() {
      return C[642] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[643] || CT.C643,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 100,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C646() {
      return C[646] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 84,
        [S$._Location_line]: 167,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C645() {
      return C[645] = dart.const({
        __proto__: text.DefaultTextStyle.prototype,
        [S$._location$1]: C[646] || CT.C646,
        [S$.key]: null,
        [S$.child$4]: C[630] || CT.C630,
        [S$0.textHeightBehavior]: null,
        [S$0.textWidthBasis]: C[628] || CT.C628,
        [S$0.maxLines$1]: null,
        [S$0.overflow$1]: C[487] || CT.C487,
        [S$0.softWrap$1]: true,
        [S$0.textAlign$1]: null,
        [S$0.style]: C[629] || CT.C629
      });
    },
    get C649() {
      return C[649] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "style",
        [S$._Location_column]: 7,
        [S$._Location_line]: 184,
        [S$._Location_file]: null
      });
    },
    get C650() {
      return C[650] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textAlign",
        [S$._Location_column]: 7,
        [S$._Location_line]: 185,
        [S$._Location_file]: null
      });
    },
    get C651() {
      return C[651] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "softWrap",
        [S$._Location_column]: 7,
        [S$._Location_line]: 186,
        [S$._Location_file]: null
      });
    },
    get C652() {
      return C[652] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "overflow",
        [S$._Location_column]: 7,
        [S$._Location_line]: 187,
        [S$._Location_file]: null
      });
    },
    get C653() {
      return C[653] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxLines",
        [S$._Location_column]: 7,
        [S$._Location_line]: 188,
        [S$._Location_file]: null
      });
    },
    get C654() {
      return C[654] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textWidthBasis",
        [S$._Location_column]: 7,
        [S$._Location_line]: 189,
        [S$._Location_file]: null
      });
    },
    get C655() {
      return C[655] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textHeightBehavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 190,
        [S$._Location_file]: null
      });
    },
    get C656() {
      return C[656] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 191,
        [S$._Location_file]: null
      });
    },
    get C648() {
      return C[648] = dart.constList([C[649] || CT.C649, C[650] || CT.C650, C[651] || CT.C651, C[652] || CT.C652, C[653] || CT.C653, C[654] || CT.C654, C[655] || CT.C655, C[656] || CT.C656], T$._LocationL());
    },
    get C647() {
      return C[647] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[648] || CT.C648,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 183,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C659() {
      return C[659] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textHeightBehavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 268,
        [S$._Location_file]: null
      });
    },
    get C660() {
      return C[660] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 269,
        [S$._Location_file]: null
      });
    },
    get C658() {
      return C[658] = dart.constList([C[659] || CT.C659, C[660] || CT.C660], T$._LocationL());
    },
    get C657() {
      return C[657] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[658] || CT.C658,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 267,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C662() {
      return C[662] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [S$0.FontWeight_index]: 6
      });
    },
    get C661() {
      return C[661] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: null,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: null,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: null,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: C[662] || CT.C662,
        [S$.TextStyle_fontSize]: null,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: null,
        [S$.TextStyle_inherit]: true
      });
    },
    get C665() {
      return C[665] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textAlign",
        [S$._Location_column]: 7,
        [S$._Location_line]: 525,
        [S$._Location_file]: null
      });
    },
    get C666() {
      return C[666] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 7,
        [S$._Location_line]: 526,
        [S$._Location_file]: null
      });
    },
    get C667() {
      return C[667] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "locale",
        [S$._Location_column]: 7,
        [S$._Location_line]: 527,
        [S$._Location_file]: null
      });
    },
    get C668() {
      return C[668] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "softWrap",
        [S$._Location_column]: 7,
        [S$._Location_line]: 528,
        [S$._Location_file]: null
      });
    },
    get C669() {
      return C[669] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "overflow",
        [S$._Location_column]: 7,
        [S$._Location_line]: 529,
        [S$._Location_file]: null
      });
    },
    get C670() {
      return C[670] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textScaleFactor",
        [S$._Location_column]: 7,
        [S$._Location_line]: 530,
        [S$._Location_file]: null
      });
    },
    get C671() {
      return C[671] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxLines",
        [S$._Location_column]: 7,
        [S$._Location_line]: 531,
        [S$._Location_file]: null
      });
    },
    get C672() {
      return C[672] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "strutStyle",
        [S$._Location_column]: 7,
        [S$._Location_line]: 532,
        [S$._Location_file]: null
      });
    },
    get C673() {
      return C[673] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textWidthBasis",
        [S$._Location_column]: 7,
        [S$._Location_line]: 533,
        [S$._Location_file]: null
      });
    },
    get C674() {
      return C[674] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textHeightBehavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 534,
        [S$._Location_file]: null
      });
    },
    get C675() {
      return C[675] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "text",
        [S$._Location_column]: 7,
        [S$._Location_line]: 535,
        [S$._Location_file]: null
      });
    },
    get C664() {
      return C[664] = dart.constList([C[665] || CT.C665, C[666] || CT.C666, C[667] || CT.C667, C[668] || CT.C668, C[669] || CT.C669, C[670] || CT.C670, C[671] || CT.C671, C[672] || CT.C672, C[673] || CT.C673, C[674] || CT.C674, C[675] || CT.C675], T$._LocationL());
    },
    get C663() {
      return C[663] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[664] || CT.C664,
        [S$._Location_name]: null,
        [S$._Location_column]: 21,
        [S$._Location_line]: 524,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C678() {
      return C[678] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 546,
        [S$._Location_file]: null
      });
    },
    get C677() {
      return C[677] = dart.constList([C[678] || CT.C678], T$._LocationL());
    },
    get C676() {
      return C[676] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[677] || CT.C677,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 545,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C681() {
      return C[681] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 9,
        [S$._Location_line]: 543,
        [S$._Location_file]: null
      });
    },
    get C682() {
      return C[682] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "label",
        [S$._Location_column]: 9,
        [S$._Location_line]: 544,
        [S$._Location_file]: null
      });
    },
    get C683() {
      return C[683] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 545,
        [S$._Location_file]: null
      });
    },
    get C680() {
      return C[680] = dart.constList([C[681] || CT.C681, C[682] || CT.C682, C[683] || CT.C683], T$._LocationL());
    },
    get C679() {
      return C[679] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[680] || CT.C680,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 542,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart"
      });
    },
    get C684() {
      return C[684] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [S$0._name$8]: "AxisDirection.down",
        index: 2
      });
    },
    get C685() {
      return C[685] = dart.const({
        __proto__: viewport$.CacheExtentStyle.prototype,
        [S$0._name$14]: "CacheExtentStyle.pixel",
        index: 0
      });
    },
    get C686() {
      return C[686] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [S$0._name$8]: "AxisDirection.up",
        index: 0
      });
    },
    get C687() {
      return C[687] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [S$0._name$8]: "AxisDirection.right",
        index: 1
      });
    },
    get C688() {
      return C[688] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [S$0._name$8]: "AxisDirection.left",
        index: 3
      });
    },
    get C689() {
      return C[689] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 0
      });
    },
    get C690() {
      return C[690] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$0.EdgeInsets_bottom]: 0,
        [S$0.EdgeInsets_right]: 0,
        [S$0.EdgeInsets_top]: 0,
        [S$0.EdgeInsets_left]: 0
      });
    },
    get C691() {
      return C[691] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [S$._name]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C692() {
      return C[692] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [S$._name]: "PointerDeviceKind.mouse",
        index: 1
      });
    },
    get C693() {
      return C[693] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [S$._name]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C694() {
      return C[694] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [S$._name]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C695() {
      return C[695] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [S$._name]: "PointerDeviceKind.unknown",
        index: 4
      });
    },
    get C696() {
      return C[696] = dart.const(new _js_helper.PrivateSymbol.new('_repaint', S$0._repaint));
    },
    get C697() {
      return C[697] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 600000
      });
    },
    get C698() {
      return C[698] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 0
      });
    },
    get C699() {
      return C[699] = dart.fn(scroll_notification.defaultScrollNotificationPredicate, T$.ScrollNotificationTobool());
    },
    get C700() {
      return C[700] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 1723645116
      });
    },
    get C701() {
      return C[701] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [S$0._name$8]: "Axis.horizontal",
        index: 0
      });
    },
    get C702() {
      return C[702] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 100000
      });
    },
    get C705() {
      return C[705] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 38,
        [S$._Location_line]: 1372,
        [S$._Location_file]: null
      });
    },
    get C704() {
      return C[704] = dart.constList([C[705] || CT.C705], T$._LocationL());
    },
    get C703() {
      return C[703] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[704] || CT.C704,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 1372,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart"
      });
    },
    get C708() {
      return C[708] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1370,
        [S$._Location_file]: null
      });
    },
    get C709() {
      return C[709] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "foregroundPainter",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1371,
        [S$._Location_file]: null
      });
    },
    get C710() {
      return C[710] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1372,
        [S$._Location_file]: null
      });
    },
    get C707() {
      return C[707] = dart.constList([C[708] || CT.C708, C[709] || CT.C709, C[710] || CT.C710], T$._LocationL());
    },
    get C706() {
      return C[706] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[707] || CT.C707,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 1369,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart"
      });
    },
    get C713() {
      return C[713] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onExit",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1343,
        [S$._Location_file]: null
      });
    },
    get C714() {
      return C[714] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onHover",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1356,
        [S$._Location_file]: null
      });
    },
    get C715() {
      return C[715] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1369,
        [S$._Location_file]: null
      });
    },
    get C712() {
      return C[712] = dart.constList([C[713] || CT.C713, C[714] || CT.C714, C[715] || CT.C715], T$._LocationL());
    },
    get C711() {
      return C[711] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[712] || CT.C712,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1342,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart"
      });
    },
    get C718() {
      return C[718] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "gestures",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1341,
        [S$._Location_file]: null
      });
    },
    get C719() {
      return C[719] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1342,
        [S$._Location_file]: null
      });
    },
    get C717() {
      return C[717] = dart.constList([C[718] || CT.C718, C[719] || CT.C719], T$._LocationL());
    },
    get C716() {
      return C[716] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[717] || CT.C717,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1340,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart"
      });
    },
    get C722() {
      return C[722] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1340,
        [S$._Location_file]: null
      });
    },
    get C721() {
      return C[721] = dart.constList([C[722] || CT.C722], T$._LocationL());
    },
    get C720() {
      return C[720] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[721] || CT.C721,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 1339,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart"
      });
    },
    get C725() {
      return C[725] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onNotification",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1338,
        [S$._Location_file]: null
      });
    },
    get C726() {
      return C[726] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1339,
        [S$._Location_file]: null
      });
    },
    get C724() {
      return C[724] = dart.constList([C[725] || CT.C725, C[726] || CT.C726], T$._LocationL());
    },
    get C723() {
      return C[723] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[724] || CT.C724,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1337,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart"
      });
    },
    get C729() {
      return C[729] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 94,
        [S$._Location_file]: null
      });
    },
    get C730() {
      return C[730] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "axisDirection",
        [S$._Location_column]: 9,
        [S$._Location_line]: 95,
        [S$._Location_file]: null
      });
    },
    get C731() {
      return C[731] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 9,
        [S$._Location_line]: 96,
        [S$._Location_file]: null
      });
    },
    get C728() {
      return C[728] = dart.constList([C[729] || CT.C729, C[730] || CT.C730, C[731] || CT.C731], T$._LocationL());
    },
    get C727() {
      return C[727] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[728] || CT.C728,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 93,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_configuration.dart"
      });
    },
    get C734() {
      return C[734] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 110,
        [S$._Location_file]: null
      });
    },
    get C735() {
      return C[735] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "controller",
        [S$._Location_column]: 11,
        [S$._Location_line]: 111,
        [S$._Location_file]: null
      });
    },
    get C733() {
      return C[733] = dart.constList([C[734] || CT.C734, C[735] || CT.C735], T$._LocationL());
    },
    get C732() {
      return C[732] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[733] || CT.C733,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 109,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_configuration.dart"
      });
    },
    get C737() {
      return C[737] = dart.const({
        __proto__: scroll_physics.RangeMaintainingScrollPhysics.prototype,
        [S$0.ScrollPhysics_parent]: null
      });
    },
    get C736() {
      return C[736] = dart.const({
        __proto__: scroll_physics.BouncingScrollPhysics.prototype,
        [S$0.ScrollPhysics_parent]: C[737] || CT.C737
      });
    },
    get C738() {
      return C[738] = dart.const({
        __proto__: scroll_physics.ClampingScrollPhysics.prototype,
        [S$0.ScrollPhysics_parent]: C[737] || CT.C737
      });
    },
    get C739() {
      return C[739] = dart.const({
        __proto__: scroll_configuration.ScrollBehavior.prototype
      });
    },
    get C741() {
      return C[741] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [S$._name]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C740() {
      return C[740] = dart.const({
        __proto__: text_editing.TextSelection.prototype,
        [S$0.TextRange_end]: -1,
        [S$0.TextRange_start]: -1,
        [S$0.TextSelection_isDirectional]: false,
        [S$0.TextSelection_affinity]: C[741] || CT.C741,
        [S$0.TextSelection_extentOffset]: -1,
        [S$0.TextSelection_baseOffset]: -1
      });
    },
    get C743() {
      return C[743] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [S$0.TextDecoration__mask]: 1
      });
    },
    get C742() {
      return C[742] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: null,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: C[743] || CT.C743,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: null,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: null,
        [S$.TextStyle_fontSize]: null,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: null,
        [S$.TextStyle_inherit]: true
      });
    },
    get C745() {
      return C[745] = dart.const({
        __proto__: ui.TextRange.prototype,
        [S$0.TextRange_end]: -1,
        [S$0.TextRange_start]: -1
      });
    },
    get C746() {
      return C[746] = dart.const({
        __proto__: text_editing.TextSelection.prototype,
        [S$0.TextRange_end]: 0,
        [S$0.TextRange_start]: 0,
        [S$0.TextSelection_isDirectional]: false,
        [S$0.TextSelection_affinity]: C[741] || CT.C741,
        [S$0.TextSelection_extentOffset]: 0,
        [S$0.TextSelection_baseOffset]: 0
      });
    },
    get C744() {
      return C[744] = dart.const({
        __proto__: text_input.TextEditingValue.prototype,
        [S$0.TextEditingValue_composing]: C[745] || CT.C745,
        [S$0.TextEditingValue_selection]: C[746] || CT.C746,
        [S$0.TextEditingValue_text]: ""
      });
    },
    get C749() {
      return C[749] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bucket",
        [S$._Location_column]: 7,
        [S$._Location_line]: 113,
        [S$._Location_file]: null
      });
    },
    get C750() {
      return C[750] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 114,
        [S$._Location_file]: null
      });
    },
    get C748() {
      return C[748] = dart.constList([C[749] || CT.C749, C[750] || CT.C750], T$._LocationL());
    },
    get C747() {
      return C[747] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[748] || CT.C748,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 112,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/restoration.dart"
      });
    },
    get C752() {
      return C[752] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 313,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/restoration.dart"
      });
    },
    get C751() {
      return C[751] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [S$._location$1]: C[752] || CT.C752,
        [S$.key]: null,
        [S$0.SingleChildRenderObjectWidget_child]: null,
        [S$0.SizedBox_height]: 0,
        [S$0.SizedBox_width]: 0
      });
    },
    get C755() {
      return C[755] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "restorationId",
        [S$._Location_column]: 9,
        [S$._Location_line]: 319,
        [S$._Location_file]: null
      });
    },
    get C756() {
      return C[756] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 320,
        [S$._Location_file]: null
      });
    },
    get C754() {
      return C[754] = dart.constList([C[755] || CT.C755, C[756] || CT.C756], T$._LocationL());
    },
    get C753() {
      return C[753] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[754] || CT.C754,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 318,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/restoration.dart"
      });
    },
    get C759() {
      return C[759] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bucket",
        [S$._Location_column]: 7,
        [S$._Location_line]: 317,
        [S$._Location_file]: null
      });
    },
    get C760() {
      return C[760] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 318,
        [S$._Location_file]: null
      });
    },
    get C758() {
      return C[758] = dart.constList([C[759] || CT.C759, C[760] || CT.C760], T$._LocationL());
    },
    get C757() {
      return C[757] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[758] || CT.C758,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 316,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/restoration.dart"
      });
    },
    get C761() {
      return C[761] = dart.const({
        __proto__: curves.Cubic.prototype,
        [S$0.Cubic_d]: 1,
        [S$0.Cubic_c]: 0.25,
        [S$0.Cubic_b]: 0.1,
        [S$0.Cubic_a]: 0.25
      });
    },
    get C762() {
      return C[762] = dart.const({
        __proto__: scroll_position.ScrollPositionAlignmentPolicy.prototype,
        [S$0._name$15]: "ScrollPositionAlignmentPolicy.explicit",
        index: 0
      });
    },
    get C763() {
      return C[763] = dart.const({
        __proto__: scroll_position.ScrollPositionAlignmentPolicy.prototype,
        [S$0._name$15]: "ScrollPositionAlignmentPolicy.keepVisibleAtEnd",
        index: 1
      });
    },
    get C764() {
      return C[764] = dart.const({
        __proto__: scroll_position.ScrollPositionAlignmentPolicy.prototype,
        [S$0._name$15]: "ScrollPositionAlignmentPolicy.keepVisibleAtStart",
        index: 2
      });
    },
    get C765() {
      return C[765] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 20000
      });
    },
    get C766() {
      return C[766] = dart.constList([C[762] || CT.C762, C[763] || CT.C763, C[764] || CT.C764], T$.ScrollPositionAlignmentPolicyL());
    },
    get C769() {
      return C[769] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 338,
        [S$._Location_file]: null
      });
    },
    get C768() {
      return C[768] = dart.constList([C[769] || CT.C769], T$._LocationL());
    },
    get C767() {
      return C[767] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[768] || CT.C768,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 337,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overscroll_indicator.dart"
      });
    },
    get C772() {
      return C[772] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "foregroundPainter",
        [S$._Location_column]: 11,
        [S$._Location_line]: 331,
        [S$._Location_file]: null
      });
    },
    get C773() {
      return C[773] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 337,
        [S$._Location_file]: null
      });
    },
    get C771() {
      return C[771] = dart.constList([C[772] || CT.C772, C[773] || CT.C773], T$._LocationL());
    },
    get C770() {
      return C[770] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[771] || CT.C771,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 330,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overscroll_indicator.dart"
      });
    },
    get C776() {
      return C[776] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 330,
        [S$._Location_file]: null
      });
    },
    get C775() {
      return C[775] = dart.constList([C[776] || CT.C776], T$._LocationL());
    },
    get C774() {
      return C[774] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[775] || CT.C775,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 329,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overscroll_indicator.dart"
      });
    },
    get C779() {
      return C[779] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onNotification",
        [S$._Location_column]: 7,
        [S$._Location_line]: 328,
        [S$._Location_file]: null
      });
    },
    get C780() {
      return C[780] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 329,
        [S$._Location_file]: null
      });
    },
    get C778() {
      return C[778] = dart.constList([C[779] || CT.C779, C[780] || CT.C780], T$._LocationL());
    },
    get C777() {
      return C[777] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[778] || CT.C778,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 327,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overscroll_indicator.dart"
      });
    },
    get C781() {
      return C[781] = dart.const({
        __proto__: overscroll_indicator._GlowState.prototype,
        [S._name$16]: "_GlowState.idle",
        index: 0
      });
    },
    get C782() {
      return C[782] = dart.const({
        __proto__: overscroll_indicator._GlowState.prototype,
        [S._name$16]: "_GlowState.absorb",
        index: 1
      });
    },
    get C783() {
      return C[783] = dart.const({
        __proto__: overscroll_indicator._GlowState.prototype,
        [S._name$16]: "_GlowState.pull",
        index: 2
      });
    },
    get C784() {
      return C[784] = dart.const({
        __proto__: overscroll_indicator._GlowState.prototype,
        [S._name$16]: "_GlowState.recede",
        index: 3
      });
    },
    get C785() {
      return C[785] = dart.constList([C[781] || CT.C781, C[782] || CT.C782, C[783] || CT.C783, C[784] || CT.C784], T$._GlowStateL());
    },
    get C786() {
      return C[786] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 167000
      });
    },
    get C787() {
      return C[787] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 2000000
      });
    },
    get C790() {
      return C[790] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enabled",
        [S$._Location_column]: 7,
        [S$._Location_line]: 68,
        [S$._Location_file]: null
      });
    },
    get C791() {
      return C[791] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 69,
        [S$._Location_file]: null
      });
    },
    get C789() {
      return C[789] = dart.constList([C[790] || CT.C790, C[791] || CT.C791], T$._LocationL());
    },
    get C788() {
      return C[788] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[789] || CT.C789,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 67,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/ticker_provider.dart"
      });
    },
    get C794() {
      return C[794] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "gestures",
        [S$._Location_column]: 7,
        [S$._Location_line]: 922,
        [S$._Location_file]: null
      });
    },
    get C795() {
      return C[795] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 923,
        [S$._Location_file]: null
      });
    },
    get C796() {
      return C[796] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excludeFromSemantics",
        [S$._Location_column]: 7,
        [S$._Location_line]: 924,
        [S$._Location_file]: null
      });
    },
    get C797() {
      return C[797] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 925,
        [S$._Location_file]: null
      });
    },
    get C793() {
      return C[793] = dart.constList([C[794] || CT.C794, C[795] || CT.C795, C[796] || CT.C796, C[797] || CT.C797], T$._LocationL());
    },
    get C792() {
      return C[792] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[793] || CT.C793,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 921,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/gesture_detector.dart"
      });
    },
    get C798() {
      return C[798] = dart.constMap(T$.TypeL(), T$.GestureRecognizerFactoryLOfGestureRecognizerL(), []);
    },
    get C799() {
      return C[799] = dart.constMap(T$.TypeL(), T$.GestureRecognizerL(), []);
    },
    get C802() {
      return C[802] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPointerDown",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1221,
        [S$._Location_file]: null
      });
    },
    get C803() {
      return C[803] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1222,
        [S$._Location_file]: null
      });
    },
    get C804() {
      return C[804] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1223,
        [S$._Location_file]: null
      });
    },
    get C801() {
      return C[801] = dart.constList([C[802] || CT.C802, C[803] || CT.C803, C[804] || CT.C804], T$._LocationL());
    },
    get C800() {
      return C[800] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[801] || CT.C801,
        [S$._Location_name]: null,
        [S$._Location_column]: 21,
        [S$._Location_line]: 1220,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/gesture_detector.dart"
      });
    },
    get C807() {
      return C[807] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1227,
        [S$._Location_file]: null
      });
    },
    get C808() {
      return C[808] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "assignSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1228,
        [S$._Location_file]: null
      });
    },
    get C809() {
      return C[809] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1229,
        [S$._Location_file]: null
      });
    },
    get C806() {
      return C[806] = dart.constList([C[807] || CT.C807, C[808] || CT.C808, C[809] || CT.C809], T$._LocationL());
    },
    get C805() {
      return C[805] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[806] || CT.C806,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1226,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/gesture_detector.dart"
      });
    },
    get C810() {
      return C[810] = dart.const({
        __proto__: long_press.LongPressStartDetails.prototype,
        [S.LongPressStartDetails_localPosition]: C[1] || CT.C1,
        [S.LongPressStartDetails_globalPosition]: C[1] || CT.C1
      });
    },
    get C812() {
      return C[812] = dart.const({
        __proto__: velocity_tracker.Velocity.prototype,
        [S.Velocity_pixelsPerSecond]: C[1] || CT.C1
      });
    },
    get C811() {
      return C[811] = dart.const({
        __proto__: long_press.LongPressEndDetails.prototype,
        [S.LongPressEndDetails_velocity]: C[812] || CT.C812,
        [S.LongPressEndDetails_localPosition]: C[1] || CT.C1,
        [S.LongPressEndDetails_globalPosition]: C[1] || CT.C1
      });
    },
    get C815() {
      return C[815] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 15,
        [S$._Location_line]: 748,
        [S$._Location_file]: null
      });
    },
    get C816() {
      return C[816] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoring",
        [S$._Location_column]: 15,
        [S$._Location_line]: 749,
        [S$._Location_file]: null
      });
    },
    get C817() {
      return C[817] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "ignoringSemantics",
        [S$._Location_column]: 15,
        [S$._Location_line]: 750,
        [S$._Location_file]: null
      });
    },
    get C818() {
      return C[818] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 751,
        [S$._Location_file]: null
      });
    },
    get C814() {
      return C[814] = dart.constList([C[815] || CT.C815, C[816] || CT.C816, C[817] || CT.C817, C[818] || CT.C818], T$._LocationL());
    },
    get C813() {
      return C[813] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[814] || CT.C814,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 747,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart"
      });
    },
    get C821() {
      return C[821] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "explicitChildNodes",
        [S$._Location_column]: 13,
        [S$._Location_line]: 746,
        [S$._Location_file]: null
      });
    },
    get C822() {
      return C[822] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 747,
        [S$._Location_file]: null
      });
    },
    get C820() {
      return C[820] = dart.constList([C[821] || CT.C821, C[822] || CT.C822], T$._LocationL());
    },
    get C819() {
      return C[819] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[820] || CT.C820,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 745,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart"
      });
    },
    get C825() {
      return C[825] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 11,
        [S$._Location_line]: 741,
        [S$._Location_file]: null
      });
    },
    get C826() {
      return C[826] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "gestures",
        [S$._Location_column]: 11,
        [S$._Location_line]: 742,
        [S$._Location_file]: null
      });
    },
    get C827() {
      return C[827] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "behavior",
        [S$._Location_column]: 11,
        [S$._Location_line]: 743,
        [S$._Location_file]: null
      });
    },
    get C828() {
      return C[828] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excludeFromSemantics",
        [S$._Location_column]: 11,
        [S$._Location_line]: 744,
        [S$._Location_file]: null
      });
    },
    get C829() {
      return C[829] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 745,
        [S$._Location_file]: null
      });
    },
    get C824() {
      return C[824] = dart.constList([C[825] || CT.C825, C[826] || CT.C826, C[827] || CT.C827, C[828] || CT.C828, C[829] || CT.C829], T$._LocationL());
    },
    get C823() {
      return C[823] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[824] || CT.C824,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 740,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart"
      });
    },
    get C832() {
      return C[832] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPointerSignal",
        [S$._Location_column]: 9,
        [S$._Location_line]: 739,
        [S$._Location_file]: null
      });
    },
    get C833() {
      return C[833] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 740,
        [S$._Location_file]: null
      });
    },
    get C831() {
      return C[831] = dart.constList([C[832] || CT.C832, C[833] || CT.C833], T$._LocationL());
    },
    get C830() {
      return C[830] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[831] || CT.C831,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 738,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart"
      });
    },
    get C836() {
      return C[836] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "scrollable",
        [S$._Location_column]: 7,
        [S$._Location_line]: 735,
        [S$._Location_file]: null
      });
    },
    get C837() {
      return C[837] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "position",
        [S$._Location_column]: 7,
        [S$._Location_line]: 736,
        [S$._Location_file]: null
      });
    },
    get C838() {
      return C[838] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 738,
        [S$._Location_file]: null
      });
    },
    get C835() {
      return C[835] = dart.constList([C[836] || CT.C836, C[837] || CT.C837, C[838] || CT.C838], T$._LocationL());
    },
    get C834() {
      return C[834] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[835] || CT.C835,
        [S$._Location_name]: null,
        [S$._Location_column]: 21,
        [S$._Location_line]: 734,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart"
      });
    },
    get C841() {
      return C[841] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 9,
        [S$._Location_line]: 760,
        [S$._Location_file]: null
      });
    },
    get C842() {
      return C[842] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 761,
        [S$._Location_file]: null
      });
    },
    get C843() {
      return C[843] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "position",
        [S$._Location_column]: 9,
        [S$._Location_line]: 762,
        [S$._Location_file]: null
      });
    },
    get C844() {
      return C[844] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "allowImplicitScrolling",
        [S$._Location_column]: 9,
        [S$._Location_line]: 763,
        [S$._Location_file]: null
      });
    },
    get C845() {
      return C[845] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "semanticChildCount",
        [S$._Location_column]: 9,
        [S$._Location_line]: 764,
        [S$._Location_file]: null
      });
    },
    get C840() {
      return C[840] = dart.constList([C[841] || CT.C841, C[842] || CT.C842, C[843] || CT.C843, C[844] || CT.C844, C[845] || CT.C845], T$._LocationL());
    },
    get C839() {
      return C[839] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[840] || CT.C840,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 759,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart"
      });
    },
    get C846() {
      return C[846] = dart.const({
        __proto__: scrollable$.ScrollIncrementType.prototype,
        [S._name$17]: "ScrollIncrementType.line",
        index: 0
      });
    },
    get C847() {
      return C[847] = dart.const({
        __proto__: scrollable$.ScrollIncrementType.prototype,
        [S._name$17]: "ScrollIncrementType.page",
        index: 1
      });
    },
    get C848() {
      return C[848] = dart.constList([C[846] || CT.C846, C[847] || CT.C847], T$.ScrollIncrementTypeL());
    },
    get C849() {
      return C[849] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 4282735204.0
      });
    },
    get C852() {
      return C[852] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "size",
        [S$._Location_column]: 9,
        [S$._Location_line]: 90,
        [S$._Location_file]: null
      });
    },
    get C853() {
      return C[853] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "foregroundPainter",
        [S$._Location_column]: 9,
        [S$._Location_line]: 91,
        [S$._Location_file]: null
      });
    },
    get C851() {
      return C[851] = dart.constList([C[852] || CT.C852, C[853] || CT.C853], T$._LocationL());
    },
    get C850() {
      return C[850] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[851] || CT.C851,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 89,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/placeholder.dart"
      });
    },
    get C856() {
      return C[856] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxWidth",
        [S$._Location_column]: 7,
        [S$._Location_line]: 87,
        [S$._Location_file]: null
      });
    },
    get C857() {
      return C[857] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxHeight",
        [S$._Location_column]: 7,
        [S$._Location_line]: 88,
        [S$._Location_file]: null
      });
    },
    get C858() {
      return C[858] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 89,
        [S$._Location_file]: null
      });
    },
    get C855() {
      return C[855] = dart.constList([C[856] || CT.C856, C[857] || CT.C857, C[858] || CT.C858], T$._LocationL());
    },
    get C854() {
      return C[854] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[855] || CT.C855,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 86,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/placeholder.dart"
      });
    },
    get C859() {
      return C[859] = dart.const({
        __proto__: media_query.Orientation.prototype,
        [S._name$18]: "Orientation.portrait",
        index: 0
      });
    },
    get C860() {
      return C[860] = dart.const({
        __proto__: media_query.Orientation.prototype,
        [S._name$18]: "Orientation.landscape",
        index: 1
      });
    },
    get C861() {
      return C[861] = dart.constList([C[859] || CT.C859, C[860] || CT.C860], T$.OrientationL());
    },
    get C862() {
      return C[862] = dart.const({
        __proto__: ui.Size.prototype,
        [S$.OffsetBase__dy]: 0,
        [S$.OffsetBase__dx]: 0
      });
    },
    get C863() {
      return C[863] = dart.const({
        __proto__: ui.Brightness.prototype,
        [S$._name]: "Brightness.light",
        index: 1
      });
    },
    get C864() {
      return C[864] = dart.const({
        __proto__: media_query.NavigationMode.prototype,
        [S._name$18]: "NavigationMode.traditional",
        index: 0
      });
    },
    get C865() {
      return C[865] = dart.const({
        __proto__: media_query.NavigationMode.prototype,
        [S._name$18]: "NavigationMode.directional",
        index: 1
      });
    },
    get C866() {
      return C[866] = dart.constList([C[864] || CT.C864, C[865] || CT.C865], T$.NavigationModeL());
    },
    get C867() {
      return C[867] = dart.const({
        __proto__: decoration_image.ImageRepeat.prototype,
        [S._name$19]: "ImageRepeat.noRepeat",
        index: 3
      });
    },
    get C868() {
      return C[868] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [S$._name]: "FilterQuality.low",
        index: 1
      });
    },
    get C872() {
      return C[872] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1286,
        [S$._Location_file]: null
      });
    },
    get C871() {
      return C[871] = dart.constList([C[872] || CT.C872], T$._LocationL());
    },
    get C870() {
      return C[870] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[871] || CT.C871,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 1285,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C876() {
      return C[876] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1287,
        [S$._Location_file]: null
      });
    },
    get C875() {
      return C[875] = dart.constList([C[876] || CT.C876], T$._LocationL());
    },
    get C874() {
      return C[874] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[875] || CT.C875,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1286,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C877() {
      return C[877] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 3482124831.0
      });
    },
    get C873() {
      return C[873] = dart.const({
        __proto__: placeholder.Placeholder.prototype,
        [S$._location$1]: C[874] || CT.C874,
        [S$.key]: null,
        [S.fallbackHeight]: 400,
        [S.fallbackWidth]: 400,
        [S.strokeWidth$1]: 2,
        [S.color$4]: C[877] || CT.C877
      });
    },
    get C869() {
      return C[869] = dart.const({
        __proto__: basic.Positioned.prototype,
        [S$._location$1]: C[870] || CT.C870,
        [S$.key]: null,
        [S$.child$4]: C[873] || CT.C873,
        [S.Positioned_height]: null,
        [S.Positioned_width]: null,
        [S.Positioned_bottom]: 0,
        [S.Positioned_right]: 0,
        [S.Positioned_top]: 0,
        [S.Positioned_left]: 0
      });
    },
    get C878() {
      return C[878] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$0.EdgeInsets_bottom]: 4,
        [S$0.EdgeInsets_right]: 4,
        [S$0.EdgeInsets_top]: 4,
        [S$0.EdgeInsets_left]: 4
      });
    },
    get C881() {
      return C[881] = dart.const({
        __proto__: ui.Shadow.prototype,
        [S.Shadow_blurRadius]: 1,
        [S.Shadow_offset]: C[1] || CT.C1,
        [S.Shadow_color]: C[41] || CT.C41
      });
    },
    get C880() {
      return C[880] = dart.constList([C[881] || CT.C881], T$.ShadowL());
    },
    get C879() {
      return C[879] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: C[880] || CT.C880,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: null,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: null,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: null,
        [S$.TextStyle_fontSize]: null,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: null,
        [S$.TextStyle_inherit]: true
      });
    },
    get C884() {
      return C[884] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "data",
        [S$._Location_column]: 23,
        [S$._Location_line]: 1294,
        [S$._Location_file]: null
      });
    },
    get C885() {
      return C[885] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textAlign",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1295,
        [S$._Location_file]: null
      });
    },
    get C886() {
      return C[886] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1296,
        [S$._Location_file]: null
      });
    },
    get C887() {
      return C[887] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "style",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1297,
        [S$._Location_file]: null
      });
    },
    get C883() {
      return C[883] = dart.constList([C[884] || CT.C884, C[885] || CT.C885, C[886] || CT.C886, C[887] || CT.C887], T$._LocationL());
    },
    get C882() {
      return C[882] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[883] || CT.C883,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 1293,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C890() {
      return C[890] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1293,
        [S$._Location_file]: null
      });
    },
    get C889() {
      return C[889] = dart.constList([C[890] || CT.C890], T$._LocationL());
    },
    get C888() {
      return C[888] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[889] || CT.C889,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1292,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C893() {
      return C[893] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "padding",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1291,
        [S$._Location_file]: null
      });
    },
    get C894() {
      return C[894] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1292,
        [S$._Location_file]: null
      });
    },
    get C892() {
      return C[892] = dart.constList([C[893] || CT.C893, C[894] || CT.C894], T$._LocationL());
    },
    get C891() {
      return C[891] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[892] || CT.C892,
        [S$._Location_name]: null,
        [S$._Location_column]: 9,
        [S$._Location_line]: 1290,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C897() {
      return C[897] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1283,
        [S$._Location_file]: null
      });
    },
    get C898() {
      return C[898] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "children",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1284,
        [S$._Location_file]: null
      });
    },
    get C896() {
      return C[896] = dart.constList([C[897] || CT.C897, C[898] || CT.C898], T$._LocationL());
    },
    get C895() {
      return C[895] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[896] || CT.C896,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1282,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C901() {
      return C[901] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "image",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1323,
        [S$._Location_file]: null
      });
    },
    get C902() {
      return C[902] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "debugImageLabel",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1324,
        [S$._Location_file]: null
      });
    },
    get C903() {
      return C[903] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "width",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1325,
        [S$._Location_file]: null
      });
    },
    get C904() {
      return C[904] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "height",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1326,
        [S$._Location_file]: null
      });
    },
    get C905() {
      return C[905] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "scale",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1327,
        [S$._Location_file]: null
      });
    },
    get C906() {
      return C[906] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1328,
        [S$._Location_file]: null
      });
    },
    get C907() {
      return C[907] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "colorBlendMode",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1329,
        [S$._Location_file]: null
      });
    },
    get C908() {
      return C[908] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "fit",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1330,
        [S$._Location_file]: null
      });
    },
    get C909() {
      return C[909] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1331,
        [S$._Location_file]: null
      });
    },
    get C910() {
      return C[910] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "repeat",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1332,
        [S$._Location_file]: null
      });
    },
    get C911() {
      return C[911] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "centerSlice",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1333,
        [S$._Location_file]: null
      });
    },
    get C912() {
      return C[912] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "matchTextDirection",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1334,
        [S$._Location_file]: null
      });
    },
    get C913() {
      return C[913] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "invertColors",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1335,
        [S$._Location_file]: null
      });
    },
    get C914() {
      return C[914] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "isAntiAlias",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1336,
        [S$._Location_file]: null
      });
    },
    get C915() {
      return C[915] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "filterQuality",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1337,
        [S$._Location_file]: null
      });
    },
    get C900() {
      return C[900] = dart.constList([C[901] || CT.C901, C[902] || CT.C902, C[903] || CT.C903, C[904] || CT.C904, C[905] || CT.C905, C[906] || CT.C906, C[907] || CT.C907, C[908] || CT.C908, C[909] || CT.C909, C[910] || CT.C910, C[911] || CT.C911, C[912] || CT.C912, C[913] || CT.C913, C[914] || CT.C914, C[915] || CT.C915], T$._LocationL());
    },
    get C899() {
      return C[899] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[900] || CT.C900,
        [S$._Location_name]: null,
        [S$._Location_column]: 21,
        [S$._Location_line]: 1318,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C918() {
      return C[918] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "container",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1342,
        [S$._Location_file]: null
      });
    },
    get C919() {
      return C[919] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "image",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1343,
        [S$._Location_file]: null
      });
    },
    get C920() {
      return C[920] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "label",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1344,
        [S$._Location_file]: null
      });
    },
    get C921() {
      return C[921] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1345,
        [S$._Location_file]: null
      });
    },
    get C917() {
      return C[917] = dart.constList([C[918] || CT.C918, C[919] || CT.C919, C[920] || CT.C920, C[921] || CT.C921], T$._LocationL());
    },
    get C916() {
      return C[916] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[917] || CT.C917,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1341,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart"
      });
    },
    get C922() {
      return C[922] = dart.const({
        __proto__: proxy_box.DecorationPosition.prototype,
        [S$0._name$9]: "DecorationPosition.foreground",
        index: 1
      });
    },
    get C923() {
      return C[923] = dart.const({
        __proto__: ui.Clip.prototype,
        [S$._name]: "Clip.none",
        index: 0
      });
    },
    get C926() {
      return C[926] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "constraints",
        [S$._Location_column]: 31,
        [S$._Location_line]: 390,
        [S$._Location_file]: null
      });
    },
    get C925() {
      return C[925] = dart.constList([C[926] || CT.C926], T$._LocationL());
    },
    get C924() {
      return C[924] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[925] || CT.C925,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 390,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C929() {
      return C[929] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxWidth",
        [S$._Location_column]: 9,
        [S$._Location_line]: 388,
        [S$._Location_file]: null
      });
    },
    get C930() {
      return C[930] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxHeight",
        [S$._Location_column]: 9,
        [S$._Location_line]: 389,
        [S$._Location_file]: null
      });
    },
    get C931() {
      return C[931] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 390,
        [S$._Location_file]: null
      });
    },
    get C928() {
      return C[928] = dart.constList([C[929] || CT.C929, C[930] || CT.C930, C[931] || CT.C931], T$._LocationL());
    },
    get C927() {
      return C[927] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[928] || CT.C928,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 387,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C934() {
      return C[934] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 23,
        [S$._Location_line]: 395,
        [S$._Location_file]: null
      });
    },
    get C935() {
      return C[935] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 46,
        [S$._Location_line]: 395,
        [S$._Location_file]: null
      });
    },
    get C933() {
      return C[933] = dart.constList([C[934] || CT.C934, C[935] || CT.C935], T$._LocationL());
    },
    get C932() {
      return C[932] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[933] || CT.C933,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 395,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C938() {
      return C[938] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "padding",
        [S$._Location_column]: 25,
        [S$._Location_line]: 399,
        [S$._Location_file]: null
      });
    },
    get C939() {
      return C[939] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 52,
        [S$._Location_line]: 399,
        [S$._Location_file]: null
      });
    },
    get C937() {
      return C[937] = dart.constList([C[938] || CT.C938, C[939] || CT.C939], T$._LocationL());
    },
    get C936() {
      return C[936] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[937] || CT.C937,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 399,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C942() {
      return C[942] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 28,
        [S$._Location_line]: 402,
        [S$._Location_file]: null
      });
    },
    get C943() {
      return C[943] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 43,
        [S$._Location_line]: 402,
        [S$._Location_file]: null
      });
    },
    get C941() {
      return C[941] = dart.constList([C[942] || CT.C942, C[943] || CT.C943], T$._LocationL());
    },
    get C940() {
      return C[940] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[941] || CT.C941,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 402,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C946() {
      return C[946] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipper",
        [S$._Location_column]: 9,
        [S$._Location_line]: 407,
        [S$._Location_file]: null
      });
    },
    get C947() {
      return C[947] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipBehavior",
        [S$._Location_column]: 9,
        [S$._Location_line]: 411,
        [S$._Location_file]: null
      });
    },
    get C948() {
      return C[948] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 412,
        [S$._Location_file]: null
      });
    },
    get C945() {
      return C[945] = dart.constList([C[946] || CT.C946, C[947] || CT.C947, C[948] || CT.C948], T$._LocationL());
    },
    get C944() {
      return C[944] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[945] || CT.C945,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 406,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C951() {
      return C[951] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "decoration",
        [S$._Location_column]: 30,
        [S$._Location_line]: 417,
        [S$._Location_file]: null
      });
    },
    get C952() {
      return C[952] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 55,
        [S$._Location_line]: 417,
        [S$._Location_file]: null
      });
    },
    get C950() {
      return C[950] = dart.constList([C[951] || CT.C951, C[952] || CT.C952], T$._LocationL());
    },
    get C949() {
      return C[949] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[950] || CT.C950,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 417,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C955() {
      return C[955] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "decoration",
        [S$._Location_column]: 9,
        [S$._Location_line]: 421,
        [S$._Location_file]: null
      });
    },
    get C956() {
      return C[956] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "position",
        [S$._Location_column]: 9,
        [S$._Location_line]: 422,
        [S$._Location_file]: null
      });
    },
    get C957() {
      return C[957] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 423,
        [S$._Location_file]: null
      });
    },
    get C954() {
      return C[954] = dart.constList([C[955] || CT.C955, C[956] || CT.C956, C[957] || CT.C957], T$._LocationL());
    },
    get C953() {
      return C[953] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[954] || CT.C954,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 420,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C960() {
      return C[960] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "constraints",
        [S$._Location_column]: 32,
        [S$._Location_line]: 428,
        [S$._Location_file]: null
      });
    },
    get C961() {
      return C[961] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 59,
        [S$._Location_line]: 428,
        [S$._Location_file]: null
      });
    },
    get C959() {
      return C[959] = dart.constList([C[960] || CT.C960, C[961] || CT.C961], T$._LocationL());
    },
    get C958() {
      return C[958] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[959] || CT.C959,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 428,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C964() {
      return C[964] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "padding",
        [S$._Location_column]: 25,
        [S$._Location_line]: 431,
        [S$._Location_file]: null
      });
    },
    get C965() {
      return C[965] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 43,
        [S$._Location_line]: 431,
        [S$._Location_file]: null
      });
    },
    get C963() {
      return C[963] = dart.constList([C[964] || CT.C964, C[965] || CT.C965], T$._LocationL());
    },
    get C962() {
      return C[962] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[963] || CT.C963,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 431,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C968() {
      return C[968] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "transform",
        [S$._Location_column]: 27,
        [S$._Location_line]: 434,
        [S$._Location_file]: null
      });
    },
    get C969() {
      return C[969] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 50,
        [S$._Location_line]: 434,
        [S$._Location_file]: null
      });
    },
    get C970() {
      return C[970] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 66,
        [S$._Location_line]: 434,
        [S$._Location_file]: null
      });
    },
    get C967() {
      return C[967] = dart.constList([C[968] || CT.C968, C[969] || CT.C969, C[970] || CT.C970], T$._LocationL());
    },
    get C966() {
      return C[966] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[967] || CT.C967,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 434,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart"
      });
    },
    get C971() {
      return C[971] = dart.const({
        __proto__: localizations.DefaultWidgetsLocalizations.prototype
      });
    },
    get C972() {
      return C[972] = dart.const({
        __proto__: localizations._WidgetsLocalizationsDelegate.prototype
      });
    },
    get C973() {
      return C[973] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 574,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/localizations.dart"
      });
    },
    get C976() {
      return C[976] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 11,
        [S$._Location_line]: 583,
        [S$._Location_file]: null
      });
    },
    get C977() {
      return C[977] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 584,
        [S$._Location_file]: null
      });
    },
    get C975() {
      return C[975] = dart.constList([C[976] || CT.C976, C[977] || CT.C977], T$._LocationL());
    },
    get C974() {
      return C[974] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[975] || CT.C975,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 582,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/localizations.dart"
      });
    },
    get C980() {
      return C[980] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 9,
        [S$._Location_line]: 578,
        [S$._Location_file]: null
      });
    },
    get C981() {
      return C[981] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "locale",
        [S$._Location_column]: 9,
        [S$._Location_line]: 579,
        [S$._Location_file]: null
      });
    },
    get C982() {
      return C[982] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "localizationsState",
        [S$._Location_column]: 9,
        [S$._Location_line]: 580,
        [S$._Location_file]: null
      });
    },
    get C983() {
      return C[983] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "typeToResources",
        [S$._Location_column]: 9,
        [S$._Location_line]: 581,
        [S$._Location_file]: null
      });
    },
    get C984() {
      return C[984] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 582,
        [S$._Location_file]: null
      });
    },
    get C979() {
      return C[979] = dart.constList([C[980] || CT.C980, C[981] || CT.C981, C[982] || CT.C982, C[983] || CT.C983, C[984] || CT.C984], T$._LocationL());
    },
    get C978() {
      return C[978] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[979] || CT.C979,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 577,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/localizations.dart"
      });
    },
    get C987() {
      return C[987] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 7,
        [S$._Location_line]: 576,
        [S$._Location_file]: null
      });
    },
    get C988() {
      return C[988] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 577,
        [S$._Location_file]: null
      });
    },
    get C986() {
      return C[986] = dart.constList([C[987] || CT.C987, C[988] || CT.C988], T$._LocationL());
    },
    get C985() {
      return C[985] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[986] || CT.C986,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 575,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/localizations.dart"
      });
    },
    get C989() {
      return C[989] = dart.fn(sliver$._kDefaultSemanticIndexCallback, T$.WidgetAndintToint());
    },
    get C992() {
      return C[992] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 31,
        [S$._Location_line]: 464,
        [S$._Location_file]: null
      });
    },
    get C991() {
      return C[991] = dart.constList([C[992] || CT.C992], T$._LocationL());
    },
    get C990() {
      return C[990] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[991] || CT.C991,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 464,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C995() {
      return C[995] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "index",
        [S$._Location_column]: 34,
        [S$._Location_line]: 468,
        [S$._Location_file]: null
      });
    },
    get C996() {
      return C[996] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 78,
        [S$._Location_line]: 468,
        [S$._Location_file]: null
      });
    },
    get C994() {
      return C[994] = dart.constList([C[995] || CT.C995, C[996] || CT.C996], T$._LocationL());
    },
    get C993() {
      return C[993] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[994] || CT.C994,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 468,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C999() {
      return C[999] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 34,
        [S$._Location_line]: 471,
        [S$._Location_file]: null
      });
    },
    get C998() {
      return C[998] = dart.constList([C[999] || CT.C999], T$._LocationL());
    },
    get C997() {
      return C[997] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[998] || CT.C998,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 471,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C1002() {
      return C[1002] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 25,
        [S$._Location_line]: 472,
        [S$._Location_file]: null
      });
    },
    get C1003() {
      return C[1003] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 39,
        [S$._Location_line]: 472,
        [S$._Location_file]: null
      });
    },
    get C1001() {
      return C[1001] = dart.constList([C[1002] || CT.C1002, C[1003] || CT.C1003], T$._LocationL());
    },
    get C1000() {
      return C[1000] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1001] || CT.C1001,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 472,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C1006() {
      return C[1006] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 31,
        [S$._Location_line]: 728,
        [S$._Location_file]: null
      });
    },
    get C1005() {
      return C[1005] = dart.constList([C[1006] || CT.C1006], T$._LocationL());
    },
    get C1004() {
      return C[1004] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1005] || CT.C1005,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 728,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C1009() {
      return C[1009] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "index",
        [S$._Location_column]: 34,
        [S$._Location_line]: 732,
        [S$._Location_file]: null
      });
    },
    get C1010() {
      return C[1010] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 78,
        [S$._Location_line]: 732,
        [S$._Location_file]: null
      });
    },
    get C1008() {
      return C[1008] = dart.constList([C[1009] || CT.C1009, C[1010] || CT.C1010], T$._LocationL());
    },
    get C1007() {
      return C[1007] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1008] || CT.C1008,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 732,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C1013() {
      return C[1013] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 34,
        [S$._Location_line]: 735,
        [S$._Location_file]: null
      });
    },
    get C1012() {
      return C[1012] = dart.constList([C[1013] || CT.C1013], T$._LocationL());
    },
    get C1011() {
      return C[1011] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1012] || CT.C1012,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 735,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C1016() {
      return C[1016] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 25,
        [S$._Location_line]: 736,
        [S$._Location_file]: null
      });
    },
    get C1017() {
      return C[1017] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 39,
        [S$._Location_line]: 736,
        [S$._Location_file]: null
      });
    },
    get C1015() {
      return C[1015] = dart.constList([C[1016] || CT.C1016, C[1017] || CT.C1017], T$._LocationL());
    },
    get C1014() {
      return C[1014] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1015] || CT.C1015,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 736,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart"
      });
    },
    get C1020() {
      return C[1020] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onNotification",
        [S$._Location_column]: 7,
        [S$._Location_line]: 62,
        [S$._Location_file]: null
      });
    },
    get C1021() {
      return C[1021] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 63,
        [S$._Location_file]: null
      });
    },
    get C1019() {
      return C[1019] = dart.constList([C[1020] || CT.C1020, C[1021] || CT.C1021], T$._LocationL());
    },
    get C1018() {
      return C[1018] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1019] || CT.C1019,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 61,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/automatic_keep_alive.dart"
      });
    },
    get C1024() {
      return C[1024] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "keepAlive",
        [S$._Location_column]: 7,
        [S$._Location_line]: 233,
        [S$._Location_file]: null
      });
    },
    get C1025() {
      return C[1025] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 234,
        [S$._Location_file]: null
      });
    },
    get C1023() {
      return C[1023] = dart.constList([C[1024] || CT.C1024, C[1025] || CT.C1025], T$._LocationL());
    },
    get C1022() {
      return C[1022] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1023] || CT.C1023,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 232,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/automatic_keep_alive.dart"
      });
    },
    get C1027() {
      return C[1027] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 397,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/automatic_keep_alive.dart"
      });
    },
    get C1026() {
      return C[1026] = dart.const({
        __proto__: automatic_keep_alive._NullWidget.prototype,
        [S$._location$1]: C[1027] || CT.C1027,
        [S$.key]: null
      });
    },
    get C1028() {
      return C[1028] = dart.const({
        __proto__: autofill$.AutofillContextAction.prototype,
        [S._name$20]: "AutofillContextAction.commit",
        index: 0
      });
    },
    get C1029() {
      return C[1029] = dart.const({
        __proto__: autofill$.AutofillContextAction.prototype,
        [S._name$20]: "AutofillContextAction.cancel",
        index: 1
      });
    },
    get C1030() {
      return C[1030] = dart.constList([C[1028] || CT.C1028, C[1029] || CT.C1029], T$.AutofillContextActionL());
    },
    get C1033() {
      return C[1033] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "autofillScopeState",
        [S$._Location_column]: 7,
        [S$._Location_line]: 268,
        [S$._Location_file]: null
      });
    },
    get C1032() {
      return C[1032] = dart.constList([C[1033] || CT.C1033, C[660] || CT.C660], T$._LocationL());
    },
    get C1031() {
      return C[1031] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1032] || CT.C1032,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 267,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/autofill.dart"
      });
    },
    get C1034() {
      return C[1034] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [S$._name]: "TextAlign.start",
        index: 4
      });
    },
    get C1035() {
      return C[1035] = dart.const({
        __proto__: text_input.TextCapitalization.prototype,
        [S._name$21]: "TextCapitalization.none",
        index: 3
      });
    },
    get C1036() {
      return C[1036] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [S$._name]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C1037() {
      return C[1037] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [S$._name]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C1038() {
      return C[1038] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$0.EdgeInsets_bottom]: 20,
        [S$0.EdgeInsets_right]: 20,
        [S$0.EdgeInsets_top]: 20,
        [S$0.EdgeInsets_left]: 20
      });
    },
    get C1039() {
      return C[1039] = dart.const({
        __proto__: editable_text.ToolbarOptions.prototype,
        [S.selectAll]: true,
        [S.paste]: true,
        [S.cut]: true,
        [S.copy]: true
      });
    },
    get C1040() {
      return C[1040] = dart.const({
        __proto__: T$.EmptyIterableOfTextInputFormatterL().prototype
      });
    },
    get C1042() {
      return C[1042] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 8
      });
    },
    get C1043() {
      return C[1043] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: false,
        [S.TextInputType_signed]: false,
        [S.TextInputType_index]: 2
      });
    },
    get C1044() {
      return C[1044] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 5
      });
    },
    get C1045() {
      return C[1045] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 0
      });
    },
    get C1046() {
      return C[1046] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 6
      });
    },
    get C1041() {
      return C[1041] = dart.constMap(T$.StringL(), T$.TextInputTypeL(), ["addressCity", C[1042] || CT.C1042, "addressCityAndState", C[1042] || CT.C1042, "addressState", C[1042] || CT.C1042, "countryName", C[1042] || CT.C1042, "creditCardNumber", C[1043] || CT.C1043, "email", C[1044] || CT.C1044, "familyName", C[1042] || CT.C1042, "fullStreetAddress", C[1042] || CT.C1042, "givenName", C[1042] || CT.C1042, "jobTitle", C[1042] || CT.C1042, "location", C[1042] || CT.C1042, "middleName", C[1042] || CT.C1042, "name", C[1042] || CT.C1042, "namePrefix", C[1042] || CT.C1042, "nameSuffix", C[1042] || CT.C1042, "newPassword", C[1045] || CT.C1045, "newUsername", C[1045] || CT.C1045, "nickname", C[1042] || CT.C1042, "oneTimeCode", C[1043] || CT.C1043, "organizationName", C[1045] || CT.C1045, "password", C[1045] || CT.C1045, "postalCode", C[1042] || CT.C1042, "streetAddressLine1", C[1042] || CT.C1042, "streetAddressLine2", C[1042] || CT.C1042, "sublocality", C[1042] || CT.C1042, "telephoneNumber", C[1042] || CT.C1042, "url", C[1046] || CT.C1046, "username", C[1045] || CT.C1045]);
    },
    get C1048() {
      return C[1048] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 9
      });
    },
    get C1049() {
      return C[1049] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 4
      });
    },
    get C1050() {
      return C[1050] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: null,
        [S.TextInputType_signed]: null,
        [S.TextInputType_index]: 3
      });
    },
    get C1051() {
      return C[1051] = dart.const({
        __proto__: text_input.TextInputType.prototype,
        [S.TextInputType_decimal]: true,
        [S.TextInputType_signed]: false,
        [S.TextInputType_index]: 2
      });
    },
    get C1047() {
      return C[1047] = dart.constMap(T$.StringL(), T$.TextInputTypeL(), ["addressCity", C[1048] || CT.C1048, "addressCityAndState", C[1048] || CT.C1048, "addressState", C[1048] || CT.C1048, "birthday", C[1049] || CT.C1049, "birthdayDay", C[1049] || CT.C1049, "birthdayMonth", C[1049] || CT.C1049, "birthdayYear", C[1049] || CT.C1049, "countryCode", C[1043] || CT.C1043, "countryName", C[1045] || CT.C1045, "creditCardExpirationDate", C[1049] || CT.C1049, "creditCardExpirationDay", C[1049] || CT.C1049, "creditCardExpirationMonth", C[1049] || CT.C1049, "creditCardExpirationYear", C[1049] || CT.C1049, "creditCardFamilyName", C[1042] || CT.C1042, "creditCardGivenName", C[1042] || CT.C1042, "creditCardMiddleName", C[1042] || CT.C1042, "creditCardName", C[1042] || CT.C1042, "creditCardNumber", C[1043] || CT.C1043, "creditCardSecurityCode", C[1043] || CT.C1043, "creditCardType", C[1045] || CT.C1045, "email", C[1044] || CT.C1044, "familyName", C[1042] || CT.C1042, "fullStreetAddress", C[1048] || CT.C1048, "gender", C[1045] || CT.C1045, "givenName", C[1042] || CT.C1042, "impp", C[1046] || CT.C1046, "jobTitle", C[1045] || CT.C1045, "language", C[1045] || CT.C1045, "location", C[1048] || CT.C1048, "middleInitial", C[1042] || CT.C1042, "middleName", C[1042] || CT.C1042, "name", C[1042] || CT.C1042, "namePrefix", C[1042] || CT.C1042, "nameSuffix", C[1042] || CT.C1042, "newPassword", C[1045] || CT.C1045, "newUsername", C[1045] || CT.C1045, "nickname", C[1045] || CT.C1045, "oneTimeCode", C[1045] || CT.C1045, "organizationName", C[1045] || CT.C1045, "password", C[1045] || CT.C1045, "photo", C[1045] || CT.C1045, "postalAddress", C[1048] || CT.C1048, "postalAddressExtended", C[1048] || CT.C1048, "postalAddressExtendedPostalCode", C[1043] || CT.C1043, "postalCode", C[1043] || CT.C1043, "streetAddressLevel1", C[1048] || CT.C1048, "streetAddressLevel2", C[1048] || CT.C1048, "streetAddressLevel3", C[1048] || CT.C1048, "streetAddressLevel4", C[1048] || CT.C1048, "streetAddressLine1", C[1048] || CT.C1048, "streetAddressLine2", C[1048] || CT.C1048, "streetAddressLine3", C[1048] || CT.C1048, "sublocality", C[1048] || CT.C1048, "telephoneNumber", C[1050] || CT.C1050, "telephoneNumberAreaCode", C[1050] || CT.C1050, "telephoneNumberCountryCode", C[1050] || CT.C1050, "telephoneNumberDevice", C[1050] || CT.C1050, "telephoneNumberExtension", C[1050] || CT.C1050, "telephoneNumberLocal", C[1050] || CT.C1050, "telephoneNumberLocalPrefix", C[1050] || CT.C1050, "telephoneNumberLocalSuffix", C[1050] || CT.C1050, "telephoneNumberNational", C[1050] || CT.C1050, "transactionAmount", C[1051] || CT.C1051, "transactionCurrency", C[1045] || CT.C1045, "url", C[1046] || CT.C1046, "username", C[1045] || CT.C1045]);
    },
    get C1052() {
      return C[1052] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.newline",
        index: 12
      });
    },
    get C1053() {
      return C[1053] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.done",
        index: 2
      });
    },
    get C1054() {
      return C[1054] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.go",
        index: 3
      });
    },
    get C1055() {
      return C[1055] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.next",
        index: 6
      });
    },
    get C1056() {
      return C[1056] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.previous",
        index: 7
      });
    },
    get C1057() {
      return C[1057] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.search",
        index: 4
      });
    },
    get C1058() {
      return C[1058] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.send",
        index: 5
      });
    },
    get C1059() {
      return C[1059] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.continueAction",
        index: 8
      });
    },
    get C1060() {
      return C[1060] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.emergencyCall",
        index: 11
      });
    },
    get C1061() {
      return C[1061] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.join",
        index: 9
      });
    },
    get C1062() {
      return C[1062] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.none",
        index: 0
      });
    },
    get C1063() {
      return C[1063] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.route",
        index: 10
      });
    },
    get C1064() {
      return C[1064] = dart.const({
        __proto__: text_input.TextInputAction.prototype,
        [S._name$21]: "TextInputAction.unspecified",
        index: 1
      });
    },
    get C1065() {
      return C[1065] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [S._name$21]: "FloatingCursorDragState.Start",
        index: 0
      });
    },
    get C1066() {
      return C[1066] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [S._name$21]: "FloatingCursorDragState.Update",
        index: 1
      });
    },
    get C1067() {
      return C[1067] = dart.const({
        __proto__: text_input.FloatingCursorDragState.prototype,
        [S._name$21]: "FloatingCursorDragState.End",
        index: 2
      });
    },
    get C1068() {
      return C[1068] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$.OffsetBase__dy]: 0,
        [S$.OffsetBase__dx]: 1
      });
    },
    get C1069() {
      return C[1069] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$.OffsetBase__dy]: 1,
        [S$.OffsetBase__dx]: 0
      });
    },
    get C1072() {
      return C[1072] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2646,
        [S$._Location_file]: null
      });
    },
    get C1073() {
      return C[1073] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "startHandleLayerLink",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2647,
        [S$._Location_file]: null
      });
    },
    get C1074() {
      return C[1074] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "endHandleLayerLink",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2648,
        [S$._Location_file]: null
      });
    },
    get C1075() {
      return C[1075] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textSpan",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2649,
        [S$._Location_file]: null
      });
    },
    get C1076() {
      return C[1076] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "value",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2650,
        [S$._Location_file]: null
      });
    },
    get C1077() {
      return C[1077] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursorColor",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2651,
        [S$._Location_file]: null
      });
    },
    get C1078() {
      return C[1078] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "backgroundCursorColor",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2652,
        [S$._Location_file]: null
      });
    },
    get C1079() {
      return C[1079] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "showCursor",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2653,
        [S$._Location_file]: null
      });
    },
    get C1080() {
      return C[1080] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "forceLine",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2656,
        [S$._Location_file]: null
      });
    },
    get C1081() {
      return C[1081] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "readOnly",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2657,
        [S$._Location_file]: null
      });
    },
    get C1082() {
      return C[1082] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "hasFocus",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2658,
        [S$._Location_file]: null
      });
    },
    get C1083() {
      return C[1083] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "maxLines",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2659,
        [S$._Location_file]: null
      });
    },
    get C1084() {
      return C[1084] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "minLines",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2660,
        [S$._Location_file]: null
      });
    },
    get C1085() {
      return C[1085] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "expands",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2661,
        [S$._Location_file]: null
      });
    },
    get C1086() {
      return C[1086] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "strutStyle",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2662,
        [S$._Location_file]: null
      });
    },
    get C1087() {
      return C[1087] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selectionColor",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2663,
        [S$._Location_file]: null
      });
    },
    get C1088() {
      return C[1088] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textScaleFactor",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2664,
        [S$._Location_file]: null
      });
    },
    get C1089() {
      return C[1089] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textAlign",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2665,
        [S$._Location_file]: null
      });
    },
    get C1090() {
      return C[1090] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2666,
        [S$._Location_file]: null
      });
    },
    get C1091() {
      return C[1091] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "locale",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2667,
        [S$._Location_file]: null
      });
    },
    get C1092() {
      return C[1092] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textHeightBehavior",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2668,
        [S$._Location_file]: null
      });
    },
    get C1093() {
      return C[1093] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textWidthBasis",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2669,
        [S$._Location_file]: null
      });
    },
    get C1094() {
      return C[1094] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "obscuringCharacter",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2670,
        [S$._Location_file]: null
      });
    },
    get C1095() {
      return C[1095] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "obscureText",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2671,
        [S$._Location_file]: null
      });
    },
    get C1096() {
      return C[1096] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "autocorrect",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2672,
        [S$._Location_file]: null
      });
    },
    get C1097() {
      return C[1097] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "smartDashesType",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2673,
        [S$._Location_file]: null
      });
    },
    get C1098() {
      return C[1098] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "smartQuotesType",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2674,
        [S$._Location_file]: null
      });
    },
    get C1099() {
      return C[1099] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enableSuggestions",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2675,
        [S$._Location_file]: null
      });
    },
    get C1100() {
      return C[1100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "offset",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2676,
        [S$._Location_file]: null
      });
    },
    get C1101() {
      return C[1101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onCaretChanged",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2677,
        [S$._Location_file]: null
      });
    },
    get C1102() {
      return C[1102] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "rendererIgnoresPointer",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2678,
        [S$._Location_file]: null
      });
    },
    get C1103() {
      return C[1103] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursorWidth",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2679,
        [S$._Location_file]: null
      });
    },
    get C1104() {
      return C[1104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursorHeight",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2680,
        [S$._Location_file]: null
      });
    },
    get C1105() {
      return C[1105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursorRadius",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2681,
        [S$._Location_file]: null
      });
    },
    get C1106() {
      return C[1106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursorOffset",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2682,
        [S$._Location_file]: null
      });
    },
    get C1107() {
      return C[1107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selectionHeightStyle",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2683,
        [S$._Location_file]: null
      });
    },
    get C1108() {
      return C[1108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selectionWidthStyle",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2684,
        [S$._Location_file]: null
      });
    },
    get C1109() {
      return C[1109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "paintCursorAboveText",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2685,
        [S$._Location_file]: null
      });
    },
    get C1110() {
      return C[1110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "enableInteractiveSelection",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2686,
        [S$._Location_file]: null
      });
    },
    get C1111() {
      return C[1111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textSelectionDelegate",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2687,
        [S$._Location_file]: null
      });
    },
    get C1112() {
      return C[1112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "devicePixelRatio",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2688,
        [S$._Location_file]: null
      });
    },
    get C1113() {
      return C[1113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "promptRectRange",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2689,
        [S$._Location_file]: null
      });
    },
    get C1114() {
      return C[1114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "promptRectColor",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2690,
        [S$._Location_file]: null
      });
    },
    get C1115() {
      return C[1115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipBehavior",
        [S$._Location_column]: 17,
        [S$._Location_line]: 2691,
        [S$._Location_file]: null
      });
    },
    get C1071() {
      return C[1071] = dart.constList([C[1072] || CT.C1072, C[1073] || CT.C1073, C[1074] || CT.C1074, C[1075] || CT.C1075, C[1076] || CT.C1076, C[1077] || CT.C1077, C[1078] || CT.C1078, C[1079] || CT.C1079, C[1080] || CT.C1080, C[1081] || CT.C1081, C[1082] || CT.C1082, C[1083] || CT.C1083, C[1084] || CT.C1084, C[1085] || CT.C1085, C[1086] || CT.C1086, C[1087] || CT.C1087, C[1088] || CT.C1088, C[1089] || CT.C1089, C[1090] || CT.C1090, C[1091] || CT.C1091, C[1092] || CT.C1092, C[1093] || CT.C1093, C[1094] || CT.C1094, C[1095] || CT.C1095, C[1096] || CT.C1096, C[1097] || CT.C1097, C[1098] || CT.C1098, C[1099] || CT.C1099, C[1100] || CT.C1100, C[1101] || CT.C1101, C[1102] || CT.C1102, C[1103] || CT.C1103, C[1104] || CT.C1104, C[1105] || CT.C1105, C[1106] || CT.C1106, C[1107] || CT.C1107, C[1108] || CT.C1108, C[1109] || CT.C1109, C[1110] || CT.C1110, C[1111] || CT.C1111, C[1112] || CT.C1112, C[1113] || CT.C1113, C[1114] || CT.C1114, C[1115] || CT.C1115], T$._LocationL());
    },
    get C1070() {
      return C[1070] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1071] || CT.C1071,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 2645,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/editable_text.dart"
      });
    },
    get C1118() {
      return C[1118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onCopy",
        [S$._Location_column]: 15,
        [S$._Location_line]: 2642,
        [S$._Location_file]: null
      });
    },
    get C1119() {
      return C[1119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onCut",
        [S$._Location_column]: 15,
        [S$._Location_line]: 2643,
        [S$._Location_file]: null
      });
    },
    get C1120() {
      return C[1120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onPaste",
        [S$._Location_column]: 15,
        [S$._Location_line]: 2644,
        [S$._Location_file]: null
      });
    },
    get C1121() {
      return C[1121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 2645,
        [S$._Location_file]: null
      });
    },
    get C1117() {
      return C[1117] = dart.constList([C[1118] || CT.C1118, C[1119] || CT.C1119, C[1120] || CT.C1120, C[1121] || CT.C1121], T$._LocationL());
    },
    get C1116() {
      return C[1116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1117] || CT.C1117,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 2641,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/editable_text.dart"
      });
    },
    get C1124() {
      return C[1124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "link",
        [S$._Location_column]: 13,
        [S$._Location_line]: 2640,
        [S$._Location_file]: null
      });
    },
    get C1125() {
      return C[1125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 2641,
        [S$._Location_file]: null
      });
    },
    get C1123() {
      return C[1123] = dart.constList([C[1124] || CT.C1124, C[1125] || CT.C1125], T$._LocationL());
    },
    get C1122() {
      return C[1122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1123] || CT.C1123,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 2639,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/editable_text.dart"
      });
    },
    get C1128() {
      return C[1128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "excludeFromSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2629,
        [S$._Location_file]: null
      });
    },
    get C1129() {
      return C[1129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "axisDirection",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2630,
        [S$._Location_file]: null
      });
    },
    get C1130() {
      return C[1130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "controller",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2631,
        [S$._Location_file]: null
      });
    },
    get C1131() {
      return C[1131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "physics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2632,
        [S$._Location_file]: null
      });
    },
    get C1132() {
      return C[1132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dragStartBehavior",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2633,
        [S$._Location_file]: null
      });
    },
    get C1133() {
      return C[1133] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "restorationId",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2634,
        [S$._Location_file]: null
      });
    },
    get C1134() {
      return C[1134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "scrollBehavior",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2635,
        [S$._Location_file]: null
      });
    },
    get C1135() {
      return C[1135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "viewportBuilder",
        [S$._Location_column]: 9,
        [S$._Location_line]: 2638,
        [S$._Location_file]: null
      });
    },
    get C1127() {
      return C[1127] = dart.constList([C[1128] || CT.C1128, C[1129] || CT.C1129, C[1130] || CT.C1130, C[1131] || CT.C1131, C[1132] || CT.C1132, C[1133] || CT.C1133, C[1134] || CT.C1134, C[1135] || CT.C1135], T$._LocationL());
    },
    get C1126() {
      return C[1126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1127] || CT.C1127,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 2628,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/editable_text.dart"
      });
    },
    get C1138() {
      return C[1138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursor",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2627,
        [S$._Location_file]: null
      });
    },
    get C1139() {
      return C[1139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2628,
        [S$._Location_file]: null
      });
    },
    get C1137() {
      return C[1137] = dart.constList([C[1138] || CT.C1138, C[1139] || CT.C1139], T$._LocationL());
    },
    get C1136() {
      return C[1136] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1137] || CT.C1137,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 2626,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/editable_text.dart"
      });
    },
    get C1140() {
      return C[1140] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 250000
      });
    },
    get C1141() {
      return C[1141] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 125000
      });
    },
    get C1142() {
      return C[1142] = dart.const({
        __proto__: curves.Cubic.prototype,
        [S$0.Cubic_d]: 1,
        [S$0.Cubic_c]: 0.2,
        [S$0.Cubic_b]: 0,
        [S$0.Cubic_a]: 0.4
      });
    },
    get C1143() {
      return C[1143] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 500000
      });
    },
    get C1144() {
      return C[1144] = dart.const({
        __proto__: focus_traversal.TraversalDirection.prototype,
        [S$1._name$22]: "TraversalDirection.up",
        index: 0
      });
    },
    get C1145() {
      return C[1145] = dart.const({
        __proto__: focus_traversal.TraversalDirection.prototype,
        [S$1._name$22]: "TraversalDirection.right",
        index: 1
      });
    },
    get C1146() {
      return C[1146] = dart.const({
        __proto__: focus_traversal.TraversalDirection.prototype,
        [S$1._name$22]: "TraversalDirection.down",
        index: 2
      });
    },
    get C1147() {
      return C[1147] = dart.const({
        __proto__: focus_traversal.TraversalDirection.prototype,
        [S$1._name$22]: "TraversalDirection.left",
        index: 3
      });
    },
    get C1148() {
      return C[1148] = dart.constList([C[1144] || CT.C1144, C[1145] || CT.C1145, C[1146] || CT.C1146, C[1147] || CT.C1147], T$0.TraversalDirectionL());
    },
    get C1151() {
      return C[1151] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "focusNode",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1794,
        [S$._Location_file]: null
      });
    },
    get C1152() {
      return C[1152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "canRequestFocus",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1795,
        [S$._Location_file]: null
      });
    },
    get C1153() {
      return C[1153] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "skipTraversal",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1796,
        [S$._Location_file]: null
      });
    },
    get C1154() {
      return C[1154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "includeSemantics",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1797,
        [S$._Location_file]: null
      });
    },
    get C1155() {
      return C[1155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "descendantsAreFocusable",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1798,
        [S$._Location_file]: null
      });
    },
    get C1156() {
      return C[1156] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1799,
        [S$._Location_file]: null
      });
    },
    get C1150() {
      return C[1150] = dart.constList([C[1151] || CT.C1151, C[1152] || CT.C1152, C[1153] || CT.C1153, C[1154] || CT.C1154, C[1155] || CT.C1155, C[1156] || CT.C1156], T$._LocationL());
    },
    get C1149() {
      return C[1149] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1150] || CT.C1150,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 1793,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_traversal.dart"
      });
    },
    get C1159() {
      return C[1159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "policy",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1791,
        [S$._Location_file]: null
      });
    },
    get C1160() {
      return C[1160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "focusNode",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1792,
        [S$._Location_file]: null
      });
    },
    get C1161() {
      return C[1161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1793,
        [S$._Location_file]: null
      });
    },
    get C1158() {
      return C[1158] = dart.constList([C[1159] || CT.C1159, C[1160] || CT.C1160, C[1161] || CT.C1161], T$._LocationL());
    },
    get C1157() {
      return C[1157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1158] || CT.C1158,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1790,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_traversal.dart"
      });
    },
    get C1164() {
      return C[1164] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "focusable",
        [S$._Location_column]: 9,
        [S$._Location_line]: 697,
        [S$._Location_file]: null
      });
    },
    get C1165() {
      return C[1165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "focused",
        [S$._Location_column]: 9,
        [S$._Location_line]: 698,
        [S$._Location_file]: null
      });
    },
    get C1166() {
      return C[1166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 699,
        [S$._Location_file]: null
      });
    },
    get C1163() {
      return C[1163] = dart.constList([C[1164] || CT.C1164, C[1165] || CT.C1165, C[1166] || CT.C1166], T$._LocationL());
    },
    get C1162() {
      return C[1162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1163] || CT.C1163,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 696,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_scope.dart"
      });
    },
    get C1169() {
      return C[1169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "node",
        [S$._Location_column]: 7,
        [S$._Location_line]: 703,
        [S$._Location_file]: null
      });
    },
    get C1170() {
      return C[1170] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 704,
        [S$._Location_file]: null
      });
    },
    get C1168() {
      return C[1168] = dart.constList([C[1169] || CT.C1169, C[1170] || CT.C1170], T$._LocationL());
    },
    get C1167() {
      return C[1167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1168] || CT.C1168,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 702,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_scope.dart"
      });
    },
    get C1173() {
      return C[1173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "node",
        [S$._Location_column]: 9,
        [S$._Location_line]: 966,
        [S$._Location_file]: null
      });
    },
    get C1174() {
      return C[1174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 967,
        [S$._Location_file]: null
      });
    },
    get C1172() {
      return C[1172] = dart.constList([C[1173] || CT.C1173, C[1174] || CT.C1174], T$._LocationL());
    },
    get C1171() {
      return C[1171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1172] || CT.C1172,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 965,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_scope.dart"
      });
    },
    get C1177() {
      return C[1177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "explicitChildNodes",
        [S$._Location_column]: 7,
        [S$._Location_line]: 964,
        [S$._Location_file]: null
      });
    },
    get C1178() {
      return C[1178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 965,
        [S$._Location_file]: null
      });
    },
    get C1176() {
      return C[1176] = dart.constList([C[1177] || CT.C1177, C[1178] || CT.C1178], T$._LocationL());
    },
    get C1175() {
      return C[1175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1176] || CT.C1176,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 963,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_scope.dart"
      });
    },
    get C1179() {
      return C[1179] = dart.constList([], T$0.FocusNodeL());
    },
    get C1180() {
      return C[1180] = dart.const({
        __proto__: focus_manager.UnfocusDisposition.prototype,
        [S$1._name$23]: "UnfocusDisposition.scope",
        index: 0
      });
    },
    get C1181() {
      return C[1181] = dart.const({
        __proto__: focus_manager.UnfocusDisposition.prototype,
        [S$1._name$23]: "UnfocusDisposition.previouslyFocusedChild",
        index: 1
      });
    },
    get C1184() {
      return C[1184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "canRequestFocus",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1038,
        [S$._Location_file]: null
      });
    },
    get C1185() {
      return C[1185] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "skipTraversal",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1039,
        [S$._Location_file]: null
      });
    },
    get C1186() {
      return C[1186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "includeSemantics",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1040,
        [S$._Location_file]: null
      });
    },
    get C1187() {
      return C[1187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "descendantsAreFocusable",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1041,
        [S$._Location_file]: null
      });
    },
    get C1188() {
      return C[1188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1042,
        [S$._Location_file]: null
      });
    },
    get C1183() {
      return C[1183] = dart.constList([C[1184] || CT.C1184, C[1185] || CT.C1185, C[1186] || CT.C1186, C[1187] || CT.C1187, C[1188] || CT.C1188], T$._LocationL());
    },
    get C1182() {
      return C[1182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1183] || CT.C1183,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1037,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_scope.dart"
      });
    },
    get C1189() {
      return C[1189] = dart.const({
        __proto__: focus_manager.KeyEventResult.prototype,
        [S$1._name$23]: "KeyEventResult.handled",
        index: 0
      });
    },
    get C1190() {
      return C[1190] = dart.const({
        __proto__: focus_manager.KeyEventResult.prototype,
        [S$1._name$23]: "KeyEventResult.ignored",
        index: 1
      });
    },
    get C1191() {
      return C[1191] = dart.const({
        __proto__: focus_manager.KeyEventResult.prototype,
        [S$1._name$23]: "KeyEventResult.skipRemainingHandlers",
        index: 2
      });
    },
    get C1192() {
      return C[1192] = dart.constList([C[1189] || CT.C1189, C[1190] || CT.C1190, C[1191] || CT.C1191], T$0.KeyEventResultL());
    },
    get C1193() {
      return C[1193] = dart.constList([C[1180] || CT.C1180, C[1181] || CT.C1181], T$0.UnfocusDispositionL());
    },
    get C1194() {
      return C[1194] = dart.const({
        __proto__: focus_manager.FocusHighlightMode.prototype,
        [S$1._name$23]: "FocusHighlightMode.touch",
        index: 0
      });
    },
    get C1195() {
      return C[1195] = dart.const({
        __proto__: focus_manager.FocusHighlightMode.prototype,
        [S$1._name$23]: "FocusHighlightMode.traditional",
        index: 1
      });
    },
    get C1196() {
      return C[1196] = dart.constList([C[1194] || CT.C1194, C[1195] || CT.C1195], T$0.FocusHighlightModeL());
    },
    get C1197() {
      return C[1197] = dart.const({
        __proto__: focus_manager.FocusHighlightStrategy.prototype,
        [S$1._name$23]: "FocusHighlightStrategy.automatic",
        index: 0
      });
    },
    get C1198() {
      return C[1198] = dart.const({
        __proto__: focus_manager.FocusHighlightStrategy.prototype,
        [S$1._name$23]: "FocusHighlightStrategy.alwaysTouch",
        index: 1
      });
    },
    get C1199() {
      return C[1199] = dart.const({
        __proto__: focus_manager.FocusHighlightStrategy.prototype,
        [S$1._name$23]: "FocusHighlightStrategy.alwaysTraditional",
        index: 2
      });
    },
    get C1200() {
      return C[1200] = dart.constList([C[1197] || CT.C1197, C[1198] || CT.C1198, C[1199] || CT.C1199], T$0.FocusHighlightStrategyL());
    },
    get C1201() {
      return C[1201] = dart.const({
        __proto__: framework._StateLifecycle.prototype,
        [S$1._name$24]: "_StateLifecycle.created",
        index: 0
      });
    },
    get C1202() {
      return C[1202] = dart.const({
        __proto__: framework._StateLifecycle.prototype,
        [S$1._name$24]: "_StateLifecycle.initialized",
        index: 1
      });
    },
    get C1203() {
      return C[1203] = dart.const({
        __proto__: framework._StateLifecycle.prototype,
        [S$1._name$24]: "_StateLifecycle.ready",
        index: 2
      });
    },
    get C1204() {
      return C[1204] = dart.const({
        __proto__: framework._StateLifecycle.prototype,
        [S$1._name$24]: "_StateLifecycle.defunct",
        index: 3
      });
    },
    get C1205() {
      return C[1205] = dart.constList([C[1201] || CT.C1201, C[1202] || CT.C1202, C[1203] || CT.C1203, C[1204] || CT.C1204], T$0._StateLifecycleL());
    },
    get C1206() {
      return C[1206] = dart.const({
        __proto__: framework._ElementLifecycle.prototype,
        [S$1._name$24]: "_ElementLifecycle.initial",
        index: 0
      });
    },
    get C1207() {
      return C[1207] = dart.const({
        __proto__: framework._ElementLifecycle.prototype,
        [S$1._name$24]: "_ElementLifecycle.active",
        index: 1
      });
    },
    get C1208() {
      return C[1208] = dart.const({
        __proto__: framework._ElementLifecycle.prototype,
        [S$1._name$24]: "_ElementLifecycle.inactive",
        index: 2
      });
    },
    get C1209() {
      return C[1209] = dart.const({
        __proto__: framework._ElementLifecycle.prototype,
        [S$1._name$24]: "_ElementLifecycle.defunct",
        index: 3
      });
    },
    get C1210() {
      return C[1210] = dart.constList([C[1206] || CT.C1206, C[1207] || CT.C1207, C[1208] || CT.C1208, C[1209] || CT.C1209], T$0._ElementLifecycleL());
    },
    get C1211() {
      return C[1211] = dart.fn(framework.Element._sort, T$0.ElementAndElementToint());
    },
    get C1212() {
      return C[1212] = dart.fn(framework._InactiveElements._deactivateRecursively, T$.ElementTovoid());
    },
    get C1215() {
      return C[1215] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "message",
        [S$._Location_column]: 36,
        [S$._Location_line]: 4429,
        [S$._Location_file]: null
      });
    },
    get C1216() {
      return C[1216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "error",
        [S$._Location_column]: 54,
        [S$._Location_line]: 4429,
        [S$._Location_file]: null
      });
    },
    get C1214() {
      return C[1214] = dart.constList([C[1215] || CT.C1215, C[1216] || CT.C1216], T$._LocationL());
    },
    get C1213() {
      return C[1213] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1214] || CT.C1214,
        [S$._Location_name]: null,
        [S$._Location_column]: 24,
        [S$._Location_line]: 4429,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/framework.dart"
      });
    },
    get C1217() {
      return C[1217] = dart.fn(framework.ErrorWidget._defaultErrorWidgetBuilder, T$0.FlutterErrorDetailsToWidget());
    },
    get C1218() {
      return C[1218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[6] || CT.C6,
        [S$._Location_name]: null,
        [S$._Location_column]: 26,
        [S$._Location_line]: 6319,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/framework.dart"
      });
    },
    get C1219() {
      return C[1219] = dart.const({
        __proto__: banner.BannerLocation.prototype,
        [S$1._name$25]: "BannerLocation.topStart",
        index: 0
      });
    },
    get C1220() {
      return C[1220] = dart.const({
        __proto__: banner.BannerLocation.prototype,
        [S$1._name$25]: "BannerLocation.topEnd",
        index: 1
      });
    },
    get C1221() {
      return C[1221] = dart.const({
        __proto__: banner.BannerLocation.prototype,
        [S$1._name$25]: "BannerLocation.bottomStart",
        index: 2
      });
    },
    get C1222() {
      return C[1222] = dart.const({
        __proto__: banner.BannerLocation.prototype,
        [S$1._name$25]: "BannerLocation.bottomEnd",
        index: 3
      });
    },
    get C1223() {
      return C[1223] = dart.constList([C[1219] || CT.C1219, C[1220] || CT.C1220, C[1221] || CT.C1221, C[1222] || CT.C1222], T$0.BannerLocationL());
    },
    get C1224() {
      return C[1224] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2696354844.0
      });
    },
    get C1226() {
      return C[1226] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [S$0.FontWeight_index]: 8
      });
    },
    get C1225() {
      return C[1225] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [S$.TextStyle_fontFeatures]: null,
        [S$.TextStyle_shadows]: null,
        [S$.TextStyle_debugLabel]: null,
        [S$.TextStyle_decorationThickness]: null,
        [S$.TextStyle_decorationStyle]: null,
        [S$.TextStyle_decorationColor]: null,
        [S$.TextStyle_decoration]: null,
        [S$.TextStyle_background]: null,
        [S$.TextStyle_foreground]: null,
        [S$.TextStyle_locale]: null,
        [S$.TextStyle_leadingDistribution]: null,
        [S$.TextStyle_height]: 1,
        [S$.TextStyle_textBaseline]: null,
        [S$.TextStyle_wordSpacing]: null,
        [S$.TextStyle_letterSpacing]: null,
        [S$.TextStyle_fontStyle]: null,
        [S$.TextStyle_fontWeight]: C[1226] || CT.C1226,
        [S$.TextStyle_fontSize]: 10.2,
        [S$.TextStyle__package]: null,
        [S$.TextStyle__fontFamilyFallback]: null,
        [S$.TextStyle_fontFamily]: null,
        [S$.TextStyle_backgroundColor]: null,
        [S$.TextStyle_color]: C[39] || CT.C39,
        [S$.TextStyle_inherit]: true
      });
    },
    get C1228() {
      return C[1228] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2130706432
      });
    },
    get C1227() {
      return C[1227] = dart.const({
        __proto__: box_shadow.BoxShadow.prototype,
        [S.Shadow_blurRadius]: 6,
        [S.Shadow_offset]: C[1] || CT.C1,
        [S.Shadow_color]: C[1228] || CT.C1228,
        [S$1.BoxShadow_spreadRadius]: 0
      });
    },
    get C1231() {
      return C[1231] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "foregroundPainter",
        [S$._Location_column]: 7,
        [S$._Location_line]: 304,
        [S$._Location_file]: null
      });
    },
    get C1232() {
      return C[1232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 312,
        [S$._Location_file]: null
      });
    },
    get C1230() {
      return C[1230] = dart.constList([C[1231] || CT.C1231, C[1232] || CT.C1232], T$._LocationL());
    },
    get C1229() {
      return C[1229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1230] || CT.C1230,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 303,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/banner.dart"
      });
    },
    get C1235() {
      return C[1235] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 348,
        [S$._Location_file]: null
      });
    },
    get C1236() {
      return C[1236] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "message",
        [S$._Location_column]: 9,
        [S$._Location_line]: 349,
        [S$._Location_file]: null
      });
    },
    get C1237() {
      return C[1237] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 9,
        [S$._Location_line]: 350,
        [S$._Location_file]: null
      });
    },
    get C1238() {
      return C[1238] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "location",
        [S$._Location_column]: 9,
        [S$._Location_line]: 351,
        [S$._Location_file]: null
      });
    },
    get C1234() {
      return C[1234] = dart.constList([C[1235] || CT.C1235, C[1236] || CT.C1236, C[1237] || CT.C1237, C[1238] || CT.C1238], T$._LocationL());
    },
    get C1233() {
      return C[1233] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1234] || CT.C1234,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 347,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/banner.dart"
      });
    },
    get C1239() {
      return C[1239] = dart.const({
        __proto__: ui.Rect.prototype,
        [S$1.Rect_bottom]: 40,
        [S$1.Rect_right]: 40,
        [S$1.Rect_top]: 28,
        [S$1.Rect_left]: -40
      });
    },
    get C1240() {
      return C[1240] = dart.constMap(T$.StringL(), T$0.BuildContextLToLWidgetL(), []);
    },
    get C1242() {
      return C[1242] = dart.const({
        __proto__: ui.Locale.prototype,
        [S$1.Locale__countryCode]: "US",
        [S$1.Locale_scriptCode]: null,
        [S$1.Locale__languageCode]: "en"
      });
    },
    get C1241() {
      return C[1241] = dart.constList([C[1242] || CT.C1242], T$0.LocaleL());
    },
    get C1243() {
      return C[1243] = dart.const({
        __proto__: actions$.ActivateIntent.prototype
      });
    },
    get C1244() {
      return C[1244] = dart.const({
        __proto__: actions$.DismissIntent.prototype
      });
    },
    get C1245() {
      return C[1245] = dart.const({
        __proto__: focus_traversal.NextFocusIntent.prototype
      });
    },
    get C1246() {
      return C[1246] = dart.const({
        __proto__: focus_traversal.PreviousFocusIntent.prototype
      });
    },
    get C1247() {
      return C[1247] = dart.const({
        __proto__: focus_traversal.DirectionalFocusIntent.prototype,
        [S$1.ignoreTextFields]: true,
        [S$1.direction$4]: C[1147] || CT.C1147
      });
    },
    get C1248() {
      return C[1248] = dart.const({
        __proto__: focus_traversal.DirectionalFocusIntent.prototype,
        [S$1.ignoreTextFields]: true,
        [S$1.direction$4]: C[1145] || CT.C1145
      });
    },
    get C1249() {
      return C[1249] = dart.const({
        __proto__: focus_traversal.DirectionalFocusIntent.prototype,
        [S$1.ignoreTextFields]: true,
        [S$1.direction$4]: C[1146] || CT.C1146
      });
    },
    get C1250() {
      return C[1250] = dart.const({
        __proto__: focus_traversal.DirectionalFocusIntent.prototype,
        [S$1.ignoreTextFields]: true,
        [S$1.direction$4]: C[1144] || CT.C1144
      });
    },
    get C1251() {
      return C[1251] = dart.const({
        __proto__: scrollable$.ScrollIntent.prototype,
        [S.type$1]: C[846] || CT.C846,
        [S.direction$2]: C[686] || CT.C686
      });
    },
    get C1252() {
      return C[1252] = dart.const({
        __proto__: scrollable$.ScrollIntent.prototype,
        [S.type$1]: C[846] || CT.C846,
        [S.direction$2]: C[684] || CT.C684
      });
    },
    get C1253() {
      return C[1253] = dart.const({
        __proto__: scrollable$.ScrollIntent.prototype,
        [S.type$1]: C[846] || CT.C846,
        [S.direction$2]: C[688] || CT.C688
      });
    },
    get C1254() {
      return C[1254] = dart.const({
        __proto__: scrollable$.ScrollIntent.prototype,
        [S.type$1]: C[846] || CT.C846,
        [S.direction$2]: C[687] || CT.C687
      });
    },
    get C1255() {
      return C[1255] = dart.const({
        __proto__: scrollable$.ScrollIntent.prototype,
        [S.type$1]: C[847] || CT.C847,
        [S.direction$2]: C[686] || CT.C686
      });
    },
    get C1256() {
      return C[1256] = dart.const({
        __proto__: scrollable$.ScrollIntent.prototype,
        [S.type$1]: C[847] || CT.C847,
        [S.direction$2]: C[684] || CT.C684
      });
    },
    get C1258() {
      return C[1258] = dart.constList([C[1243] || CT.C1243, C[1256] || CT.C1256], T$.IntentL());
    },
    get C1257() {
      return C[1257] = dart.const({
        __proto__: actions$.PrioritizedIntents.prototype,
        [S$1.PrioritizedIntents_orderedIntents]: C[1258] || CT.C1258
      });
    },
    get C1259() {
      return C[1259] = dart.const({
        __proto__: actions$.ButtonActivateIntent.prototype
      });
    },
    get C1262() {
      return C[1262] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routeInformationProvider",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1518,
        [S$._Location_file]: null
      });
    },
    get C1263() {
      return C[1263] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routeInformationParser",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1519,
        [S$._Location_file]: null
      });
    },
    get C1264() {
      return C[1264] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "routerDelegate",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1520,
        [S$._Location_file]: null
      });
    },
    get C1265() {
      return C[1265] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "backButtonDispatcher",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1521,
        [S$._Location_file]: null
      });
    },
    get C1261() {
      return C[1261] = dart.constList([C[1262] || CT.C1262, C[1263] || CT.C1263, C[1264] || CT.C1264, C[1265] || CT.C1265], T$._LocationL());
    },
    get C1260() {
      return C[1260] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1261] || CT.C1261,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 1517,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1268() {
      return C[1268] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "restorationScopeId",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1526,
        [S$._Location_file]: null
      });
    },
    get C1269() {
      return C[1269] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1527,
        [S$._Location_file]: null
      });
    },
    get C1270() {
      return C[1270] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "initialRoute",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1528,
        [S$._Location_file]: null
      });
    },
    get C1271() {
      return C[1271] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onGenerateRoute",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1529,
        [S$._Location_file]: null
      });
    },
    get C1272() {
      return C[1272] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onGenerateInitialRoutes",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1530,
        [S$._Location_file]: null
      });
    },
    get C1273() {
      return C[1273] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onUnknownRoute",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1535,
        [S$._Location_file]: null
      });
    },
    get C1274() {
      return C[1274] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "observers",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1536,
        [S$._Location_file]: null
      });
    },
    get C1275() {
      return C[1275] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "reportsRouteUpdateToEngine",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1537,
        [S$._Location_file]: null
      });
    },
    get C1267() {
      return C[1267] = dart.constList([C[1268] || CT.C1268, C[1269] || CT.C1269, C[1270] || CT.C1270, C[1271] || CT.C1271, C[1272] || CT.C1272, C[1273] || CT.C1273, C[1274] || CT.C1274, C[1275] || CT.C1275], T$._LocationL());
    },
    get C1266() {
      return C[1266] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1267] || CT.C1267,
        [S$._Location_name]: null,
        [S$._Location_column]: 17,
        [S$._Location_line]: 1525,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1278() {
      return C[1278] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1544,
        [S$._Location_file]: null
      });
    },
    get C1277() {
      return C[1277] = dart.constList([C[1278] || CT.C1278], T$._LocationL());
    },
    get C1276() {
      return C[1276] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1277] || CT.C1277,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1543,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1281() {
      return C[1281] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "style",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1555,
        [S$._Location_file]: null
      });
    },
    get C1282() {
      return C[1282] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1556,
        [S$._Location_file]: null
      });
    },
    get C1280() {
      return C[1280] = dart.constList([C[1281] || CT.C1281, C[1282] || CT.C1282], T$._LocationL());
    },
    get C1279() {
      return C[1279] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1280] || CT.C1280,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1554,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1285() {
      return C[1285] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "checkerboardRasterCacheImages",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1565,
        [S$._Location_file]: null
      });
    },
    get C1286() {
      return C[1286] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "checkerboardOffscreenLayers",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1566,
        [S$._Location_file]: null
      });
    },
    get C1284() {
      return C[1284] = dart.constList([C[1285] || CT.C1285, C[1286] || CT.C1286], T$._LocationL());
    },
    get C1283() {
      return C[1283] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1284] || CT.C1284,
        [S$._Location_name]: null,
        [S$._Location_column]: 47,
        [S$._Location_line]: 1564,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1289() {
      return C[1289] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "checkerboardRasterCacheImages",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1570,
        [S$._Location_file]: null
      });
    },
    get C1290() {
      return C[1290] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "checkerboardOffscreenLayers",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1571,
        [S$._Location_file]: null
      });
    },
    get C1288() {
      return C[1288] = dart.constList([C[1289] || CT.C1289, C[1290] || CT.C1290], T$._LocationL());
    },
    get C1287() {
      return C[1287] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1288] || CT.C1288,
        [S$._Location_name]: null,
        [S$._Location_column]: 28,
        [S$._Location_line]: 1569,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1293() {
      return C[1293] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "top",
        [S$._Location_column]: 22,
        [S$._Location_line]: 1578,
        [S$._Location_file]: null
      });
    },
    get C1294() {
      return C[1294] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "left",
        [S$._Location_column]: 32,
        [S$._Location_line]: 1578,
        [S$._Location_file]: null
      });
    },
    get C1295() {
      return C[1295] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "right",
        [S$._Location_column]: 43,
        [S$._Location_line]: 1578,
        [S$._Location_file]: null
      });
    },
    get C1296() {
      return C[1296] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 55,
        [S$._Location_line]: 1578,
        [S$._Location_file]: null
      });
    },
    get C1292() {
      return C[1292] = dart.constList([C[1293] || CT.C1293, C[1294] || CT.C1294, C[1295] || CT.C1295, C[1296] || CT.C1296], T$._LocationL());
    },
    get C1291() {
      return C[1291] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1292] || CT.C1292,
        [S$._Location_name]: null,
        [S$._Location_column]: 11,
        [S$._Location_line]: 1578,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1299() {
      return C[1299] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "children",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1576,
        [S$._Location_file]: null
      });
    },
    get C1298() {
      return C[1298] = dart.constList([C[1299] || CT.C1299], T$._LocationL());
    },
    get C1297() {
      return C[1297] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1298] || CT.C1298,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1575,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1302() {
      return C[1302] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1585,
        [S$._Location_file]: null
      });
    },
    get C1301() {
      return C[1301] = dart.constList([C[1302] || CT.C1302], T$._LocationL());
    },
    get C1300() {
      return C[1300] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1301] || CT.C1301,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1584,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1305() {
      return C[1305] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1592,
        [S$._Location_file]: null
      });
    },
    get C1306() {
      return C[1306] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "selectButtonBuilder",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1593,
        [S$._Location_file]: null
      });
    },
    get C1304() {
      return C[1304] = dart.constList([C[1305] || CT.C1305, C[1306] || CT.C1306], T$._LocationL());
    },
    get C1303() {
      return C[1303] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1304] || CT.C1304,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1591,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1309() {
      return C[1309] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1598,
        [S$._Location_file]: null
      });
    },
    get C1308() {
      return C[1308] = dart.constList([C[1309] || CT.C1309], T$._LocationL());
    },
    get C1307() {
      return C[1307] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1308] || CT.C1308,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1597,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1312() {
      return C[1312] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "title",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1614,
        [S$._Location_file]: null
      });
    },
    get C1313() {
      return C[1313] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1615,
        [S$._Location_file]: null
      });
    },
    get C1314() {
      return C[1314] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1616,
        [S$._Location_file]: null
      });
    },
    get C1311() {
      return C[1311] = dart.constList([C[1312] || CT.C1312, C[1313] || CT.C1313, C[1314] || CT.C1314], T$._LocationL());
    },
    get C1310() {
      return C[1310] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1311] || CT.C1311,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1613,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1317() {
      return C[1317] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1610,
        [S$._Location_file]: null
      });
    },
    get C1316() {
      return C[1316] = dart.constList([C[1317] || CT.C1317], T$._LocationL());
    },
    get C1315() {
      return C[1315] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1316] || CT.C1316,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 1606,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1320() {
      return C[1320] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "title",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1622,
        [S$._Location_file]: null
      });
    },
    get C1321() {
      return C[1321] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "color",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1623,
        [S$._Location_file]: null
      });
    },
    get C1322() {
      return C[1322] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1624,
        [S$._Location_file]: null
      });
    },
    get C1319() {
      return C[1319] = dart.constList([C[1320] || CT.C1320, C[1321] || CT.C1321, C[1322] || CT.C1322], T$._LocationL());
    },
    get C1318() {
      return C[1318] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1319] || CT.C1319,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 1621,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1325() {
      return C[1325] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "locale",
        [S$._Location_column]: 21,
        [S$._Location_line]: 1649,
        [S$._Location_file]: null
      });
    },
    get C1326() {
      return C[1326] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "delegates",
        [S$._Location_column]: 21,
        [S$._Location_line]: 1650,
        [S$._Location_file]: null
      });
    },
    get C1327() {
      return C[1327] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 21,
        [S$._Location_line]: 1651,
        [S$._Location_file]: null
      });
    },
    get C1324() {
      return C[1324] = dart.constList([C[1325] || CT.C1325, C[1326] || CT.C1326, C[1327] || CT.C1327], T$._LocationL());
    },
    get C1323() {
      return C[1323] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1324] || CT.C1324,
        [S$._Location_name]: null,
        [S$._Location_column]: 26,
        [S$._Location_line]: 1648,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1330() {
      return C[1330] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 19,
        [S$._Location_line]: 1648,
        [S$._Location_file]: null
      });
    },
    get C1329() {
      return C[1329] = dart.constList([C[1330] || CT.C1330], T$._LocationL());
    },
    get C1328() {
      return C[1328] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1329] || CT.C1329,
        [S$._Location_name]: null,
        [S$._Location_column]: 24,
        [S$._Location_line]: 1647,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1333() {
      return C[1333] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "policy",
        [S$._Location_column]: 17,
        [S$._Location_line]: 1646,
        [S$._Location_file]: null
      });
    },
    get C1334() {
      return C[1334] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 17,
        [S$._Location_line]: 1647,
        [S$._Location_file]: null
      });
    },
    get C1332() {
      return C[1332] = dart.constList([C[1333] || CT.C1333, C[1334] || CT.C1334], T$._LocationL());
    },
    get C1331() {
      return C[1331] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1332] || CT.C1332,
        [S$._Location_name]: null,
        [S$._Location_column]: 22,
        [S$._Location_line]: 1645,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1337() {
      return C[1337] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 15,
        [S$._Location_line]: 1645,
        [S$._Location_file]: null
      });
    },
    get C1336() {
      return C[1336] = dart.constList([C[1337] || CT.C1337], T$._LocationL());
    },
    get C1335() {
      return C[1335] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1336] || CT.C1336,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 1644,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1340() {
      return C[1340] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "actions",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1643,
        [S$._Location_file]: null
      });
    },
    get C1341() {
      return C[1341] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 13,
        [S$._Location_line]: 1644,
        [S$._Location_file]: null
      });
    },
    get C1339() {
      return C[1339] = dart.constList([C[1340] || CT.C1340, C[1341] || CT.C1341], T$._LocationL());
    },
    get C1338() {
      return C[1338] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1339] || CT.C1339,
        [S$._Location_name]: null,
        [S$._Location_column]: 18,
        [S$._Location_line]: 1642,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1344() {
      return C[1344] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 1642,
        [S$._Location_file]: null
      });
    },
    get C1343() {
      return C[1343] = dart.constList([C[1344] || CT.C1344], T$._LocationL());
    },
    get C1342() {
      return C[1342] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1343] || CT.C1343,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 1641,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1347() {
      return C[1347] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "debugLabel",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1637,
        [S$._Location_file]: null
      });
    },
    get C1348() {
      return C[1348] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "shortcuts",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1638,
        [S$._Location_file]: null
      });
    },
    get C1349() {
      return C[1349] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1641,
        [S$._Location_file]: null
      });
    },
    get C1346() {
      return C[1346] = dart.constList([C[1347] || CT.C1347, C[1348] || CT.C1348, C[1349] || CT.C1349], T$._LocationL());
    },
    get C1345() {
      return C[1345] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1346] || CT.C1346,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 1636,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1352() {
      return C[1352] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "restorationId",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1635,
        [S$._Location_file]: null
      });
    },
    get C1353() {
      return C[1353] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1636,
        [S$._Location_file]: null
      });
    },
    get C1351() {
      return C[1351] = dart.constList([C[1352] || CT.C1352, C[1353] || CT.C1353], T$._LocationL());
    },
    get C1350() {
      return C[1350] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1351] || CT.C1351,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1634,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1356() {
      return C[1356] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "data",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1729,
        [S$._Location_file]: null
      });
    },
    get C1357() {
      return C[1357] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1730,
        [S$._Location_file]: null
      });
    },
    get C1355() {
      return C[1355] = dart.constList([C[1356] || CT.C1356, C[1357] || CT.C1357], T$._LocationL());
    },
    get C1354() {
      return C[1354] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1355] || CT.C1355,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1728,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart"
      });
    },
    get C1358() {
      return C[1358] = dart.fn(widget_inspector.transformDebugCreator, T$0.IterableOfDiagnosticsNodeToIterableOfDiagnosticsNode());
    },
    get C1359() {
      return C[1359] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "inflateWidget",
        [S$1.PartialStackFrame_className]: "Element",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1360() {
      return C[1360] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "updateChild",
        [S$1.PartialStackFrame_className]: "Element",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1361() {
      return C[1361] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "rebuild",
        [S$1.PartialStackFrame_className]: "Element",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1362() {
      return C[1362] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "performRebuild",
        [S$1.PartialStackFrame_className]: "ComponentElement",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1363() {
      return C[1363] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "_firstBuild",
        [S$1.PartialStackFrame_className]: "ComponentElement",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1364() {
      return C[1364] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "mount",
        [S$1.PartialStackFrame_className]: "ComponentElement",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1365() {
      return C[1365] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "_firstBuild",
        [S$1.PartialStackFrame_className]: "StatefulElement",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1366() {
      return C[1366] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "mount",
        [S$1.PartialStackFrame_className]: "SingleChildRenderObjectElement",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1367() {
      return C[1367] = dart.const({
        __proto__: assertions.PartialStackFrame.prototype,
        [S$1.PartialStackFrame_method]: "performRebuild",
        [S$1.PartialStackFrame_className]: "StatefulElement",
        [S$1.PartialStackFrame_package]: "package:flutter/src/widgets/framework.dart"
      });
    },
    get C1369() {
      return C[1369] = dart.constList([C[1359] || CT.C1359, C[1360] || CT.C1360, C[1362] || CT.C1362, C[1361] || CT.C1361, C[1363] || CT.C1363, C[1364] || CT.C1364], T$0.PartialStackFrameL());
    },
    get C1368() {
      return C[1368] = dart.const({
        __proto__: assertions.RepetitiveStackFrameFilter.prototype,
        [S$1.RepetitiveStackFrameFilter_replacement]: "...     Normal element mounting",
        [S$1.RepetitiveStackFrameFilter_frames]: C[1369] || CT.C1369
      });
    },
    get C1371() {
      return C[1371] = dart.constList([C[1360] || CT.C1360, C[1362] || CT.C1362, C[1361] || CT.C1361, C[1363] || CT.C1363, C[1364] || CT.C1364], T$0.PartialStackFrameL());
    },
    get C1370() {
      return C[1370] = dart.const({
        __proto__: assertions.RepetitiveStackFrameFilter.prototype,
        [S$1.RepetitiveStackFrameFilter_replacement]: "...     Normal element mounting",
        [S$1.RepetitiveStackFrameFilter_frames]: C[1371] || CT.C1371
      });
    },
    get C1373() {
      return C[1373] = dart.constList([C[1359] || CT.C1359, C[1360] || CT.C1360, C[1362] || CT.C1362, C[1367] || CT.C1367, C[1361] || CT.C1361, C[1363] || CT.C1363, C[1365] || CT.C1365, C[1364] || CT.C1364], T$0.PartialStackFrameL());
    },
    get C1372() {
      return C[1372] = dart.const({
        __proto__: assertions.RepetitiveStackFrameFilter.prototype,
        [S$1.RepetitiveStackFrameFilter_replacement]: "...     Normal element mounting",
        [S$1.RepetitiveStackFrameFilter_frames]: C[1373] || CT.C1373
      });
    },
    get C1375() {
      return C[1375] = dart.constList([C[1360] || CT.C1360, C[1362] || CT.C1362, C[1367] || CT.C1367, C[1361] || CT.C1361, C[1363] || CT.C1363, C[1365] || CT.C1365, C[1364] || CT.C1364], T$0.PartialStackFrameL());
    },
    get C1374() {
      return C[1374] = dart.const({
        __proto__: assertions.RepetitiveStackFrameFilter.prototype,
        [S$1.RepetitiveStackFrameFilter_replacement]: "...     Normal element mounting",
        [S$1.RepetitiveStackFrameFilter_frames]: C[1375] || CT.C1375
      });
    },
    get C1377() {
      return C[1377] = dart.constList([C[1359] || CT.C1359, C[1360] || CT.C1360, C[1366] || CT.C1366], T$0.PartialStackFrameL());
    },
    get C1376() {
      return C[1376] = dart.const({
        __proto__: assertions.RepetitiveStackFrameFilter.prototype,
        [S$1.RepetitiveStackFrameFilter_replacement]: "...     Normal element mounting",
        [S$1.RepetitiveStackFrameFilter_frames]: C[1377] || CT.C1377
      });
    },
    get C1379() {
      return C[1379] = dart.constList([C[1360] || CT.C1360, C[1366] || CT.C1366], T$0.PartialStackFrameL());
    },
    get C1378() {
      return C[1378] = dart.const({
        __proto__: assertions.RepetitiveStackFrameFilter.prototype,
        [S$1.RepetitiveStackFrameFilter_replacement]: "...     Normal element mounting",
        [S$1.RepetitiveStackFrameFilter_frames]: C[1379] || CT.C1379
      });
    },
    get C1382() {
      return C[1382] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "container",
        [S$._Location_column]: 7,
        [S$._Location_line]: 934,
        [S$._Location_file]: null
      });
    },
    get C1383() {
      return C[1383] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "debugShortDescription",
        [S$._Location_column]: 7,
        [S$._Location_line]: 935,
        [S$._Location_file]: null
      });
    },
    get C1384() {
      return C[1384] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 936,
        [S$._Location_file]: null
      });
    },
    get C1381() {
      return C[1381] = dart.constList([C[1382] || CT.C1382, C[1383] || CT.C1383, C[1384] || CT.C1384], T$._LocationL());
    },
    get C1380() {
      return C[1380] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1381] || CT.C1381,
        [S$._Location_name]: null,
        [S$._Location_column]: 26,
        [S$._Location_line]: 933,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/binding.dart"
      });
    },
    get C1385() {
      return C[1385] = dart.const({
        __proto__: core.Object.prototype
      });
    },
    get C1386() {
      return C[1386] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [S$._name]: "BlendMode.modulate",
        index: 13
      });
    },
    get C1388() {
      return C[1388] = dart.const({
        __proto__: ui.Radius.prototype,
        [S$1.Radius_y]: 0,
        [S$1.Radius_x]: 0
      });
    },
    get C1387() {
      return C[1387] = dart.const({
        __proto__: border_radius.BorderRadius.prototype,
        [S$1.BorderRadius_bottomRight]: C[1388] || CT.C1388,
        [S$1.BorderRadius_bottomLeft]: C[1388] || CT.C1388,
        [S$1.BorderRadius_topRight]: C[1388] || CT.C1388,
        [S$1.BorderRadius_topLeft]: C[1388] || CT.C1388
      });
    },
    get C1389() {
      return C[1389] = dart.const({
        __proto__: ui.Clip.prototype,
        [S$._name]: "Clip.antiAlias",
        index: 2
      });
    },
    get C1392() {
      return C[1392] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipper",
        [S$._Location_column]: 11,
        [S$._Location_line]: 863,
        [S$._Location_file]: null
      });
    },
    get C1393() {
      return C[1393] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipBehavior",
        [S$._Location_column]: 11,
        [S$._Location_line]: 867,
        [S$._Location_file]: null
      });
    },
    get C1394() {
      return C[1394] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 868,
        [S$._Location_file]: null
      });
    },
    get C1391() {
      return C[1391] = dart.constList([C[1392] || CT.C1392, C[1393] || CT.C1393, C[1394] || CT.C1394], T$._LocationL());
    },
    get C1390() {
      return C[1390] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1391] || CT.C1391,
        [S$._Location_name]: null,
        [S$._Location_column]: 16,
        [S$._Location_line]: 862,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1397() {
      return C[1397] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 7,
        [S$._Location_line]: 860,
        [S$._Location_file]: null
      });
    },
    get C1398() {
      return C[1398] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "builder",
        [S$._Location_column]: 7,
        [S$._Location_line]: 861,
        [S$._Location_file]: null
      });
    },
    get C1396() {
      return C[1396] = dart.constList([C[1397] || CT.C1397, C[1398] || CT.C1398], T$._LocationL());
    },
    get C1395() {
      return C[1395] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1396] || CT.C1396,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 859,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1399() {
      return C[1399] = dart.const({
        __proto__: box_border.BoxShape.prototype,
        [S$1._name$26]: "BoxShape.rectangle",
        index: 0
      });
    },
    get C1400() {
      return C[1400] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$0.Alignment_y]: -1,
        [S$0.Alignment_x]: -1
      });
    },
    get C1401() {
      return C[1401] = dart.const({
        __proto__: box_fit.BoxFit.prototype,
        [S$1._name$27]: "BoxFit.contain",
        index: 1
      });
    },
    get C1402() {
      return C[1402] = dart.const({
        __proto__: box$.BoxConstraints.prototype,
        [S$.BoxConstraints_maxHeight]: 1 / 0,
        [S$.BoxConstraints_minHeight]: 0,
        [S$.BoxConstraints_maxWidth]: 1 / 0,
        [S$.BoxConstraints_minWidth]: 0
      });
    },
    get C1403() {
      return C[1403] = dart.fn(basic.ConstraintsTransformBox.unmodified, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1404() {
      return C[1404] = dart.fn(basic.ConstraintsTransformBox.unconstrained, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1405() {
      return C[1405] = dart.fn(basic.ConstraintsTransformBox.widthUnconstrained, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1406() {
      return C[1406] = dart.fn(basic.ConstraintsTransformBox.heightUnconstrained, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1407() {
      return C[1407] = dart.fn(basic.ConstraintsTransformBox.maxWidthUnconstrained, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1408() {
      return C[1408] = dart.fn(basic.ConstraintsTransformBox.maxHeightUnconstrained, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1409() {
      return C[1409] = dart.fn(basic.ConstraintsTransformBox.maxUnconstrained, T$0.BoxConstraintsToBoxConstraints());
    },
    get C1412() {
      return C[1412] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2627,
        [S$._Location_file]: null
      });
    },
    get C1413() {
      return C[1413] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2628,
        [S$._Location_file]: null
      });
    },
    get C1414() {
      return C[1414] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "alignment",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2629,
        [S$._Location_file]: null
      });
    },
    get C1415() {
      return C[1415] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "clipBehavior",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2630,
        [S$._Location_file]: null
      });
    },
    get C1416() {
      return C[1416] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "constraintsTransform",
        [S$._Location_column]: 7,
        [S$._Location_line]: 2631,
        [S$._Location_file]: null
      });
    },
    get C1411() {
      return C[1411] = dart.constList([C[1412] || CT.C1412, C[1413] || CT.C1413, C[1414] || CT.C1414, C[1415] || CT.C1415, C[1416] || CT.C1416], T$._LocationL());
    },
    get C1410() {
      return C[1410] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1411] || CT.C1411,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 2626,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1417() {
      return C[1417] = dart.const({
        __proto__: alignment$.AlignmentDirectional.prototype,
        [S$1.AlignmentDirectional_y]: -1,
        [S$1.AlignmentDirectional_start]: -1
      });
    },
    get C1418() {
      return C[1418] = dart.const({
        __proto__: stack.StackFit.prototype,
        [S$1._name$28]: "StackFit.loose",
        index: 0
      });
    },
    get C1419() {
      return C[1419] = dart.const({
        __proto__: stack.Overflow.prototype,
        [S$1._name$28]: "Overflow.clip",
        index: 1
      });
    },
    get C1422() {
      return C[1422] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "textDirection",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4261,
        [S$._Location_file]: null
      });
    },
    get C1423() {
      return C[1423] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "start",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4262,
        [S$._Location_file]: null
      });
    },
    get C1424() {
      return C[1424] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "top",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4263,
        [S$._Location_file]: null
      });
    },
    get C1425() {
      return C[1425] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "end",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4264,
        [S$._Location_file]: null
      });
    },
    get C1426() {
      return C[1426] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "bottom",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4265,
        [S$._Location_file]: null
      });
    },
    get C1427() {
      return C[1427] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "width",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4266,
        [S$._Location_file]: null
      });
    },
    get C1428() {
      return C[1428] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "height",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4267,
        [S$._Location_file]: null
      });
    },
    get C1429() {
      return C[1429] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 4268,
        [S$._Location_file]: null
      });
    },
    get C1421() {
      return C[1421] = dart.constList([C[1422] || CT.C1422, C[1423] || CT.C1423, C[1424] || CT.C1424, C[1425] || CT.C1425, C[1426] || CT.C1426, C[1427] || CT.C1427, C[1428] || CT.C1428, C[1429] || CT.C1429], T$._LocationL());
    },
    get C1420() {
      return C[1420] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1421] || CT.C1421,
        [S$._Location_name]: null,
        [S$._Location_column]: 23,
        [S$._Location_line]: 4260,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1430() {
      return C[1430] = dart.const({
        __proto__: flex$.MainAxisAlignment.prototype,
        [S$1._name$29]: "MainAxisAlignment.start",
        index: 0
      });
    },
    get C1431() {
      return C[1431] = dart.const({
        __proto__: flex$.MainAxisSize.prototype,
        [S$1._name$29]: "MainAxisSize.max",
        index: 1
      });
    },
    get C1432() {
      return C[1432] = dart.const({
        __proto__: flex$.CrossAxisAlignment.prototype,
        [S$1._name$29]: "CrossAxisAlignment.center",
        index: 2
      });
    },
    get C1433() {
      return C[1433] = dart.const({
        __proto__: basic_types.VerticalDirection.prototype,
        [S$0._name$8]: "VerticalDirection.down",
        index: 1
      });
    },
    get C1434() {
      return C[1434] = dart.const({
        __proto__: flex$.FlexFit.prototype,
        [S$1._name$29]: "FlexFit.loose",
        index: 1
      });
    },
    get C1435() {
      return C[1435] = dart.const({
        __proto__: wrap.WrapAlignment.prototype,
        [S$1._name$30]: "WrapAlignment.start",
        index: 0
      });
    },
    get C1436() {
      return C[1436] = dart.const({
        __proto__: wrap.WrapCrossAlignment.prototype,
        [S$1._name$30]: "WrapCrossAlignment.start",
        index: 0
      });
    },
    get C1439() {
      return C[1439] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "tagForChildren",
        [S$._Location_column]: 11,
        [S$._Location_line]: 5702,
        [S$._Location_file]: null
      });
    },
    get C1440() {
      return C[1440] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 11,
        [S$._Location_line]: 5703,
        [S$._Location_file]: null
      });
    },
    get C1438() {
      return C[1438] = dart.constList([C[1439] || CT.C1439, C[1440] || CT.C1440], T$._LocationL());
    },
    get C1437() {
      return C[1437] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1438] || CT.C1438,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 5701,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1441() {
      return C[1441] = dart.const({
        __proto__: proxy_box.HitTestBehavior.prototype,
        [S$0._name$9]: "HitTestBehavior.deferToChild",
        index: 0
      });
    },
    get C1442() {
      return C[1442] = dart.const({
        __proto__: mouse_cursor._DeferringMouseCursor.prototype
      });
    },
    get C1445() {
      return C[1445] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "owner",
        [S$._Location_column]: 28,
        [S$._Location_line]: 6741,
        [S$._Location_file]: null
      });
    },
    get C1444() {
      return C[1444] = dart.constList([C[1445] || CT.C1445], T$._LocationL());
    },
    get C1443() {
      return C[1443] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1444] || CT.C1444,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 6741,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1448() {
      return C[1448] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 74,
        [S$._Location_line]: 6845,
        [S$._Location_file]: null
      });
    },
    get C1449() {
      return C[1449] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "childIndex",
        [S$._Location_column]: 79,
        [S$._Location_line]: 6845,
        [S$._Location_file]: null
      });
    },
    get C1447() {
      return C[1447] = dart.constList([C[1448] || CT.C1448, C[1449] || CT.C1449], T$._LocationL());
    },
    get C1446() {
      return C[1446] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1447] || CT.C1447,
        [S$._Location_name]: null,
        [S$._Location_column]: 62,
        [S$._Location_line]: 6845,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1452() {
      return C[1452] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 49,
        [S$._Location_line]: 7685,
        [S$._Location_file]: null
      });
    },
    get C1453() {
      return C[1453] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "childIndex",
        [S$._Location_column]: 55,
        [S$._Location_line]: 7685,
        [S$._Location_file]: null
      });
    },
    get C1451() {
      return C[1451] = dart.constList([C[1452] || CT.C1452, C[1453] || CT.C1453], T$._LocationL());
    },
    get C1450() {
      return C[1450] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1451] || CT.C1451,
        [S$._Location_name]: null,
        [S$._Location_column]: 44,
        [S$._Location_line]: 7685,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart"
      });
    },
    get C1456() {
      return C[1456] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "actions",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1060,
        [S$._Location_file]: null
      });
    },
    get C1457() {
      return C[1457] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "dispatcher",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1061,
        [S$._Location_file]: null
      });
    },
    get C1458() {
      return C[1458] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "rebuildKey",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1062,
        [S$._Location_file]: null
      });
    },
    get C1459() {
      return C[1459] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1063,
        [S$._Location_file]: null
      });
    },
    get C1455() {
      return C[1455] = dart.constList([C[1456] || CT.C1456, C[1457] || CT.C1457, C[1458] || CT.C1458, C[1459] || CT.C1459], T$._LocationL());
    },
    get C1454() {
      return C[1454] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1455] || CT.C1455,
        [S$._Location_name]: null,
        [S$._Location_column]: 12,
        [S$._Location_line]: 1059,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/actions.dart"
      });
    },
    get C1462() {
      return C[1462] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "focusNode",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1468,
        [S$._Location_file]: null
      });
    },
    get C1463() {
      return C[1463] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "autofocus",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1469,
        [S$._Location_file]: null
      });
    },
    get C1464() {
      return C[1464] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "descendantsAreFocusable",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1470,
        [S$._Location_file]: null
      });
    },
    get C1465() {
      return C[1465] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "canRequestFocus",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1471,
        [S$._Location_file]: null
      });
    },
    get C1466() {
      return C[1466] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onFocusChange",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1472,
        [S$._Location_file]: null
      });
    },
    get C1467() {
      return C[1467] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 9,
        [S$._Location_line]: 1473,
        [S$._Location_file]: null
      });
    },
    get C1461() {
      return C[1461] = dart.constList([C[1462] || CT.C1462, C[1463] || CT.C1463, C[1464] || CT.C1464, C[1465] || CT.C1465, C[1466] || CT.C1466, C[1467] || CT.C1467], T$._LocationL());
    },
    get C1460() {
      return C[1460] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1461] || CT.C1461,
        [S$._Location_name]: null,
        [S$._Location_column]: 14,
        [S$._Location_line]: 1467,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/actions.dart"
      });
    },
    get C1470() {
      return C[1470] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "key",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1463,
        [S$._Location_file]: null
      });
    },
    get C1471() {
      return C[1471] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onEnter",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1464,
        [S$._Location_file]: null
      });
    },
    get C1472() {
      return C[1472] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "onExit",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1465,
        [S$._Location_file]: null
      });
    },
    get C1473() {
      return C[1473] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "cursor",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1466,
        [S$._Location_file]: null
      });
    },
    get C1474() {
      return C[1474] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 7,
        [S$._Location_line]: 1467,
        [S$._Location_file]: null
      });
    },
    get C1469() {
      return C[1469] = dart.constList([C[1470] || CT.C1470, C[1471] || CT.C1471, C[1472] || CT.C1472, C[1473] || CT.C1473, C[1474] || CT.C1474], T$._LocationL());
    },
    get C1468() {
      return C[1468] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1469] || CT.C1469,
        [S$._Location_name]: null,
        [S$._Location_column]: 20,
        [S$._Location_line]: 1462,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/actions.dart"
      });
    },
    get C1477() {
      return C[1477] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "actions",
        [S$._Location_column]: 23,
        [S$._Location_line]: 1477,
        [S$._Location_file]: null
      });
    },
    get C1478() {
      return C[1478] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 49,
        [S$._Location_line]: 1477,
        [S$._Location_file]: null
      });
    },
    get C1476() {
      return C[1476] = dart.constList([C[1477] || CT.C1477, C[1478] || CT.C1478], T$._LocationL());
    },
    get C1475() {
      return C[1475] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1476] || CT.C1476,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 1477,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/actions.dart"
      });
    },
    get C1481() {
      return C[1481] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "shortcuts",
        [S$._Location_column]: 25,
        [S$._Location_line]: 1480,
        [S$._Location_file]: null
      });
    },
    get C1482() {
      return C[1482] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: null,
        [S$._Location_name]: "child",
        [S$._Location_column]: 55,
        [S$._Location_line]: 1480,
        [S$._Location_file]: null
      });
    },
    get C1480() {
      return C[1480] = dart.constList([C[1481] || CT.C1481, C[1482] || CT.C1482], T$._LocationL());
    },
    get C1479() {
      return C[1479] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [S$._Location_parameterLocations]: C[1480] || CT.C1480,
        [S$._Location_name]: null,
        [S$._Location_column]: 15,
        [S$._Location_line]: 1480,
        [S$._Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/actions.dart"
      });
    },
    get C1483() {
      return C[1483] = dart.const({
        __proto__: actions$.DoNothingAndStopPropagationIntent.prototype
      });
    }
  }, false);
  var C = Array(1484).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_span.dart",
    "package:flutter/src/widgets/widget_span.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/widget_inspector.dart",
    "package:flutter/src/widgets/widget_inspector.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/framework.dart",
    "package:flutter/src/widgets/framework.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/binding.dart",
    "package:flutter/src/widgets/binding.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/title.dart",
    "package:flutter/src/widgets/title.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/semantics_debugger.dart",
    "package:flutter/src/widgets/semantics_debugger.dart",
    "package:flutter/src/widgets/router.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/router.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/performance_overlay.dart",
    "package:flutter/src/widgets/performance_overlay.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/modal_barrier.dart",
    "package:flutter/src/widgets/modal_barrier.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/transitions.dart",
    "package:flutter/src/widgets/transitions.dart",
    "package:flutter/src/widgets/gesture_detector.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/gesture_detector.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/routes.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/navigator.dart",
    "package:flutter/src/widgets/navigator.dart",
    "package:flutter/src/widgets/routes.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/actions.dart",
    "package:flutter/src/widgets/actions.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/pages.dart",
    "package:flutter/src/widgets/pages.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/heroes.dart",
    "package:flutter/src/widgets/heroes.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/ticker_provider.dart",
    "package:flutter/src/widgets/ticker_provider.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/restoration.dart",
    "package:flutter/src/widgets/restoration.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/shortcuts.dart",
    "package:flutter/src/widgets/shortcuts.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/inherited_notifier.dart",
    "package:flutter/src/widgets/inherited_notifier.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/default_text_editing_shortcuts.dart",
    "package:flutter/src/widgets/default_text_editing_shortcuts.dart",
    "package:flutter/src/widgets/text_editing_intents.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/default_text_editing_actions.dart",
    "package:flutter/src/widgets/default_text_editing_actions.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_editing_action.dart",
    "package:flutter/src/widgets/text_editing_action.dart",
    "package:flutter/src/widgets/table.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/table.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/inherited_model.dart",
    "package:flutter/src/widgets/inherited_model.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/visibility.dart",
    "package:flutter/src/widgets/visibility.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overlay.dart",
    "package:flutter/src/widgets/overlay.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text_selection.dart",
    "package:flutter/src/widgets/text_selection.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/inherited_theme.dart",
    "package:flutter/src/widgets/inherited_theme.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/text.dart",
    "package:flutter/src/widgets/text.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/viewport.dart",
    "package:flutter/src/widgets/viewport.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollbar.dart",
    "package:flutter/src/widgets/scrollbar.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_configuration.dart",
    "package:flutter/src/widgets/scroll_configuration.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/restoration_properties.dart",
    "package:flutter/src/widgets/restoration_properties.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/editable_text.dart",
    "package:flutter/src/widgets/editable_text.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_position_with_single_context.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_position.dart",
    "package:flutter/src/widgets/scroll_position.dart",
    "package:flutter/src/widgets/scroll_position_with_single_context.dart",
    "package:flutter/src/widgets/scroll_activity.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_activity.dart",
    "package:flutter/src/widgets/page_storage.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/page_storage.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_notification.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/notification_listener.dart",
    "package:flutter/src/widgets/notification_listener.dart",
    "package:flutter/src/widgets/scroll_notification.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/overscroll_indicator.dart",
    "package:flutter/src/widgets/overscroll_indicator.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_physics.dart",
    "package:flutter/src/widgets/scroll_physics.dart",
    "package:flutter/src/widgets/scroll_context.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_controller.dart",
    "package:flutter/src/widgets/scroll_controller.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/primary_scroll_controller.dart",
    "package:flutter/src/widgets/primary_scroll_controller.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scrollable.dart",
    "package:flutter/src/widgets/scrollable.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/scroll_aware_image_provider.dart",
    "package:flutter/src/widgets/scroll_aware_image_provider.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/placeholder.dart",
    "package:flutter/src/widgets/placeholder.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/media_query.dart",
    "package:flutter/src/widgets/media_query.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/disposable_build_context.dart",
    "package:flutter/src/widgets/disposable_build_context.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/image.dart",
    "package:flutter/src/widgets/image.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/container.dart",
    "package:flutter/src/widgets/container.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/localizations.dart",
    "package:flutter/src/widgets/localizations.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/sliver.dart",
    "package:flutter/src/widgets/sliver.dart",
    "package:flutter/src/widgets/automatic_keep_alive.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/automatic_keep_alive.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/autofill.dart",
    "package:flutter/src/widgets/autofill.dart",
    "package:flutter/src/widgets/focus_traversal.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_traversal.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_scope.dart",
    "package:flutter/src/widgets/focus_scope.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/focus_manager.dart",
    "package:flutter/src/widgets/focus_manager.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/debug.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/banner.dart",
    "package:flutter/src/widgets/banner.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/app.dart",
    "package:flutter/src/widgets/app.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/widgets/basic.dart",
    "package:flutter/src/widgets/basic.dart"
  ];
  widget_span.WidgetSpan = class WidgetSpan extends placeholder_span.PlaceholderSpan {
    get child() {
      return this[S$.child];
    }
    set child(value) {
      super.child = value;
    }
    build(builder, opts) {
      if (builder == null) dart.nullFailed(I[0], 103, 34, "builder");
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      if (textScaleFactor == null) dart.nullFailed(I[0], 103, 52, "textScaleFactor");
      let dimensions = opts && 'dimensions' in opts ? opts.dimensions : null;
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, I[0], 104, 12, "debugAssertIsValid()");
      if (!(dimensions != null)) dart.assertFailed(null, I[0], 105, 12, "dimensions != null");
      let hasStyle = this.style != null;
      if (hasStyle) {
        builder.pushStyle(dart.nullCheck(this.style).getTextStyle({textScaleFactor: textScaleFactor}));
      }
      if (!(dart.notNull(builder.placeholderCount) < dart.notNull(dart.nullCheck(dimensions)[S$.$length]))) dart.assertFailed(null, I[0], 110, 12, "builder.placeholderCount < dimensions!.length");
      let currentDimensions = dart.nullCheck(dimensions)[S$.$_get](builder.placeholderCount);
      builder.addPlaceholder(currentDimensions.size.width, currentDimensions.size.height, this.alignment, {scale: textScaleFactor, baseline: currentDimensions.baseline, baselineOffset: currentDimensions.baselineOffset});
      if (hasStyle) {
        builder.pop();
      }
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[0], 127, 40, "visitor");
      return visitor(this);
    }
    getSpanForPositionVisitor(position, offset) {
      if (position == null) dart.nullFailed(I[0], 132, 54, "position");
      if (offset == null) dart.nullFailed(I[0], 132, 76, "offset");
      if (position.offset == offset.value) {
        return this;
      }
      offset.increment(1);
      return null;
    }
    codeUnitAtVisitor(index, offset) {
      if (index == null) dart.nullFailed(I[0], 141, 30, "index");
      if (offset == null) dart.nullFailed(I[0], 141, 49, "offset");
      return null;
    }
    compareTo(other) {
      if (other == null) dart.nullFailed(I[0], 146, 41, "other");
      if (this === other) return basic_types.RenderComparison.identical;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) return basic_types.RenderComparison.layout;
      if (this.style == null !== (other.style == null)) return basic_types.RenderComparison.layout;
      let typedOther = widget_span.WidgetSpan.as(other);
      if (!dart.equals(this.child, typedOther.child) || this.alignment != typedOther.alignment) {
        return basic_types.RenderComparison.layout;
      }
      let result = basic_types.RenderComparison.identical;
      if (this.style != null) {
        let candidate = dart.nullCheck(this.style).compareTo(dart.nullCheck(other.style));
        if (dart.notNull(candidate.index) > dart.notNull(result.index)) result = candidate;
        if (result == basic_types.RenderComparison.layout) return result;
      }
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) return false;
      if (!super._equals(other)) return false;
      return widget_span.WidgetSpan.is(other) && dart.equals(other.child, this.child) && other.alignment == this.alignment && other.baseline == this.baseline;
    }
    get hashCode() {
      return ui.hashValues(super.hashCode, this.child, this.alignment, this.baseline);
    }
    getSpanForPosition(position) {
      if (position == null) dart.nullFailed(I[0], 187, 47, "position");
      if (!dart.test(this.debugAssertIsValid())) dart.assertFailed(null, I[0], 188, 12, "debugAssertIsValid()");
      return null;
    }
    debugAssertIsValid() {
      return true;
    }
  };
  (widget_span.WidgetSpan.new = function(opts) {
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[0], 73, 19, "child");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[0] || CT.C0;
    if (alignment == null) dart.nullFailed(I[0], 74, 29, "alignment");
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    let style = opts && 'style' in opts ? opts.style : null;
    this[S$.child] = child;
    if (!(child != null)) dart.assertFailed(null, I[0], 77, 15, "child != null");
    if (!(baseline != null || !(alignment == ui.PlaceholderAlignment.aboveBaseline || alignment == ui.PlaceholderAlignment.belowBaseline || alignment == ui.PlaceholderAlignment.baseline))) dart.assertFailed(null, I[0], 79, 10, "baseline != null || !(\r\n          identical(alignment, ui.PlaceholderAlignment.aboveBaseline) ||\r\n          identical(alignment, ui.PlaceholderAlignment.belowBaseline) ||\r\n          identical(alignment, ui.PlaceholderAlignment.baseline)\r\n        )");
    widget_span.WidgetSpan.__proto__.new.call(this, {alignment: alignment, baseline: baseline, style: style});
    ;
  }).prototype = widget_span.WidgetSpan.prototype;
  dart.addTypeTests(widget_span.WidgetSpan);
  dart.addTypeCaches(widget_span.WidgetSpan);
  dart.setMethodSignature(widget_span.WidgetSpan, () => ({
    __proto__: dart.getMethods(widget_span.WidgetSpan.__proto__),
    build: dart.fnType(dart.void, [ui.ParagraphBuilder], {dimensions: dart.nullable(core.List$(text_painter.PlaceholderDimensions)), textScaleFactor: core.double}, {}),
    visitChildren: dart.fnType(core.bool, [dart.fnType(core.bool, [inline_span.InlineSpan])]),
    getSpanForPositionVisitor: dart.fnType(dart.nullable(inline_span.InlineSpan), [ui.TextPosition, inline_span.Accumulator]),
    codeUnitAtVisitor: dart.fnType(dart.nullable(core.int), [core.int, inline_span.Accumulator]),
    compareTo: dart.fnType(basic_types.RenderComparison, [inline_span.InlineSpan])
  }));
  dart.setLibraryUri(widget_span.WidgetSpan, I[1]);
  dart.setFieldSignature(widget_span.WidgetSpan, () => ({
    __proto__: dart.getFields(widget_span.WidgetSpan.__proto__),
    child: dart.finalFieldType(framework.Widget)
  }));
  dart.defineExtensionMethods(widget_span.WidgetSpan, ['_equals']);
  dart.defineExtensionAccessors(widget_span.WidgetSpan, ['hashCode']);
  widget_inspector._ProxyLayer = class _ProxyLayer extends layer.Layer {
    addToScene(builder, layerOffset = C[1] || CT.C1) {
      if (builder == null) dart.nullFailed(I[2], 52, 35, "builder");
      if (layerOffset == null) dart.nullFailed(I[2], 52, 53, "layerOffset");
      this[S$._layer].addToScene(builder, layerOffset);
    }
    findAnnotations(S, result, localPosition, opts) {
      if (result == null) dart.nullFailed(I[2], 59, 25, "result");
      if (localPosition == null) dart.nullFailed(I[2], 60, 12, "localPosition");
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      if (onlyFirst == null) dart.nullFailed(I[2], 61, 19, "onlyFirst");
      return this[S$._layer].findAnnotations(S, result, localPosition, {onlyFirst: onlyFirst});
    }
  };
  (widget_inspector._ProxyLayer.new = function(_layer) {
    if (_layer == null) dart.nullFailed(I[2], 47, 20, "_layer");
    this[S$._layer] = _layer;
    widget_inspector._ProxyLayer.__proto__.new.call(this);
    ;
  }).prototype = widget_inspector._ProxyLayer.prototype;
  dart.addTypeTests(widget_inspector._ProxyLayer);
  dart.addTypeCaches(widget_inspector._ProxyLayer);
  dart.setMethodSignature(widget_inspector._ProxyLayer, () => ({
    __proto__: dart.getMethods(widget_inspector._ProxyLayer.__proto__),
    addToScene: dart.fnType(dart.void, [ui.SceneBuilder], [ui.Offset]),
    findAnnotations: dart.gFnType(S => [core.bool, [layer.AnnotationResult$(S), ui.Offset], {}, {onlyFirst: core.bool}], S => [core.Object])
  }));
  dart.setLibraryUri(widget_inspector._ProxyLayer, I[3]);
  dart.setFieldSignature(widget_inspector._ProxyLayer, () => ({
    __proto__: dart.getFields(widget_inspector._ProxyLayer.__proto__),
    [S$._layer]: dart.finalFieldType(layer.Layer)
  }));
  widget_inspector._MulticastCanvas = class _MulticastCanvas extends core.Object {
    clipPath(path, opts) {
      if (path == null) dart.nullFailed(I[2], 83, 22, "path");
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (doAntiAlias == null) dart.nullFailed(I[2], 83, 35, "doAntiAlias");
      this[S$._main].clipPath(path, {doAntiAlias: doAntiAlias});
      this[S$._screenshot].clipPath(path, {doAntiAlias: doAntiAlias});
    }
    clipRRect(rrect, opts) {
      if (rrect == null) dart.nullFailed(I[2], 89, 24, "rrect");
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (doAntiAlias == null) dart.nullFailed(I[2], 89, 38, "doAntiAlias");
      this[S$._main].clipRRect(rrect, {doAntiAlias: doAntiAlias});
      this[S$._screenshot].clipRRect(rrect, {doAntiAlias: doAntiAlias});
    }
    clipRect(rect, opts) {
      if (rect == null) dart.nullFailed(I[2], 95, 22, "rect");
      let clipOp = opts && 'clipOp' in opts ? opts.clipOp : C[2] || CT.C2;
      if (clipOp == null) dart.nullFailed(I[2], 95, 40, "clipOp");
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (doAntiAlias == null) dart.nullFailed(I[2], 95, 75, "doAntiAlias");
      this[S$._main].clipRect(rect, {clipOp: clipOp, doAntiAlias: doAntiAlias});
      this[S$._screenshot].clipRect(rect, {clipOp: clipOp, doAntiAlias: doAntiAlias});
    }
    drawArc(rect, startAngle, sweepAngle, useCenter, paint) {
      if (rect == null) dart.nullFailed(I[2], 101, 21, "rect");
      if (startAngle == null) dart.nullFailed(I[2], 101, 34, "startAngle");
      if (sweepAngle == null) dart.nullFailed(I[2], 101, 53, "sweepAngle");
      if (useCenter == null) dart.nullFailed(I[2], 101, 70, "useCenter");
      if (paint == null) dart.nullFailed(I[2], 101, 87, "paint");
      this[S$._main].drawArc(rect, startAngle, sweepAngle, useCenter, paint);
      this[S$._screenshot].drawArc(rect, startAngle, sweepAngle, useCenter, paint);
    }
    drawAtlas(atlas, transforms, rects, colors, blendMode, cullRect, paint) {
      if (atlas == null) dart.nullFailed(I[2], 107, 27, "atlas");
      if (transforms == null) dart.nullFailed(I[2], 107, 52, "transforms");
      if (rects == null) dart.nullFailed(I[2], 107, 75, "rects");
      if (paint == null) dart.nullFailed(I[2], 107, 147, "paint");
      this[S$._main].drawAtlas(atlas, transforms, rects, colors, blendMode, cullRect, paint);
      this[S$._screenshot].drawAtlas(atlas, transforms, rects, colors, blendMode, cullRect, paint);
    }
    drawCircle(c, radius, paint) {
      if (c == null) dart.nullFailed(I[2], 113, 26, "c");
      if (radius == null) dart.nullFailed(I[2], 113, 36, "radius");
      if (paint == null) dart.nullFailed(I[2], 113, 50, "paint");
      this[S$._main].drawCircle(c, radius, paint);
      this[S$._screenshot].drawCircle(c, radius, paint);
    }
    drawColor(color, blendMode) {
      if (color == null) dart.nullFailed(I[2], 119, 24, "color");
      if (blendMode == null) dart.nullFailed(I[2], 119, 41, "blendMode");
      this[S$._main].drawColor(color, blendMode);
      this[S$._screenshot].drawColor(color, blendMode);
    }
    drawDRRect(outer, inner, paint) {
      if (outer == null) dart.nullFailed(I[2], 125, 25, "outer");
      if (inner == null) dart.nullFailed(I[2], 125, 38, "inner");
      if (paint == null) dart.nullFailed(I[2], 125, 51, "paint");
      this[S$._main].drawDRRect(outer, inner, paint);
      this[S$._screenshot].drawDRRect(outer, inner, paint);
    }
    drawImage(image, p, paint) {
      if (image == null) dart.nullFailed(I[2], 131, 27, "image");
      if (p == null) dart.nullFailed(I[2], 131, 41, "p");
      if (paint == null) dart.nullFailed(I[2], 131, 50, "paint");
      this[S$._main].drawImage(image, p, paint);
      this[S$._screenshot].drawImage(image, p, paint);
    }
    drawImageNine(image, center, dst, paint) {
      if (image == null) dart.nullFailed(I[2], 137, 31, "image");
      if (center == null) dart.nullFailed(I[2], 137, 43, "center");
      if (dst == null) dart.nullFailed(I[2], 137, 56, "dst");
      if (paint == null) dart.nullFailed(I[2], 137, 67, "paint");
      this[S$._main].drawImageNine(image, center, dst, paint);
      this[S$._screenshot].drawImageNine(image, center, dst, paint);
    }
    drawImageRect(image, src, dst, paint) {
      if (image == null) dart.nullFailed(I[2], 143, 31, "image");
      if (src == null) dart.nullFailed(I[2], 143, 43, "src");
      if (dst == null) dart.nullFailed(I[2], 143, 53, "dst");
      if (paint == null) dart.nullFailed(I[2], 143, 64, "paint");
      this[S$._main].drawImageRect(image, src, dst, paint);
      this[S$._screenshot].drawImageRect(image, src, dst, paint);
    }
    drawLine(p1, p2, paint) {
      if (p1 == null) dart.nullFailed(I[2], 149, 24, "p1");
      if (p2 == null) dart.nullFailed(I[2], 149, 35, "p2");
      if (paint == null) dart.nullFailed(I[2], 149, 45, "paint");
      this[S$._main].drawLine(p1, p2, paint);
      this[S$._screenshot].drawLine(p1, p2, paint);
    }
    drawOval(rect, paint) {
      if (rect == null) dart.nullFailed(I[2], 155, 22, "rect");
      if (paint == null) dart.nullFailed(I[2], 155, 34, "paint");
      this[S$._main].drawOval(rect, paint);
      this[S$._screenshot].drawOval(rect, paint);
    }
    drawPaint(paint) {
      if (paint == null) dart.nullFailed(I[2], 161, 24, "paint");
      this[S$._main].drawPaint(paint);
      this[S$._screenshot].drawPaint(paint);
    }
    drawParagraph(paragraph, offset) {
      if (paragraph == null) dart.nullFailed(I[2], 167, 35, "paragraph");
      if (offset == null) dart.nullFailed(I[2], 167, 53, "offset");
      this[S$._main].drawParagraph(paragraph, offset);
      this[S$._screenshot].drawParagraph(paragraph, offset);
    }
    drawPath(path, paint) {
      if (path == null) dart.nullFailed(I[2], 173, 22, "path");
      if (paint == null) dart.nullFailed(I[2], 173, 34, "paint");
      this[S$._main].drawPath(path, paint);
      this[S$._screenshot].drawPath(path, paint);
    }
    drawPicture(picture) {
      if (picture == null) dart.nullFailed(I[2], 179, 31, "picture");
      this[S$._main].drawPicture(picture);
      this[S$._screenshot].drawPicture(picture);
    }
    drawPoints(pointMode, points, paint) {
      if (pointMode == null) dart.nullFailed(I[2], 185, 32, "pointMode");
      if (points == null) dart.nullFailed(I[2], 185, 56, "points");
      if (paint == null) dart.nullFailed(I[2], 185, 70, "paint");
      this[S$._main].drawPoints(pointMode, points, paint);
      this[S$._screenshot].drawPoints(pointMode, points, paint);
    }
    drawRRect(rrect, paint) {
      if (rrect == null) dart.nullFailed(I[2], 191, 24, "rrect");
      if (paint == null) dart.nullFailed(I[2], 191, 37, "paint");
      this[S$._main].drawRRect(rrect, paint);
      this[S$._screenshot].drawRRect(rrect, paint);
    }
    drawRawAtlas(atlas, rstTransforms, rects, colors, blendMode, cullRect, paint) {
      if (atlas == null) dart.nullFailed(I[2], 197, 30, "atlas");
      if (rstTransforms == null) dart.nullFailed(I[2], 197, 49, "rstTransforms");
      if (rects == null) dart.nullFailed(I[2], 197, 76, "rects");
      if (paint == null) dart.nullFailed(I[2], 197, 146, "paint");
      this[S$._main].drawRawAtlas(atlas, rstTransforms, rects, colors, blendMode, cullRect, paint);
      this[S$._screenshot].drawRawAtlas(atlas, rstTransforms, rects, colors, blendMode, cullRect, paint);
    }
    drawRawPoints(pointMode, points, paint) {
      if (pointMode == null) dart.nullFailed(I[2], 203, 35, "pointMode");
      if (points == null) dart.nullFailed(I[2], 203, 58, "points");
      if (paint == null) dart.nullFailed(I[2], 203, 72, "paint");
      this[S$._main].drawRawPoints(pointMode, points, paint);
      this[S$._screenshot].drawRawPoints(pointMode, points, paint);
    }
    drawRect(rect, paint) {
      if (rect == null) dart.nullFailed(I[2], 209, 22, "rect");
      if (paint == null) dart.nullFailed(I[2], 209, 34, "paint");
      this[S$._main].drawRect(rect, paint);
      this[S$._screenshot].drawRect(rect, paint);
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      if (path == null) dart.nullFailed(I[2], 215, 24, "path");
      if (color == null) dart.nullFailed(I[2], 215, 36, "color");
      if (elevation == null) dart.nullFailed(I[2], 215, 50, "elevation");
      if (transparentOccluder == null) dart.nullFailed(I[2], 215, 66, "transparentOccluder");
      this[S$._main].drawShadow(path, color, elevation, transparentOccluder);
      this[S$._screenshot].drawShadow(path, color, elevation, transparentOccluder);
    }
    drawVertices(vertices, blendMode, paint) {
      if (vertices == null) dart.nullFailed(I[2], 221, 33, "vertices");
      if (blendMode == null) dart.nullFailed(I[2], 221, 53, "blendMode");
      if (paint == null) dart.nullFailed(I[2], 221, 70, "paint");
      this[S$._main].drawVertices(vertices, blendMode, paint);
      this[S$._screenshot].drawVertices(vertices, blendMode, paint);
    }
    getSaveCount() {
      return this[S$._main].getSaveCount();
    }
    restore() {
      this[S$._main].restore();
      this[S$._screenshot].restore();
    }
    rotate(radians) {
      if (radians == null) dart.nullFailed(I[2], 242, 22, "radians");
      this[S$._main].rotate(radians);
      this[S$._screenshot].rotate(radians);
    }
    save() {
      this[S$._main].save();
      this[S$._screenshot].save();
    }
    saveLayer(bounds, paint) {
      if (paint == null) dart.nullFailed(I[2], 254, 38, "paint");
      this[S$._main].saveLayer(bounds, paint);
      this[S$._screenshot].saveLayer(bounds, paint);
    }
    scale(sx, sy = null) {
      if (sx == null) dart.nullFailed(I[2], 260, 21, "sx");
      this[S$._main].scale(sx, sy);
      this[S$._screenshot].scale(sx, sy);
    }
    skew(sx, sy) {
      if (sx == null) dart.nullFailed(I[2], 266, 20, "sx");
      if (sy == null) dart.nullFailed(I[2], 266, 31, "sy");
      this[S$._main].skew(sx, sy);
      this[S$._screenshot].skew(sx, sy);
    }
    transform(matrix4) {
      if (matrix4 == null) dart.nullFailed(I[2], 272, 30, "matrix4");
      this[S$._main].transform(matrix4);
      this[S$._screenshot].transform(matrix4);
    }
    translate(dx, dy) {
      if (dx == null) dart.nullFailed(I[2], 278, 25, "dx");
      if (dy == null) dart.nullFailed(I[2], 278, 36, "dy");
      this[S$._main].translate(dx, dy);
      this[S$._screenshot].translate(dx, dy);
    }
  };
  (widget_inspector._MulticastCanvas.new = function(opts) {
    let main = opts && 'main' in opts ? opts.main : null;
    if (main == null) dart.nullFailed(I[2], 72, 21, "main");
    let screenshot = opts && 'screenshot' in opts ? opts.screenshot : null;
    if (screenshot == null) dart.nullFailed(I[2], 73, 21, "screenshot");
    if (!(main != null)) dart.assertFailed(null, I[2], 74, 15, "main != null");
    if (!(screenshot != null)) dart.assertFailed(null, I[2], 75, 15, "screenshot != null");
    this[S$._main] = main;
    this[S$._screenshot] = screenshot;
    ;
  }).prototype = widget_inspector._MulticastCanvas.prototype;
  dart.addTypeTests(widget_inspector._MulticastCanvas);
  dart.addTypeCaches(widget_inspector._MulticastCanvas);
  widget_inspector._MulticastCanvas[dart.implements] = () => [ui.Canvas];
  dart.setMethodSignature(widget_inspector._MulticastCanvas, () => ({
    __proto__: dart.getMethods(widget_inspector._MulticastCanvas.__proto__),
    clipPath: dart.fnType(dart.void, [ui.Path], {doAntiAlias: core.bool}, {}),
    clipRRect: dart.fnType(dart.void, [ui.RRect], {doAntiAlias: core.bool}, {}),
    clipRect: dart.fnType(dart.void, [ui.Rect], {clipOp: ui.ClipOp, doAntiAlias: core.bool}, {}),
    drawArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool, ui.Paint]),
    drawAtlas: dart.fnType(dart.void, [ui.Image, core.List$(ui.RSTransform), core.List$(ui.Rect), dart.nullable(core.List$(ui.Color)), dart.nullable(ui.BlendMode), dart.nullable(ui.Rect), ui.Paint]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawImageNine: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    drawPoints: dart.fnType(dart.void, [ui.PointMode, core.List$(ui.Offset), ui.Paint]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    drawRawAtlas: dart.fnType(dart.void, [ui.Image, typed_data.Float32List, typed_data.Float32List, dart.nullable(typed_data.Int32List), dart.nullable(ui.BlendMode), dart.nullable(ui.Rect), ui.Paint]),
    drawRawPoints: dart.fnType(dart.void, [ui.PointMode, typed_data.Float32List, ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawVertices: dart.fnType(dart.void, [ui.Vertices, ui.BlendMode, ui.Paint]),
    getSaveCount: dart.fnType(core.int, []),
    restore: dart.fnType(dart.void, []),
    rotate: dart.fnType(dart.void, [core.double]),
    save: dart.fnType(dart.void, []),
    saveLayer: dart.fnType(dart.void, [dart.nullable(ui.Rect), ui.Paint]),
    scale: dart.fnType(dart.void, [core.double], [dart.nullable(core.double)]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    translate: dart.fnType(dart.void, [core.double, core.double])
  }));
  dart.setLibraryUri(widget_inspector._MulticastCanvas, I[3]);
  dart.setFieldSignature(widget_inspector._MulticastCanvas, () => ({
    __proto__: dart.getFields(widget_inspector._MulticastCanvas.__proto__),
    [S$._main]: dart.finalFieldType(ui.Canvas),
    [S$._screenshot]: dart.finalFieldType(ui.Canvas)
  }));
  widget_inspector._ScreenshotContainerLayer = class _ScreenshotContainerLayer extends layer.OffsetLayer {
    addToScene(builder, layerOffset = C[1] || CT.C1) {
      if (builder == null) dart.nullFailed(I[2], 317, 35, "builder");
      if (layerOffset == null) dart.nullFailed(I[2], 317, 53, "layerOffset");
      this.addChildrenToScene(builder, layerOffset);
    }
  };
  (widget_inspector._ScreenshotContainerLayer.new = function() {
    widget_inspector._ScreenshotContainerLayer.__proto__.new.call(this);
    ;
  }).prototype = widget_inspector._ScreenshotContainerLayer.prototype;
  dart.addTypeTests(widget_inspector._ScreenshotContainerLayer);
  dart.addTypeCaches(widget_inspector._ScreenshotContainerLayer);
  dart.setLibraryUri(widget_inspector._ScreenshotContainerLayer, I[3]);
  widget_inspector._ScreenshotData = class _ScreenshotData extends core.Object {
    get screenshotOffset() {
      if (!dart.test(this.foundTarget)) dart.assertFailed(null, I[2], 358, 12, "foundTarget");
      return this.containerLayer.offset;
    }
    set screenshotOffset(offset) {
      if (offset == null) dart.nullFailed(I[2], 361, 31, "offset");
      this.containerLayer.offset = offset;
    }
  };
  (widget_inspector._ScreenshotData.new = function(opts) {
    let target = opts && 'target' in opts ? opts.target : null;
    if (target == null) dart.nullFailed(I[2], 326, 19, "target");
    this.foundTarget = false;
    this.includeInScreenshot = false;
    this.includeInRegularContext = true;
    this.target = target;
    if (!(target != null)) dart.assertFailed(null, I[2], 327, 15, "target != null");
    this.containerLayer = new widget_inspector._ScreenshotContainerLayer.new();
    ;
  }).prototype = widget_inspector._ScreenshotData.prototype;
  dart.addTypeTests(widget_inspector._ScreenshotData);
  dart.addTypeCaches(widget_inspector._ScreenshotData);
  dart.setGetterSignature(widget_inspector._ScreenshotData, () => ({
    __proto__: dart.getGetters(widget_inspector._ScreenshotData.__proto__),
    screenshotOffset: ui.Offset
  }));
  dart.setSetterSignature(widget_inspector._ScreenshotData, () => ({
    __proto__: dart.getSetters(widget_inspector._ScreenshotData.__proto__),
    screenshotOffset: ui.Offset
  }));
  dart.setLibraryUri(widget_inspector._ScreenshotData, I[3]);
  dart.setFieldSignature(widget_inspector._ScreenshotData, () => ({
    __proto__: dart.getFields(widget_inspector._ScreenshotData.__proto__),
    target: dart.finalFieldType(object$.RenderObject),
    containerLayer: dart.finalFieldType(layer.OffsetLayer),
    foundTarget: dart.fieldType(core.bool),
    includeInScreenshot: dart.fieldType(core.bool),
    includeInRegularContext: dart.fieldType(core.bool)
  }));
  widget_inspector._ScreenshotPaintingContext = class _ScreenshotPaintingContext extends object$.PaintingContext {
    get canvas() {
      if (dart.test(this[S$._data].includeInScreenshot)) {
        if (this[S$._screenshotCanvas] == null) {
          this[S$._startRecordingScreenshot]();
        }
        if (!(this[S$._screenshotCanvas] != null)) dart.assertFailed(null, I[2], 398, 14, "_screenshotCanvas != null");
        return dart.test(this[S$._data].includeInRegularContext) ? dart.nullCheck(this[S$._multicastCanvas]) : dart.nullCheck(this[S$._screenshotCanvas]);
      } else {
        if (!dart.test(this[S$._data].includeInRegularContext)) dart.assertFailed(null, I[2], 401, 14, "_data.includeInRegularContext");
        return super.canvas;
      }
    }
    get [S$._isScreenshotRecording]() {
      let hasScreenshotCanvas = this[S$._screenshotCanvas] != null;
      if (!dart.test(dart.fn(() => {
        if (hasScreenshotCanvas) {
          if (!(this[S$._screenshotCurrentLayer] != null)) dart.assertFailed(null, I[2], 410, 16, "_screenshotCurrentLayer != null");
          if (!(this[S$._screenshotRecorder] != null)) dart.assertFailed(null, I[2], 411, 16, "_screenshotRecorder != null");
          if (!(this[S$._screenshotCanvas] != null)) dart.assertFailed(null, I[2], 412, 16, "_screenshotCanvas != null");
        } else {
          if (!(this[S$._screenshotCurrentLayer] == null)) dart.assertFailed(null, I[2], 414, 16, "_screenshotCurrentLayer == null");
          if (!(this[S$._screenshotRecorder] == null)) dart.assertFailed(null, I[2], 415, 16, "_screenshotRecorder == null");
          if (!(this[S$._screenshotCanvas] == null)) dart.assertFailed(null, I[2], 416, 16, "_screenshotCanvas == null");
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[2], 408, 12, "() {\r\n      if (hasScreenshotCanvas) {\r\n        assert(_screenshotCurrentLayer != null);\r\n        assert(_screenshotRecorder != null);\r\n        assert(_screenshotCanvas != null);\r\n      } else {\r\n        assert(_screenshotCurrentLayer == null);\r\n        assert(_screenshotRecorder == null);\r\n        assert(_screenshotCanvas == null);\r\n      }\r\n      return true;\r\n    }()");
      return hasScreenshotCanvas;
    }
    [S$._startRecordingScreenshot]() {
      if (!dart.test(this[S$._data].includeInScreenshot)) dart.assertFailed(null, I[2], 424, 12, "_data.includeInScreenshot");
      if (!!dart.test(this[S$._isScreenshotRecording])) dart.assertFailed(null, I[2], 425, 12, "!_isScreenshotRecording");
      this[S$._screenshotCurrentLayer] = new layer.PictureLayer.new(this.estimatedBounds);
      this[S$._screenshotRecorder] = ui.PictureRecorder.new();
      this[S$._screenshotCanvas] = ui.Canvas.new(dart.nullCheck(this[S$._screenshotRecorder]));
      this[S$._data].containerLayer.append(dart.nullCheck(this[S$._screenshotCurrentLayer]));
      if (dart.test(this[S$._data].includeInRegularContext)) {
        this[S$._multicastCanvas] = new widget_inspector._MulticastCanvas.new({main: super.canvas, screenshot: dart.nullCheck(this[S$._screenshotCanvas])});
      } else {
        this[S$._multicastCanvas] = null;
      }
    }
    stopRecordingIfNeeded() {
      super.stopRecordingIfNeeded();
      this[S$._stopRecordingScreenshotIfNeeded]();
    }
    [S$._stopRecordingScreenshotIfNeeded]() {
      if (!dart.test(this[S$._isScreenshotRecording])) return;
      dart.nullCheck(this[S$._screenshotCurrentLayer]).picture = dart.nullCheck(this[S$._screenshotRecorder]).endRecording();
      this[S$._screenshotCurrentLayer] = null;
      this[S$._screenshotRecorder] = null;
      this[S$._multicastCanvas] = null;
      this[S$._screenshotCanvas] = null;
    }
    appendLayer(layer) {
      if (layer == null) dart.nullFailed(I[2], 458, 26, "layer");
      if (dart.test(this[S$._data].includeInRegularContext)) {
        super.appendLayer(layer);
        if (dart.test(this[S$._data].includeInScreenshot)) {
          if (!!dart.test(this[S$._isScreenshotRecording])) dart.assertFailed(null, I[2], 462, 16, "!_isScreenshotRecording");
          this[S$._data].containerLayer.append(new widget_inspector._ProxyLayer.new(layer));
        }
      } else {
        if (!!dart.test(this[S$._isScreenshotRecording])) dart.assertFailed(null, I[2], 469, 14, "!_isScreenshotRecording");
        if (!dart.test(this[S$._data].includeInScreenshot)) dart.assertFailed(null, I[2], 470, 14, "_data.includeInScreenshot");
        layer.remove();
        this[S$._data].containerLayer.append(layer);
        return;
      }
    }
    createChildContext(childLayer, bounds) {
      if (childLayer == null) dart.nullFailed(I[2], 478, 53, "childLayer");
      if (bounds == null) dart.nullFailed(I[2], 478, 70, "bounds");
      if (dart.test(this[S$._data].foundTarget)) {
        return super.createChildContext(childLayer, bounds);
      } else {
        return new widget_inspector._ScreenshotPaintingContext.new({containerLayer: childLayer, estimatedBounds: bounds, screenshotData: this[S$._data]});
      }
    }
    paintChild(child, offset) {
      if (child == null) dart.nullFailed(I[2], 493, 32, "child");
      if (offset == null) dart.nullFailed(I[2], 493, 46, "offset");
      let isScreenshotTarget = child == this[S$._data].target;
      if (isScreenshotTarget) {
        if (!!dart.test(this[S$._data].includeInScreenshot)) dart.assertFailed(null, I[2], 496, 14, "!_data.includeInScreenshot");
        if (!!dart.test(this[S$._data].foundTarget)) dart.assertFailed(null, I[2], 497, 14, "!_data.foundTarget");
        this[S$._data].foundTarget = true;
        this[S$._data].screenshotOffset = offset;
        this[S$._data].includeInScreenshot = true;
      }
      super.paintChild(child, offset);
      if (isScreenshotTarget) {
        this[S$._stopRecordingScreenshotIfNeeded]();
        this[S$._data].includeInScreenshot = false;
      }
    }
    static toImage(renderObject, renderBounds, opts) {
      if (renderObject == null) dart.nullFailed(I[2], 537, 18, "renderObject");
      if (renderBounds == null) dart.nullFailed(I[2], 538, 10, "renderBounds");
      let pixelRatio = opts && 'pixelRatio' in opts ? opts.pixelRatio : 1;
      if (pixelRatio == null) dart.nullFailed(I[2], 539, 12, "pixelRatio");
      let debugPaint = opts && 'debugPaint' in opts ? opts.debugPaint : false;
      if (debugPaint == null) dart.nullFailed(I[2], 540, 10, "debugPaint");
      let repaintBoundary = renderObject;
      while (repaintBoundary != null && !dart.test(repaintBoundary.isRepaintBoundary)) {
        repaintBoundary = object$.RenderObject.as(dart.nullCheck(repaintBoundary.parent));
      }
      if (!(repaintBoundary != null)) dart.assertFailed(null, I[2], 546, 12, "repaintBoundary != null");
      let data = new widget_inspector._ScreenshotData.new({target: renderObject});
      let context = new widget_inspector._ScreenshotPaintingContext.new({containerLayer: dart.nullCheck(repaintBoundary.debugLayer), estimatedBounds: repaintBoundary.paintBounds, screenshotData: data});
      if (renderObject == repaintBoundary) {
        data.containerLayer.append(new widget_inspector._ProxyLayer.new(dart.nullCheck(repaintBoundary.debugLayer)));
        data.foundTarget = true;
        let offsetLayer = layer.OffsetLayer.as(dart.nullCheck(repaintBoundary.debugLayer));
        data.screenshotOffset = offsetLayer.offset;
      } else {
        object$.PaintingContext.debugInstrumentRepaintCompositedChild(repaintBoundary, {customContext: context});
      }
      if (dart.test(debugPaint) && !dart.test(debug.debugPaintSizeEnabled)) {
        data.includeInRegularContext = false;
        context.stopRecordingIfNeeded();
        if (!dart.test(data.foundTarget)) dart.assertFailed(null, I[2], 579, 14, "data.foundTarget");
        data.includeInScreenshot = true;
        debug.debugPaintSizeEnabled = true;
        try {
          renderObject.debugPaint(context, data.screenshotOffset);
        } finally {
          debug.debugPaintSizeEnabled = false;
          context.stopRecordingIfNeeded();
        }
      }
      dart.nullCheck(repaintBoundary.debugLayer).buildScene(ui.SceneBuilder.new());
      return data.containerLayer.toImage(renderBounds, {pixelRatio: pixelRatio});
    }
  };
  (widget_inspector._ScreenshotPaintingContext.new = function(opts) {
    let containerLayer = opts && 'containerLayer' in opts ? opts.containerLayer : null;
    if (containerLayer == null) dart.nullFailed(I[2], 378, 29, "containerLayer");
    let estimatedBounds = opts && 'estimatedBounds' in opts ? opts.estimatedBounds : null;
    if (estimatedBounds == null) dart.nullFailed(I[2], 379, 19, "estimatedBounds");
    let screenshotData = opts && 'screenshotData' in opts ? opts.screenshotData : null;
    if (screenshotData == null) dart.nullFailed(I[2], 380, 30, "screenshotData");
    this[S$._screenshotCurrentLayer] = null;
    this[S$._screenshotRecorder] = null;
    this[S$._screenshotCanvas] = null;
    this[S$._multicastCanvas] = null;
    this[S$._data] = screenshotData;
    widget_inspector._ScreenshotPaintingContext.__proto__.new.call(this, containerLayer, estimatedBounds);
    ;
  }).prototype = widget_inspector._ScreenshotPaintingContext.prototype;
  dart.addTypeTests(widget_inspector._ScreenshotPaintingContext);
  dart.addTypeCaches(widget_inspector._ScreenshotPaintingContext);
  dart.setMethodSignature(widget_inspector._ScreenshotPaintingContext, () => ({
    __proto__: dart.getMethods(widget_inspector._ScreenshotPaintingContext.__proto__),
    [S$._startRecordingScreenshot]: dart.fnType(dart.void, []),
    [S$._stopRecordingScreenshotIfNeeded]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(widget_inspector._ScreenshotPaintingContext, () => ({
    __proto__: dart.getGetters(widget_inspector._ScreenshotPaintingContext.__proto__),
    [S$._isScreenshotRecording]: core.bool
  }));
  dart.setLibraryUri(widget_inspector._ScreenshotPaintingContext, I[3]);
  dart.setFieldSignature(widget_inspector._ScreenshotPaintingContext, () => ({
    __proto__: dart.getFields(widget_inspector._ScreenshotPaintingContext.__proto__),
    [S$._data]: dart.finalFieldType(widget_inspector._ScreenshotData),
    [S$._screenshotCurrentLayer]: dart.fieldType(dart.nullable(layer.PictureLayer)),
    [S$._screenshotRecorder]: dart.fieldType(dart.nullable(ui.PictureRecorder)),
    [S$._screenshotCanvas]: dart.fieldType(dart.nullable(ui.Canvas)),
    [S$._multicastCanvas]: dart.fieldType(dart.nullable(widget_inspector._MulticastCanvas))
  }));
  widget_inspector._DiagnosticsPathNode = class _DiagnosticsPathNode extends core.Object {};
  (widget_inspector._DiagnosticsPathNode.new = function(opts) {
    let node = opts && 'node' in opts ? opts.node : null;
    if (node == null) dart.nullFailed(I[2], 611, 19, "node");
    let children = opts && 'children' in opts ? opts.children : null;
    if (children == null) dart.nullFailed(I[2], 612, 19, "children");
    let childIndex = opts && 'childIndex' in opts ? opts.childIndex : null;
    this.node = node;
    this.children = children;
    this.childIndex = childIndex;
    if (!(node != null)) dart.assertFailed(null, I[2], 614, 15, "node != null");
    if (!(children != null)) dart.assertFailed(null, I[2], 615, 15, "children != null");
    ;
  }).prototype = widget_inspector._DiagnosticsPathNode.prototype;
  dart.addTypeTests(widget_inspector._DiagnosticsPathNode);
  dart.addTypeCaches(widget_inspector._DiagnosticsPathNode);
  dart.setLibraryUri(widget_inspector._DiagnosticsPathNode, I[3]);
  dart.setFieldSignature(widget_inspector._DiagnosticsPathNode, () => ({
    __proto__: dart.getFields(widget_inspector._DiagnosticsPathNode.__proto__),
    node: dart.finalFieldType(diagnostics$.DiagnosticsNode),
    children: dart.finalFieldType(core.List$(diagnostics$.DiagnosticsNode)),
    childIndex: dart.finalFieldType(dart.nullable(core.int))
  }));
  widget_inspector._InspectorReferenceData = class _InspectorReferenceData extends core.Object {};
  (widget_inspector._InspectorReferenceData.new = function(object) {
    if (object == null) dart.nullFailed(I[2], 673, 32, "object");
    this.count = 1;
    this.object = object;
    ;
  }).prototype = widget_inspector._InspectorReferenceData.prototype;
  dart.addTypeTests(widget_inspector._InspectorReferenceData);
  dart.addTypeCaches(widget_inspector._InspectorReferenceData);
  dart.setLibraryUri(widget_inspector._InspectorReferenceData, I[3]);
  dart.setFieldSignature(widget_inspector._InspectorReferenceData, () => ({
    __proto__: dart.getFields(widget_inspector._InspectorReferenceData.__proto__),
    object: dart.finalFieldType(core.Object),
    count: dart.fieldType(core.int)
  }));
  widget_inspector.WidgetInspectorService = class WidgetInspectorService extends core.Object {
    static get instance() {
      return widget_inspector.WidgetInspectorService._instance;
    }
    static set instance(instance) {
      if (instance == null) dart.nullFailed(I[2], 712, 46, "instance");
      widget_inspector.WidgetInspectorService._instance = instance;
    }
  };
  widget_inspector.WidgetInspectorService[dart.mixinOn] = Object => class WidgetInspectorService extends Object {
    get [S$._serializeRing]() {
      return this[S$._serializeRing$1];
    }
    set [S$._serializeRing](value) {
      super[S$._serializeRing] = value;
    }
    get [S$._serializeRingIndex]() {
      return this[S$._serializeRingIndex$1];
    }
    set [S$._serializeRingIndex](value) {
      this[S$._serializeRingIndex$1] = value;
    }
    get selection() {
      return this[S$.selection];
    }
    set selection(value) {
      super.selection = value;
    }
    get selectionChangedCallback() {
      return this[S$.selectionChangedCallback];
    }
    set selectionChangedCallback(value) {
      this[S$.selectionChangedCallback] = value;
    }
    get [S$._groups]() {
      return this[S$._groups$1];
    }
    set [S$._groups](value) {
      super[S$._groups] = value;
    }
    get [S$._idToReferenceData]() {
      return this[S$._idToReferenceData$1];
    }
    set [S$._idToReferenceData](value) {
      super[S$._idToReferenceData] = value;
    }
    get [S$._objectToId]() {
      return this[S$._objectToId$1];
    }
    set [S$._objectToId](value) {
      super[S$._objectToId] = value;
    }
    get [S$._nextId]() {
      return this[S$._nextId$1];
    }
    set [S$._nextId](value) {
      this[S$._nextId$1] = value;
    }
    get [S$._pubRootDirectories]() {
      return this[S$._pubRootDirectories$1];
    }
    set [S$._pubRootDirectories](value) {
      this[S$._pubRootDirectories$1] = value;
    }
    get [S$._trackRebuildDirtyWidgets]() {
      return this[S$._trackRebuildDirtyWidgets$1];
    }
    set [S$._trackRebuildDirtyWidgets](value) {
      this[S$._trackRebuildDirtyWidgets$1] = value;
    }
    get [S$._trackRepaintWidgets]() {
      return this[S$._trackRepaintWidgets$1];
    }
    set [S$._trackRepaintWidgets](value) {
      this[S$._trackRepaintWidgets$1] = value;
    }
    get [S$._structuredExceptionHandler]() {
      return this[S$._structuredExceptionHandler$1];
    }
    set [S$._structuredExceptionHandler](value) {
      this[S$._structuredExceptionHandler$1] = value;
    }
    get [S$.__WidgetInspectorService__registerServiceExtensionCallback]() {
      return this[S$._$35WidgetInspectorService$35_registerServiceExtensionCallback];
    }
    set [S$.__WidgetInspectorService__registerServiceExtensionCallback](value) {
      this[S$._$35WidgetInspectorService$35_registerServiceExtensionCallback] = value;
    }
    get [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet]() {
      return this[S$._$35WidgetInspectorService$35_registerServiceExtensionCallback$35isSet];
    }
    set [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet](value) {
      this[S$._$35WidgetInspectorService$35_registerServiceExtensionCallback$35isSet] = value;
    }
    get [S$._errorsSinceReload]() {
      return this[S$._errorsSinceReload$1];
    }
    set [S$._errorsSinceReload](value) {
      this[S$._errorsSinceReload$1] = value;
    }
    get [S$._widgetCreationTracked]() {
      return this[S$._widgetCreationTracked$1];
    }
    set [S$._widgetCreationTracked](value) {
      this[S$._widgetCreationTracked$1] = value;
    }
    get [S$.__WidgetInspectorService__frameStart]() {
      return this[S$._$35WidgetInspectorService$35_frameStart];
    }
    set [S$.__WidgetInspectorService__frameStart](value) {
      this[S$._$35WidgetInspectorService$35_frameStart] = value;
    }
    get [S$.__WidgetInspectorService__frameStart_isSet]() {
      return this[S$._$35WidgetInspectorService$35_frameStart$35isSet];
    }
    set [S$.__WidgetInspectorService__frameStart_isSet](value) {
      this[S$._$35WidgetInspectorService$35_frameStart$35isSet] = value;
    }
    get [S$._rebuildStats]() {
      return this[S$._rebuildStats$1];
    }
    set [S$._rebuildStats](value) {
      super[S$._rebuildStats] = value;
    }
    get [S$._repaintStats]() {
      return this[S$._repaintStats$1];
    }
    set [S$._repaintStats](value) {
      super[S$._repaintStats] = value;
    }
    get [S$._registerServiceExtensionCallback]() {
      let t0;
      return dart.test(this[S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet]) ? (t0 = this[S$.__WidgetInspectorService__registerServiceExtensionCallback], t0) : dart.throw(new _internal.LateError.fieldNI("_registerServiceExtensionCallback"));
    }
    set [S$._registerServiceExtensionCallback](t0) {
      if (t0 == null) dart.nullFailed(I[2], 746, 42, "null");
      this[S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet] = true;
      this[S$.__WidgetInspectorService__registerServiceExtensionCallback] = t0;
    }
    registerServiceExtension(opts) {
      let t2, t1;
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 757, 21, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 758, 39, "callback");
      t1 = "inspector." + dart.str(name);
      t2 = callback;
      this[S$._registerServiceExtensionCallback]({name: t1, callback: t2});
    }
    [S$._registerSignalServiceExtension](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 769, 21, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 770, 43, "callback");
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 774, 38, "parameters");
          return async.async(T$.MapOfString$ObjectN(), function*() {
            return new (T$.IdentityMapOfString$ObjectN()).from(["result", (yield callback())]);
          });
        }, T$.MapOfString$StringToFutureOfMapOfString$ObjectN())});
    }
    [S$._registerObjectGroupServiceExtension](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 787, 21, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 788, 61, "callback");
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 792, 38, "parameters");
          return async.async(T$.MapOfString$ObjectN(), function*() {
            return new (T$.IdentityMapOfString$ObjectN()).from(["result", (yield callback(dart.nullCheck(parameters[S$.$_get]("objectGroup"))))]);
          });
        }, T$.MapOfString$StringToFutureOfMapOfString$ObjectN())});
    }
    [S$._registerBoolServiceExtension](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 811, 21, "name");
      let getter = opts && 'getter' in opts ? opts.getter : null;
      if (getter == null) dart.nullFailed(I[2], 812, 37, "getter");
      let setter = opts && 'setter' in opts ? opts.setter : null;
      if (setter == null) dart.nullFailed(I[2], 813, 37, "setter");
      if (!(name != null)) dart.assertFailed(null, I[2], 815, 12, "name != null");
      if (!(getter != null)) dart.assertFailed(null, I[2], 816, 12, "getter != null");
      if (!(setter != null)) dart.assertFailed(null, I[2], 817, 12, "setter != null");
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 820, 38, "parameters");
          return async.async(T$.MapOfString$dynamic(), (function*() {
            if (dart.test(parameters[S$.$containsKey]("enabled"))) {
              let value = parameters[S$.$_get]("enabled") === "true";
              yield setter(value);
              this[S$._postExtensionStateChangedEvent](name, value);
            }
            return new (T$.IdentityMapOfString$dynamic()).from(["enabled", dart.test(yield getter()) ? "true" : "false"]);
          }).bind(this));
        }, T$.MapOfString$StringToFutureOfMapOfString$dynamic())});
    }
    [S$._postExtensionStateChangedEvent](name, value) {
      if (name == null) dart.nullFailed(I[2], 841, 47, "name");
      this.postEvent("Flutter.ServiceExtensionStateChanged", new (T$.IdentityMapOfString$ObjectN()).from(["extension", "ext.flutter.inspector." + dart.str(name), "value", value]));
    }
    [S$._registerServiceExtensionWithArg](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 856, 21, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 857, 79, "callback");
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 861, 38, "parameters");
          return async.async(T$.MapOfString$ObjectN(), function*() {
            if (!dart.test(parameters[S$.$containsKey]("objectGroup"))) dart.assertFailed(null, I[2], 862, 16, "parameters.containsKey('objectGroup')");
            return new (T$.IdentityMapOfString$ObjectN()).from(["result", (yield callback(parameters[S$.$_get]("arg"), dart.nullCheck(parameters[S$.$_get]("objectGroup"))))]);
          });
        }, T$.MapOfString$StringToFutureOfMapOfString$ObjectN())});
    }
    [S$._registerServiceExtensionVarArgs](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 874, 21, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 875, 60, "callback");
      this.registerServiceExtension({name: name, callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 879, 38, "parameters");
          return async.async(T$.MapOfString$ObjectN(), function*() {
            let args = T$.JSArrayOfString().of([]);
            let index = 0;
            while (true) {
              let name = "arg" + dart.str(index);
              if (dart.test(parameters[S$.$containsKey](name))) {
                args[S$.$add](dart.nullCheck(parameters[S$.$_get](name)));
              } else {
                break;
              }
              index = index + 1;
            }
            if (!(index === parameters[S$.$length] || index === dart.notNull(parameters[S$.$length]) - 1 && dart.test(parameters[S$.$containsKey]("isolateId")))) dart.assertFailed(null, I[2], 893, 16, "index == parameters.length || (index == parameters.length - 1 && parameters.containsKey('isolateId'))");
            return new (T$.IdentityMapOfString$ObjectN()).from(["result", (yield callback(args))]);
          });
        }, T$.MapOfString$StringToFutureOfMapOfString$ObjectN())});
    }
    forceRebuild() {
      let binding = dart.nullCheck(binding$5.WidgetsBinding.instance);
      if (binding.renderViewElement != null) {
        dart.nullCheck(binding.buildOwner).reassemble(dart.nullCheck(binding.renderViewElement));
        return binding.endOfFrame;
      }
      return T$.FutureOfvoid().value();
    }
    [S$._reportError](details) {
      if (details == null) dart.nullFailed(I[2], 918, 41, "details");
      let errorJson = dart.nullCheck(this[S$._nodeToJson](details.toDiagnosticsNode(), new widget_inspector.InspectorSerializationDelegate.new({groupName: "console-group", subtreeDepth: 5, includeProperties: true, expandPropertyValues: true, maxDescendentsTruncatableNode: 5, service: this})));
      errorJson[S$.$_set]("errorsSinceReload", this[S$._errorsSinceReload]);
      if (this[S$._errorsSinceReload] === 0) {
        errorJson[S$.$_set]("renderedErrorText", new diagnostics$.TextTreeRenderer.new({wrapWidth: 100, wrapWidthProperties: 100, maxDescendentsTruncatableNode: 5}).render(details.toDiagnosticsNode({style: diagnostics$.DiagnosticsTreeStyle.error}))[S$.$trimRight]());
      } else {
        errorJson[S$.$_set]("renderedErrorText", "Another exception was thrown: " + dart.str(details.summary));
      }
      this[S$._errorsSinceReload] = dart.notNull(this[S$._errorsSinceReload]) + 1;
      this.postEvent("Flutter.Error", errorJson);
    }
    [S$._resetErrorCount]() {
      this[S$._errorsSinceReload] = 0;
    }
    isStructuredErrorsEnabled() {
      let enabled = false;
      if (!dart.test(dart.fn(() => {
        enabled = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[2], 963, 12, "() {\r\n      // TODO(kenz): add support for structured errors on the web.\r\n      enabled = const bool.fromEnvironment('flutter.inspector.structuredErrors', defaultValue: !kIsWeb);\r\n      return true;\r\n    }()");
      return enabled;
    }
    initServiceExtensions(registerServiceExtensionCallback) {
      if (registerServiceExtensionCallback == null) dart.nullFailed(I[2], 978, 64, "registerServiceExtensionCallback");
      this[S$._structuredExceptionHandler] = dart.bind(this, S$._reportError);
      if (dart.test(this.isStructuredErrorsEnabled())) {
        assertions.FlutterError.onError = this[S$._structuredExceptionHandler];
      }
      this[S$._registerServiceExtensionCallback] = registerServiceExtensionCallback;
      if (!!dart.test(widget_inspector.WidgetInspectorService._debugServiceExtensionsRegistered)) dart.assertFailed(null, I[2], 984, 12, "!_debugServiceExtensionsRegistered");
      if (!dart.test(dart.fn(() => {
        widget_inspector.WidgetInspectorService._debugServiceExtensionsRegistered = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[2], 985, 12, "() {\r\n      _debugServiceExtensionsRegistered = true;\r\n      return true;\r\n    }()");
      dart.nullCheck(binding$.SchedulerBinding.instance).addPersistentFrameCallback(dart.bind(this, S$._onFrameStart));
      let defaultExceptionHandler = assertions.FlutterError.presentError;
      this[S$._registerBoolServiceExtension]({name: "structuredErrors", getter: dart.fn(() => async.async(core.bool, (function*() {
          return dart.equals(assertions.FlutterError.presentError, this[S$._structuredExceptionHandler]);
        }).bind(this)), T$.VoidToFutureOfbool()), setter: dart.fn(value => {
          if (value == null) dart.nullFailed(I[2], 997, 21, "value");
          assertions.FlutterError.presentError = dart.test(value) ? dart.nullCheck(this[S$._structuredExceptionHandler]) : defaultExceptionHandler;
          return T$.FutureOfvoid().value();
        }, T$.boolToFutureOfvoid())});
      this[S$._registerBoolServiceExtension]({name: "show", getter: dart.fn(() => async.async(core.bool, function*() {
          return app.WidgetsApp.debugShowWidgetInspectorOverride;
        }), T$.VoidToFutureOfbool()), setter: dart.fn(value => {
          if (value == null) dart.nullFailed(I[2], 1006, 21, "value");
          if (app.WidgetsApp.debugShowWidgetInspectorOverride == value) {
            return T$.FutureOfvoid().value();
          }
          app.WidgetsApp.debugShowWidgetInspectorOverride = value;
          return this.forceRebuild();
        }, T$.boolToFutureOfvoid())});
      if (dart.test(this.isWidgetCreationTracked())) {
        this[S$._registerBoolServiceExtension]({name: "trackRebuildDirtyWidgets", getter: dart.fn(() => async.async(core.bool, (function*() {
            return this[S$._trackRebuildDirtyWidgets];
          }).bind(this)), T$.VoidToFutureOfbool()), setter: dart.fn(value => {
            if (value == null) dart.nullFailed(I[2], 1021, 23, "value");
            return async.async(dart.void, (function*() {
              if (value == this[S$._trackRebuildDirtyWidgets]) {
                return;
              }
              this[S$._rebuildStats].resetCounts();
              this[S$._trackRebuildDirtyWidgets] = value;
              if (dart.test(value)) {
                if (!(debug$0.debugOnRebuildDirtyWidget == null)) dart.assertFailed(null, I[2], 1028, 20, "debugOnRebuildDirtyWidget == null");
                debug$0.debugOnRebuildDirtyWidget = dart.bind(this, S$._onRebuildWidget);
                yield this.forceRebuild();
                return;
              } else {
                debug$0.debugOnRebuildDirtyWidget = null;
                return;
              }
            }).bind(this));
          }, T$.boolToFutureOfvoid())});
        this[S$._registerBoolServiceExtension]({name: "trackRepaintWidgets", getter: dart.fn(() => async.async(core.bool, (function*() {
            return this[S$._trackRepaintWidgets];
          }).bind(this)), T$.VoidToFutureOfbool()), setter: dart.fn(value => {
            if (value == null) dart.nullFailed(I[2], 1044, 23, "value");
            return async.async(dart.void, (function*() {
              if (value == this[S$._trackRepaintWidgets]) {
                return;
              }
              this[S$._repaintStats].resetCounts();
              this[S$._trackRepaintWidgets] = value;
              if (dart.test(value)) {
                if (!(debug.debugOnProfilePaint == null)) dart.assertFailed(null, I[2], 1051, 20, "debugOnProfilePaint == null");
                debug.debugOnProfilePaint = dart.bind(this, S$._onPaint);
                function markTreeNeedsPaint(renderObject) {
                  if (renderObject == null) dart.nullFailed(I[2], 1055, 50, "renderObject");
                  renderObject.markNeedsPaint();
                  renderObject.visitChildren(markTreeNeedsPaint);
                }
                dart.fn(markTreeNeedsPaint, T$.RenderObjectTovoid());
                let root = dart.nullCheck(binding.RendererBinding.instance).renderView;
                markTreeNeedsPaint(root);
              } else {
                debug.debugOnProfilePaint = null;
              }
            }).bind(this));
          }, T$.boolToFutureOfvoid())});
      }
      this[S$._registerSignalServiceExtension]({name: "disposeAllGroups", callback: dart.fn(() => async.async(core.Null, (function*() {
          this.disposeAllGroups();
          return null;
        }).bind(this)), T$.VoidToFutureOfNull())});
      this[S$._registerObjectGroupServiceExtension]({name: "disposeGroup", callback: dart.fn(name => {
          if (name == null) dart.nullFailed(I[2], 1077, 25, "name");
          return async.async(core.Null, (function*() {
            this.disposeGroup(name);
            return null;
          }).bind(this));
        }, T$.StringToFutureOfNull())});
      this[S$._registerSignalServiceExtension]({name: "isWidgetTreeReady", callback: dart.bind(this, 'isWidgetTreeReady')});
      this[S$._registerServiceExtensionWithArg]({name: "disposeId", callback: dart.fn((objectId, objectGroup) => {
          if (objectGroup == null) dart.nullFailed(I[2], 1088, 43, "objectGroup");
          return async.async(core.Null, (function*() {
            this.disposeId(objectId, objectGroup);
            return null;
          }).bind(this));
        }, T$.StringNAndStringToFutureOfNull())});
      this[S$._registerServiceExtensionVarArgs]({name: "setPubRootDirectories", callback: dart.fn(args => {
          if (args == null) dart.nullFailed(I[2], 1095, 31, "args");
          return async.async(core.Null, (function*() {
            this.setPubRootDirectories(args);
            return null;
          }).bind(this));
        }, T$.ListOfStringToFutureOfNull())});
      this[S$._registerServiceExtensionWithArg]({name: "setSelectionById", callback: dart.bind(this, 'setSelectionById')});
      this[S$._registerServiceExtensionWithArg]({name: "getParentChain", callback: dart.bind(this, S$._getParentChain)});
      this[S$._registerServiceExtensionWithArg]({name: "getProperties", callback: dart.bind(this, S$._getProperties)});
      this[S$._registerServiceExtensionWithArg]({name: "getChildren", callback: dart.bind(this, S$._getChildren)});
      this[S$._registerServiceExtensionWithArg]({name: "getChildrenSummaryTree", callback: dart.bind(this, S$._getChildrenSummaryTree)});
      this[S$._registerServiceExtensionWithArg]({name: "getChildrenDetailsSubtree", callback: dart.bind(this, S$._getChildrenDetailsSubtree)});
      this[S$._registerObjectGroupServiceExtension]({name: "getRootWidget", callback: dart.bind(this, S$._getRootWidget)});
      this[S$._registerObjectGroupServiceExtension]({name: "getRootRenderObject", callback: dart.bind(this, S$._getRootRenderObject)});
      this[S$._registerObjectGroupServiceExtension]({name: "getRootWidgetSummaryTree", callback: dart.bind(this, S$._getRootWidgetSummaryTree)});
      this.registerServiceExtension({name: "getDetailsSubtree", callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 1141, 38, "parameters");
          return async.async(T$.MapOfString$ObjectN(), (function*() {
            if (!dart.test(parameters[S$.$containsKey]("objectGroup"))) dart.assertFailed(null, I[2], 1142, 16, "parameters.containsKey('objectGroup')");
            let subtreeDepth = parameters[S$.$_get]("subtreeDepth");
            return new (T$.IdentityMapOfString$ObjectN()).from(["result", this[S$._getDetailsSubtree](parameters[S$.$_get]("arg"), parameters[S$.$_get]("objectGroup"), subtreeDepth != null ? core.int.parse(subtreeDepth) : 2)]);
          }).bind(this));
        }, T$.MapOfString$StringToFutureOfMapOfString$ObjectN())});
      this[S$._registerServiceExtensionWithArg]({name: "getSelectedRenderObject", callback: dart.bind(this, S$._getSelectedRenderObject)});
      this[S$._registerServiceExtensionWithArg]({name: "getSelectedWidget", callback: dart.bind(this, S$._getSelectedWidget)});
      this[S$._registerServiceExtensionWithArg]({name: "getSelectedSummaryWidget", callback: dart.bind(this, S$._getSelectedSummaryWidget)});
      this[S$._registerSignalServiceExtension]({name: "isWidgetCreationTracked", callback: dart.bind(this, 'isWidgetCreationTracked')});
      this.registerServiceExtension({name: "screenshot", callback: dart.fn(parameters => {
          if (parameters == null) dart.nullFailed(I[2], 1172, 38, "parameters");
          return async.async(T$.MapOfString$ObjectN(), (function*() {
            if (!dart.test(parameters[S$.$containsKey]("id"))) dart.assertFailed(null, I[2], 1173, 16, "parameters.containsKey('id')");
            if (!dart.test(parameters[S$.$containsKey]("width"))) dart.assertFailed(null, I[2], 1174, 16, "parameters.containsKey('width')");
            if (!dart.test(parameters[S$.$containsKey]("height"))) dart.assertFailed(null, I[2], 1175, 16, "parameters.containsKey('height')");
            let image = (yield this.screenshot(this.toObject(parameters[S$.$_get]("id")), {width: core.double.parse(dart.nullCheck(parameters[S$.$_get]("width"))), height: core.double.parse(dart.nullCheck(parameters[S$.$_get]("height"))), margin: dart.test(parameters[S$.$containsKey]("margin")) ? core.double.parse(dart.nullCheck(parameters[S$.$_get]("margin"))) : 0.0, maxPixelRatio: dart.test(parameters[S$.$containsKey]("maxPixelRatio")) ? core.double.parse(dart.nullCheck(parameters[S$.$_get]("maxPixelRatio"))) : 1.0, debugPaint: parameters[S$.$_get]("debugPaint") === "true"}));
            if (image == null) {
              return new (T$.IdentityMapOfString$ObjectN()).from(["result", null]);
            }
            let byteData = (yield image.toByteData({format: ui.ImageByteFormat.png}));
            return new (T$.IdentityMapOfString$Object()).from(["result", convert.base64.encoder.convert(typed_data.Uint8List.view(dart.nullCheck(byteData)[S$.$buffer]))]);
          }).bind(this));
        }, T$.MapOfString$StringToFutureOfMapOfString$ObjectN())});
    }
    [S$._clearStats]() {
      this[S$._rebuildStats].resetCounts();
      this[S$._repaintStats].resetCounts();
    }
    disposeAllGroups() {
      this[S$._groups][S$.$clear]();
      this[S$._idToReferenceData][S$.$clear]();
      this[S$._objectToId][S$.$clear]();
      this[S$._nextId] = 0;
    }
    disposeGroup(name) {
      if (name == null) dart.nullFailed(I[2], 1221, 28, "name");
      let references = this[S$._groups][S$.$remove](name);
      if (references == null) return;
      references[S$.$forEach](dart.bind(this, S$._decrementReferenceCount));
    }
    [S$._decrementReferenceCount](reference) {
      let t1;
      if (reference == null) dart.nullFailed(I[2], 1228, 57, "reference");
      t1 = reference;
      t1.count = dart.notNull(t1.count) - 1;
      if (!(dart.notNull(reference.count) >= 0)) dart.assertFailed(null, I[2], 1230, 12, "reference.count >= 0");
      if (reference.count === 0) {
        let id = this[S$._objectToId][S$.$remove](reference.object);
        if (!(id != null)) dart.assertFailed(null, I[2], 1233, 14, "id != null");
        this[S$._idToReferenceData][S$.$remove](id);
      }
    }
    toId(object, groupName) {
      let t1;
      if (groupName == null) dart.nullFailed(I[2], 1241, 39, "groupName");
      if (object == null) return null;
      let group = this[S$._groups][S$.$putIfAbsent](groupName, dart.fn(() => new (T$._IdentityHashSetOf_InspectorReferenceData()).new(), T$.VoidToSetOf_InspectorReferenceData()));
      let id = this[S$._objectToId][S$.$_get](object);
      let referenceData = null;
      if (id == null) {
        id = "inspector-" + dart.str(this[S$._nextId]);
        this[S$._nextId] = dart.notNull(this[S$._nextId]) + 1;
        this[S$._objectToId][S$.$_set](object, id);
        referenceData = new widget_inspector._InspectorReferenceData.new(object);
        this[S$._idToReferenceData][S$.$_set](id, referenceData);
        group.add(referenceData);
      } else {
        referenceData = dart.nullCheck(this[S$._idToReferenceData][S$.$_get](id));
        if (dart.test(group.add(referenceData))) {
          t1 = referenceData;
          t1.count = dart.notNull(t1.count) + 1;
        }
      }
      return id;
    }
    isWidgetTreeReady(groupName = null) {
      return binding$5.WidgetsBinding.instance != null && dart.test(dart.nullCheck(binding$5.WidgetsBinding.instance).debugDidSendFirstFrameEvent);
    }
    toObject(id, groupName = null) {
      if (id == null) return null;
      let data = this[S$._idToReferenceData][S$.$_get](id);
      if (data == null) {
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Id does not exist.")])));
      }
      return data.object;
    }
    toObjectForSourceLocation(id, groupName = null) {
      if (id == null) dart.nullFailed(I[2], 1298, 44, "id");
      let object = this.toObject(id);
      if (framework.Element.is(object)) {
        return object.widget;
      }
      return object;
    }
    disposeId(id, groupName) {
      let t1;
      if (groupName == null) dart.nullFailed(I[2], 1312, 37, "groupName");
      if (id == null) return;
      let referenceData = this[S$._idToReferenceData][S$.$_get](id);
      if (referenceData == null) dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Id does not exist")])));
      if ((t1 = this[S$._groups][S$.$_get](groupName), t1 == null ? null : t1.remove(referenceData)) !== true) dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Id is not in group")])));
      this[S$._decrementReferenceCount](referenceData);
    }
    setPubRootDirectories(pubRootDirectories) {
      if (pubRootDirectories == null) dart.nullFailed(I[2], 1330, 43, "pubRootDirectories");
      this[S$._pubRootDirectories] = pubRootDirectories[S$.$map](core.String, dart.fn(directory => {
        if (directory == null) dart.nullFailed(I[2], 1332, 28, "directory");
        return core.Uri.parse(directory).path;
      }, T$.StringToString()))[S$.$toList]();
    }
    setSelectionById(id, groupName = null) {
      return this.setSelection(this.toObject(id), groupName);
    }
    setSelection(object, groupName = null) {
      if (framework.Element.is(object) || object$.RenderObject.is(object)) {
        if (framework.Element.is(object)) {
          if (dart.equals(object, this.selection.currentElement)) {
            return false;
          }
          this.selection.currentElement = object;
          developer.inspect(this.selection.currentElement);
        } else {
          if (dart.equals(object, this.selection.current)) {
            return false;
          }
          this.selection.current = object$.RenderObject.as(dart.nullCheck(object));
          developer.inspect(this.selection.current);
        }
        if (this.selectionChangedCallback != null) {
          if (dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase == binding$.SchedulerPhase.idle) {
            dart.nullCheck(this.selectionChangedCallback)();
          } else {
            dart.nullCheck(binding$.SchedulerBinding.instance).scheduleTask(dart.void, dart.nullCheck(this.selectionChangedCallback), priority.Priority.touch);
          }
        }
        return true;
      }
      return false;
    }
    [S$._devToolsInspectorUriForElement](element) {
      if (element == null) dart.nullFailed(I[2], 1389, 51, "element");
      if (debug$.activeDevToolsServerAddress != null && debug$.connectedVmServiceUri != null) {
        let inspectorRef = this.toId(element, "console-group");
        if (inspectorRef != null) {
          return this.devToolsInspectorUri(inspectorRef);
        }
      }
      return null;
    }
    devToolsInspectorUri(inspectorRef) {
      if (inspectorRef == null) dart.nullFailed(I[2], 1402, 38, "inspectorRef");
      if (!(debug$.activeDevToolsServerAddress != null)) dart.assertFailed(null, I[2], 1403, 12, "activeDevToolsServerAddress != null");
      if (!(debug$.connectedVmServiceUri != null)) dart.assertFailed(null, I[2], 1404, 12, "connectedVmServiceUri != null");
      let uri = core.Uri.parse(dart.nullCheck(debug$.activeDevToolsServerAddress)).replace({queryParameters: new (T$.IdentityMapOfString$dynamic()).from(["uri", dart.nullCheck(debug$.connectedVmServiceUri), "inspectorRef", inspectorRef])});
      let devToolsInspectorUri = dart.toString(uri);
      let startQueryParamIndex = devToolsInspectorUri[S$.$indexOf]("?");
      if (!(startQueryParamIndex !== -1)) dart.assertFailed(null, I[2], 1422, 12, "startQueryParamIndex != -1");
      return devToolsInspectorUri[S$.$substring](0, startQueryParamIndex) + "/#/inspector" + devToolsInspectorUri[S$.$substring](startQueryParamIndex);
    }
    getParentChain(id, groupName) {
      if (id == null) dart.nullFailed(I[2], 1434, 32, "id");
      if (groupName == null) dart.nullFailed(I[2], 1434, 43, "groupName");
      return this[S$._safeJsonEncode](this[S$._getParentChain](id, groupName));
    }
    [S$._getParentChain](id, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1438, 52, "groupName");
      let value = this.toObject(id);
      let path = null;
      if (object$.RenderObject.is(value))
        path = dart.nullCheck(this[S$._getRenderObjectParentChain](value, groupName));
      else if (framework.Element.is(value))
        path = this[S$._getElementParentChain](value, groupName);
      else
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get parent chain for node of type " + dart.str(dart.runtimeType(value)))])));
      return path[S$.$map](T$.ObjectN(), dart.fn(node => {
        if (node == null) dart.nullFailed(I[2], 1448, 52, "node");
        return this[S$._pathNodeToJson](node, new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}));
      }, T$._DiagnosticsPathNodeToMapNOfString$ObjectN()))[S$.$toList]();
    }
    [S$._pathNodeToJson](pathNode, delegate) {
      if (delegate == null) dart.nullFailed(I[2], 1454, 104, "delegate");
      if (pathNode == null) return null;
      return new (T$.IdentityMapOfString$ObjectN()).from(["node", this[S$._nodeToJson](pathNode.node, delegate), "children", this[S$._nodesToJson](pathNode.children, delegate, {parent: pathNode.node}), "childIndex", pathNode.childIndex]);
    }
    [S$._getRawElementParentChain](element, opts) {
      if (element == null) dart.nullFailed(I[2], 1464, 51, "element");
      let numLocalParents = opts && 'numLocalParents' in opts ? opts.numLocalParents : null;
      let elements = element.debugGetDiagnosticChain();
      if (numLocalParents != null) {
        for (let i = 0; i < dart.notNull(elements[S$.$length]); i = i + 1) {
          if (dart.test(this[S$._isValueCreatedByLocalProject](elements[S$.$_get](i)))) {
            numLocalParents = dart.nullCheck(numLocalParents) - 1;
            if (dart.notNull(numLocalParents) <= 0) {
              elements = elements[S$.$take](i + 1)[S$.$toList]();
              break;
            }
          }
        }
      }
      return elements[S$.$reversed][S$.$toList]();
    }
    [S$._getElementParentChain](element, groupName, opts) {
      let t1;
      if (element == null) dart.nullFailed(I[2], 1480, 61, "element");
      if (groupName == null) dart.nullFailed(I[2], 1480, 77, "groupName");
      let numLocalParents = opts && 'numLocalParents' in opts ? opts.numLocalParents : null;
      t1 = widget_inspector._followDiagnosticableChain(this[S$._getRawElementParentChain](element, {numLocalParents: numLocalParents}));
      return t1 == null ? C[3] || CT.C3 : t1;
    }
    [S$._getRenderObjectParentChain](renderObject, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1486, 94, "groupName");
      let chain = T$.JSArrayOfRenderObject().of([]);
      while (renderObject != null) {
        chain[S$.$add](renderObject);
        renderObject = T$.RenderObjectN().as(renderObject.parent);
      }
      return widget_inspector._followDiagnosticableChain(chain[S$.$reversed][S$.$toList]());
    }
    [S$._nodeToJson](node, delegate) {
      let t1;
      if (delegate == null) dart.nullFailed(I[2], 1497, 36, "delegate");
      t1 = node;
      return t1 == null ? null : t1.toJsonMap(delegate);
    }
    [S$._isValueCreatedByLocalProject](value) {
      let creationLocation = widget_inspector._getCreationLocation(value);
      if (creationLocation == null) {
        return false;
      }
      return this[S$._isLocalCreationLocation](creationLocation);
    }
    [S$._isLocalCreationLocation](location) {
      if (location == null || location.file == null) {
        return false;
      }
      let file = core.Uri.parse(location.file).path;
      if (this[S$._pubRootDirectories] == null) {
        return !file[S$.$contains]("packages/flutter/");
      }
      for (let directory of dart.nullCheck(this[S$._pubRootDirectories])) {
        if (file[S$.$startsWith](directory)) {
          return true;
        }
      }
      return false;
    }
    [S$._safeJsonEncode](object) {
      let jsonString = convert.json.encode(object);
      this[S$._serializeRing][S$.$_set](this[S$._serializeRingIndex], jsonString);
      this[S$._serializeRingIndex] = (dart.notNull(this[S$._serializeRingIndex]) + 1)[S$.$modulo](this[S$._serializeRing][S$.$length]);
      return jsonString;
    }
    [S$._truncateNodes](nodes, maxDescendentsTruncatableNode) {
      if (nodes == null) dart.nullFailed(I[2], 1545, 66, "nodes");
      if (maxDescendentsTruncatableNode == null) dart.nullFailed(I[2], 1545, 77, "maxDescendentsTruncatableNode");
      if (dart.test(nodes[S$.$every](dart.fn(node => {
        if (node == null) dart.nullFailed(I[2], 1546, 38, "node");
        return framework.Element.is(node.value);
      }, T$.DiagnosticsNodeTobool()))) && dart.test(this.isWidgetCreationTracked())) {
        let localNodes = nodes[S$.$where](dart.fn(node => {
          if (node == null) dart.nullFailed(I[2], 1548, 33, "node");
          return this[S$._isValueCreatedByLocalProject](node.value);
        }, T$.DiagnosticsNodeTobool()))[S$.$toList]();
        if (dart.test(localNodes[S$.$isNotEmpty])) {
          return localNodes;
        }
      }
      return nodes[S$.$take](maxDescendentsTruncatableNode)[S$.$toList]();
    }
    [S$._nodesToJson](nodes, delegate, opts) {
      if (nodes == null) dart.nullFailed(I[2], 1558, 27, "nodes");
      if (delegate == null) dart.nullFailed(I[2], 1559, 36, "delegate");
      let parent = opts && 'parent' in opts ? opts.parent : null;
      return diagnostics$.DiagnosticsNode.toJsonList(nodes, parent, delegate);
    }
    getProperties(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 1568, 31, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 1568, 57, "groupName");
      return this[S$._safeJsonEncode](this[S$._getProperties](diagnosticsNodeId, groupName));
    }
    [S$._getProperties](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1572, 65, "groupName");
      let node = T$.DiagnosticsNodeN().as(this.toObject(diagnosticsNodeId));
      return this[S$._nodesToJson](node == null ? C[4] || CT.C4 : node.getProperties(), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}), {parent: node});
    }
    getChildren(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 1579, 29, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 1579, 55, "groupName");
      return this[S$._safeJsonEncode](this[S$._getChildren](diagnosticsNodeId, groupName));
    }
    [S$._getChildren](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1583, 63, "groupName");
      let node = T$.DiagnosticsNodeN().as(this.toObject(diagnosticsNodeId));
      let delegate = new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this});
      return this[S$._nodesToJson](node == null ? C[4] || CT.C4 : this[S$._getChildrenFiltered](node, delegate), delegate, {parent: node});
    }
    getChildrenSummaryTree(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 1603, 40, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 1603, 66, "groupName");
      return this[S$._safeJsonEncode](this[S$._getChildrenSummaryTree](diagnosticsNodeId, groupName));
    }
    [S$._getChildrenSummaryTree](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1607, 74, "groupName");
      let node = T$.DiagnosticsNodeN().as(this.toObject(diagnosticsNodeId));
      let delegate = new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, summaryTree: true, service: this});
      return this[S$._nodesToJson](node == null ? C[4] || CT.C4 : this[S$._getChildrenFiltered](node, delegate), delegate, {parent: node});
    }
    getChildrenDetailsSubtree(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 1619, 43, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 1619, 69, "groupName");
      return this[S$._safeJsonEncode](this[S$._getChildrenDetailsSubtree](diagnosticsNodeId, groupName));
    }
    [S$._getChildrenDetailsSubtree](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1623, 77, "groupName");
      let node = T$.DiagnosticsNodeN().as(this.toObject(diagnosticsNodeId));
      let delegate = new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, subtreeDepth: 1, includeProperties: true, service: this});
      return this[S$._nodesToJson](node == null ? C[4] || CT.C4 : this[S$._getChildrenFiltered](node, delegate), delegate, {parent: node});
    }
    [S$._shouldShowInSummaryTree](node) {
      if (node == null) dart.nullFailed(I[2], 1630, 49, "node");
      if (node.level == diagnostics$.DiagnosticLevel.error) {
        return true;
      }
      let value = node.value;
      if (!diagnostics$.Diagnosticable.is(value)) {
        return true;
      }
      if (!framework.Element.is(value) || !dart.test(this.isWidgetCreationTracked())) {
        return true;
      }
      return this[S$._isValueCreatedByLocalProject](value);
    }
    [S$._getChildrenFiltered](node, delegate) {
      if (node == null) dart.nullFailed(I[2], 1647, 21, "node");
      if (delegate == null) dart.nullFailed(I[2], 1648, 36, "delegate");
      return this[S$._filterChildren](node.getChildren(), delegate);
    }
    [S$._filterChildren](nodes, delegate) {
      if (nodes == null) dart.nullFailed(I[2], 1654, 27, "nodes");
      if (delegate == null) dart.nullFailed(I[2], 1655, 36, "delegate");
      let children = (() => {
        let t1 = T$.JSArrayOfDiagnosticsNode().of([]);
        for (let child of nodes)
          if (!dart.test(delegate.summaryTree) || dart.test(this[S$._shouldShowInSummaryTree](child)))
            t1[S$.$add](child);
          else
            t1[S$.$addAll](this[S$._getChildrenFiltered](child, delegate));
        return t1;
      })();
      return children;
    }
    getRootWidget(groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1669, 31, "groupName");
      return this[S$._safeJsonEncode](this[S$._getRootWidget](groupName));
    }
    [S$._getRootWidget](groupName) {
      let t3, t2;
      if (groupName == null) dart.nullFailed(I[2], 1673, 47, "groupName");
      return this[S$._nodeToJson]((t2 = binding$5.WidgetsBinding.instance, t2 == null ? null : (t3 = t2.renderViewElement, t3 == null ? null : t3.toDiagnosticsNode())), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}));
    }
    getRootWidgetSummaryTree(groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1679, 42, "groupName");
      return this[S$._safeJsonEncode](this[S$._getRootWidgetSummaryTree](groupName));
    }
    [S$._getRootWidgetSummaryTree](groupName) {
      let t3, t2;
      if (groupName == null) dart.nullFailed(I[2], 1683, 58, "groupName");
      return this[S$._nodeToJson]((t2 = binding$5.WidgetsBinding.instance, t2 == null ? null : (t3 = t2.renderViewElement, t3 == null ? null : t3.toDiagnosticsNode())), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, subtreeDepth: 1000000, summaryTree: true, service: this}));
    }
    getRootRenderObject(groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1693, 37, "groupName");
      return this[S$._safeJsonEncode](this[S$._getRootRenderObject](groupName));
    }
    [S$._getRootRenderObject](groupName) {
      let t2;
      if (groupName == null) dart.nullFailed(I[2], 1697, 53, "groupName");
      return this[S$._nodeToJson]((t2 = binding.RendererBinding.instance, t2 == null ? null : t2.renderView.toDiagnosticsNode()), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}));
    }
    getDetailsSubtree(id, groupName, opts) {
      if (id == null) dart.nullFailed(I[2], 1714, 12, "id");
      if (groupName == null) dart.nullFailed(I[2], 1715, 12, "groupName");
      let subtreeDepth = opts && 'subtreeDepth' in opts ? opts.subtreeDepth : 2;
      if (subtreeDepth == null) dart.nullFailed(I[2], 1716, 9, "subtreeDepth");
      return this[S$._safeJsonEncode](this[S$._getDetailsSubtree](id, groupName, subtreeDepth));
    }
    [S$._getDetailsSubtree](id, groupName, subtreeDepth) {
      if (subtreeDepth == null) dart.nullFailed(I[2], 1724, 9, "subtreeDepth");
      let root = T$.DiagnosticsNodeN().as(this.toObject(id));
      if (root == null) {
        return null;
      }
      return this[S$._nodeToJson](root, new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, summaryTree: false, subtreeDepth: subtreeDepth, includeProperties: true, service: this}));
    }
    getSelectedRenderObject(previousSelectionId, groupName) {
      if (previousSelectionId == null) dart.nullFailed(I[2], 1749, 41, "previousSelectionId");
      if (groupName == null) dart.nullFailed(I[2], 1749, 69, "groupName");
      return this[S$._safeJsonEncode](this[S$._getSelectedRenderObject](previousSelectionId, groupName));
    }
    [S$._getSelectedRenderObject](previousSelectionId, groupName) {
      let t2, t2$;
      if (groupName == null) dart.nullFailed(I[2], 1753, 86, "groupName");
      let previousSelection = T$.DiagnosticsNodeN().as(this.toObject(previousSelectionId));
      let current = this.selection.current;
      return this[S$._nodeToJson](dart.equals(current, (t2 = previousSelection, t2 == null ? null : t2.value)) ? previousSelection : (t2$ = current, t2$ == null ? null : t2$.toDiagnosticsNode()), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}));
    }
    getSelectedWidget(previousSelectionId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 1765, 64, "groupName");
      return this[S$._safeJsonEncode](this[S$._getSelectedWidget](previousSelectionId, groupName));
    }
    screenshot(object, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      if (width == null) dart.nullFailed(I[2], 1784, 21, "width");
      let height = opts && 'height' in opts ? opts.height : null;
      if (height == null) dart.nullFailed(I[2], 1785, 21, "height");
      let margin = opts && 'margin' in opts ? opts.margin : 0;
      if (margin == null) dart.nullFailed(I[2], 1786, 12, "margin");
      let maxPixelRatio = opts && 'maxPixelRatio' in opts ? opts.maxPixelRatio : 1;
      if (maxPixelRatio == null) dart.nullFailed(I[2], 1787, 12, "maxPixelRatio");
      let debugPaint = opts && 'debugPaint' in opts ? opts.debugPaint : false;
      if (debugPaint == null) dart.nullFailed(I[2], 1788, 10, "debugPaint");
      return async.async(T$.ImageN(), function* screenshot() {
        let t2;
        if (!framework.Element.is(object) && !object$.RenderObject.is(object)) {
          return null;
        }
        let renderObject = framework.Element.is(object) ? object.renderObject : T$.RenderObjectN().as(object);
        if (renderObject == null || !dart.test(renderObject.attached)) {
          return null;
        }
        if (dart.test(renderObject.debugNeedsLayout)) {
          let owner = dart.nullCheck(renderObject.owner);
          if (!(owner !== null)) dart.assertFailed(null, I[2], 1800, 14, "owner != null");
          if (!!dart.test(owner.debugDoingLayout)) dart.assertFailed(null, I[2], 1801, 14, "!owner.debugDoingLayout");
          t2 = owner;
          (() => {
            t2.flushLayout();
            t2.flushCompositingBits();
            t2.flushPaint();
            return t2;
          })();
          if (dart.test(renderObject.debugNeedsLayout)) {
            return null;
          }
        }
        let renderBounds = widget_inspector._calculateSubtreeBounds(renderObject);
        if (margin !== 0.0) {
          renderBounds = renderBounds.inflate(margin);
        }
        if (dart.test(renderBounds.isEmpty)) {
          return null;
        }
        let pixelRatio = math.min(core.double, maxPixelRatio, math.min(core.double, dart.notNull(width) / dart.notNull(renderBounds.width), dart.notNull(height) / dart.notNull(renderBounds.height)));
        return widget_inspector._ScreenshotPaintingContext.toImage(renderObject, renderBounds, {pixelRatio: pixelRatio, debugPaint: debugPaint});
      });
    }
    [S$._getSelectedWidget](previousSelectionId, groupName) {
      let t2, t2$;
      if (groupName == null) dart.nullFailed(I[2], 1840, 80, "groupName");
      let previousSelection = T$.DiagnosticsNodeN().as(this.toObject(previousSelectionId));
      let current = this.selection.currentElement;
      return this[S$._nodeToJson](dart.equals(current, (t2 = previousSelection, t2 == null ? null : t2.value)) ? previousSelection : (t2$ = current, t2$ == null ? null : t2$.toDiagnosticsNode()), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}));
    }
    getSelectedSummaryWidget(previousSelectionId, groupName) {
      if (previousSelectionId == null) dart.nullFailed(I[2], 1854, 42, "previousSelectionId");
      if (groupName == null) dart.nullFailed(I[2], 1854, 70, "groupName");
      return this[S$._safeJsonEncode](this[S$._getSelectedSummaryWidget](previousSelectionId, groupName));
    }
    [S$._getSelectedSummaryWidget](previousSelectionId, groupName) {
      let t2, t2$;
      if (groupName == null) dart.nullFailed(I[2], 1858, 87, "groupName");
      if (!dart.test(this.isWidgetCreationTracked())) {
        return this[S$._getSelectedWidget](previousSelectionId, groupName);
      }
      let previousSelection = T$.DiagnosticsNodeN().as(this.toObject(previousSelectionId));
      let current = this.selection.currentElement;
      if (current != null && !dart.test(this[S$._isValueCreatedByLocalProject](current))) {
        let firstLocal = null;
        for (let candidate of current.debugGetDiagnosticChain()) {
          if (dart.test(this[S$._isValueCreatedByLocalProject](candidate))) {
            firstLocal = candidate;
            break;
          }
        }
        current = firstLocal;
      }
      return this[S$._nodeToJson](dart.equals(current, (t2 = previousSelection, t2 == null ? null : t2.value)) ? previousSelection : (t2$ = current, t2$ == null ? null : t2$.toDiagnosticsNode()), new widget_inspector.InspectorSerializationDelegate.new({groupName: groupName, service: this}));
    }
    isWidgetCreationTracked() {
      this[S$._widgetCreationTracked] == null ? this[S$._widgetCreationTracked] = widget_inspector._HasCreationLocation.is(new widget_inspector._WidgetForTypeTests.new({$creationLocationd_0dea112b090073317d4: C[5] || CT.C5})) : null;
      return dart.nullCheck(this[S$._widgetCreationTracked]);
    }
    get [S$._frameStart]() {
      let t2;
      return dart.test(this[S$.__WidgetInspectorService__frameStart_isSet]) ? (t2 = this[S$.__WidgetInspectorService__frameStart], t2) : dart.throw(new _internal.LateError.fieldNI("_frameStart"));
    }
    set [S$._frameStart](t2) {
      if (t2 == null) dart.nullFailed(I[2], 1887, 17, "null");
      this[S$.__WidgetInspectorService__frameStart_isSet] = true;
      this[S$.__WidgetInspectorService__frameStart] = t2;
    }
    [S$._onFrameStart](timeStamp) {
      if (timeStamp == null) dart.nullFailed(I[2], 1889, 31, "timeStamp");
      this[S$._frameStart] = timeStamp;
      dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.bind(this, S$._onFrameEnd));
    }
    [S$._onFrameEnd](timeStamp) {
      if (timeStamp == null) dart.nullFailed(I[2], 1894, 29, "timeStamp");
      if (dart.test(this[S$._trackRebuildDirtyWidgets])) {
        this[S$._postStatsEvent]("Flutter.RebuiltWidgets", this[S$._rebuildStats]);
      }
      if (dart.test(this[S$._trackRepaintWidgets])) {
        this[S$._postStatsEvent]("Flutter.RepaintWidgets", this[S$._repaintStats]);
      }
    }
    [S$._postStatsEvent](eventName, stats) {
      if (eventName == null) dart.nullFailed(I[2], 1903, 31, "eventName");
      if (stats == null) dart.nullFailed(I[2], 1903, 71, "stats");
      this.postEvent(eventName, stats.exportToJson(this[S$._frameStart]));
    }
    postEvent(eventKind, eventData) {
      if (eventKind == null) dart.nullFailed(I[2], 1912, 25, "eventKind");
      if (eventData == null) dart.nullFailed(I[2], 1912, 57, "eventData");
      developer.postEvent(eventKind, eventData);
    }
    [S$._onRebuildWidget](element, builtOnce) {
      if (element == null) dart.nullFailed(I[2], 1919, 33, "element");
      if (builtOnce == null) dart.nullFailed(I[2], 1919, 47, "builtOnce");
      this[S$._rebuildStats].add(element);
    }
    [S$._onPaint](renderObject) {
      let t3;
      if (renderObject == null) dart.nullFailed(I[2], 1923, 30, "renderObject");
      try {
        let element = (t3 = T$.DebugCreatorN().as(renderObject.debugCreator), t3 == null ? null : t3.element);
        if (!framework.RenderObjectElement.is(element)) {
          return;
        }
        this[S$._repaintStats].add(element);
        element.visitAncestorElements(dart.fn(ancestor => {
          if (ancestor == null) dart.nullFailed(I[2], 1937, 46, "ancestor");
          if (framework.RenderObjectElement.is(ancestor)) {
            return false;
          }
          this[S$._repaintStats].add(ancestor);
          return true;
        }, T$.ElementTobool()));
      } catch (e) {
        let exception = dart.getThrown(e);
        let stack = dart.stackTrace(e);
        if (core.Object.is(exception)) {
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack}));
        } else
          throw e;
      }
    }
    performReassemble() {
      this[S$._clearStats]();
      this[S$._resetErrorCount]();
    }
  };
  (widget_inspector.WidgetInspectorService[dart.mixinNew] = function() {
    this[S$._serializeRing$1] = T$.ListOfStringN().filled(20, null, {growable: false});
    this[S$._serializeRingIndex$1] = 0;
    this[S$.selection] = new widget_inspector.InspectorSelection.new();
    this[S$.selectionChangedCallback] = null;
    this[S$._groups$1] = new (T$.IdentityMapOfString$SetOf_InspectorReferenceData()).new();
    this[S$._idToReferenceData$1] = new (T$.IdentityMapOfString$_InspectorReferenceData()).new();
    this[S$._objectToId$1] = new (T$.IdentityMapOfObject$String()).new();
    this[S$._nextId$1] = 0;
    this[S$._pubRootDirectories$1] = null;
    this[S$._trackRebuildDirtyWidgets$1] = false;
    this[S$._trackRepaintWidgets$1] = false;
    this[S$._structuredExceptionHandler$1] = null;
    this[S$._$35WidgetInspectorService$35_registerServiceExtensionCallback] = null;
    this[S$._$35WidgetInspectorService$35_registerServiceExtensionCallback$35isSet] = false;
    this[S$._errorsSinceReload$1] = 0;
    this[S$._widgetCreationTracked$1] = null;
    this[S$._$35WidgetInspectorService$35_frameStart] = null;
    this[S$._$35WidgetInspectorService$35_frameStart$35isSet] = false;
    this[S$._rebuildStats$1] = new widget_inspector._ElementLocationStatsTracker.new();
    this[S$._repaintStats$1] = new widget_inspector._ElementLocationStatsTracker.new();
  }).prototype = widget_inspector.WidgetInspectorService.prototype;
  dart.addTypeTests(widget_inspector.WidgetInspectorService);
  dart.addTypeCaches(widget_inspector.WidgetInspectorService);
  widget_inspector.WidgetInspectorService[dart.implements] = () => [core.Object];
  dart.setMethodSignature(widget_inspector.WidgetInspectorService, () => ({
    __proto__: dart.getMethods(widget_inspector.WidgetInspectorService.__proto__),
    registerServiceExtension: dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}),
    [S$._registerSignalServiceExtension]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), []), name: core.String}),
    [S$._registerObjectGroupServiceExtension]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), [core.String]), name: core.String}),
    [S$._registerBoolServiceExtension]: dart.fnType(dart.void, [], {}, {getter: dart.fnType(async.Future$(core.bool), []), name: core.String, setter: dart.fnType(async.Future$(dart.void), [core.bool])}),
    [S$._postExtensionStateChangedEvent]: dart.fnType(dart.void, [core.String, dart.nullable(core.Object)]),
    [S$._registerServiceExtensionWithArg]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.String), core.String]), name: core.String}),
    [S$._registerServiceExtensionVarArgs]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), [core.List$(core.String)]), name: core.String}),
    forceRebuild: dart.fnType(async.Future$(dart.void), []),
    [S$._reportError]: dart.fnType(dart.void, [assertions.FlutterErrorDetails]),
    [S$._resetErrorCount]: dart.fnType(dart.void, []),
    isStructuredErrorsEnabled: dart.fnType(core.bool, []),
    initServiceExtensions: dart.fnType(dart.void, [dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String})]),
    [S$._clearStats]: dart.fnType(dart.void, []),
    disposeAllGroups: dart.fnType(dart.void, []),
    disposeGroup: dart.fnType(dart.void, [core.String]),
    [S$._decrementReferenceCount]: dart.fnType(dart.void, [widget_inspector._InspectorReferenceData]),
    toId: dart.fnType(dart.nullable(core.String), [dart.nullable(core.Object), core.String]),
    isWidgetTreeReady: dart.fnType(core.bool, [], [dart.nullable(core.String)]),
    toObject: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.String)], [dart.nullable(core.String)]),
    toObjectForSourceLocation: dart.fnType(dart.nullable(core.Object), [core.String], [dart.nullable(core.String)]),
    disposeId: dart.fnType(dart.void, [dart.nullable(core.String), core.String]),
    setPubRootDirectories: dart.fnType(dart.void, [core.List$(core.String)]),
    setSelectionById: dart.fnType(core.bool, [dart.nullable(core.String)], [dart.nullable(core.String)]),
    setSelection: dart.fnType(core.bool, [dart.nullable(core.Object)], [dart.nullable(core.String)]),
    [S$._devToolsInspectorUriForElement]: dart.fnType(dart.nullable(core.String), [framework.Element]),
    devToolsInspectorUri: dart.fnType(core.String, [core.String]),
    getParentChain: dart.fnType(core.String, [core.String, core.String]),
    [S$._getParentChain]: dart.fnType(core.List$(dart.nullable(core.Object)), [dart.nullable(core.String), core.String]),
    [S$._pathNodeToJson]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(widget_inspector._DiagnosticsPathNode), widget_inspector.InspectorSerializationDelegate]),
    [S$._getRawElementParentChain]: dart.fnType(core.List$(framework.Element), [framework.Element], {}, {numLocalParents: dart.nullable(core.int)}),
    [S$._getElementParentChain]: dart.fnType(core.List$(widget_inspector._DiagnosticsPathNode), [framework.Element, core.String], {numLocalParents: dart.nullable(core.int)}, {}),
    [S$._getRenderObjectParentChain]: dart.fnType(dart.nullable(core.List$(widget_inspector._DiagnosticsPathNode)), [dart.nullable(object$.RenderObject), core.String]),
    [S$._nodeToJson]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(diagnostics$.DiagnosticsNode), widget_inspector.InspectorSerializationDelegate]),
    [S$._isValueCreatedByLocalProject]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [S$._isLocalCreationLocation]: dart.fnType(core.bool, [dart.nullable(widget_inspector._Location)]),
    [S$._safeJsonEncode]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [S$._truncateNodes]: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.Iterable$(diagnostics$.DiagnosticsNode), core.int]),
    [S$._nodesToJson]: dart.fnType(core.List$(core.Map$(core.String, dart.nullable(core.Object))), [core.List$(diagnostics$.DiagnosticsNode), widget_inspector.InspectorSerializationDelegate], {}, {parent: dart.nullable(diagnostics$.DiagnosticsNode)}),
    getProperties: dart.fnType(core.String, [core.String, core.String]),
    [S$._getProperties]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    getChildren: dart.fnType(core.String, [core.String, core.String]),
    [S$._getChildren]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    getChildrenSummaryTree: dart.fnType(core.String, [core.String, core.String]),
    [S$._getChildrenSummaryTree]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    getChildrenDetailsSubtree: dart.fnType(core.String, [core.String, core.String]),
    [S$._getChildrenDetailsSubtree]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    [S$._shouldShowInSummaryTree]: dart.fnType(core.bool, [diagnostics$.DiagnosticsNode]),
    [S$._getChildrenFiltered]: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [diagnostics$.DiagnosticsNode, widget_inspector.InspectorSerializationDelegate]),
    [S$._filterChildren]: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), widget_inspector.InspectorSerializationDelegate]),
    getRootWidget: dart.fnType(core.String, [core.String]),
    [S$._getRootWidget]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getRootWidgetSummaryTree: dart.fnType(core.String, [core.String]),
    [S$._getRootWidgetSummaryTree]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getRootRenderObject: dart.fnType(core.String, [core.String]),
    [S$._getRootRenderObject]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getDetailsSubtree: dart.fnType(core.String, [core.String, core.String], {subtreeDepth: core.int}, {}),
    [S$._getDetailsSubtree]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), dart.nullable(core.String), core.int]),
    getSelectedRenderObject: dart.fnType(core.String, [core.String, core.String]),
    [S$._getSelectedRenderObject]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), core.String]),
    getSelectedWidget: dart.fnType(core.String, [dart.nullable(core.String), core.String]),
    screenshot: dart.fnType(async.Future$(dart.nullable(ui.Image)), [dart.nullable(core.Object)], {debugPaint: core.bool, margin: core.double, maxPixelRatio: core.double}, {height: core.double, width: core.double}),
    [S$._getSelectedWidget]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), core.String]),
    getSelectedSummaryWidget: dart.fnType(core.String, [core.String, core.String]),
    [S$._getSelectedSummaryWidget]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), core.String]),
    isWidgetCreationTracked: dart.fnType(core.bool, []),
    [S$._onFrameStart]: dart.fnType(dart.void, [core.Duration]),
    [S$._onFrameEnd]: dart.fnType(dart.void, [core.Duration]),
    [S$._postStatsEvent]: dart.fnType(dart.void, [core.String, widget_inspector._ElementLocationStatsTracker]),
    postEvent: dart.fnType(dart.void, [core.String, core.Map$(core.Object, dart.nullable(core.Object))]),
    [S$._onRebuildWidget]: dart.fnType(dart.void, [framework.Element, core.bool]),
    [S$._onPaint]: dart.fnType(dart.void, [object$.RenderObject]),
    performReassemble: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(widget_inspector.WidgetInspectorService, () => ({
    __proto__: dart.getGetters(widget_inspector.WidgetInspectorService.__proto__),
    [S$._registerServiceExtensionCallback]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}),
    [S$._frameStart]: core.Duration
  }));
  dart.setSetterSignature(widget_inspector.WidgetInspectorService, () => ({
    __proto__: dart.getSetters(widget_inspector.WidgetInspectorService.__proto__),
    [S$._registerServiceExtensionCallback]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}),
    [S$._frameStart]: core.Duration
  }));
  dart.setLibraryUri(widget_inspector.WidgetInspectorService, I[3]);
  dart.setFieldSignature(widget_inspector.WidgetInspectorService, () => ({
    __proto__: dart.getFields(widget_inspector.WidgetInspectorService.__proto__),
    [S$._serializeRing]: dart.finalFieldType(core.List$(dart.nullable(core.String))),
    [S$._serializeRingIndex]: dart.fieldType(core.int),
    selection: dart.finalFieldType(widget_inspector.InspectorSelection),
    selectionChangedCallback: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [S$._groups]: dart.finalFieldType(core.Map$(core.String, core.Set$(widget_inspector._InspectorReferenceData))),
    [S$._idToReferenceData]: dart.finalFieldType(core.Map$(core.String, widget_inspector._InspectorReferenceData)),
    [S$._objectToId]: dart.finalFieldType(core.Map$(core.Object, core.String)),
    [S$._nextId]: dart.fieldType(core.int),
    [S$._pubRootDirectories]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [S$._trackRebuildDirtyWidgets]: dart.fieldType(core.bool),
    [S$._trackRepaintWidgets]: dart.fieldType(core.bool),
    [S$._structuredExceptionHandler]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [assertions.FlutterErrorDetails]))),
    [S$.__WidgetInspectorService__registerServiceExtensionCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}))),
    [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet]: dart.fieldType(core.bool),
    [S$._errorsSinceReload]: dart.fieldType(core.int),
    [S$._widgetCreationTracked]: dart.fieldType(dart.nullable(core.bool)),
    [S$.__WidgetInspectorService__frameStart]: dart.fieldType(dart.nullable(core.Duration)),
    [S$.__WidgetInspectorService__frameStart_isSet]: dart.fieldType(core.bool),
    [S$._rebuildStats]: dart.finalFieldType(widget_inspector._ElementLocationStatsTracker),
    [S$._repaintStats]: dart.finalFieldType(widget_inspector._ElementLocationStatsTracker)
  }));
  dart.defineLazy(widget_inspector.WidgetInspectorService, {
    /*widget_inspector.WidgetInspectorService._instance*/get _instance() {
      return new widget_inspector._WidgetInspectorService.new();
    },
    set _instance(_) {},
    /*widget_inspector.WidgetInspectorService._debugServiceExtensionsRegistered*/get _debugServiceExtensionsRegistered() {
      return false;
    },
    set _debugServiceExtensionsRegistered(_) {},
    /*widget_inspector.WidgetInspectorService._consoleObjectGroup*/get _consoleObjectGroup() {
      return "console-group";
    }
  }, false);
  widget_inspector._WidgetInspectorService = class _WidgetInspectorService extends core.Object {};
  dart.applyMixin(widget_inspector._WidgetInspectorService, widget_inspector.WidgetInspectorService);
  dart.applyMixin(widget_inspector._WidgetInspectorService, class _WidgetInspectorService extends widget_inspector.WidgetInspectorService {
    get [S$._serializeRingIndex]() {
      return super[S$._serializeRingIndex];
    }
    set [S$._serializeRingIndex](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._serializeRingIndex] = value;
    }
    get selectionChangedCallback() {
      return super.selectionChangedCallback;
    }
    set selectionChangedCallback(value) {
      return super.selectionChangedCallback = value;
    }
    get [S$._nextId]() {
      return super[S$._nextId];
    }
    set [S$._nextId](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._nextId] = value;
    }
    get [S$._pubRootDirectories]() {
      return super[S$._pubRootDirectories];
    }
    set [S$._pubRootDirectories](value) {
      return super[S$._pubRootDirectories] = value;
    }
    get [S$._trackRebuildDirtyWidgets]() {
      return super[S$._trackRebuildDirtyWidgets];
    }
    set [S$._trackRebuildDirtyWidgets](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._trackRebuildDirtyWidgets] = value;
    }
    get [S$._trackRepaintWidgets]() {
      return super[S$._trackRepaintWidgets];
    }
    set [S$._trackRepaintWidgets](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._trackRepaintWidgets] = value;
    }
    get [S$._structuredExceptionHandler]() {
      return super[S$._structuredExceptionHandler];
    }
    set [S$._structuredExceptionHandler](value) {
      return super[S$._structuredExceptionHandler] = value;
    }
    get [S$.__WidgetInspectorService__registerServiceExtensionCallback]() {
      return super[S$.__WidgetInspectorService__registerServiceExtensionCallback];
    }
    set [S$.__WidgetInspectorService__registerServiceExtensionCallback](value) {
      return super[S$.__WidgetInspectorService__registerServiceExtensionCallback] = value;
    }
    get [S$._registerServiceExtensionCallback]() {
      return super[S$._registerServiceExtensionCallback];
    }
    set [S$._registerServiceExtensionCallback](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._registerServiceExtensionCallback] = value;
    }
    get [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet]() {
      return super[S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet];
    }
    set [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet](value) {
      return super[S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet] = value;
    }
    get [S$._errorsSinceReload]() {
      return super[S$._errorsSinceReload];
    }
    set [S$._errorsSinceReload](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._errorsSinceReload] = value;
    }
    get [S$._widgetCreationTracked]() {
      return super[S$._widgetCreationTracked];
    }
    set [S$._widgetCreationTracked](value) {
      return super[S$._widgetCreationTracked] = value;
    }
    get [S$.__WidgetInspectorService__frameStart]() {
      return super[S$.__WidgetInspectorService__frameStart];
    }
    set [S$.__WidgetInspectorService__frameStart](value) {
      return super[S$.__WidgetInspectorService__frameStart] = value;
    }
    get [S$._frameStart]() {
      return super[S$._frameStart];
    }
    set [S$._frameStart](value) {
      if (value == null) dart.nullFailed(I[2], 680, 7, "value");
      return super[S$._frameStart] = value;
    }
    get [S$.__WidgetInspectorService__frameStart_isSet]() {
      return super[S$.__WidgetInspectorService__frameStart_isSet];
    }
    set [S$.__WidgetInspectorService__frameStart_isSet](value) {
      return super[S$.__WidgetInspectorService__frameStart_isSet] = value;
    }
    get [S$._serializeRing]() {
      return super[S$._serializeRing];
    }
    get selection() {
      return super.selection;
    }
    get [S$._groups]() {
      return super[S$._groups];
    }
    get [S$._idToReferenceData]() {
      return super[S$._idToReferenceData];
    }
    get [S$._objectToId]() {
      return super[S$._objectToId];
    }
    registerServiceExtension(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 680, 7, "callback");
      return super.registerServiceExtension({name: name, callback: callback});
    }
    [S$._registerSignalServiceExtension](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 680, 7, "callback");
      return super[S$._registerSignalServiceExtension]({name: name, callback: callback});
    }
    [S$._registerObjectGroupServiceExtension](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 680, 7, "callback");
      return super[S$._registerObjectGroupServiceExtension]({name: name, callback: callback});
    }
    [S$._registerBoolServiceExtension](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      let getter = opts && 'getter' in opts ? opts.getter : null;
      if (getter == null) dart.nullFailed(I[2], 680, 7, "getter");
      let setter = opts && 'setter' in opts ? opts.setter : null;
      if (setter == null) dart.nullFailed(I[2], 680, 7, "setter");
      return super[S$._registerBoolServiceExtension]({name: name, getter: getter, setter: setter});
    }
    [S$._postExtensionStateChangedEvent](name, value) {
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      return super[S$._postExtensionStateChangedEvent](name, value);
    }
    [S$._registerServiceExtensionWithArg](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 680, 7, "callback");
      return super[S$._registerServiceExtensionWithArg]({name: name, callback: callback});
    }
    [S$._registerServiceExtensionVarArgs](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if (callback == null) dart.nullFailed(I[2], 680, 7, "callback");
      return super[S$._registerServiceExtensionVarArgs]({name: name, callback: callback});
    }
    forceRebuild() {
      return super.forceRebuild();
    }
    [S$._reportError](details) {
      if (details == null) dart.nullFailed(I[2], 680, 7, "details");
      return super[S$._reportError](details);
    }
    [S$._resetErrorCount]() {
      return super[S$._resetErrorCount]();
    }
    isStructuredErrorsEnabled() {
      return super.isStructuredErrorsEnabled();
    }
    initServiceExtensions(registerServiceExtensionCallback) {
      if (registerServiceExtensionCallback == null) dart.nullFailed(I[2], 680, 7, "registerServiceExtensionCallback");
      return super.initServiceExtensions(registerServiceExtensionCallback);
    }
    [S$._clearStats]() {
      return super[S$._clearStats]();
    }
    disposeAllGroups() {
      return super.disposeAllGroups();
    }
    disposeGroup(name) {
      if (name == null) dart.nullFailed(I[2], 680, 7, "name");
      return super.disposeGroup(name);
    }
    [S$._decrementReferenceCount](reference) {
      if (reference == null) dart.nullFailed(I[2], 680, 7, "reference");
      return super[S$._decrementReferenceCount](reference);
    }
    toId(object, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.toId(object, groupName);
    }
    isWidgetTreeReady(groupName = null) {
      return super.isWidgetTreeReady(groupName);
    }
    toObject(id, groupName = null) {
      return super.toObject(id, groupName);
    }
    toObjectForSourceLocation(id, groupName = null) {
      if (id == null) dart.nullFailed(I[2], 680, 7, "id");
      return super.toObjectForSourceLocation(id, groupName);
    }
    disposeId(id, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.disposeId(id, groupName);
    }
    setPubRootDirectories(pubRootDirectories) {
      if (pubRootDirectories == null) dart.nullFailed(I[2], 680, 7, "pubRootDirectories");
      return super.setPubRootDirectories(pubRootDirectories);
    }
    setSelectionById(id, groupName = null) {
      return super.setSelectionById(id, groupName);
    }
    setSelection(object, groupName = null) {
      return super.setSelection(object, groupName);
    }
    [S$._devToolsInspectorUriForElement](element) {
      if (element == null) dart.nullFailed(I[2], 680, 7, "element");
      return super[S$._devToolsInspectorUriForElement](element);
    }
    devToolsInspectorUri(inspectorRef) {
      if (inspectorRef == null) dart.nullFailed(I[2], 680, 7, "inspectorRef");
      return super.devToolsInspectorUri(inspectorRef);
    }
    getParentChain(id, groupName) {
      if (id == null) dart.nullFailed(I[2], 680, 7, "id");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getParentChain(id, groupName);
    }
    [S$._getParentChain](id, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getParentChain](id, groupName);
    }
    [S$._pathNodeToJson](pathNode, delegate) {
      if (delegate == null) dart.nullFailed(I[2], 680, 7, "delegate");
      return super[S$._pathNodeToJson](pathNode, delegate);
    }
    [S$._getRawElementParentChain](element, opts) {
      if (element == null) dart.nullFailed(I[2], 680, 7, "element");
      let numLocalParents = opts && 'numLocalParents' in opts ? opts.numLocalParents : null;
      return super[S$._getRawElementParentChain](element, {numLocalParents: numLocalParents});
    }
    [S$._getElementParentChain](element, groupName, opts) {
      if (element == null) dart.nullFailed(I[2], 680, 7, "element");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      let numLocalParents = opts && 'numLocalParents' in opts ? opts.numLocalParents : null;
      return super[S$._getElementParentChain](element, groupName, {numLocalParents: numLocalParents});
    }
    [S$._getRenderObjectParentChain](renderObject, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getRenderObjectParentChain](renderObject, groupName);
    }
    [S$._nodeToJson](node, delegate) {
      if (delegate == null) dart.nullFailed(I[2], 680, 7, "delegate");
      return super[S$._nodeToJson](node, delegate);
    }
    [S$._isValueCreatedByLocalProject](value) {
      return super[S$._isValueCreatedByLocalProject](value);
    }
    [S$._isLocalCreationLocation](location) {
      return super[S$._isLocalCreationLocation](location);
    }
    [S$._safeJsonEncode](object) {
      return super[S$._safeJsonEncode](object);
    }
    [S$._truncateNodes](nodes, maxDescendentsTruncatableNode) {
      if (nodes == null) dart.nullFailed(I[2], 680, 7, "nodes");
      if (maxDescendentsTruncatableNode == null) dart.nullFailed(I[2], 680, 7, "maxDescendentsTruncatableNode");
      return super[S$._truncateNodes](nodes, maxDescendentsTruncatableNode);
    }
    [S$._nodesToJson](nodes, delegate, opts) {
      if (nodes == null) dart.nullFailed(I[2], 680, 7, "nodes");
      if (delegate == null) dart.nullFailed(I[2], 680, 7, "delegate");
      let parent = opts && 'parent' in opts ? opts.parent : null;
      return super[S$._nodesToJson](nodes, delegate, {parent: parent});
    }
    getProperties(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 680, 7, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getProperties(diagnosticsNodeId, groupName);
    }
    [S$._getProperties](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getProperties](diagnosticsNodeId, groupName);
    }
    getChildren(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 680, 7, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getChildren(diagnosticsNodeId, groupName);
    }
    [S$._getChildren](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getChildren](diagnosticsNodeId, groupName);
    }
    getChildrenSummaryTree(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 680, 7, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getChildrenSummaryTree(diagnosticsNodeId, groupName);
    }
    [S$._getChildrenSummaryTree](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getChildrenSummaryTree](diagnosticsNodeId, groupName);
    }
    getChildrenDetailsSubtree(diagnosticsNodeId, groupName) {
      if (diagnosticsNodeId == null) dart.nullFailed(I[2], 680, 7, "diagnosticsNodeId");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getChildrenDetailsSubtree(diagnosticsNodeId, groupName);
    }
    [S$._getChildrenDetailsSubtree](diagnosticsNodeId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getChildrenDetailsSubtree](diagnosticsNodeId, groupName);
    }
    [S$._shouldShowInSummaryTree](node) {
      if (node == null) dart.nullFailed(I[2], 680, 7, "node");
      return super[S$._shouldShowInSummaryTree](node);
    }
    [S$._getChildrenFiltered](node, delegate) {
      if (node == null) dart.nullFailed(I[2], 680, 7, "node");
      if (delegate == null) dart.nullFailed(I[2], 680, 7, "delegate");
      return super[S$._getChildrenFiltered](node, delegate);
    }
    [S$._filterChildren](nodes, delegate) {
      if (nodes == null) dart.nullFailed(I[2], 680, 7, "nodes");
      if (delegate == null) dart.nullFailed(I[2], 680, 7, "delegate");
      return super[S$._filterChildren](nodes, delegate);
    }
    getRootWidget(groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getRootWidget(groupName);
    }
    [S$._getRootWidget](groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getRootWidget](groupName);
    }
    getRootWidgetSummaryTree(groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getRootWidgetSummaryTree(groupName);
    }
    [S$._getRootWidgetSummaryTree](groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getRootWidgetSummaryTree](groupName);
    }
    getRootRenderObject(groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getRootRenderObject(groupName);
    }
    [S$._getRootRenderObject](groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getRootRenderObject](groupName);
    }
    getDetailsSubtree(id, groupName, opts) {
      if (id == null) dart.nullFailed(I[2], 680, 7, "id");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      let subtreeDepth = opts && 'subtreeDepth' in opts ? opts.subtreeDepth : 2;
      if (subtreeDepth == null) dart.nullFailed(I[2], 680, 7, "subtreeDepth");
      return super.getDetailsSubtree(id, groupName, {subtreeDepth: subtreeDepth});
    }
    [S$._getDetailsSubtree](id, groupName, subtreeDepth) {
      if (subtreeDepth == null) dart.nullFailed(I[2], 680, 7, "subtreeDepth");
      return super[S$._getDetailsSubtree](id, groupName, subtreeDepth);
    }
    getSelectedRenderObject(previousSelectionId, groupName) {
      if (previousSelectionId == null) dart.nullFailed(I[2], 680, 7, "previousSelectionId");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getSelectedRenderObject(previousSelectionId, groupName);
    }
    [S$._getSelectedRenderObject](previousSelectionId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getSelectedRenderObject](previousSelectionId, groupName);
    }
    getSelectedWidget(previousSelectionId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getSelectedWidget(previousSelectionId, groupName);
    }
    screenshot(object, opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      if (width == null) dart.nullFailed(I[2], 680, 7, "width");
      let height = opts && 'height' in opts ? opts.height : null;
      if (height == null) dart.nullFailed(I[2], 680, 7, "height");
      let margin = opts && 'margin' in opts ? opts.margin : 0;
      if (margin == null) dart.nullFailed(I[2], 680, 7, "margin");
      let maxPixelRatio = opts && 'maxPixelRatio' in opts ? opts.maxPixelRatio : 1;
      if (maxPixelRatio == null) dart.nullFailed(I[2], 680, 7, "maxPixelRatio");
      let debugPaint = opts && 'debugPaint' in opts ? opts.debugPaint : false;
      if (debugPaint == null) dart.nullFailed(I[2], 680, 7, "debugPaint");
      return super.screenshot(object, {width: width, height: height, margin: margin, maxPixelRatio: maxPixelRatio, debugPaint: debugPaint});
    }
    [S$._getSelectedWidget](previousSelectionId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getSelectedWidget](previousSelectionId, groupName);
    }
    getSelectedSummaryWidget(previousSelectionId, groupName) {
      if (previousSelectionId == null) dart.nullFailed(I[2], 680, 7, "previousSelectionId");
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super.getSelectedSummaryWidget(previousSelectionId, groupName);
    }
    [S$._getSelectedSummaryWidget](previousSelectionId, groupName) {
      if (groupName == null) dart.nullFailed(I[2], 680, 7, "groupName");
      return super[S$._getSelectedSummaryWidget](previousSelectionId, groupName);
    }
    isWidgetCreationTracked() {
      return super.isWidgetCreationTracked();
    }
    [S$._onFrameStart](timeStamp) {
      if (timeStamp == null) dart.nullFailed(I[2], 680, 7, "timeStamp");
      return super[S$._onFrameStart](timeStamp);
    }
    [S$._onFrameEnd](timeStamp) {
      if (timeStamp == null) dart.nullFailed(I[2], 680, 7, "timeStamp");
      return super[S$._onFrameEnd](timeStamp);
    }
    [S$._postStatsEvent](eventName, stats) {
      if (eventName == null) dart.nullFailed(I[2], 680, 7, "eventName");
      if (stats == null) dart.nullFailed(I[2], 680, 7, "stats");
      return super[S$._postStatsEvent](eventName, stats);
    }
    postEvent(eventKind, eventData) {
      if (eventKind == null) dart.nullFailed(I[2], 680, 7, "eventKind");
      if (eventData == null) dart.nullFailed(I[2], 680, 7, "eventData");
      return super.postEvent(eventKind, eventData);
    }
    get [S$._rebuildStats]() {
      return super[S$._rebuildStats];
    }
    get [S$._repaintStats]() {
      return super[S$._repaintStats];
    }
    [S$._onRebuildWidget](element, builtOnce) {
      if (element == null) dart.nullFailed(I[2], 680, 7, "element");
      if (builtOnce == null) dart.nullFailed(I[2], 680, 7, "builtOnce");
      return super[S$._onRebuildWidget](element, builtOnce);
    }
    [S$._onPaint](renderObject) {
      if (renderObject == null) dart.nullFailed(I[2], 680, 7, "renderObject");
      return super[S$._onPaint](renderObject);
    }
    performReassemble() {
      return super.performReassemble();
    }
  });
  (widget_inspector._WidgetInspectorService.new = function() {
    widget_inspector.WidgetInspectorService[dart.mixinNew].call(this);
  }).prototype = widget_inspector._WidgetInspectorService.prototype;
  dart.addTypeTests(widget_inspector._WidgetInspectorService);
  dart.addTypeCaches(widget_inspector._WidgetInspectorService);
  dart.setMethodSignature(widget_inspector._WidgetInspectorService, () => ({
    __proto__: dart.getMethods(widget_inspector._WidgetInspectorService.__proto__),
    registerServiceExtension: dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}),
    [S$._registerSignalServiceExtension]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), []), name: core.String}),
    [S$._registerObjectGroupServiceExtension]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), [core.String]), name: core.String}),
    [S$._registerBoolServiceExtension]: dart.fnType(dart.void, [], {}, {getter: dart.fnType(async.Future$(core.bool), []), name: core.String, setter: dart.fnType(async.Future$(dart.void), [core.bool])}),
    [S$._postExtensionStateChangedEvent]: dart.fnType(dart.void, [core.String, dart.nullable(core.Object)]),
    [S$._registerServiceExtensionWithArg]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.String), core.String]), name: core.String}),
    [S$._registerServiceExtensionVarArgs]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(dart.nullable(core.Object), [core.List$(core.String)]), name: core.String}),
    forceRebuild: dart.fnType(async.Future$(dart.void), []),
    [S$._reportError]: dart.fnType(dart.void, [assertions.FlutterErrorDetails]),
    [S$._resetErrorCount]: dart.fnType(dart.void, []),
    isStructuredErrorsEnabled: dart.fnType(core.bool, []),
    initServiceExtensions: dart.fnType(dart.void, [dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String})]),
    [S$._clearStats]: dart.fnType(dart.void, []),
    disposeAllGroups: dart.fnType(dart.void, []),
    disposeGroup: dart.fnType(dart.void, [core.String]),
    [S$._decrementReferenceCount]: dart.fnType(dart.void, [widget_inspector._InspectorReferenceData]),
    toId: dart.fnType(dart.nullable(core.String), [dart.nullable(core.Object), core.String]),
    isWidgetTreeReady: dart.fnType(core.bool, [], [dart.nullable(core.String)]),
    toObject: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.String)], [dart.nullable(core.String)]),
    toObjectForSourceLocation: dart.fnType(dart.nullable(core.Object), [core.String], [dart.nullable(core.String)]),
    disposeId: dart.fnType(dart.void, [dart.nullable(core.String), core.String]),
    setPubRootDirectories: dart.fnType(dart.void, [core.List$(core.String)]),
    setSelectionById: dart.fnType(core.bool, [dart.nullable(core.String)], [dart.nullable(core.String)]),
    setSelection: dart.fnType(core.bool, [dart.nullable(core.Object)], [dart.nullable(core.String)]),
    [S$._devToolsInspectorUriForElement]: dart.fnType(dart.nullable(core.String), [framework.Element]),
    devToolsInspectorUri: dart.fnType(core.String, [core.String]),
    getParentChain: dart.fnType(core.String, [core.String, core.String]),
    [S$._getParentChain]: dart.fnType(core.List$(dart.nullable(core.Object)), [dart.nullable(core.String), core.String]),
    [S$._pathNodeToJson]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(widget_inspector._DiagnosticsPathNode), widget_inspector.InspectorSerializationDelegate]),
    [S$._getRawElementParentChain]: dart.fnType(core.List$(framework.Element), [framework.Element], {}, {numLocalParents: dart.nullable(core.int)}),
    [S$._getElementParentChain]: dart.fnType(core.List$(widget_inspector._DiagnosticsPathNode), [framework.Element, core.String], {numLocalParents: dart.nullable(core.int)}, {}),
    [S$._getRenderObjectParentChain]: dart.fnType(dart.nullable(core.List$(widget_inspector._DiagnosticsPathNode)), [dart.nullable(object$.RenderObject), core.String]),
    [S$._nodeToJson]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(diagnostics$.DiagnosticsNode), widget_inspector.InspectorSerializationDelegate]),
    [S$._isValueCreatedByLocalProject]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [S$._isLocalCreationLocation]: dart.fnType(core.bool, [dart.nullable(widget_inspector._Location)]),
    [S$._safeJsonEncode]: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [S$._truncateNodes]: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.Iterable$(diagnostics$.DiagnosticsNode), core.int]),
    [S$._nodesToJson]: dart.fnType(core.List$(core.Map$(core.String, dart.nullable(core.Object))), [core.List$(diagnostics$.DiagnosticsNode), widget_inspector.InspectorSerializationDelegate], {}, {parent: dart.nullable(diagnostics$.DiagnosticsNode)}),
    getProperties: dart.fnType(core.String, [core.String, core.String]),
    [S$._getProperties]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    getChildren: dart.fnType(core.String, [core.String, core.String]),
    [S$._getChildren]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    getChildrenSummaryTree: dart.fnType(core.String, [core.String, core.String]),
    [S$._getChildrenSummaryTree]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    getChildrenDetailsSubtree: dart.fnType(core.String, [core.String, core.String]),
    [S$._getChildrenDetailsSubtree]: dart.fnType(core.List$(core.Object), [dart.nullable(core.String), core.String]),
    [S$._shouldShowInSummaryTree]: dart.fnType(core.bool, [diagnostics$.DiagnosticsNode]),
    [S$._getChildrenFiltered]: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [diagnostics$.DiagnosticsNode, widget_inspector.InspectorSerializationDelegate]),
    [S$._filterChildren]: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), widget_inspector.InspectorSerializationDelegate]),
    getRootWidget: dart.fnType(core.String, [core.String]),
    [S$._getRootWidget]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getRootWidgetSummaryTree: dart.fnType(core.String, [core.String]),
    [S$._getRootWidgetSummaryTree]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getRootRenderObject: dart.fnType(core.String, [core.String]),
    [S$._getRootRenderObject]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getDetailsSubtree: dart.fnType(core.String, [core.String, core.String], {subtreeDepth: core.int}, {}),
    [S$._getDetailsSubtree]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), dart.nullable(core.String), core.int]),
    getSelectedRenderObject: dart.fnType(core.String, [core.String, core.String]),
    [S$._getSelectedRenderObject]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), core.String]),
    getSelectedWidget: dart.fnType(core.String, [dart.nullable(core.String), core.String]),
    screenshot: dart.fnType(async.Future$(dart.nullable(ui.Image)), [dart.nullable(core.Object)], {debugPaint: core.bool, margin: core.double, maxPixelRatio: core.double}, {height: core.double, width: core.double}),
    [S$._getSelectedWidget]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), core.String]),
    getSelectedSummaryWidget: dart.fnType(core.String, [core.String, core.String]),
    [S$._getSelectedSummaryWidget]: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [dart.nullable(core.String), core.String]),
    isWidgetCreationTracked: dart.fnType(core.bool, []),
    [S$._onFrameStart]: dart.fnType(dart.void, [core.Duration]),
    [S$._onFrameEnd]: dart.fnType(dart.void, [core.Duration]),
    [S$._postStatsEvent]: dart.fnType(dart.void, [core.String, widget_inspector._ElementLocationStatsTracker]),
    postEvent: dart.fnType(dart.void, [core.String, core.Map$(core.Object, dart.nullable(core.Object))]),
    [S$._onRebuildWidget]: dart.fnType(dart.void, [framework.Element, core.bool]),
    [S$._onPaint]: dart.fnType(dart.void, [object$.RenderObject]),
    performReassemble: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(widget_inspector._WidgetInspectorService, () => ({
    __proto__: dart.getGetters(widget_inspector._WidgetInspectorService.__proto__),
    [S$._serializeRingIndex]: core.int,
    selectionChangedCallback: dart.nullable(dart.fnType(dart.void, [])),
    [S$._nextId]: core.int,
    [S$._pubRootDirectories]: dart.nullable(core.List$(core.String)),
    [S$._trackRebuildDirtyWidgets]: core.bool,
    [S$._trackRepaintWidgets]: core.bool,
    [S$._structuredExceptionHandler]: dart.nullable(dart.fnType(dart.void, [assertions.FlutterErrorDetails])),
    [S$.__WidgetInspectorService__registerServiceExtensionCallback]: dart.nullable(dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String})),
    [S$._registerServiceExtensionCallback]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}),
    [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet]: dart.dynamic,
    [S$._errorsSinceReload]: core.int,
    [S$._widgetCreationTracked]: dart.nullable(core.bool),
    [S$.__WidgetInspectorService__frameStart]: dart.nullable(core.Duration),
    [S$._frameStart]: core.Duration,
    [S$.__WidgetInspectorService__frameStart_isSet]: dart.dynamic,
    [S$._serializeRing]: core.List$(dart.nullable(core.String)),
    selection: widget_inspector.InspectorSelection,
    [S$._groups]: core.Map$(core.String, core.Set$(widget_inspector._InspectorReferenceData)),
    [S$._idToReferenceData]: core.Map$(core.String, widget_inspector._InspectorReferenceData),
    [S$._objectToId]: core.Map$(core.Object, core.String),
    [S$._rebuildStats]: widget_inspector._ElementLocationStatsTracker,
    [S$._repaintStats]: widget_inspector._ElementLocationStatsTracker
  }));
  dart.setSetterSignature(widget_inspector._WidgetInspectorService, () => ({
    __proto__: dart.getSetters(widget_inspector._WidgetInspectorService.__proto__),
    [S$._serializeRingIndex]: core.int,
    selectionChangedCallback: dart.nullable(dart.fnType(dart.void, [])),
    [S$._nextId]: core.int,
    [S$._pubRootDirectories]: dart.nullable(core.List$(core.String)),
    [S$._trackRebuildDirtyWidgets]: core.bool,
    [S$._trackRepaintWidgets]: core.bool,
    [S$._structuredExceptionHandler]: dart.nullable(dart.fnType(dart.void, [assertions.FlutterErrorDetails])),
    [S$.__WidgetInspectorService__registerServiceExtensionCallback]: dart.nullable(dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String})),
    [S$._registerServiceExtensionCallback]: dart.fnType(dart.void, [], {}, {callback: dart.fnType(async.Future$(core.Map$(core.String, dart.dynamic)), [core.Map$(core.String, core.String)]), name: core.String}),
    [S$.__WidgetInspectorService__registerServiceExtensionCallback_isSet]: dart.dynamic,
    [S$._errorsSinceReload]: core.int,
    [S$._widgetCreationTracked]: dart.nullable(core.bool),
    [S$.__WidgetInspectorService__frameStart]: dart.nullable(core.Duration),
    [S$._frameStart]: core.Duration,
    [S$.__WidgetInspectorService__frameStart_isSet]: dart.dynamic
  }));
  dart.setLibraryUri(widget_inspector._WidgetInspectorService, I[3]);
  widget_inspector._LocationCount = class _LocationCount extends core.Object {
    get count() {
      return this[S$._count];
    }
    reset() {
      this[S$._count] = 0;
    }
    increment() {
      this[S$._count] = dart.notNull(this[S$._count]) + 1;
    }
  };
  (widget_inspector._LocationCount.new = function(opts) {
    let location = opts && 'location' in opts ? opts.location : null;
    if (location == null) dart.nullFailed(I[2], 1974, 19, "location");
    let id = opts && 'id' in opts ? opts.id : null;
    if (id == null) dart.nullFailed(I[2], 1975, 19, "id");
    let local = opts && 'local' in opts ? opts.local : null;
    if (local == null) dart.nullFailed(I[2], 1976, 19, "local");
    this[S$._count] = 0;
    this.location = location;
    this.id = id;
    this.local = local;
    ;
  }).prototype = widget_inspector._LocationCount.prototype;
  dart.addTypeTests(widget_inspector._LocationCount);
  dart.addTypeCaches(widget_inspector._LocationCount);
  dart.setMethodSignature(widget_inspector._LocationCount, () => ({
    __proto__: dart.getMethods(widget_inspector._LocationCount.__proto__),
    reset: dart.fnType(dart.void, []),
    increment: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(widget_inspector._LocationCount, () => ({
    __proto__: dart.getGetters(widget_inspector._LocationCount.__proto__),
    count: core.int
  }));
  dart.setLibraryUri(widget_inspector._LocationCount, I[3]);
  dart.setFieldSignature(widget_inspector._LocationCount, () => ({
    __proto__: dart.getFields(widget_inspector._LocationCount.__proto__),
    id: dart.finalFieldType(core.int),
    local: dart.finalFieldType(core.bool),
    location: dart.finalFieldType(widget_inspector._Location),
    [S$._count]: dart.fieldType(core.int)
  }));
  widget_inspector._ElementLocationStatsTracker = class _ElementLocationStatsTracker extends core.Object {
    add(element) {
      if (element == null) dart.nullFailed(I[2], 2035, 20, "element");
      let widget = element.widget;
      if (!widget_inspector._HasCreationLocation.is(widget)) {
        return;
      }
      let creationLocationSource = widget;
      let location = creationLocationSource[S$._location];
      let id = widget_inspector._toLocationId(location);
      let entry = null;
      if (dart.notNull(id) >= dart.notNull(this[S$._stats][S$.$length]) || this[S$._stats][S$.$_get](id) == null) {
        while (dart.notNull(id) >= dart.notNull(this[S$._stats][S$.$length])) {
          this[S$._stats][S$.$add](null);
        }
        entry = new widget_inspector._LocationCount.new({location: location, id: id, local: widget_inspector.WidgetInspectorService.instance[S$._isLocalCreationLocation](location)});
        if (dart.test(entry.local)) {
          this.newLocations[S$.$add](entry);
        }
        this[S$._stats][S$.$_set](id, entry);
      } else {
        entry = dart.nullCheck(this[S$._stats][S$.$_get](id));
      }
      if (dart.test(entry.local)) {
        if (entry.count === 0) {
          this.active[S$.$add](entry);
        }
        entry.increment();
      }
    }
    resetCounts() {
      for (let entry of this.active) {
        entry.reset();
      }
      this.active[S$.$clear]();
    }
    exportToJson(startTime) {
      let t4, t4$, t4$0;
      if (startTime == null) dart.nullFailed(I[2], 2093, 46, "startTime");
      let events = T$.ListOfint().filled(dart.notNull(this.active[S$.$length]) * 2, 0);
      let j = 0;
      for (let stat of this.active) {
        events[S$.$_set]((t4 = j, j = t4 + 1, t4), stat.id);
        events[S$.$_set]((t4$ = j, j = t4$ + 1, t4$), stat.count);
      }
      let json = new (T$.IdentityMapOfString$dynamic()).from(["startTime", startTime.inMicroseconds, "events", events]);
      if (dart.test(this.newLocations[S$.$isNotEmpty])) {
        let locationsJson = new (T$.IdentityMapOfString$ListOfint()).new();
        for (let entry of this.newLocations) {
          let location = entry.location;
          let jsonForFile = locationsJson[S$.$putIfAbsent](location.file, dart.fn(() => T$.JSArrayOfint().of([]), T$.VoidToListOfint()));
          t4$0 = jsonForFile;
          (() => {
            t4$0[S$.$add](entry.id);
            t4$0[S$.$add](location.line);
            t4$0[S$.$add](location.column);
            return t4$0;
          })();
        }
        json[S$.$_set]("newLocations", locationsJson);
      }
      this.resetCounts();
      this.newLocations[S$.$clear]();
      return json;
    }
  };
  (widget_inspector._ElementLocationStatsTracker.new = function() {
    this[S$._stats] = T$.JSArrayOf_LocationCountN().of([]);
    this.active = T$.JSArrayOf_LocationCount().of([]);
    this.newLocations = T$.JSArrayOf_LocationCount().of([]);
    ;
  }).prototype = widget_inspector._ElementLocationStatsTracker.prototype;
  dart.addTypeTests(widget_inspector._ElementLocationStatsTracker);
  dart.addTypeCaches(widget_inspector._ElementLocationStatsTracker);
  dart.setMethodSignature(widget_inspector._ElementLocationStatsTracker, () => ({
    __proto__: dart.getMethods(widget_inspector._ElementLocationStatsTracker.__proto__),
    add: dart.fnType(dart.void, [framework.Element]),
    resetCounts: dart.fnType(dart.void, []),
    exportToJson: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Duration])
  }));
  dart.setLibraryUri(widget_inspector._ElementLocationStatsTracker, I[3]);
  dart.setFieldSignature(widget_inspector._ElementLocationStatsTracker, () => ({
    __proto__: dart.getFields(widget_inspector._ElementLocationStatsTracker.__proto__),
    [S$._stats]: dart.finalFieldType(core.List$(dart.nullable(widget_inspector._LocationCount))),
    active: dart.finalFieldType(core.List$(widget_inspector._LocationCount)),
    newLocations: dart.finalFieldType(core.List$(widget_inspector._LocationCount))
  }));
  framework.Widget = class Widget extends diagnostics$.DiagnosticableTree {
    get key() {
      return this[S$.key];
    }
    set key(value) {
      super.key = value;
    }
    get [S$._location]() {
      return this[S$._location$1];
    }
    set [S$._location](value) {
      super[S$._location] = value;
    }
    toStringShort() {
      let type = object.objectRuntimeType(this, "Widget");
      return this.key == null ? type : dart.str(type) + "-" + dart.str(this.key);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 343, 56, "properties");
      super.debugFillProperties(properties);
      properties.defaultDiagnosticsTreeStyle = diagnostics$.DiagnosticsTreeStyle.dense;
    }
    _equals(other) {
      if (other == null) return false;
      return super[S$.$_equals](other);
    }
    get hashCode() {
      return super[S$.$hashCode];
    }
    static canUpdate(oldWidget, newWidget) {
      if (oldWidget == null) dart.nullFailed(I[4], 366, 32, "oldWidget");
      if (newWidget == null) dart.nullFailed(I[4], 366, 50, "newWidget");
      return dart.equals(dart.runtimeType(oldWidget), dart.runtimeType(newWidget)) && dart.equals(oldWidget.key, newWidget.key);
    }
    static _debugConcreteSubtype(widget) {
      if (widget == null) dart.nullFailed(I[4], 375, 43, "widget");
      return framework.StatefulWidget.is(widget) ? 1 : framework.StatelessWidget.is(widget) ? 2 : 0;
    }
  };
  (framework.Widget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.key] = key;
    this[S$._location$1] = $36creationLocationd_0dea112b090073317d4;
    framework.Widget.__proto__.new.call(this);
    ;
  }).prototype = framework.Widget.prototype;
  dart.addTypeTests(framework.Widget);
  dart.addTypeCaches(framework.Widget);
  framework.Widget[dart.implements] = () => [widget_inspector._HasCreationLocation];
  dart.setLibraryUri(framework.Widget, I[5]);
  dart.setFieldSignature(framework.Widget, () => ({
    __proto__: dart.getFields(framework.Widget.__proto__),
    key: dart.finalFieldType(dart.nullable(key.Key)),
    [S$._location]: dart.finalFieldType(dart.nullable(widget_inspector._Location))
  }));
  dart.defineExtensionMethods(framework.Widget, ['_equals']);
  dart.defineExtensionAccessors(framework.Widget, ['hashCode']);
  widget_inspector._WidgetForTypeTests = class _WidgetForTypeTests extends framework.Widget {
    createElement() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (widget_inspector._WidgetForTypeTests.new = function(opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    widget_inspector._WidgetForTypeTests.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = widget_inspector._WidgetForTypeTests.prototype;
  dart.addTypeTests(widget_inspector._WidgetForTypeTests);
  dart.addTypeCaches(widget_inspector._WidgetForTypeTests);
  dart.setMethodSignature(widget_inspector._WidgetForTypeTests, () => ({
    __proto__: dart.getMethods(widget_inspector._WidgetForTypeTests.__proto__),
    createElement: dart.fnType(framework.Element, [])
  }));
  dart.setLibraryUri(widget_inspector._WidgetForTypeTests, I[3]);
  framework.StatefulWidget = class StatefulWidget extends framework.Widget {
    createElement() {
      return new framework.StatefulElement.new(this);
    }
  };
  (framework.StatefulWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    framework.StatefulWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.StatefulWidget.prototype;
  dart.addTypeTests(framework.StatefulWidget);
  dart.addTypeCaches(framework.StatefulWidget);
  dart.setMethodSignature(framework.StatefulWidget, () => ({
    __proto__: dart.getMethods(framework.StatefulWidget.__proto__),
    createElement: dart.fnType(framework.StatefulElement, [])
  }));
  dart.setLibraryUri(framework.StatefulWidget, I[5]);
  widget_inspector.WidgetInspector = class WidgetInspector extends framework.StatefulWidget {
    get child() {
      return this[S$.child$1];
    }
    set child(value) {
      super.child = value;
    }
    get selectButtonBuilder() {
      return this[S$.selectButtonBuilder];
    }
    set selectButtonBuilder(value) {
      super.selectButtonBuilder = value;
    }
    createState() {
      return new widget_inspector._WidgetInspectorState.new();
    }
  };
  (widget_inspector.WidgetInspector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[2], 2158, 19, "child");
    let selectButtonBuilder = opts && 'selectButtonBuilder' in opts ? opts.selectButtonBuilder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.child$1] = child;
    this[S$.selectButtonBuilder] = selectButtonBuilder;
    if (!(child != null)) dart.assertFailed(null, I[2], 2160, 15, "child != null");
    widget_inspector.WidgetInspector.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = widget_inspector.WidgetInspector.prototype;
  dart.addTypeTests(widget_inspector.WidgetInspector);
  dart.addTypeCaches(widget_inspector.WidgetInspector);
  dart.setMethodSignature(widget_inspector.WidgetInspector, () => ({
    __proto__: dart.getMethods(widget_inspector.WidgetInspector.__proto__),
    createState: dart.fnType(widget_inspector._WidgetInspectorState, [])
  }));
  dart.setLibraryUri(widget_inspector.WidgetInspector, I[3]);
  dart.setFieldSignature(widget_inspector.WidgetInspector, () => ({
    __proto__: dart.getFields(widget_inspector.WidgetInspector.__proto__),
    child: dart.finalFieldType(framework.Widget),
    selectButtonBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, dart.fnType(dart.void, [])])))
  }));
  const _is_State_default = Symbol('_is_State_default');
  framework.State$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var ObjectFlagPropertyOfT = () => (ObjectFlagPropertyOfT = dart.constFn(diagnostics$.ObjectFlagProperty$(T)))();
    const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
    (Object_Diagnosticable$36.new = function() {
    }).prototype = Object_Diagnosticable$36.prototype;
    dart.applyMixin(Object_Diagnosticable$36, diagnostics$.Diagnosticable);
    class State extends Object_Diagnosticable$36 {
      get [S$._widget$1]() {
        return this[S$._widget];
      }
      set [S$._widget$1](value) {
        this[S$._widget] = TN().as(value);
      }
      get widget() {
        return dart.nullCheck(this[S$._widget$1]);
      }
      [S$._debugTypesAreRight](widget) {
        if (widget == null) dart.nullFailed(I[4], 894, 35, "widget");
        return T.is(widget);
      }
      get context() {
        if (!dart.test(dart.fn(() => {
          if (this[S$._element] == null) {
            dart.throw(assertions.FlutterError.new("This widget has been unmounted, so the State no longer has a context (and should be considered defunct). \n" + "Consider canceling any active work during \"dispose\" or using the \"mounted\" getter to determine if the State is still active."));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 907, 12, "() {\r\n      if (_element == null) {\r\n        throw FlutterError(\r\n          'This widget has been unmounted, so the State no longer has a context (and should be considered defunct). \\n'\r\n          'Consider canceling any active work during \"dispose\" or using the \"mounted\" getter to determine if the State is still active.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
        return dart.nullCheck(this[S$._element]);
      }
      get mounted() {
        return this[S$._element] != null;
      }
      initState() {
        if (!(this[S$._debugLifecycleState] == framework._StateLifecycle.created)) dart.assertFailed(null, I[4], 965, 12, "_debugLifecycleState == _StateLifecycle.created");
      }
      didUpdateWidget(oldWidget) {
        T.as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[4], 988, 36, "oldWidget");
      }
      reassemble() {
      }
      setState(fn) {
        if (fn == null) dart.nullFailed(I[4], 1048, 30, "fn");
        if (!(fn != null)) dart.assertFailed(null, I[4], 1049, 12, "fn != null");
        if (!dart.test(dart.fn(() => {
          if (this[S$._debugLifecycleState] == framework._StateLifecycle.defunct) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("setState() called after dispose(): " + dart.str(this)), new assertions.ErrorDescription.new("This error happens if you call setState() on a State object for a widget that " + "no longer appears in the widget tree (e.g., whose parent widget no longer " + "includes the widget in its build). This error can occur when code calls " + "setState() from a timer or an animation callback."), new assertions.ErrorHint.new("The preferred solution is " + "to cancel the timer or stop listening to the animation in the dispose() " + "callback. Another solution is to check the \"mounted\" property of this " + "object before calling setState() to ensure the object is still in the " + "tree."), new assertions.ErrorHint.new("This error might indicate a memory leak if setState() is being called " + "because another object is retaining a reference to this State object " + "after it has been removed from the tree. To avoid memory leaks, " + "consider breaking the reference to this object during dispose().")])));
          }
          if (this[S$._debugLifecycleState] == framework._StateLifecycle.created && !dart.test(this.mounted)) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("setState() called in constructor: " + dart.str(this)), new assertions.ErrorHint.new("This happens when you call setState() on a State object for a widget that " + "hasn't been inserted into the widget tree yet. It is not necessary to call " + "setState() in the constructor, since the state is already assumed to be dirty " + "when it is initially created.")])));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 1050, 12, "() {\r\n      if (_debugLifecycleState == _StateLifecycle.defunct) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('setState() called after dispose(): $this'),\r\n          ErrorDescription(\r\n            'This error happens if you call setState() on a State object for a widget that '\r\n            'no longer appears in the widget tree (e.g., whose parent widget no longer '\r\n            'includes the widget in its build). This error can occur when code calls '\r\n            'setState() from a timer or an animation callback.',\r\n          ),\r\n          ErrorHint(\r\n            'The preferred solution is '\r\n            'to cancel the timer or stop listening to the animation in the dispose() '\r\n            'callback. Another solution is to check the \"mounted\" property of this '\r\n            'object before calling setState() to ensure the object is still in the '\r\n            'tree.',\r\n          ),\r\n          ErrorHint(\r\n            'This error might indicate a memory leak if setState() is being called '\r\n            'because another object is retaining a reference to this State object '\r\n            'after it has been removed from the tree. To avoid memory leaks, '\r\n            'consider breaking the reference to this object during dispose().',\r\n          ),\r\n        ]);\r\n      }\r\n      if (_debugLifecycleState == _StateLifecycle.created && !mounted) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('setState() called in constructor: $this'),\r\n          ErrorHint(\r\n            'This happens when you call setState() on a State object for a widget that '\r\n            \"hasn't been inserted into the widget tree yet. It is not necessary to call \"\r\n            'setState() in the constructor, since the state is already assumed to be dirty '\r\n            'when it is initially created.',\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
        let result = fn();
        if (!dart.test(dart.fn(() => {
          if (async.Future.is(result)) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("setState() callback argument returned a Future."), new assertions.ErrorDescription.new("The setState() method on " + dart.str(this) + " was called with a closure or method that " + "returned a Future. Maybe it is marked as \"async\"."), new assertions.ErrorHint.new("Instead of performing asynchronous work inside a call to setState(), first " + "execute the work (without updating the widget state), and then synchronously " + "update the state inside a call to setState().")])));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 1089, 12, "() {\r\n      if (result is Future) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('setState() callback argument returned a Future.'),\r\n          ErrorDescription(\r\n            'The setState() method on $this was called with a closure or method that '\r\n            'returned a Future. Maybe it is marked as \"async\".',\r\n          ),\r\n          ErrorHint(\r\n            'Instead of performing asynchronous work inside a call to setState(), first '\r\n            'execute the work (without updating the widget state), and then synchronously '\r\n           'update the state inside a call to setState().',\r\n          ),\r\n        ]);\r\n      }\r\n      // We ignore other types of return values so that you can do things like:\r\n      //   setState(() => x = 3);\r\n      return true;\r\n    }()");
        dart.nullCheck(this[S$._element]).markNeedsBuild();
      }
      deactivate() {
      }
      dispose() {
        if (!(this[S$._debugLifecycleState] == framework._StateLifecycle.ready)) dart.assertFailed(null, I[4], 1161, 12, "_debugLifecycleState == _StateLifecycle.ready");
        if (!dart.test(dart.fn(() => {
          this[S$._debugLifecycleState] = framework._StateLifecycle.defunct;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 1162, 12, "() {\r\n      _debugLifecycleState = _StateLifecycle.defunct;\r\n      return true;\r\n    }()");
      }
      didChangeDependencies() {
      }
      debugFillProperties(properties) {
        if (properties == null) dart.nullFailed(I[4], 1293, 56, "properties");
        super.debugFillProperties(properties);
        if (!dart.test(dart.fn(() => {
          properties.add(new (T$.EnumPropertyOf_StateLifecycle()).new("lifecycle state", this[S$._debugLifecycleState], {defaultValue: framework._StateLifecycle.ready}));
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 1295, 12, "() {\r\n      properties.add(EnumProperty<_StateLifecycle>('lifecycle state', _debugLifecycleState, defaultValue: _StateLifecycle.ready));\r\n      return true;\r\n    }()");
        properties.add(new (ObjectFlagPropertyOfT()).new("_widget", this[S$._widget$1], {ifNull: "no widget"}));
        properties.add(new (T$.ObjectFlagPropertyOfStatefulElement()).new("_element", this[S$._element], {ifNull: "not mounted"}));
      }
    }
    (State.new = function() {
      this[S$._widget] = null;
      this[S$._debugLifecycleState] = framework._StateLifecycle.created;
      this[S$._element] = null;
      ;
    }).prototype = State.prototype;
    dart.addTypeTests(State);
    State.prototype[_is_State_default] = true;
    dart.addTypeCaches(State);
    dart.setMethodSignature(State, () => ({
      __proto__: dart.getMethods(State.__proto__),
      [S$._debugTypesAreRight]: dart.fnType(core.bool, [framework.Widget]),
      initState: dart.fnType(dart.void, []),
      didUpdateWidget: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      reassemble: dart.fnType(dart.void, []),
      setState: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      deactivate: dart.fnType(dart.void, []),
      dispose: dart.fnType(dart.void, []),
      didChangeDependencies: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(State, () => ({
      __proto__: dart.getGetters(State.__proto__),
      widget: T,
      context: framework.BuildContext,
      mounted: core.bool
    }));
    dart.setLibraryUri(State, I[5]);
    dart.setFieldSignature(State, () => ({
      __proto__: dart.getFields(State.__proto__),
      [S$._widget$1]: dart.fieldType(dart.nullable(T)),
      [S$._debugLifecycleState]: dart.fieldType(framework._StateLifecycle),
      [S$._element]: dart.fieldType(dart.nullable(framework.StatefulElement))
    }));
    return State;
  });
  framework.State = framework.State$();
  dart.addTypeTests(framework.State, _is_State_default);
  binding$5.WidgetsBindingObserver = class WidgetsBindingObserver extends core.Object {
    didPopRoute() {
      return T$.FutureOfbool().value(false);
    }
    didPushRoute(route) {
      if (route == null) dart.nullFailed(I[6], 106, 36, "route");
      return T$.FutureOfbool().value(false);
    }
    didPushRouteInformation(routeInformation) {
      if (routeInformation == null) dart.nullFailed(I[6], 120, 57, "routeInformation");
      return this.didPushRoute(dart.nullCheck(routeInformation.location));
    }
    didChangeMetrics() {
    }
    didChangeTextScaleFactor() {
    }
    didChangePlatformBrightness() {
    }
    didChangeLocales(locales) {
    }
    didChangeAppLifecycleState(state) {
      if (state == null) dart.nullFailed(I[6], 257, 53, "state");
    }
    didHaveMemoryPressure() {
    }
    didChangeAccessibilityFeatures() {
    }
  };
  (binding$5.WidgetsBindingObserver.new = function() {
    ;
  }).prototype = binding$5.WidgetsBindingObserver.prototype;
  dart.addTypeTests(binding$5.WidgetsBindingObserver);
  dart.addTypeCaches(binding$5.WidgetsBindingObserver);
  dart.setMethodSignature(binding$5.WidgetsBindingObserver, () => ({
    __proto__: dart.getMethods(binding$5.WidgetsBindingObserver.__proto__),
    didPopRoute: dart.fnType(async.Future$(core.bool), []),
    didPushRoute: dart.fnType(async.Future$(core.bool), [core.String]),
    didPushRouteInformation: dart.fnType(async.Future$(core.bool), [router.RouteInformation]),
    didChangeMetrics: dart.fnType(dart.void, []),
    didChangeTextScaleFactor: dart.fnType(dart.void, []),
    didChangePlatformBrightness: dart.fnType(dart.void, []),
    didChangeLocales: dart.fnType(dart.void, [dart.nullable(core.List$(ui.Locale))]),
    didChangeAppLifecycleState: dart.fnType(dart.void, [ui.AppLifecycleState]),
    didHaveMemoryPressure: dart.fnType(dart.void, []),
    didChangeAccessibilityFeatures: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(binding$5.WidgetsBindingObserver, I[7]);
  const State_WidgetsBindingObserver$36 = class State_WidgetsBindingObserver extends framework.State$(widget_inspector.WidgetInspector) {};
  (State_WidgetsBindingObserver$36.new = function() {
    State_WidgetsBindingObserver$36.__proto__.new.call(this);
  }).prototype = State_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(State_WidgetsBindingObserver$36, binding$5.WidgetsBindingObserver);
  widget_inspector._WidgetInspectorState = class _WidgetInspectorState extends State_WidgetsBindingObserver$36 {
    initState() {
      super.initState();
      this[S$._selectionChangedCallback] = dart.fn(() => {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }, T$.VoidTovoid());
      widget_inspector.WidgetInspectorService.instance.selectionChangedCallback = this[S$._selectionChangedCallback];
    }
    dispose() {
      if (dart.equals(widget_inspector.WidgetInspectorService.instance.selectionChangedCallback, this[S$._selectionChangedCallback])) {
        widget_inspector.WidgetInspectorService.instance.selectionChangedCallback = null;
      }
      super.dispose();
    }
    [S$._hitTestHelper](hits, edgeHits, position, object, transform) {
      if (hits == null) dart.nullFailed(I[2], 2221, 24, "hits");
      if (edgeHits == null) dart.nullFailed(I[2], 2222, 24, "edgeHits");
      if (position == null) dart.nullFailed(I[2], 2223, 12, "position");
      if (object == null) dart.nullFailed(I[2], 2224, 18, "object");
      if (transform == null) dart.nullFailed(I[2], 2225, 13, "transform");
      let hit = false;
      let inverse = vector_math_64.Matrix4.tryInvert(transform);
      if (inverse == null) {
        return false;
      }
      let localPosition = matrix_utils.MatrixUtils.transformPoint(inverse, position);
      let children = object.debugDescribeChildren();
      for (let i = dart.notNull(children[S$.$length]) - 1; i >= 0; i = i - 1) {
        let diagnostics = children[S$.$_get](i);
        if (!(diagnostics != null)) dart.assertFailed(null, I[2], 2239, 14, "diagnostics != null");
        if (diagnostics.style == diagnostics$.DiagnosticsTreeStyle.offstage || !object$.RenderObject.is(diagnostics.value)) continue;
        let child = object$.RenderObject.as(dart.nullCheck(diagnostics.value));
        let paintClip = object.describeApproximatePaintClip(child);
        if (paintClip != null && !dart.test(paintClip.contains(localPosition))) continue;
        let childTransform = transform.clone();
        object.applyPaintTransform(child, childTransform);
        if (dart.test(this[S$._hitTestHelper](hits, edgeHits, position, child, childTransform))) hit = true;
      }
      let bounds = object.semanticBounds;
      if (dart.test(bounds.contains(localPosition))) {
        hit = true;
        if (!dart.test(bounds.deflate(2).contains(localPosition))) edgeHits[S$.$add](object);
      }
      if (hit) hits[S$.$add](object);
      return hit;
    }
    hitTest(position, root) {
      if (position == null) dart.nullFailed(I[2], 2275, 37, "position");
      if (root == null) dart.nullFailed(I[2], 2275, 60, "root");
      let regularHits = T$.JSArrayOfRenderObject().of([]);
      let edgeHits = T$.JSArrayOfRenderObject().of([]);
      this[S$._hitTestHelper](regularHits, edgeHits, position, root, root.getTransformTo(null));
      function _area(object) {
        if (object == null) dart.nullFailed(I[2], 2281, 31, "object");
        let size = object.semanticBounds.size;
        return dart.notNull(size.width) * dart.notNull(size.height);
      }
      dart.fn(_area, T$.RenderObjectTodouble());
      regularHits[S$.$sort](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[2], 2285, 36, "a");
        if (b == null) dart.nullFailed(I[2], 2285, 52, "b");
        return _area(a)[S$.$compareTo](_area(b));
      }, T$.RenderObjectAndRenderObjectToint()));
      let hits = (() => {
        let t4 = T$.LinkedHashSetOfRenderObject().of(edgeHits);
        t4.addAll(regularHits);
        return t4;
      })();
      return hits[S$.$toList]();
    }
    [S$._inspectAt](position) {
      if (position == null) dart.nullFailed(I[2], 2293, 26, "position");
      if (!dart.test(this.isSelectMode)) return;
      let ignorePointer = proxy_box.RenderIgnorePointer.as(dart.nullCheck(dart.nullCheck(this[S$._ignorePointerKey].currentContext).findRenderObject()));
      let userRender = dart.nullCheck(ignorePointer.child);
      let selected = this.hitTest(position, userRender);
      this.setState(dart.fn(() => {
        this.selection.candidates = selected;
      }, T$.VoidTovoid()));
    }
    [S$._handlePanDown](event) {
      if (event == null) dart.nullFailed(I[2], 2306, 39, "event");
      this[S$._lastPointerLocation] = event.globalPosition;
      this[S$._inspectAt](event.globalPosition);
    }
    [S$._handlePanUpdate](event) {
      if (event == null) dart.nullFailed(I[2], 2311, 43, "event");
      this[S$._lastPointerLocation] = event.globalPosition;
      this[S$._inspectAt](event.globalPosition);
    }
    [S$._handlePanEnd](details) {
      if (details == null) dart.nullFailed(I[2], 2316, 37, "details");
      let bounds = ui.Offset.zero['&'](dart.nullCheck(binding$5.WidgetsBinding.instance).window.physicalSize['/'](dart.nullCheck(binding$5.WidgetsBinding.instance).window.devicePixelRatio)).deflate(1);
      if (!dart.test(bounds.contains(dart.nullCheck(this[S$._lastPointerLocation])))) {
        this.setState(dart.fn(() => {
          this.selection.clear();
        }, T$.VoidTovoid()));
      }
    }
    [S$._handleTap]() {
      if (!dart.test(this.isSelectMode)) return;
      if (this[S$._lastPointerLocation] != null) {
        this[S$._inspectAt](dart.nullCheck(this[S$._lastPointerLocation]));
        developer.inspect(this.selection.current);
      }
      this.setState(dart.fn(() => {
        if (this.widget.selectButtonBuilder != null) this.isSelectMode = false;
      }, T$.VoidTovoid()));
    }
    [S$._handleEnableSelect]() {
      this.setState(dart.fn(() => {
        this.isSelectMode = true;
      }, T$.VoidTovoid()));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[2], 2353, 29, "context");
      return new basic.Stack.new({children: (() => {
          let t5 = T$.JSArrayOfWidget().of([new gesture_detector.GestureDetector.new({onTap: dart.bind(this, S$._handleTap), onPanDown: dart.bind(this, S$._handlePanDown), onPanEnd: dart.bind(this, S$._handlePanEnd), onPanUpdate: dart.bind(this, S$._handlePanUpdate), behavior: proxy_box.HitTestBehavior.opaque, excludeFromSemantics: true, child: new basic.IgnorePointer.new({ignoring: this.isSelectMode, key: this[S$._ignorePointerKey], ignoringSemantics: false, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[7] || CT.C7}), $creationLocationd_0dea112b090073317d4: C[13] || CT.C13})]);
          if (!dart.test(this.isSelectMode) && this.widget.selectButtonBuilder != null) t5[S$.$add](new basic.Positioned.new({left: 10, bottom: 10, child: dart.nullCheck(this.widget.selectButtonBuilder)(context, dart.bind(this, S$._handleEnableSelect)), $creationLocationd_0dea112b090073317d4: C[22] || CT.C22}));
          t5[S$.$add](new widget_inspector._InspectorOverlay.new({selection: this.selection, $creationLocationd_0dea112b090073317d4: C[27] || CT.C27}));
          return t5;
        })(), $creationLocationd_0dea112b090073317d4: C[30] || CT.C30});
    }
  };
  (widget_inspector._WidgetInspectorState.new = function() {
    this[S$._lastPointerLocation] = null;
    this.isSelectMode = true;
    this[S$._ignorePointerKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
    this[S$._selectionChangedCallback] = null;
    this.selection = widget_inspector.WidgetInspectorService.instance.selection;
    widget_inspector._WidgetInspectorState.__proto__.new.call(this);
    ;
  }).prototype = widget_inspector._WidgetInspectorState.prototype;
  dart.addTypeTests(widget_inspector._WidgetInspectorState);
  dart.addTypeCaches(widget_inspector._WidgetInspectorState);
  dart.setMethodSignature(widget_inspector._WidgetInspectorState, () => ({
    __proto__: dart.getMethods(widget_inspector._WidgetInspectorState.__proto__),
    [S$._hitTestHelper]: dart.fnType(core.bool, [core.List$(object$.RenderObject), core.List$(object$.RenderObject), ui.Offset, object$.RenderObject, vector_math_64.Matrix4]),
    hitTest: dart.fnType(core.List$(object$.RenderObject), [ui.Offset, object$.RenderObject]),
    [S$._inspectAt]: dart.fnType(dart.void, [ui.Offset]),
    [S$._handlePanDown]: dart.fnType(dart.void, [drag_details.DragDownDetails]),
    [S$._handlePanUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [S$._handlePanEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [S$._handleTap]: dart.fnType(dart.void, []),
    [S$._handleEnableSelect]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(widget_inspector._WidgetInspectorState, I[3]);
  dart.setFieldSignature(widget_inspector._WidgetInspectorState, () => ({
    __proto__: dart.getFields(widget_inspector._WidgetInspectorState.__proto__),
    [S$._lastPointerLocation]: dart.fieldType(dart.nullable(ui.Offset)),
    selection: dart.finalFieldType(widget_inspector.InspectorSelection),
    isSelectMode: dart.fieldType(core.bool),
    [S$._ignorePointerKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [S$._selectionChangedCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  dart.defineLazy(widget_inspector._WidgetInspectorState, {
    /*widget_inspector._WidgetInspectorState._edgeHitMargin*/get _edgeHitMargin() {
      return 2;
    }
  }, false);
  widget_inspector.InspectorSelection = class InspectorSelection extends core.Object {
    get candidates() {
      return this[S$._candidates];
    }
    set candidates(value) {
      if (value == null) dart.nullFailed(I[2], 2390, 37, "value");
      this[S$._candidates] = value;
      this[S$._index] = 0;
      this[S$._computeCurrent]();
    }
    get index() {
      return this[S$._index];
    }
    set index(value) {
      if (value == null) dart.nullFailed(I[2], 2399, 17, "value");
      this[S$._index] = value;
      this[S$._computeCurrent]();
    }
    clear() {
      this[S$._candidates] = T$.JSArrayOfRenderObject().of([]);
      this[S$._index] = 0;
      this[S$._computeCurrent]();
    }
    get current() {
      return this[S$._current];
    }
    set current(value) {
      let t6, t6$;
      if (!dart.equals(this[S$._current], value)) {
        this[S$._current] = value;
        this[S$._currentElement] = (t6$ = T$.DebugCreatorN().as((t6 = value, t6 == null ? null : t6.debugCreator)), t6$ == null ? null : t6$.element);
      }
    }
    get currentElement() {
      return this[S$._currentElement];
    }
    set currentElement(element) {
      if (!dart.equals(this.currentElement, element)) {
        this[S$._currentElement] = element;
        this[S$._current] = dart.nullCheck(element).findRenderObject();
      }
    }
    [S$._computeCurrent]() {
      let t6, t6$;
      if (dart.notNull(this[S$._index]) < dart.notNull(this.candidates[S$.$length])) {
        this[S$._current] = this.candidates[S$.$_get](this.index);
        this[S$._currentElement] = (t6$ = T$.DebugCreatorN().as((t6 = this[S$._current], t6 == null ? null : t6.debugCreator)), t6$ == null ? null : t6$.element);
      } else {
        this[S$._current] = null;
        this[S$._currentElement] = null;
      }
    }
    get active() {
      return this[S$._current] != null && dart.test(dart.nullCheck(this[S$._current]).attached);
    }
  };
  (widget_inspector.InspectorSelection.new = function() {
    this[S$._candidates] = T$.JSArrayOfRenderObject().of([]);
    this[S$._index] = 0;
    this[S$._current] = null;
    this[S$._currentElement] = null;
    ;
  }).prototype = widget_inspector.InspectorSelection.prototype;
  dart.addTypeTests(widget_inspector.InspectorSelection);
  dart.addTypeCaches(widget_inspector.InspectorSelection);
  dart.setMethodSignature(widget_inspector.InspectorSelection, () => ({
    __proto__: dart.getMethods(widget_inspector.InspectorSelection.__proto__),
    clear: dart.fnType(dart.void, []),
    [S$._computeCurrent]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(widget_inspector.InspectorSelection, () => ({
    __proto__: dart.getGetters(widget_inspector.InspectorSelection.__proto__),
    candidates: core.List$(object$.RenderObject),
    index: core.int,
    current: dart.nullable(object$.RenderObject),
    currentElement: dart.nullable(framework.Element),
    active: core.bool
  }));
  dart.setSetterSignature(widget_inspector.InspectorSelection, () => ({
    __proto__: dart.getSetters(widget_inspector.InspectorSelection.__proto__),
    candidates: core.List$(object$.RenderObject),
    index: core.int,
    current: dart.nullable(object$.RenderObject),
    currentElement: dart.nullable(framework.Element)
  }));
  dart.setLibraryUri(widget_inspector.InspectorSelection, I[3]);
  dart.setFieldSignature(widget_inspector.InspectorSelection, () => ({
    __proto__: dart.getFields(widget_inspector.InspectorSelection.__proto__),
    [S$._candidates]: dart.fieldType(core.List$(object$.RenderObject)),
    [S$._index]: dart.fieldType(core.int),
    [S$._current]: dart.fieldType(dart.nullable(object$.RenderObject)),
    [S$._currentElement]: dart.fieldType(dart.nullable(framework.Element))
  }));
  framework.RenderObjectWidget = class RenderObjectWidget extends framework.Widget {
    updateRenderObject(context, renderObject) {
      if (context == null) dart.nullFailed(I[4], 1677, 40, "context");
      object$.RenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[4], 1677, 72, "renderObject");
    }
    didUnmountRenderObject(renderObject) {
      object$.RenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[4], 1683, 54, "renderObject");
    }
  };
  (framework.RenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    framework.RenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.RenderObjectWidget.prototype;
  dart.addTypeTests(framework.RenderObjectWidget);
  dart.addTypeCaches(framework.RenderObjectWidget);
  dart.setMethodSignature(framework.RenderObjectWidget, () => ({
    __proto__: dart.getMethods(framework.RenderObjectWidget.__proto__),
    updateRenderObject: dart.fnType(dart.void, [framework.BuildContext, dart.nullable(core.Object)]),
    didUnmountRenderObject: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(framework.RenderObjectWidget, I[5]);
  framework.LeafRenderObjectWidget = class LeafRenderObjectWidget extends framework.RenderObjectWidget {
    createElement() {
      return new framework.LeafRenderObjectElement.new(this);
    }
  };
  (framework.LeafRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    framework.LeafRenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.LeafRenderObjectWidget.prototype;
  dart.addTypeTests(framework.LeafRenderObjectWidget);
  dart.addTypeCaches(framework.LeafRenderObjectWidget);
  dart.setMethodSignature(framework.LeafRenderObjectWidget, () => ({
    __proto__: dart.getMethods(framework.LeafRenderObjectWidget.__proto__),
    createElement: dart.fnType(framework.LeafRenderObjectElement, [])
  }));
  dart.setLibraryUri(framework.LeafRenderObjectWidget, I[5]);
  widget_inspector._InspectorOverlay = class _InspectorOverlay extends framework.LeafRenderObjectWidget {
    get selection() {
      return this[S$.selection$1];
    }
    set selection(value) {
      super.selection = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 2463, 59, "context");
      return new widget_inspector._RenderInspectorOverlay.new({selection: this.selection});
    }
    updateRenderObject(context, renderObject) {
      if (context == null) dart.nullFailed(I[2], 2468, 40, "context");
      widget_inspector._RenderInspectorOverlay.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 2468, 73, "renderObject");
      renderObject.selection = this.selection;
    }
  };
  (widget_inspector._InspectorOverlay.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    if (selection == null) dart.nullFailed(I[2], 2457, 19, "selection");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.selection$1] = selection;
    widget_inspector._InspectorOverlay.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = widget_inspector._InspectorOverlay.prototype;
  dart.addTypeTests(widget_inspector._InspectorOverlay);
  dart.addTypeCaches(widget_inspector._InspectorOverlay);
  dart.setMethodSignature(widget_inspector._InspectorOverlay, () => ({
    __proto__: dart.getMethods(widget_inspector._InspectorOverlay.__proto__),
    createRenderObject: dart.fnType(widget_inspector._RenderInspectorOverlay, [framework.BuildContext])
  }));
  dart.setLibraryUri(widget_inspector._InspectorOverlay, I[3]);
  dart.setFieldSignature(widget_inspector._InspectorOverlay, () => ({
    __proto__: dart.getFields(widget_inspector._InspectorOverlay.__proto__),
    selection: dart.finalFieldType(widget_inspector.InspectorSelection)
  }));
  widget_inspector._RenderInspectorOverlay = class _RenderInspectorOverlay extends box$.RenderBox {
    get selection() {
      return this[S$._selection];
    }
    set selection(value) {
      if (value == null) dart.nullFailed(I[2], 2481, 36, "value");
      if (!dart.equals(value, this[S$._selection])) {
        this[S$._selection] = value;
      }
      this.markNeedsPaint();
    }
    get sizedByParent() {
      return true;
    }
    get alwaysNeedsCompositing() {
      return true;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[2], 2495, 40, "constraints");
      return constraints.constrain(ui.Size.infinite);
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[2], 2500, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 2500, 46, "offset");
      if (!dart.test(this.needsCompositing)) dart.assertFailed(null, I[2], 2501, 12, "needsCompositing");
      context.addLayer(new widget_inspector._InspectorOverlayLayer.new({overlayRect: new ui.Rect.fromLTWH(offset.dx, offset.dy, this.size.width, this.size.height), selection: this.selection, rootRenderObject: object$.RenderObject.is(this.parent) ? object$.RenderObject.as(dart.nullCheck(this.parent)) : null}));
    }
  };
  (widget_inspector._RenderInspectorOverlay.new = function(opts) {
    let selection = opts && 'selection' in opts ? opts.selection : null;
    if (selection == null) dart.nullFailed(I[2], 2475, 57, "selection");
    this[S$._selection] = selection;
    if (!(selection != null)) dart.assertFailed(null, I[2], 2477, 14, "selection != null");
    widget_inspector._RenderInspectorOverlay.__proto__.new.call(this);
    ;
  }).prototype = widget_inspector._RenderInspectorOverlay.prototype;
  dart.addTypeTests(widget_inspector._RenderInspectorOverlay);
  dart.addTypeCaches(widget_inspector._RenderInspectorOverlay);
  dart.setGetterSignature(widget_inspector._RenderInspectorOverlay, () => ({
    __proto__: dart.getGetters(widget_inspector._RenderInspectorOverlay.__proto__),
    selection: widget_inspector.InspectorSelection
  }));
  dart.setSetterSignature(widget_inspector._RenderInspectorOverlay, () => ({
    __proto__: dart.getSetters(widget_inspector._RenderInspectorOverlay.__proto__),
    selection: widget_inspector.InspectorSelection
  }));
  dart.setLibraryUri(widget_inspector._RenderInspectorOverlay, I[3]);
  dart.setFieldSignature(widget_inspector._RenderInspectorOverlay, () => ({
    __proto__: dart.getFields(widget_inspector._RenderInspectorOverlay.__proto__),
    [S$._selection]: dart.fieldType(widget_inspector.InspectorSelection)
  }));
  widget_inspector._TransformedRect = class _TransformedRect extends core.Object {
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) return false;
      return widget_inspector._TransformedRect.is(other) && dart.equals(other.rect, this.rect) && dart.equals(other.transform, this.transform);
    }
    get hashCode() {
      return ui.hashValues(this.rect, this.transform);
    }
  };
  (widget_inspector._TransformedRect.new = function(object, ancestor) {
    if (object == null) dart.nullFailed(I[2], 2512, 33, "object");
    this.rect = object.semanticBounds;
    this.transform = object.getTransformTo(ancestor);
    ;
  }).prototype = widget_inspector._TransformedRect.prototype;
  dart.addTypeTests(widget_inspector._TransformedRect);
  dart.addTypeCaches(widget_inspector._TransformedRect);
  dart.setLibraryUri(widget_inspector._TransformedRect, I[3]);
  dart.setFieldSignature(widget_inspector._TransformedRect, () => ({
    __proto__: dart.getFields(widget_inspector._TransformedRect.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    transform: dart.finalFieldType(vector_math_64.Matrix4)
  }));
  dart.defineExtensionMethods(widget_inspector._TransformedRect, ['_equals']);
  dart.defineExtensionAccessors(widget_inspector._TransformedRect, ['hashCode']);
  widget_inspector._InspectorOverlayRenderState = class _InspectorOverlayRenderState extends core.Object {
    get overlayRect() {
      return this[S$.overlayRect];
    }
    set overlayRect(value) {
      super.overlayRect = value;
    }
    get selected() {
      return this[S$.selected];
    }
    set selected(value) {
      super.selected = value;
    }
    get candidates() {
      return this[S$.candidates];
    }
    set candidates(value) {
      super.candidates = value;
    }
    get tooltip() {
      return this[S$.tooltip];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get textDirection() {
      return this[S$.textDirection];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) return false;
      return widget_inspector._InspectorOverlayRenderState.is(other) && dart.equals(other.overlayRect, this.overlayRect) && dart.equals(other.selected, this.selected) && dart.test(collections.listEquals(widget_inspector._TransformedRect, other.candidates, this.candidates)) && other.tooltip == this.tooltip;
    }
    get hashCode() {
      return ui.hashValues(this.overlayRect, this.selected, ui.hashList(this.candidates), this.tooltip);
    }
  };
  (widget_inspector._InspectorOverlayRenderState.new = function(opts) {
    let overlayRect = opts && 'overlayRect' in opts ? opts.overlayRect : null;
    if (overlayRect == null) dart.nullFailed(I[2], 2539, 19, "overlayRect");
    let selected = opts && 'selected' in opts ? opts.selected : null;
    if (selected == null) dart.nullFailed(I[2], 2540, 19, "selected");
    let candidates = opts && 'candidates' in opts ? opts.candidates : null;
    if (candidates == null) dart.nullFailed(I[2], 2541, 19, "candidates");
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    if (tooltip == null) dart.nullFailed(I[2], 2542, 19, "tooltip");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[2], 2543, 19, "textDirection");
    this[S$.overlayRect] = overlayRect;
    this[S$.selected] = selected;
    this[S$.candidates] = candidates;
    this[S$.tooltip] = tooltip;
    this[S$.textDirection] = textDirection;
    ;
  }).prototype = widget_inspector._InspectorOverlayRenderState.prototype;
  dart.addTypeTests(widget_inspector._InspectorOverlayRenderState);
  dart.addTypeCaches(widget_inspector._InspectorOverlayRenderState);
  dart.setLibraryUri(widget_inspector._InspectorOverlayRenderState, I[3]);
  dart.setFieldSignature(widget_inspector._InspectorOverlayRenderState, () => ({
    __proto__: dart.getFields(widget_inspector._InspectorOverlayRenderState.__proto__),
    overlayRect: dart.finalFieldType(ui.Rect),
    selected: dart.finalFieldType(widget_inspector._TransformedRect),
    candidates: dart.finalFieldType(core.List$(widget_inspector._TransformedRect)),
    tooltip: dart.finalFieldType(core.String),
    textDirection: dart.finalFieldType(ui.TextDirection)
  }));
  dart.defineExtensionMethods(widget_inspector._InspectorOverlayRenderState, ['_equals']);
  dart.defineExtensionAccessors(widget_inspector._InspectorOverlayRenderState, ['hashCode']);
  widget_inspector._InspectorOverlayLayer = class _InspectorOverlayLayer extends layer.Layer {
    get [S$._picture]() {
      let t6;
      return dart.test(this[S$.___InspectorOverlayLayer__picture_isSet]) ? (t6 = this[S$.___InspectorOverlayLayer__picture], t6) : dart.throw(new _internal.LateError.fieldNI("_picture"));
    }
    set [S$._picture](t6) {
      if (t6 == null) dart.nullFailed(I[2], 2616, 19, "null");
      this[S$.___InspectorOverlayLayer__picture_isSet] = true;
      this[S$.___InspectorOverlayLayer__picture] = t6;
    }
    addToScene(builder, layerOffset = C[1] || CT.C1) {
      if (builder == null) dart.nullFailed(I[2], 2622, 35, "builder");
      if (layerOffset == null) dart.nullFailed(I[2], 2622, 53, "layerOffset");
      if (!dart.test(this.selection.active)) return;
      let selected = dart.nullCheck(this.selection.current);
      if (!dart.test(this[S$._isInInspectorRenderObjectTree](selected))) return;
      let candidates = T$.JSArrayOf_TransformedRect().of([]);
      for (let candidate of this.selection.candidates) {
        if (dart.equals(candidate, selected) || !dart.test(candidate.attached) || !dart.test(this[S$._isInInspectorRenderObjectTree](candidate))) continue;
        candidates[S$.$add](new widget_inspector._TransformedRect.new(candidate, this.rootRenderObject));
      }
      let state = new widget_inspector._InspectorOverlayRenderState.new({overlayRect: this.overlayRect, selected: new widget_inspector._TransformedRect.new(selected, this.rootRenderObject), tooltip: dart.nullCheck(this.selection.currentElement).toStringShort(), textDirection: ui.TextDirection.ltr, candidates: candidates});
      if (!state._equals(this[S$._lastState])) {
        this[S$._lastState] = state;
        this[S$._picture] = this[S$._buildPicture](state);
      }
      builder.addPicture(layerOffset, this[S$._picture]);
    }
    [S$._buildPicture](state) {
      let t7, t7$, t7$0, t7$1;
      if (state == null) dart.nullFailed(I[2], 2654, 57, "state");
      let recorder = ui.PictureRecorder.new();
      let canvas = ui.Canvas.new(recorder, state.overlayRect);
      let size = state.overlayRect.size;
      canvas.translate(state.overlayRect.left, state.overlayRect.top);
      let fillPaint = (t7 = ui.Paint.new(), (() => {
        t7.style = ui.PaintingStyle.fill;
        t7.color = widget_inspector._kHighlightedRenderObjectFillColor;
        return t7;
      })());
      let borderPaint = (t7$ = ui.Paint.new(), (() => {
        t7$.style = ui.PaintingStyle.stroke;
        t7$.strokeWidth = 1.0;
        t7$.color = widget_inspector._kHighlightedRenderObjectBorderColor;
        return t7$;
      })());
      let selectedPaintRect = state.selected.rect.deflate(0.5);
      t7$0 = canvas;
      (() => {
        t7$0.save();
        t7$0.transform(state.selected.transform.storage);
        t7$0.drawRect(selectedPaintRect, fillPaint);
        t7$0.drawRect(selectedPaintRect, borderPaint);
        t7$0.restore();
        return t7$0;
      })();
      for (let transformedRect of state.candidates) {
        t7$1 = canvas;
        (() => {
          t7$1.save();
          t7$1.transform(transformedRect.transform.storage);
          t7$1.drawRect(transformedRect.rect.deflate(0.5), borderPaint);
          t7$1.restore();
          return t7$1;
        })();
      }
      let targetRect = matrix_utils.MatrixUtils.transformRect(state.selected.transform, state.selected.rect);
      let target = new ui.Offset.new(targetRect.left, targetRect.center.dy);
      let verticalOffset = dart.notNull(targetRect.height) / 2 + 9;
      this[S$._paintDescription](canvas, state.tooltip, state.textDirection, target, verticalOffset, size, targetRect);
      return recorder.endRecording();
    }
    [S$._paintDescription](canvas, message, textDirection, target, verticalOffset, size, targetRect) {
      let t7, t7$, t7$0, t7$1;
      if (canvas == null) dart.nullFailed(I[2], 2706, 12, "canvas");
      if (message == null) dart.nullFailed(I[2], 2707, 12, "message");
      if (textDirection == null) dart.nullFailed(I[2], 2708, 19, "textDirection");
      if (target == null) dart.nullFailed(I[2], 2709, 12, "target");
      if (verticalOffset == null) dart.nullFailed(I[2], 2710, 12, "verticalOffset");
      if (size == null) dart.nullFailed(I[2], 2711, 10, "size");
      if (targetRect == null) dart.nullFailed(I[2], 2712, 10, "targetRect");
      canvas.save();
      let maxWidth = dart.notNull(size.width) - 2 * (10 + 5);
      let textSpan = T$.TextSpanN().as((t7 = this[S$._textPainter], t7 == null ? null : t7.text));
      if (this[S$._textPainter] == null || dart.nullCheck(textSpan).text != message || this[S$._textPainterMaxWidth] !== maxWidth) {
        this[S$._textPainterMaxWidth] = maxWidth;
        this[S$._textPainter] = (t7$ = new text_painter.TextPainter.new(), (() => {
          t7$.maxLines = 5;
          t7$.ellipsis = "...";
          t7$.text = new text_span.TextSpan.new({style: widget_inspector._messageStyle, text: message});
          t7$.textDirection = textDirection;
          t7$.layout({maxWidth: maxWidth});
          return t7$;
        })());
      }
      let tooltipSize = dart.nullCheck(this[S$._textPainter]).size['+'](C[33] || CT.C33);
      let tipOffset = geometry.positionDependentBox({size: size, childSize: tooltipSize, target: target, verticalOffset: verticalOffset, preferBelow: false});
      let tooltipBackground = (t7$0 = ui.Paint.new(), (() => {
        t7$0.style = ui.PaintingStyle.fill;
        t7$0.color = widget_inspector._kTooltipBackgroundColor;
        return t7$0;
      })());
      canvas.drawRect(new ui.Rect.fromPoints(tipOffset, tipOffset.translate(tooltipSize.width, tooltipSize.height)), tooltipBackground);
      let wedgeY = tipOffset.dy;
      let tooltipBelow = dart.notNull(tipOffset.dy) > dart.notNull(target.dy);
      if (!tooltipBelow) wedgeY = dart.notNull(wedgeY) + dart.notNull(tooltipSize.height);
      let wedgeX = math.max(core.double, tipOffset.dx, target.dx) + 10 * 2;
      wedgeX = math.min(core.double, wedgeX, dart.notNull(tipOffset.dx) + dart.notNull(tooltipSize.width) - 10 * 2);
      let wedge = T$.JSArrayOfOffset().of([new ui.Offset.new(wedgeX - 10, wedgeY), new ui.Offset.new(wedgeX + 10, wedgeY), new ui.Offset.new(wedgeX, dart.notNull(wedgeY) + (tooltipBelow ? -10 : 10))]);
      canvas.drawPath((t7$1 = ui.Path.new(), (() => {
        t7$1.addPolygon(wedge, true);
        return t7$1;
      })()), tooltipBackground);
      dart.nullCheck(this[S$._textPainter]).paint(canvas, tipOffset['+'](C[34] || CT.C34));
      canvas.restore();
    }
    findAnnotations(S, result, localPosition, opts) {
      if (result == null) dart.nullFailed(I[2], 2768, 25, "result");
      if (localPosition == null) dart.nullFailed(I[2], 2769, 12, "localPosition");
      let onlyFirst = opts && 'onlyFirst' in opts ? opts.onlyFirst : null;
      return false;
    }
    [S$._isInInspectorRenderObjectTree](child) {
      if (child == null) dart.nullFailed(I[2], 2780, 52, "child");
      let current = T$.RenderObjectN().as(child.parent);
      while (current != null) {
        if (stack.RenderStack.is(current) && widget_inspector._RenderInspectorOverlay.is(current.lastChild)) {
          return dart.equals(this.rootRenderObject, current);
        }
        current = T$.RenderObjectN().as(current.parent);
      }
      return false;
    }
  };
  (widget_inspector._InspectorOverlayLayer.new = function(opts) {
    let overlayRect = opts && 'overlayRect' in opts ? opts.overlayRect : null;
    if (overlayRect == null) dart.nullFailed(I[2], 2580, 19, "overlayRect");
    let selection = opts && 'selection' in opts ? opts.selection : null;
    if (selection == null) dart.nullFailed(I[2], 2581, 19, "selection");
    let rootRenderObject = opts && 'rootRenderObject' in opts ? opts.rootRenderObject : null;
    this[S$._lastState] = null;
    this[S$.___InspectorOverlayLayer__picture] = null;
    this[S$.___InspectorOverlayLayer__picture_isSet] = false;
    this[S$._textPainter] = null;
    this[S$._textPainterMaxWidth] = null;
    this.overlayRect = overlayRect;
    this.selection = selection;
    this.rootRenderObject = rootRenderObject;
    if (!(overlayRect != null)) dart.assertFailed(null, I[2], 2583, 15, "overlayRect != null");
    if (!(selection != null)) dart.assertFailed(null, I[2], 2584, 15, "selection != null");
    widget_inspector._InspectorOverlayLayer.__proto__.new.call(this);
    let inDebugMode = false;
    if (!dart.test(dart.fn(() => {
      inDebugMode = true;
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[2], 2586, 12, "() {\r\n      inDebugMode = true;\r\n      return true;\r\n    }()");
    if (inDebugMode === false) {
      dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The inspector should never be used in production mode due to the " + "negative performance impact.")])));
    }
  }).prototype = widget_inspector._InspectorOverlayLayer.prototype;
  dart.addTypeTests(widget_inspector._InspectorOverlayLayer);
  dart.addTypeCaches(widget_inspector._InspectorOverlayLayer);
  dart.setMethodSignature(widget_inspector._InspectorOverlayLayer, () => ({
    __proto__: dart.getMethods(widget_inspector._InspectorOverlayLayer.__proto__),
    addToScene: dart.fnType(dart.void, [ui.SceneBuilder], [ui.Offset]),
    [S$._buildPicture]: dart.fnType(ui.Picture, [widget_inspector._InspectorOverlayRenderState]),
    [S$._paintDescription]: dart.fnType(dart.void, [ui.Canvas, core.String, ui.TextDirection, ui.Offset, core.double, ui.Size, ui.Rect]),
    findAnnotations: dart.gFnType(S => [core.bool, [layer.AnnotationResult$(S), ui.Offset], {onlyFirst: dart.nullable(core.bool)}, {}], S => [core.Object]),
    [S$._isInInspectorRenderObjectTree]: dart.fnType(core.bool, [object$.RenderObject])
  }));
  dart.setGetterSignature(widget_inspector._InspectorOverlayLayer, () => ({
    __proto__: dart.getGetters(widget_inspector._InspectorOverlayLayer.__proto__),
    [S$._picture]: ui.Picture
  }));
  dart.setSetterSignature(widget_inspector._InspectorOverlayLayer, () => ({
    __proto__: dart.getSetters(widget_inspector._InspectorOverlayLayer.__proto__),
    [S$._picture]: ui.Picture
  }));
  dart.setLibraryUri(widget_inspector._InspectorOverlayLayer, I[3]);
  dart.setFieldSignature(widget_inspector._InspectorOverlayLayer, () => ({
    __proto__: dart.getFields(widget_inspector._InspectorOverlayLayer.__proto__),
    selection: dart.fieldType(widget_inspector.InspectorSelection),
    overlayRect: dart.finalFieldType(ui.Rect),
    rootRenderObject: dart.finalFieldType(dart.nullable(object$.RenderObject)),
    [S$._lastState]: dart.fieldType(dart.nullable(widget_inspector._InspectorOverlayRenderState)),
    [S$.___InspectorOverlayLayer__picture]: dart.fieldType(dart.nullable(ui.Picture)),
    [S$.___InspectorOverlayLayer__picture_isSet]: dart.fieldType(core.bool),
    [S$._textPainter]: dart.fieldType(dart.nullable(text_painter.TextPainter)),
    [S$._textPainterMaxWidth]: dart.fieldType(dart.nullable(core.double))
  }));
  widget_inspector._HasCreationLocation = class _HasCreationLocation extends core.Object {};
  (widget_inspector._HasCreationLocation.new = function() {
    ;
  }).prototype = widget_inspector._HasCreationLocation.prototype;
  dart.addTypeTests(widget_inspector._HasCreationLocation);
  dart.addTypeCaches(widget_inspector._HasCreationLocation);
  dart.setLibraryUri(widget_inspector._HasCreationLocation, I[3]);
  widget_inspector._Location = class _Location extends core.Object {
    get file() {
      return this[S$.file];
    }
    set file(value) {
      super.file = value;
    }
    get line() {
      return this[S$.line];
    }
    set line(value) {
      super.line = value;
    }
    get column() {
      return this[S$.column];
    }
    set column(value) {
      super.column = value;
    }
    get name() {
      return this[S$.name];
    }
    set name(value) {
      super.name = value;
    }
    get parameterLocations() {
      return this[S$.parameterLocations];
    }
    set parameterLocations(value) {
      super.parameterLocations = value;
    }
    toJsonMap() {
      let json = new (T$.IdentityMapOfString$ObjectN()).from(["file", this.file, "line", this.line, "column", this.column]);
      if (this.name != null) {
        json[S$.$_set]("name", this.name);
      }
      if (this.parameterLocations != null) {
        json[S$.$_set]("parameterLocations", dart.nullCheck(this.parameterLocations)[S$.$map](T$.MapOfString$ObjectN(), dart.fn(location => {
          if (location == null) dart.nullFailed(I[2], 2853, 20, "location");
          return location.toJsonMap();
        }, T$._LocationToMapOfString$ObjectN()))[S$.$toList]());
      }
      return json;
    }
    toString() {
      let t7;
      let parts = T$.JSArrayOfString().of([]);
      if (this.name != null) {
        parts[S$.$add](dart.nullCheck(this.name));
      }
      parts[S$.$add](this.file);
      t7 = parts;
      (() => {
        t7[S$.$add](dart.str(this.line));
        t7[S$.$add](dart.str(this.column));
        return t7;
      })();
      return parts[S$.$join](":");
    }
  };
  (widget_inspector._Location.new = function(opts) {
    let file = opts && 'file' in opts ? opts.file : null;
    if (file == null) dart.nullFailed(I[2], 2821, 19, "file");
    let line = opts && 'line' in opts ? opts.line : null;
    if (line == null) dart.nullFailed(I[2], 2822, 19, "line");
    let column = opts && 'column' in opts ? opts.column : null;
    if (column == null) dart.nullFailed(I[2], 2823, 19, "column");
    let name = opts && 'name' in opts ? opts.name : null;
    let parameterLocations = opts && 'parameterLocations' in opts ? opts.parameterLocations : null;
    this[S$.file] = file;
    this[S$.line] = line;
    this[S$.column] = column;
    this[S$.name] = name;
    this[S$.parameterLocations] = parameterLocations;
    ;
  }).prototype = widget_inspector._Location.prototype;
  dart.addTypeTests(widget_inspector._Location);
  dart.addTypeCaches(widget_inspector._Location);
  dart.setMethodSignature(widget_inspector._Location, () => ({
    __proto__: dart.getMethods(widget_inspector._Location.__proto__),
    toJsonMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(widget_inspector._Location, I[3]);
  dart.setFieldSignature(widget_inspector._Location, () => ({
    __proto__: dart.getFields(widget_inspector._Location.__proto__),
    file: dart.finalFieldType(core.String),
    line: dart.finalFieldType(core.int),
    column: dart.finalFieldType(core.int),
    name: dart.finalFieldType(dart.nullable(core.String)),
    parameterLocations: dart.finalFieldType(dart.nullable(core.List$(widget_inspector._Location)))
  }));
  dart.defineExtensionMethods(widget_inspector._Location, ['toString']);
  widget_inspector.DevToolsDeepLinkProperty = class DevToolsDeepLinkProperty extends diagnostics$.DiagnosticsProperty$(core.String) {};
  (widget_inspector.DevToolsDeepLinkProperty.new = function(description, url) {
    if (description == null) dart.nullFailed(I[2], 2998, 35, "description");
    if (url == null) dart.nullFailed(I[2], 2998, 55, "url");
    if (!(description != null)) dart.assertFailed(null, I[2], 2999, 14, "description != null");
    if (!(url != null)) dart.assertFailed(null, I[2], 3000, 14, "url != null");
    widget_inspector.DevToolsDeepLinkProperty.__proto__.new.call(this, "", url, {description: description, level: diagnostics$.DiagnosticLevel.info});
    ;
  }).prototype = widget_inspector.DevToolsDeepLinkProperty.prototype;
  dart.addTypeTests(widget_inspector.DevToolsDeepLinkProperty);
  dart.addTypeCaches(widget_inspector.DevToolsDeepLinkProperty);
  dart.setLibraryUri(widget_inspector.DevToolsDeepLinkProperty, I[3]);
  widget_inspector.InspectorSerializationDelegate = class InspectorSerializationDelegate extends core.Object {
    get service() {
      return this[S$.service];
    }
    set service(value) {
      super.service = value;
    }
    get groupName() {
      return this[S$.groupName];
    }
    set groupName(value) {
      super.groupName = value;
    }
    get summaryTree() {
      return this[S$.summaryTree];
    }
    set summaryTree(value) {
      super.summaryTree = value;
    }
    get maxDescendentsTruncatableNode() {
      return this[S$.maxDescendentsTruncatableNode];
    }
    set maxDescendentsTruncatableNode(value) {
      super.maxDescendentsTruncatableNode = value;
    }
    get includeProperties() {
      return this[S$.includeProperties];
    }
    set includeProperties(value) {
      super.includeProperties = value;
    }
    get subtreeDepth() {
      return this[S$.subtreeDepth];
    }
    set subtreeDepth(value) {
      super.subtreeDepth = value;
    }
    get expandPropertyValues() {
      return this[S$.expandPropertyValues];
    }
    set expandPropertyValues(value) {
      super.expandPropertyValues = value;
    }
    get addAdditionalPropertiesCallback() {
      return this[S$.addAdditionalPropertiesCallback];
    }
    set addAdditionalPropertiesCallback(value) {
      super.addAdditionalPropertiesCallback = value;
    }
    get [S$._interactive]() {
      return this.groupName != null;
    }
    additionalNodeProperties(node) {
      let t7;
      if (node == null) dart.nullFailed(I[2], 3156, 65, "node");
      let result = new (T$.IdentityMapOfString$ObjectN()).new();
      let value = node.value;
      if (dart.test(this[S$._interactive])) {
        result[S$.$_set]("objectId", this.service.toId(node, dart.nullCheck(this.groupName)));
        result[S$.$_set]("valueId", this.service.toId(value, dart.nullCheck(this.groupName)));
      }
      if (dart.test(this.summaryTree)) {
        result[S$.$_set]("summaryTree", true);
      }
      let creationLocation = widget_inspector._getCreationLocation(value);
      if (creationLocation != null) {
        result[S$.$_set]("locationId", widget_inspector._toLocationId(creationLocation));
        result[S$.$_set]("creationLocation", creationLocation.toJsonMap());
        if (dart.test(this.service[S$._isLocalCreationLocation](creationLocation))) {
          this[S$._nodesCreatedByLocalProject][S$.$add](node);
          result[S$.$_set]("createdByLocalProject", true);
        }
      }
      if (this.addAdditionalPropertiesCallback != null) {
        result[S$.$addAll]((t7 = dart.nullCheck(this.addAdditionalPropertiesCallback)(node, this), t7 == null ? new (T$.IdentityMapOfString$Object()).new() : t7));
      }
      return result;
    }
    delegateForNode(node) {
      if (node == null) dart.nullFailed(I[2], 3182, 68, "node");
      return dart.test(this.summaryTree) || dart.notNull(this.subtreeDepth) > 1 || dart.test(this.service[S$._shouldShowInSummaryTree](node)) ? this.copyWith({subtreeDepth: dart.notNull(this.subtreeDepth) - 1}) : this;
    }
    filterChildren(children, owner) {
      if (children == null) dart.nullFailed(I[2], 3194, 62, "children");
      if (owner == null) dart.nullFailed(I[2], 3194, 88, "owner");
      return this.service[S$._filterChildren](children, this);
    }
    filterProperties(properties, owner) {
      if (properties == null) dart.nullFailed(I[2], 3199, 64, "properties");
      if (owner == null) dart.nullFailed(I[2], 3199, 92, "owner");
      let createdByLocalProject = this[S$._nodesCreatedByLocalProject][S$.$contains](owner);
      return properties[S$.$where](dart.fn(node => {
        if (node == null) dart.nullFailed(I[2], 3201, 46, "node");
        return !dart.test(node.isFiltered(dart.test(createdByLocalProject) ? diagnostics$.DiagnosticLevel.fine : diagnostics$.DiagnosticLevel.info));
      }, T$.DiagnosticsNodeTobool()))[S$.$toList]();
    }
    truncateNodesList(nodes, owner) {
      if (nodes == null) dart.nullFailed(I[2], 3207, 65, "nodes");
      if (dart.notNull(this.maxDescendentsTruncatableNode) >= 0 && dart.nullCheck(owner).allowTruncate === true && dart.notNull(nodes[S$.$length]) > dart.notNull(this.maxDescendentsTruncatableNode)) {
        nodes = this.service[S$._truncateNodes](nodes, this.maxDescendentsTruncatableNode);
      }
      return nodes;
    }
    copyWith(opts) {
      let t7, t7$;
      let subtreeDepth = opts && 'subtreeDepth' in opts ? opts.subtreeDepth : null;
      let includeProperties = opts && 'includeProperties' in opts ? opts.includeProperties : null;
      return new widget_inspector.InspectorSerializationDelegate.new({groupName: this.groupName, summaryTree: this.summaryTree, maxDescendentsTruncatableNode: this.maxDescendentsTruncatableNode, expandPropertyValues: this.expandPropertyValues, subtreeDepth: (t7 = subtreeDepth, t7 == null ? this.subtreeDepth : t7), includeProperties: (t7$ = includeProperties, t7$ == null ? this.includeProperties : t7$), service: this.service, addAdditionalPropertiesCallback: this.addAdditionalPropertiesCallback});
    }
  };
  (widget_inspector.InspectorSerializationDelegate.new = function(opts) {
    let groupName = opts && 'groupName' in opts ? opts.groupName : null;
    let summaryTree = opts && 'summaryTree' in opts ? opts.summaryTree : false;
    if (summaryTree == null) dart.nullFailed(I[2], 3071, 10, "summaryTree");
    let maxDescendentsTruncatableNode = opts && 'maxDescendentsTruncatableNode' in opts ? opts.maxDescendentsTruncatableNode : -1;
    if (maxDescendentsTruncatableNode == null) dart.nullFailed(I[2], 3072, 10, "maxDescendentsTruncatableNode");
    let expandPropertyValues = opts && 'expandPropertyValues' in opts ? opts.expandPropertyValues : true;
    if (expandPropertyValues == null) dart.nullFailed(I[2], 3073, 10, "expandPropertyValues");
    let subtreeDepth = opts && 'subtreeDepth' in opts ? opts.subtreeDepth : 1;
    if (subtreeDepth == null) dart.nullFailed(I[2], 3074, 10, "subtreeDepth");
    let includeProperties = opts && 'includeProperties' in opts ? opts.includeProperties : false;
    if (includeProperties == null) dart.nullFailed(I[2], 3075, 10, "includeProperties");
    let service = opts && 'service' in opts ? opts.service : null;
    if (service == null) dart.nullFailed(I[2], 3076, 19, "service");
    let addAdditionalPropertiesCallback = opts && 'addAdditionalPropertiesCallback' in opts ? opts.addAdditionalPropertiesCallback : null;
    this[S$._nodesCreatedByLocalProject] = T$.JSArrayOfDiagnosticsNode().of([]);
    this[S$.groupName] = groupName;
    this[S$.summaryTree] = summaryTree;
    this[S$.maxDescendentsTruncatableNode] = maxDescendentsTruncatableNode;
    this[S$.expandPropertyValues] = expandPropertyValues;
    this[S$.subtreeDepth] = subtreeDepth;
    this[S$.includeProperties] = includeProperties;
    this[S$.service] = service;
    this[S$.addAdditionalPropertiesCallback] = addAdditionalPropertiesCallback;
    ;
  }).prototype = widget_inspector.InspectorSerializationDelegate.prototype;
  dart.addTypeTests(widget_inspector.InspectorSerializationDelegate);
  dart.addTypeCaches(widget_inspector.InspectorSerializationDelegate);
  widget_inspector.InspectorSerializationDelegate[dart.implements] = () => [diagnostics$.DiagnosticsSerializationDelegate];
  dart.setMethodSignature(widget_inspector.InspectorSerializationDelegate, () => ({
    __proto__: dart.getMethods(widget_inspector.InspectorSerializationDelegate.__proto__),
    additionalNodeProperties: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [diagnostics$.DiagnosticsNode]),
    delegateForNode: dart.fnType(diagnostics$.DiagnosticsSerializationDelegate, [diagnostics$.DiagnosticsNode]),
    filterChildren: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), diagnostics$.DiagnosticsNode]),
    filterProperties: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), diagnostics$.DiagnosticsNode]),
    truncateNodesList: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [core.List$(diagnostics$.DiagnosticsNode), dart.nullable(diagnostics$.DiagnosticsNode)]),
    copyWith: dart.fnType(diagnostics$.DiagnosticsSerializationDelegate, [], {includeProperties: dart.nullable(core.bool), subtreeDepth: dart.nullable(core.int)}, {})
  }));
  dart.setGetterSignature(widget_inspector.InspectorSerializationDelegate, () => ({
    __proto__: dart.getGetters(widget_inspector.InspectorSerializationDelegate.__proto__),
    [S$._interactive]: core.bool
  }));
  dart.setLibraryUri(widget_inspector.InspectorSerializationDelegate, I[3]);
  dart.setFieldSignature(widget_inspector.InspectorSerializationDelegate, () => ({
    __proto__: dart.getFields(widget_inspector.InspectorSerializationDelegate.__proto__),
    service: dart.finalFieldType(widget_inspector.WidgetInspectorService),
    groupName: dart.finalFieldType(dart.nullable(core.String)),
    summaryTree: dart.finalFieldType(core.bool),
    maxDescendentsTruncatableNode: dart.finalFieldType(core.int),
    includeProperties: dart.finalFieldType(core.bool),
    subtreeDepth: dart.finalFieldType(core.int),
    expandPropertyValues: dart.finalFieldType(core.bool),
    addAdditionalPropertiesCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Map$(core.String, core.Object)), [diagnostics$.DiagnosticsNode, widget_inspector.InspectorSerializationDelegate]))),
    [S$._nodesCreatedByLocalProject]: dart.finalFieldType(core.List$(diagnostics$.DiagnosticsNode))
  }));
  widget_inspector._calculateSubtreeBoundsHelper = function _calculateSubtreeBoundsHelper(object, transform) {
    if (object == null) dart.nullFailed(I[2], 284, 49, "object");
    if (transform == null) dart.nullFailed(I[2], 284, 65, "transform");
    let bounds = matrix_utils.MatrixUtils.transformRect(transform, object.semanticBounds);
    object.visitChildren(dart.fn(child => {
      if (child == null) dart.nullFailed(I[2], 287, 38, "child");
      let childTransform = transform.clone();
      object.applyPaintTransform(child, childTransform);
      let childBounds = widget_inspector._calculateSubtreeBoundsHelper(child, childTransform);
      let paintClip = object.describeApproximatePaintClip(child);
      if (paintClip != null) {
        let transformedPaintClip = matrix_utils.MatrixUtils.transformRect(transform, paintClip);
        childBounds = childBounds.intersect(transformedPaintClip);
      }
      if (dart.test(childBounds.isFinite) && !dart.test(childBounds.isEmpty)) {
        bounds = dart.test(bounds.isEmpty) ? childBounds : bounds.expandToInclude(childBounds);
      }
    }, T$.RenderObjectTovoid()));
    return bounds;
  };
  widget_inspector._calculateSubtreeBounds = function _calculateSubtreeBounds(object) {
    if (object == null) dart.nullFailed(I[2], 309, 43, "object");
    return widget_inspector._calculateSubtreeBoundsHelper(object, vector_math_64.Matrix4.identity());
  };
  widget_inspector._followDiagnosticableChain = function _followDiagnosticableChain(chain, opts) {
    if (chain == null) dart.nullFailed(I[2], 635, 24, "chain");
    let name = opts && 'name' in opts ? opts.name : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let path = T$.JSArrayOf_DiagnosticsPathNode().of([]);
    if (dart.test(chain[S$.$isEmpty])) return path;
    let diagnostic = chain[S$.$first].toDiagnosticsNode({name: name, style: style});
    for (let i = 1; i < dart.notNull(chain[S$.$length]); i = i + 1) {
      let target = chain[S$.$_get](i);
      let foundMatch = false;
      let children = diagnostic.getChildren();
      for (let j = 0; j < dart.notNull(children[S$.$length]); j = j + 1) {
        let child = children[S$.$_get](j);
        if (dart.equals(child.value, target)) {
          foundMatch = true;
          path[S$.$add](new widget_inspector._DiagnosticsPathNode.new({node: diagnostic, children: children, childIndex: j}));
          diagnostic = child;
          break;
        }
      }
      if (!foundMatch) dart.assertFailed(null, I[2], 660, 12, "foundMatch");
    }
    path[S$.$add](new widget_inspector._DiagnosticsPathNode.new({node: diagnostic, children: diagnostic.getChildren()}));
    return path;
  };
  widget_inspector._isDebugCreator = function _isDebugCreator(node) {
    if (node == null) dart.nullFailed(I[2], 2871, 38, "node");
    return object$.DiagnosticsDebugCreator.is(node);
  };
  widget_inspector.transformDebugCreator = function transformDebugCreator(properties) {
    if (properties == null) dart.nullFailed(I[2], 2877, 75, "properties");
    return new (T$.SyncIterableOfDiagnosticsNode()).new(function* transformDebugCreator() {
      let pending = T$.JSArrayOfDiagnosticsNode().of([]);
      let errorSummary = null;
      for (let node of properties) {
        if (assertions.ErrorSummary.is(node)) {
          errorSummary = node;
          break;
        }
      }
      let foundStackTrace = false;
      for (let node of properties) {
        if (!foundStackTrace && assertions.DiagnosticsStackTrace.is(node)) foundStackTrace = true;
        if (dart.test(widget_inspector._isDebugCreator(node))) {
          yield* dart.nullCheck(widget_inspector._parseDiagnosticsNode(node, errorSummary));
        } else {
          if (foundStackTrace) {
            pending[S$.$add](node);
          } else {
            yield node;
          }
        }
      }
      yield* pending;
    });
  };
  widget_inspector._parseDiagnosticsNode = function _parseDiagnosticsNode(node, errorSummary) {
    if (node == null) dart.nullFailed(I[2], 2907, 19, "node");
    if (!dart.test(widget_inspector._isDebugCreator(node))) return null;
    let debugCreator = framework.DebugCreator.as(dart.nullCheck(node.value));
    let element = debugCreator.element;
    return widget_inspector._describeRelevantUserCode(element, errorSummary);
  };
  widget_inspector._describeRelevantUserCode = function _describeRelevantUserCode(element, errorSummary) {
    if (element == null) dart.nullFailed(I[2], 2918, 11, "element");
    if (!dart.test(widget_inspector.WidgetInspectorService.instance.isWidgetCreationTracked())) {
      return T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new("Widget creation tracking is currently disabled. Enabling " + "it enables improved error messages. It can be enabled by passing " + "`--track-widget-creation` to `flutter run` or `flutter test`."), new assertions.ErrorSpacer.new()]);
    }
    function isOverflowError() {
      if (errorSummary != null && dart.test(errorSummary.value[S$.$isNotEmpty])) {
        let summary = errorSummary.value[S$.$first];
        if (typeof summary == 'string' && summary[S$.$startsWith]("A RenderFlex overflowed by")) {
          return true;
        }
      }
      return false;
    }
    dart.fn(isOverflowError, T$.VoidTobool());
    let nodes = T$.JSArrayOfDiagnosticsNode().of([]);
    function processElement(target) {
      if (target == null) dart.nullFailed(I[2], 2943, 31, "target");
      if (dart.test(widget_inspector.debugIsLocalCreationLocation(target))) {
        let devToolsDiagnostic = null;
        if (dart.test(isOverflowError())) {
          let devToolsInspectorUri = widget_inspector.WidgetInspectorService.instance[S$._devToolsInspectorUriForElement](target);
          if (devToolsInspectorUri != null) {
            devToolsDiagnostic = new widget_inspector.DevToolsDeepLinkProperty.new("To inspect this widget in Flutter DevTools, visit: " + dart.str(devToolsInspectorUri), devToolsInspectorUri);
          }
        }
        nodes[S$.$addAll]((() => {
          let t7 = T$.JSArrayOfDiagnosticsNode().of([new diagnostics$.DiagnosticsBlock.new({name: "The relevant error-causing widget was", children: T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorDescription.new(dart.str(target.widget.toStringShort()) + " " + dart.str(widget_inspector._describeCreationLocation(target)))])}), new assertions.ErrorSpacer.new()]);
          if (devToolsDiagnostic != null) t7[S$.$addAll](T$.JSArrayOfDiagnosticsNode().of([devToolsDiagnostic, new assertions.ErrorSpacer.new()]));
          return t7;
        })());
        return false;
      }
      return true;
    }
    dart.fn(processElement, T$.ElementTobool());
    if (dart.test(processElement(element))) element.visitAncestorElements(processElement);
    return nodes;
  };
  widget_inspector.debugIsLocalCreationLocation = function debugIsLocalCreationLocation(object) {
    if (object == null) dart.nullFailed(I[2], 3012, 42, "object");
    let isLocal = false;
    if (!dart.test(dart.fn(() => {
      let location = widget_inspector._getCreationLocation(object);
      if (location == null) isLocal = false;
      isLocal = widget_inspector.WidgetInspectorService.instance[S$._isLocalCreationLocation](location);
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[2], 3014, 10, "() {\r\n    final _Location? location = _getCreationLocation(object);\r\n    if (location == null)\r\n      isLocal =  false;\r\n    isLocal = WidgetInspectorService.instance._isLocalCreationLocation(location);\r\n    return true;\r\n  }()");
    return isLocal;
  };
  widget_inspector._describeCreationLocation = function _describeCreationLocation(object) {
    let t8;
    if (object == null) dart.nullFailed(I[2], 3031, 42, "object");
    let location = widget_inspector._getCreationLocation(object);
    t8 = location;
    return t8 == null ? null : dart.toString(t8);
  };
  widget_inspector._getCreationLocation = function _getCreationLocation(object) {
    let candidate = framework.Element.is(object) ? object.widget : object;
    return widget_inspector._HasCreationLocation.is(candidate) ? candidate[S$._location] : null;
  };
  widget_inspector._toLocationId = function _toLocationId(location) {
    if (location == null) dart.nullFailed(I[2], 3052, 29, "location");
    let id = widget_inspector._locationToId[S$.$_get](location);
    if (id != null) {
      return id;
    }
    id = widget_inspector._locations[S$.$length];
    widget_inspector._locations[S$.$add](location);
    widget_inspector._locationToId[S$.$_set](location, id);
    return id;
  };
  dart.defineLazy(widget_inspector, {
    /*widget_inspector._kMaxTooltipLines*/get _kMaxTooltipLines() {
      return 5;
    },
    /*widget_inspector._kTooltipBackgroundColor*/get _kTooltipBackgroundColor() {
      return C[35] || CT.C35;
    },
    /*widget_inspector._kHighlightedRenderObjectFillColor*/get _kHighlightedRenderObjectFillColor() {
      return C[36] || CT.C36;
    },
    /*widget_inspector._kHighlightedRenderObjectBorderColor*/get _kHighlightedRenderObjectBorderColor() {
      return C[37] || CT.C37;
    },
    /*widget_inspector._kScreenEdgeMargin*/get _kScreenEdgeMargin() {
      return 10;
    },
    /*widget_inspector._kTooltipPadding*/get _kTooltipPadding() {
      return 5;
    },
    /*widget_inspector._kInspectButtonMargin*/get _kInspectButtonMargin() {
      return 10;
    },
    /*widget_inspector._kOffScreenMargin*/get _kOffScreenMargin() {
      return 1;
    },
    /*widget_inspector._messageStyle*/get _messageStyle() {
      return C[38] || CT.C38;
    },
    /*widget_inspector._locationToId*/get _locationToId() {
      return new (T$.LinkedMapOf_Location$int()).new();
    },
    /*widget_inspector._locations*/get _locations() {
      return T$.JSArrayOf_Location().of([]);
    }
  }, false);
  framework.StatelessWidget = class StatelessWidget extends framework.Widget {
    createElement() {
      return new framework.StatelessElement.new(this);
    }
  };
  (framework.StatelessWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    framework.StatelessWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.StatelessWidget.prototype;
  dart.addTypeTests(framework.StatelessWidget);
  dart.addTypeCaches(framework.StatelessWidget);
  dart.setMethodSignature(framework.StatelessWidget, () => ({
    __proto__: dart.getMethods(framework.StatelessWidget.__proto__),
    createElement: dart.fnType(framework.StatelessElement, [])
  }));
  dart.setLibraryUri(framework.StatelessWidget, I[5]);
  title$.Title = class Title extends framework.StatelessWidget {
    get title() {
      return this[S$.title];
    }
    set title(value) {
      super.title = value;
    }
    get color() {
      return this[S$.color];
    }
    set color(value) {
      super.color = value;
    }
    get child() {
      return this[S$.child$2];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[8], 42, 29, "context");
      system_chrome.SystemChrome.setApplicationSwitcherDescription(new system_chrome.ApplicationSwitcherDescription.new({label: this.title, primaryColor: this.color.value}));
      return this.child;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[8], 53, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.StringProperty.new("title", this.title, {defaultValue: ""}));
      properties.add(new colors.ColorProperty.new("color", this.color, {defaultValue: null}));
    }
  };
  (title$.Title.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let title = opts && 'title' in opts ? opts.title : "";
    if (title == null) dart.nullFailed(I[8], 20, 10, "title");
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[8], 21, 19, "color");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[8], 22, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.title] = title;
    this[S$.color] = color;
    this[S$.child$2] = child;
    if (!(title != null)) dart.assertFailed(null, I[8], 23, 15, "title != null");
    if (!(color != null && color.alpha === 255)) dart.assertFailed(null, I[8], 24, 15, "color != null && color.alpha == 0xFF");
    title$.Title.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = title$.Title.prototype;
  dart.addTypeTests(title$.Title);
  dart.addTypeCaches(title$.Title);
  dart.setMethodSignature(title$.Title, () => ({
    __proto__: dart.getMethods(title$.Title.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(title$.Title, I[9]);
  dart.setFieldSignature(title$.Title, () => ({
    __proto__: dart.getFields(title$.Title.__proto__),
    title: dart.finalFieldType(core.String),
    color: dart.finalFieldType(ui.Color),
    child: dart.finalFieldType(framework.Widget)
  }));
  semantics_debugger.SemanticsDebugger = class SemanticsDebugger extends framework.StatefulWidget {
    get child() {
      return this[S$.child$3];
    }
    set child(value) {
      super.child = value;
    }
    get labelStyle() {
      return this[S$.labelStyle];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    createState() {
      return new semantics_debugger._SemanticsDebuggerState.new();
    }
  };
  (semantics_debugger.SemanticsDebugger.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[10], 29, 19, "child");
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : C[40] || CT.C40;
    if (labelStyle == null) dart.nullFailed(I[10], 30, 10, "labelStyle");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.child$3] = child;
    this[S$.labelStyle] = labelStyle;
    if (!(child != null)) dart.assertFailed(null, I[10], 35, 15, "child != null");
    if (!(labelStyle != null)) dart.assertFailed(null, I[10], 36, 15, "labelStyle != null");
    semantics_debugger.SemanticsDebugger.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = semantics_debugger.SemanticsDebugger.prototype;
  dart.addTypeTests(semantics_debugger.SemanticsDebugger);
  dart.addTypeCaches(semantics_debugger.SemanticsDebugger);
  dart.setMethodSignature(semantics_debugger.SemanticsDebugger, () => ({
    __proto__: dart.getMethods(semantics_debugger.SemanticsDebugger.__proto__),
    createState: dart.fnType(semantics_debugger._SemanticsDebuggerState, [])
  }));
  dart.setLibraryUri(semantics_debugger.SemanticsDebugger, I[11]);
  dart.setFieldSignature(semantics_debugger.SemanticsDebugger, () => ({
    __proto__: dart.getFields(semantics_debugger.SemanticsDebugger.__proto__),
    child: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(text_style.TextStyle)
  }));
  const State_WidgetsBindingObserver$36$ = class State_WidgetsBindingObserver extends framework.State$(semantics_debugger.SemanticsDebugger) {};
  (State_WidgetsBindingObserver$36$.new = function() {
    State_WidgetsBindingObserver$36$.__proto__.new.call(this);
  }).prototype = State_WidgetsBindingObserver$36$.prototype;
  dart.applyMixin(State_WidgetsBindingObserver$36$, binding$5.WidgetsBindingObserver);
  semantics_debugger._SemanticsDebuggerState = class _SemanticsDebuggerState extends State_WidgetsBindingObserver$36$ {
    get [S$._client]() {
      let t8;
      return dart.test(this[S$.___SemanticsDebuggerState__client_isSet]) ? (t8 = this[S$.___SemanticsDebuggerState__client], t8) : dart.throw(new _internal.LateError.fieldNI("_client"));
    }
    set [S$._client](t8) {
      if (t8 == null) dart.nullFailed(I[10], 52, 25, "null");
      this[S$.___SemanticsDebuggerState__client_isSet] = true;
      this[S$.___SemanticsDebuggerState__client] = t8;
    }
    initState() {
      let t9;
      super.initState();
      this[S$._client] = (t9 = new semantics_debugger._SemanticsClient.new(dart.nullCheck(binding$5.WidgetsBinding.instance).pipelineOwner), (() => {
        t9.addListener(dart.bind(this, S$._update));
        return t9;
      })());
      dart.nullCheck(binding$5.WidgetsBinding.instance).addObserver(this);
    }
    dispose() {
      let t9;
      t9 = this[S$._client];
      (() => {
        t9.removeListener(dart.bind(this, S$._update));
        t9.dispose();
        return t9;
      })();
      dart.nullCheck(binding$5.WidgetsBinding.instance).removeObserver(this);
      super.dispose();
    }
    didChangeMetrics() {
      this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
    [S$._update]() {
      dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.fn(timeStamp => {
        if (timeStamp == null) dart.nullFailed(I[10], 83, 63, "timeStamp");
        if (dart.test(this.mounted)) {
          this.setState(dart.fn(() => {
          }, T$.VoidTovoid()));
        }
      }, T$.DurationTovoid()));
    }
    [S$._handlePointerDown](event) {
      if (event == null) dart.nullFailed(I[10], 99, 44, "event");
      this.setState(dart.fn(() => {
        this[S$._lastPointerDownLocation] = event.position['*'](dart.nullCheck(binding$5.WidgetsBinding.instance).window.devicePixelRatio);
      }, T$.VoidTovoid()));
    }
    [S$._handleTap$1]() {
      if (!(this[S$._lastPointerDownLocation] != null)) dart.assertFailed(null, I[10], 108, 12, "_lastPointerDownLocation != null");
      this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.tap);
      this.setState(dart.fn(() => {
        this[S$._lastPointerDownLocation] = null;
      }, T$.VoidTovoid()));
    }
    [S$._handleLongPress]() {
      if (!(this[S$._lastPointerDownLocation] != null)) dart.assertFailed(null, I[10], 116, 12, "_lastPointerDownLocation != null");
      this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.longPress);
      this.setState(dart.fn(() => {
        this[S$._lastPointerDownLocation] = null;
      }, T$.VoidTovoid()));
    }
    [S$._handlePanEnd$1](details) {
      if (details == null) dart.nullFailed(I[10], 123, 37, "details");
      let vx = details.velocity.pixelsPerSecond.dx;
      let vy = details.velocity.pixelsPerSecond.dy;
      if (vx[S$.$abs]() === vy[S$.$abs]()) return;
      if (vx[S$.$abs]() > vy[S$.$abs]()) {
        if (vx[S$.$sign] < 0) {
          this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.decrease);
          this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.scrollLeft);
        } else {
          this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.increase);
          this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.scrollRight);
        }
      } else {
        if (vy[S$.$sign] < 0)
          this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.scrollUp);
        else
          this[S$._performAction](dart.nullCheck(this[S$._lastPointerDownLocation]), ui.SemanticsAction.scrollDown);
      }
      this.setState(dart.fn(() => {
        this[S$._lastPointerDownLocation] = null;
      }, T$.VoidTovoid()));
    }
    [S$._performAction](position, action) {
      let t9;
      if (position == null) dart.nullFailed(I[10], 147, 30, "position");
      if (action == null) dart.nullFailed(I[10], 147, 56, "action");
      t9 = this[S$._pipelineOwner].semanticsOwner;
      t9 == null ? null : t9.performActionAt(position, action);
    }
    get [S$._pipelineOwner]() {
      return dart.nullCheck(binding$5.WidgetsBinding.instance).pipelineOwner;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[10], 156, 29, "context");
      return new basic.CustomPaint.new({foregroundPainter: new semantics_debugger._SemanticsDebuggerPainter.new(this[S$._pipelineOwner], this[S$._client].generation, this[S$._lastPointerDownLocation], dart.nullCheck(binding$5.WidgetsBinding.instance).window.devicePixelRatio, this.widget.labelStyle), child: new gesture_detector.GestureDetector.new({behavior: proxy_box.HitTestBehavior.opaque, onTap: dart.bind(this, S$._handleTap$1), onLongPress: dart.bind(this, S$._handleLongPress), onPanEnd: dart.bind(this, S$._handlePanEnd$1), excludeFromSemantics: true, child: new basic.Listener.new({onPointerDown: dart.bind(this, S$._handlePointerDown), behavior: proxy_box.HitTestBehavior.opaque, child: new basic.IgnorePointer.new({ignoringSemantics: false, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[42] || CT.C42}), $creationLocationd_0dea112b090073317d4: C[46] || CT.C46}), $creationLocationd_0dea112b090073317d4: C[51] || CT.C51}), $creationLocationd_0dea112b090073317d4: C[59] || CT.C59});
    }
  };
  (semantics_debugger._SemanticsDebuggerState.new = function() {
    this[S$.___SemanticsDebuggerState__client] = null;
    this[S$.___SemanticsDebuggerState__client_isSet] = false;
    this[S$._lastPointerDownLocation] = null;
    semantics_debugger._SemanticsDebuggerState.__proto__.new.call(this);
    ;
  }).prototype = semantics_debugger._SemanticsDebuggerState.prototype;
  dart.addTypeTests(semantics_debugger._SemanticsDebuggerState);
  dart.addTypeCaches(semantics_debugger._SemanticsDebuggerState);
  dart.setMethodSignature(semantics_debugger._SemanticsDebuggerState, () => ({
    __proto__: dart.getMethods(semantics_debugger._SemanticsDebuggerState.__proto__),
    [S$._update]: dart.fnType(dart.void, []),
    [S$._handlePointerDown]: dart.fnType(dart.void, [events.PointerDownEvent]),
    [S$._handleTap$1]: dart.fnType(dart.void, []),
    [S$._handleLongPress]: dart.fnType(dart.void, []),
    [S$._handlePanEnd$1]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [S$._performAction]: dart.fnType(dart.void, [ui.Offset, ui.SemanticsAction]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(semantics_debugger._SemanticsDebuggerState, () => ({
    __proto__: dart.getGetters(semantics_debugger._SemanticsDebuggerState.__proto__),
    [S$._client]: semantics_debugger._SemanticsClient,
    [S$._pipelineOwner]: object$.PipelineOwner
  }));
  dart.setSetterSignature(semantics_debugger._SemanticsDebuggerState, () => ({
    __proto__: dart.getSetters(semantics_debugger._SemanticsDebuggerState.__proto__),
    [S$._client]: semantics_debugger._SemanticsClient
  }));
  dart.setLibraryUri(semantics_debugger._SemanticsDebuggerState, I[11]);
  dart.setFieldSignature(semantics_debugger._SemanticsDebuggerState, () => ({
    __proto__: dart.getFields(semantics_debugger._SemanticsDebuggerState.__proto__),
    [S$.___SemanticsDebuggerState__client]: dart.fieldType(dart.nullable(semantics_debugger._SemanticsClient)),
    [S$.___SemanticsDebuggerState__client_isSet]: dart.fieldType(core.bool),
    [S$._lastPointerDownLocation]: dart.fieldType(dart.nullable(ui.Offset))
  }));
  semantics_debugger._SemanticsClient = class _SemanticsClient extends change_notifier.ChangeNotifier {
    dispose() {
      dart.nullCheck(this[S$._semanticsHandle]).dispose();
      this[S$._semanticsHandle] = null;
      super.dispose();
    }
    [S$._didUpdateSemantics]() {
      this.generation = dart.notNull(this.generation) + 1;
      this.notifyListeners();
    }
  };
  (semantics_debugger._SemanticsClient.new = function(pipelineOwner) {
    if (pipelineOwner == null) dart.nullFailed(I[10], 185, 34, "pipelineOwner");
    this[S$._semanticsHandle] = null;
    this.generation = 0;
    semantics_debugger._SemanticsClient.__proto__.new.call(this);
    this[S$._semanticsHandle] = pipelineOwner.ensureSemantics({listener: dart.bind(this, S$._didUpdateSemantics)});
  }).prototype = semantics_debugger._SemanticsClient.prototype;
  dart.addTypeTests(semantics_debugger._SemanticsClient);
  dart.addTypeCaches(semantics_debugger._SemanticsClient);
  dart.setMethodSignature(semantics_debugger._SemanticsClient, () => ({
    __proto__: dart.getMethods(semantics_debugger._SemanticsClient.__proto__),
    [S$._didUpdateSemantics]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(semantics_debugger._SemanticsClient, I[11]);
  dart.setFieldSignature(semantics_debugger._SemanticsClient, () => ({
    __proto__: dart.getFields(semantics_debugger._SemanticsClient.__proto__),
    [S$._semanticsHandle]: dart.fieldType(dart.nullable(object$.SemanticsHandle)),
    generation: dart.fieldType(core.int)
  }));
  semantics_debugger._SemanticsDebuggerPainter = class _SemanticsDebuggerPainter extends custom_paint.CustomPainter {
    get owner() {
      return this[S$.owner];
    }
    set owner(value) {
      super.owner = value;
    }
    get generation() {
      return this[S$.generation];
    }
    set generation(value) {
      super.generation = value;
    }
    get pointerPosition() {
      return this[S$.pointerPosition];
    }
    set pointerPosition(value) {
      super.pointerPosition = value;
    }
    get devicePixelRatio() {
      return this[S$.devicePixelRatio];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get labelStyle() {
      return this[S$.labelStyle$1];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get [S$._rootSemanticsNode]() {
      let t9;
      t9 = this.owner.semanticsOwner;
      return t9 == null ? null : t9.rootSemanticsNode;
    }
    paint(canvas, size) {
      if (canvas == null) dart.nullFailed(I[10], 222, 21, "canvas");
      if (size == null) dart.nullFailed(I[10], 222, 34, "size");
      let rootNode = this[S$._rootSemanticsNode];
      canvas.save();
      canvas.scale(1.0 / dart.notNull(this.devicePixelRatio), 1.0 / dart.notNull(this.devicePixelRatio));
      if (rootNode != null) this[S$._paint](canvas, rootNode, this[S$._findDepth](rootNode));
      if (this.pointerPosition != null) {
        let paint = ui.Paint.new();
        paint.color = C[63] || CT.C63;
        canvas.drawCircle(dart.nullCheck(this.pointerPosition), 10.0 * dart.notNull(this.devicePixelRatio), paint);
      }
      canvas.restore();
    }
    shouldRepaint(oldDelegate) {
      semantics_debugger._SemanticsDebuggerPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[10], 237, 48, "oldDelegate");
      return !dart.equals(this.owner, oldDelegate.owner) || this.generation != oldDelegate.generation || !dart.equals(this.pointerPosition, oldDelegate.pointerPosition);
    }
    getMessage(node) {
      if (node == null) dart.nullFailed(I[10], 244, 35, "node");
      let data = node.getSemanticsData();
      let annotations = T$.JSArrayOfString().of([]);
      let wantsTap = false;
      if (dart.test(data.hasFlag(ui.SemanticsFlag.hasCheckedState))) {
        annotations[S$.$add](dart.test(data.hasFlag(ui.SemanticsFlag.isChecked)) ? "checked" : "unchecked");
        wantsTap = true;
      }
      if (dart.test(data.hasFlag(ui.SemanticsFlag.isTextField))) {
        annotations[S$.$add]("textfield");
        wantsTap = true;
      }
      if (dart.test(data.hasAction(ui.SemanticsAction.tap))) {
        if (!wantsTap) annotations[S$.$add]("button");
      } else {
        if (wantsTap) annotations[S$.$add]("disabled");
      }
      if (dart.test(data.hasAction(ui.SemanticsAction.longPress))) annotations[S$.$add]("long-pressable");
      let isScrollable = dart.test(data.hasAction(ui.SemanticsAction.scrollLeft)) || dart.test(data.hasAction(ui.SemanticsAction.scrollRight)) || dart.test(data.hasAction(ui.SemanticsAction.scrollUp)) || dart.test(data.hasAction(ui.SemanticsAction.scrollDown));
      let isAdjustable = dart.test(data.hasAction(ui.SemanticsAction.increase)) || dart.test(data.hasAction(ui.SemanticsAction.decrease));
      if (isScrollable) annotations[S$.$add]("scrollable");
      if (isAdjustable) annotations[S$.$add]("adjustable");
      if (!(data.label != null)) dart.assertFailed(null, I[10], 283, 12, "data.label != null");
      let message = null;
      if (data.label[S$.$isEmpty]) {
        message = annotations[S$.$join]("; ");
      } else {
        let label = null;
        if (data.textDirection == null) {
          label = "⁨" + dart.str(data.label) + "⁩";
          annotations[S$.$insert](0, "MISSING TEXT DIRECTION");
        } else {
          switch (dart.nullCheck(data.textDirection)) {
            case C[64] || CT.C64:
            {
              label = "⁧" + dart.str(data.label) + "‬";
              break;
            }
            case C[65] || CT.C65:
            {
              label = data.label;
              break;
            }
            default:
            {
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
            }
          }
        }
        if (dart.test(annotations[S$.$isEmpty])) {
          message = label;
        } else {
          message = dart.str(label) + " (" + dart.str(annotations[S$.$join]("; ")) + ")";
        }
      }
      return message[S$.$trim]();
    }
    [S$._paintMessage](canvas, node) {
      let t9;
      if (canvas == null) dart.nullFailed(I[10], 312, 29, "canvas");
      if (node == null) dart.nullFailed(I[10], 312, 51, "node");
      let message = this.getMessage(node);
      if (message[S$.$isEmpty]) return;
      let rect = node.rect;
      canvas.save();
      canvas.clipRect(rect);
      let textPainter = (t9 = new text_painter.TextPainter.new(), (() => {
        t9.text = new text_span.TextSpan.new({style: this.labelStyle, text: message});
        t9.textDirection = ui.TextDirection.ltr;
        t9.textAlign = ui.TextAlign.center;
        t9.layout({maxWidth: rect.width});
        return t9;
      })());
      textPainter.paint(canvas, alignment$.Alignment.center.inscribe(textPainter.size, rect).topLeft);
      canvas.restore();
    }
    [S$._findDepth](node) {
      if (node == null) dart.nullFailed(I[10], 332, 32, "node");
      if (!dart.test(node.hasChildren) || dart.test(node.mergeAllDescendantsIntoThisNode)) return 1;
      let childrenDepth = 0;
      node.visitChildren(dart.fn(child => {
        if (child == null) dart.nullFailed(I[10], 336, 39, "child");
        childrenDepth = math.max(core.int, childrenDepth, this[S$._findDepth](child));
        return true;
      }, T$.SemanticsNodeTobool()));
      return childrenDepth + 1;
    }
    [S$._paint](canvas, node, rank) {
      let t9, t9$, t9$0;
      if (canvas == null) dart.nullFailed(I[10], 343, 22, "canvas");
      if (node == null) dart.nullFailed(I[10], 343, 44, "node");
      if (rank == null) dart.nullFailed(I[10], 343, 54, "rank");
      canvas.save();
      if (node.transform != null) canvas.transform(dart.nullCheck(node.transform).storage);
      let rect = node.rect;
      if (!dart.test(rect.isEmpty)) {
        let lineColor = new ui.Color.new(4278190080 + dart.notNull(math.Random.new(node.id).nextInt(16777215)));
        let innerRect = rect.deflate(dart.notNull(rank) * 1.0);
        if (dart.test(innerRect.isEmpty)) {
          let fill = (t9 = ui.Paint.new(), (() => {
            t9.color = lineColor;
            t9.style = ui.PaintingStyle.fill;
            return t9;
          })());
          canvas.drawRect(rect, fill);
        } else {
          let fill = (t9$ = ui.Paint.new(), (() => {
            t9$.color = C[39] || CT.C39;
            t9$.style = ui.PaintingStyle.fill;
            return t9$;
          })());
          canvas.drawRect(rect, fill);
          let line = (t9$0 = ui.Paint.new(), (() => {
            t9$0.strokeWidth = dart.notNull(rank) * 2.0;
            t9$0.color = lineColor;
            t9$0.style = ui.PaintingStyle.stroke;
            return t9$0;
          })());
          canvas.drawRect(innerRect, line);
        }
        this[S$._paintMessage](canvas, node);
      }
      if (!dart.test(node.mergeAllDescendantsIntoThisNode)) {
        let childRank = dart.notNull(rank) - 1;
        node.visitChildren(dart.fn(child => {
          if (child == null) dart.nullFailed(I[10], 371, 41, "child");
          this[S$._paint](canvas, child, childRank);
          return true;
        }, T$.SemanticsNodeTobool()));
      }
      canvas.restore();
    }
  };
  (semantics_debugger._SemanticsDebuggerPainter.new = function(owner, generation, pointerPosition, devicePixelRatio, labelStyle) {
    if (owner == null) dart.nullFailed(I[10], 209, 40, "owner");
    if (generation == null) dart.nullFailed(I[10], 209, 52, "generation");
    if (devicePixelRatio == null) dart.nullFailed(I[10], 209, 91, "devicePixelRatio");
    if (labelStyle == null) dart.nullFailed(I[10], 209, 114, "labelStyle");
    this[S$.owner] = owner;
    this[S$.generation] = generation;
    this[S$.pointerPosition] = pointerPosition;
    this[S$.devicePixelRatio] = devicePixelRatio;
    this[S$.labelStyle$1] = labelStyle;
    semantics_debugger._SemanticsDebuggerPainter.__proto__.new.call(this);
    ;
  }).prototype = semantics_debugger._SemanticsDebuggerPainter.prototype;
  dart.addTypeTests(semantics_debugger._SemanticsDebuggerPainter);
  dart.addTypeCaches(semantics_debugger._SemanticsDebuggerPainter);
  dart.setMethodSignature(semantics_debugger._SemanticsDebuggerPainter, () => ({
    __proto__: dart.getMethods(semantics_debugger._SemanticsDebuggerPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    getMessage: dart.fnType(core.String, [semantics.SemanticsNode]),
    [S$._paintMessage]: dart.fnType(dart.void, [ui.Canvas, semantics.SemanticsNode]),
    [S$._findDepth]: dart.fnType(core.int, [semantics.SemanticsNode]),
    [S$._paint]: dart.fnType(dart.void, [ui.Canvas, semantics.SemanticsNode, core.int])
  }));
  dart.setGetterSignature(semantics_debugger._SemanticsDebuggerPainter, () => ({
    __proto__: dart.getGetters(semantics_debugger._SemanticsDebuggerPainter.__proto__),
    [S$._rootSemanticsNode]: dart.nullable(semantics.SemanticsNode)
  }));
  dart.setLibraryUri(semantics_debugger._SemanticsDebuggerPainter, I[11]);
  dart.setFieldSignature(semantics_debugger._SemanticsDebuggerPainter, () => ({
    __proto__: dart.getFields(semantics_debugger._SemanticsDebuggerPainter.__proto__),
    owner: dart.finalFieldType(object$.PipelineOwner),
    generation: dart.finalFieldType(core.int),
    pointerPosition: dart.finalFieldType(dart.nullable(ui.Offset)),
    devicePixelRatio: dart.finalFieldType(core.double),
    labelStyle: dart.finalFieldType(text_style.TextStyle)
  }));
  router.RouteInformation = class RouteInformation extends core.Object {
    get location() {
      return this[S$.location];
    }
    set location(value) {
      super.location = value;
    }
    get state() {
      return this[S$.state];
    }
    set state(value) {
      super.state = value;
    }
  };
  (router.RouteInformation.new = function(opts) {
    let location = opts && 'location' in opts ? opts.location : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[S$.location] = location;
    this[S$.state] = state;
    ;
  }).prototype = router.RouteInformation.prototype;
  dart.addTypeTests(router.RouteInformation);
  dart.addTypeCaches(router.RouteInformation);
  dart.setLibraryUri(router.RouteInformation, I[12]);
  dart.setFieldSignature(router.RouteInformation, () => ({
    __proto__: dart.getFields(router.RouteInformation.__proto__),
    location: dart.finalFieldType(dart.nullable(core.String)),
    state: dart.finalFieldType(dart.nullable(core.Object))
  }));
  const _is_Router_default = Symbol('_is_Router_default');
  router.Router$ = dart.generic(T => {
    var _RouterStateOfT = () => (_RouterStateOfT = dart.constFn(router._RouterState$(T)))();
    class Router extends framework.StatefulWidget {
      get routeInformationProvider() {
        return this[S$.routeInformationProvider];
      }
      set routeInformationProvider(value) {
        super.routeInformationProvider = value;
      }
      get routeInformationParser() {
        return this[S$.routeInformationParser];
      }
      set routeInformationParser(value) {
        super.routeInformationParser = value;
      }
      get routerDelegate() {
        return this[S$.routerDelegate];
      }
      set routerDelegate(value) {
        super.routerDelegate = value;
      }
      get backButtonDispatcher() {
        return this[S$.backButtonDispatcher];
      }
      set backButtonDispatcher(value) {
        super.backButtonDispatcher = value;
      }
      static of(context) {
        if (context == null) dart.nullFailed(I[13], 309, 42, "context");
        let scope = context.dependOnInheritedWidgetOfExactType(router._RouterScope);
        if (!dart.test(dart.fn(() => {
          if (scope == null) {
            dart.throw(assertions.FlutterError.new("Router operation requested with a context that does not include a Router.\n" + "The context used to retrieve the Router must be that of a widget that " + "is a descendant of a Router widget."));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[13], 311, 12, "() {\r\n      if (scope == null) {\r\n        throw FlutterError(\r\n          'Router operation requested with a context that does not include a Router.\\n'\r\n          'The context used to retrieve the Router must be that of a widget that '\r\n          'is a descendant of a Router widget.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
        return dart.nullCheck(scope).routerState.widget;
      }
      static maybeOf(context) {
        let t9;
        if (context == null) dart.nullFailed(I[13], 337, 48, "context");
        let scope = context.dependOnInheritedWidgetOfExactType(router._RouterScope);
        t9 = scope;
        return t9 == null ? null : t9.routerState.widget;
      }
      static navigate(context, callback) {
        if (context == null) dart.nullFailed(I[13], 366, 37, "context");
        if (callback == null) dart.nullFailed(I[13], 366, 59, "callback");
        let scope = router._RouterScope.as(dart.nullCheck(context.getElementForInheritedWidgetOfExactType(router._RouterScope)).widget);
        scope.routerState[S$._setStateWithExplicitReportStatus](router._IntentionToReportRouteInformation.must, callback);
      }
      static neglect(context, callback) {
        if (context == null) dart.nullFailed(I[13], 392, 36, "context");
        if (callback == null) dart.nullFailed(I[13], 392, 58, "callback");
        let scope = router._RouterScope.as(dart.nullCheck(context.getElementForInheritedWidgetOfExactType(router._RouterScope)).widget);
        scope.routerState[S$._setStateWithExplicitReportStatus](router._IntentionToReportRouteInformation.ignore, callback);
      }
      createState() {
        return new (_RouterStateOfT()).new();
      }
    }
    (Router.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let routeInformationProvider = opts && 'routeInformationProvider' in opts ? opts.routeInformationProvider : null;
      let routeInformationParser = opts && 'routeInformationParser' in opts ? opts.routeInformationParser : null;
      let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
      if (routerDelegate == null) dart.nullFailed(I[13], 244, 19, "routerDelegate");
      let backButtonDispatcher = opts && 'backButtonDispatcher' in opts ? opts.backButtonDispatcher : null;
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[S$.routeInformationProvider] = routeInformationProvider;
      this[S$.routeInformationParser] = routeInformationParser;
      this[S$.routerDelegate] = routerDelegate;
      this[S$.backButtonDispatcher] = backButtonDispatcher;
      if (!(routeInformationProvider == null === (routeInformationParser == null))) dart.assertFailed("Both routeInformationProvider and routeInformationParser must be provided " + "if this router parses route information. Otherwise, they should both " + "be null.", I[13], 247, 11, "(routeInformationProvider == null) == (routeInformationParser == null)");
      if (!(routerDelegate != null)) dart.assertFailed(null, I[13], 252, 16, "routerDelegate != null");
      Router.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = Router.prototype;
    dart.addTypeTests(Router);
    Router.prototype[_is_Router_default] = true;
    dart.addTypeCaches(Router);
    dart.setMethodSignature(Router, () => ({
      __proto__: dart.getMethods(Router.__proto__),
      createState: dart.fnType(framework.State$(router.Router$(T)), [])
    }));
    dart.setLibraryUri(Router, I[12]);
    dart.setFieldSignature(Router, () => ({
      __proto__: dart.getFields(Router.__proto__),
      routeInformationProvider: dart.finalFieldType(dart.nullable(router.RouteInformationProvider)),
      routeInformationParser: dart.finalFieldType(dart.nullable(router.RouteInformationParser$(T))),
      routerDelegate: dart.finalFieldType(router.RouterDelegate$(T)),
      backButtonDispatcher: dart.finalFieldType(dart.nullable(router.BackButtonDispatcher))
    }));
    return Router;
  });
  router.Router = router.Router$();
  dart.addTypeTests(router.Router, _is_Router_default);
  router._IntentionToReportRouteInformation = class _IntentionToReportRouteInformation extends core.Object {
    toString() {
      return this[S$._name$1];
    }
  };
  (router._IntentionToReportRouteInformation.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[13], 406, 6, "index");
    if (_name == null) dart.nullFailed(I[13], 406, 6, "_name");
    this.index = index;
    this[S$._name$1] = _name;
    ;
  }).prototype = router._IntentionToReportRouteInformation.prototype;
  dart.addTypeTests(router._IntentionToReportRouteInformation);
  dart.addTypeCaches(router._IntentionToReportRouteInformation);
  dart.setLibraryUri(router._IntentionToReportRouteInformation, I[12]);
  dart.setFieldSignature(router._IntentionToReportRouteInformation, () => ({
    __proto__: dart.getFields(router._IntentionToReportRouteInformation.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(router._IntentionToReportRouteInformation, ['toString']);
  router._IntentionToReportRouteInformation.none = C[66] || CT.C66;
  router._IntentionToReportRouteInformation.maybe = C[67] || CT.C67;
  router._IntentionToReportRouteInformation.must = C[68] || CT.C68;
  router._IntentionToReportRouteInformation.ignore = C[69] || CT.C69;
  router._IntentionToReportRouteInformation.values = C[70] || CT.C70;
  const _is__RouterState_default = Symbol('_is__RouterState_default');
  router._RouterState$ = dart.generic(T => {
    var RouterOfT = () => (RouterOfT = dart.constFn(router.Router$(T)))();
    var SynchronousFutureOfT = () => (SynchronousFutureOfT = dart.constFn(synchronous_future.SynchronousFuture$(T)))();
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var TToFutureOfT = () => (TToFutureOfT = dart.constFn(dart.fnType(FutureOfT(), [T])))();
    class _RouterState extends framework.State$(router.Router$(T)) {
      get [S$._currentIntentionToReport]() {
        let t9;
        return dart.test(this[S$.___RouterState__currentIntentionToReport_isSet]) ? (t9 = this[S$.___RouterState__currentIntentionToReport], t9) : dart.throw(new _internal.LateError.fieldNI("_currentIntentionToReport"));
      }
      set [S$._currentIntentionToReport](t9) {
        if (t9 == null) dart.nullFailed(I[13], 420, 43, "null");
        this[S$.___RouterState__currentIntentionToReport_isSet] = true;
        this[S$.___RouterState__currentIntentionToReport] = t9;
      }
      initState() {
        let t10, t10$;
        super.initState();
        t10 = this.widget.routeInformationProvider;
        t10 == null ? null : t10.addListener(dart.bind(this, S$._handleRouteInformationProviderNotification));
        t10$ = this.widget.backButtonDispatcher;
        t10$ == null ? null : t10$.addCallback(dart.bind(this, S$._handleBackButtonDispatcherNotification));
        this.widget.routerDelegate.addListener(dart.bind(this, S$._handleRouterDelegateNotification));
        this[S$._currentIntentionToReport] = router._IntentionToReportRouteInformation.none;
        if (this.widget.routeInformationProvider != null) {
          this[S$._processInitialRoute]();
        }
      }
      [S$._scheduleRouteInformationReportingTask]() {
        if (dart.test(this[S$._routeInformationReportingTaskScheduled])) return;
        if (!(this[S$._currentIntentionToReport] != router._IntentionToReportRouteInformation.none)) dart.assertFailed(null, I[13], 441, 12, "_currentIntentionToReport != _IntentionToReportRouteInformation.none");
        this[S$._routeInformationReportingTaskScheduled] = true;
        dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.bind(this, S$._reportRouteInformation));
      }
      [S$._reportRouteInformation](timestamp) {
        if (timestamp == null) dart.nullFailed(I[13], 446, 41, "timestamp");
        if (!dart.test(this[S$._routeInformationReportingTaskScheduled])) dart.assertFailed(null, I[13], 447, 12, "_routeInformationReportingTaskScheduled");
        this[S$._routeInformationReportingTaskScheduled] = false;
        switch (this[S$._currentIntentionToReport]) {
          case C[66] || CT.C66:
          {
            if (!false) dart.assertFailed(null, I[13], 452, 16, "false");
            return;
          }
          case C[69] || CT.C69:
          {
            let routeInformation = this[S$._retrieveNewRouteInformation]();
            if (routeInformation != null) {
              this[S$._lastSeenLocation] = routeInformation.location;
            }
            this[S$._currentIntentionToReport] = router._IntentionToReportRouteInformation.none;
            return;
          }
          case C[67] || CT.C67:
          {
            let routeInformation = this[S$._retrieveNewRouteInformation]();
            if (routeInformation != null) {
              if (this[S$._lastSeenLocation] != routeInformation.location) {
                dart.nullCheck(this.widget.routeInformationProvider).routerReportsNewRouteInformation(routeInformation);
                this[S$._lastSeenLocation] = routeInformation.location;
              }
            }
            this[S$._currentIntentionToReport] = router._IntentionToReportRouteInformation.none;
            return;
          }
          case C[68] || CT.C68:
          {
            let routeInformation = this[S$._retrieveNewRouteInformation]();
            if (routeInformation != null) {
              dart.nullCheck(this.widget.routeInformationProvider).routerReportsNewRouteInformation(routeInformation);
              this[S$._lastSeenLocation] = routeInformation.location;
            }
            this[S$._currentIntentionToReport] = router._IntentionToReportRouteInformation.none;
            return;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      [S$._retrieveNewRouteInformation]() {
        let configuration = this.widget.routerDelegate.currentConfiguration;
        if (configuration == null) return null;
        let routeInformation = dart.nullCheck(this.widget.routeInformationParser).restoreRouteInformation(configuration);
        if (!dart.test(dart.fn(() => {
          if (routeInformation == null) {
            assertions.FlutterError.reportError(C[71] || CT.C71);
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[13], 491, 12, "(){\r\n      if (routeInformation == null) {\r\n        FlutterError.reportError(\r\n          const FlutterErrorDetails(\r\n            exception:\r\n              'Router.routeInformationParser returns a null RouteInformation. '\r\n              'If you opt for route information reporting, the '\r\n              'routeInformationParser must not report null for a given '\r\n              'configuration.',\r\n          ),\r\n        );\r\n      }\r\n      return true;\r\n    }()");
        return routeInformation;
      }
      [S$._setStateWithExplicitReportStatus](status, fn) {
        if (status == null) dart.nullFailed(I[13], 509, 40, "status");
        if (fn == null) dart.nullFailed(I[13], 510, 18, "fn");
        if (!(status != null)) dart.assertFailed(null, I[13], 512, 12, "status != null");
        if (!(dart.notNull(status.index) >= dart.notNull(router._IntentionToReportRouteInformation.must.index))) dart.assertFailed(null, I[13], 513, 12, "status.index >= _IntentionToReportRouteInformation.must.index");
        if (!dart.test(dart.fn(() => {
          if (dart.notNull(this[S$._currentIntentionToReport].index) >= dart.notNull(router._IntentionToReportRouteInformation.must.index) && this[S$._currentIntentionToReport] != status) {
            assertions.FlutterError.reportError(C[72] || CT.C72);
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[13], 514, 12, "() {\r\n      if (_currentIntentionToReport.index >= _IntentionToReportRouteInformation.must.index &&\r\n          _currentIntentionToReport != status) {\r\n        FlutterError.reportError(\r\n          const FlutterErrorDetails(\r\n            exception:\r\n              'Both Router.navigate and Router.neglect have been called in this '\r\n              'build cycle, and the Router cannot decide whether to report the '\r\n              'route information. Please make sure only one of them is called '\r\n              'within the same build cycle.',\r\n          ),\r\n        );\r\n      }\r\n      return true;\r\n    }()");
        this[S$._currentIntentionToReport] = status;
        this[S$._scheduleRouteInformationReportingTask]();
        fn();
      }
      [S$._maybeNeedToReportRouteInformation]() {
        this[S$._currentIntentionToReport] = this[S$._currentIntentionToReport] != router._IntentionToReportRouteInformation.none ? this[S$._currentIntentionToReport] : router._IntentionToReportRouteInformation.maybe;
        this[S$._scheduleRouteInformationReportingTask]();
      }
      didChangeDependencies() {
        super.didChangeDependencies();
        this[S$._maybeNeedToReportRouteInformation]();
      }
      didUpdateWidget(oldWidget) {
        let t10, t10$, t10$0, t10$1, t10$2, t10$3;
        RouterOfT().as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[13], 548, 34, "oldWidget");
        super.didUpdateWidget(oldWidget);
        if (!dart.equals(this.widget.routeInformationProvider, oldWidget.routeInformationProvider) || !dart.equals(this.widget.backButtonDispatcher, oldWidget.backButtonDispatcher) || !dart.equals(this.widget.routeInformationParser, oldWidget.routeInformationParser) || !dart.equals(this.widget.routerDelegate, oldWidget.routerDelegate)) {
          this[S$._currentRouteInformationParserTransaction] = new core.Object.new();
          this[S$._currentRouterDelegateTransaction] = new core.Object.new();
        }
        if (!dart.equals(this.widget.routeInformationProvider, oldWidget.routeInformationProvider)) {
          t10 = oldWidget.routeInformationProvider;
          t10 == null ? null : t10.removeListener(dart.bind(this, S$._handleRouteInformationProviderNotification));
          t10$ = this.widget.routeInformationProvider;
          t10$ == null ? null : t10$.addListener(dart.bind(this, S$._handleRouteInformationProviderNotification));
          if (!dart.equals((t10$0 = oldWidget.routeInformationProvider, t10$0 == null ? null : t10$0.value), (t10$1 = this.widget.routeInformationProvider, t10$1 == null ? null : t10$1.value))) {
            this[S$._handleRouteInformationProviderNotification]();
          }
        }
        if (!dart.equals(this.widget.backButtonDispatcher, oldWidget.backButtonDispatcher)) {
          t10$2 = oldWidget.backButtonDispatcher;
          t10$2 == null ? null : t10$2.removeCallback(dart.bind(this, S$._handleBackButtonDispatcherNotification));
          t10$3 = this.widget.backButtonDispatcher;
          t10$3 == null ? null : t10$3.addCallback(dart.bind(this, S$._handleBackButtonDispatcherNotification));
        }
        if (!dart.equals(this.widget.routerDelegate, oldWidget.routerDelegate)) {
          oldWidget.routerDelegate.removeListener(dart.bind(this, S$._handleRouterDelegateNotification));
          this.widget.routerDelegate.addListener(dart.bind(this, S$._handleRouterDelegateNotification));
          this[S$._maybeNeedToReportRouteInformation]();
        }
      }
      dispose() {
        let t10, t10$;
        t10 = this.widget.routeInformationProvider;
        t10 == null ? null : t10.removeListener(dart.bind(this, S$._handleRouteInformationProviderNotification));
        t10$ = this.widget.backButtonDispatcher;
        t10$ == null ? null : t10$.removeCallback(dart.bind(this, S$._handleBackButtonDispatcherNotification));
        this.widget.routerDelegate.removeListener(dart.bind(this, S$._handleRouterDelegateNotification));
        this[S$._currentRouteInformationParserTransaction] = null;
        this[S$._currentRouterDelegateTransaction] = null;
        super.dispose();
      }
      [S$._processInitialRoute]() {
        this[S$._currentRouteInformationParserTransaction] = new core.Object.new();
        this[S$._currentRouterDelegateTransaction] = new core.Object.new();
        this[S$._lastSeenLocation] = dart.nullCheck(dart.nullCheck(this.widget.routeInformationProvider).value).location;
        dart.nullCheck(this.widget.routeInformationParser).parseRouteInformation(dart.nullCheck(dart.nullCheck(this.widget.routeInformationProvider).value)).then(T, this[S$._verifyRouteInformationParserStillCurrent](this[S$._currentRouteInformationParserTransaction], this.widget)).then(dart.void, dart.bind(this.widget.routerDelegate, 'setInitialRoutePath')).then(dart.void, this[S$._verifyRouterDelegatePushStillCurrent](this[S$._currentRouterDelegateTransaction], this.widget)).then(dart.void, dart.bind(this, S$._rebuild));
      }
      [S$._handleRouteInformationProviderNotification]() {
        this[S$._currentRouteInformationParserTransaction] = new core.Object.new();
        this[S$._currentRouterDelegateTransaction] = new core.Object.new();
        this[S$._lastSeenLocation] = dart.nullCheck(dart.nullCheck(this.widget.routeInformationProvider).value).location;
        dart.nullCheck(this.widget.routeInformationParser).parseRouteInformation(dart.nullCheck(dart.nullCheck(this.widget.routeInformationProvider).value)).then(T, this[S$._verifyRouteInformationParserStillCurrent](this[S$._currentRouteInformationParserTransaction], this.widget)).then(dart.void, dart.bind(this.widget.routerDelegate, 'setNewRoutePath')).then(dart.void, this[S$._verifyRouterDelegatePushStillCurrent](this[S$._currentRouterDelegateTransaction], this.widget)).then(dart.void, dart.bind(this, S$._rebuild));
      }
      [S$._handleBackButtonDispatcherNotification]() {
        this[S$._currentRouteInformationParserTransaction] = new core.Object.new();
        this[S$._currentRouterDelegateTransaction] = new core.Object.new();
        return this.widget.routerDelegate.popRoute().then(core.bool, this[S$._verifyRouterDelegatePopStillCurrent](this[S$._currentRouterDelegateTransaction], this.widget)).then(core.bool, dart.fn(data => {
          if (data == null) dart.nullFailed(I[13], 615, 25, "data");
          this[S$._rebuild]();
          this[S$._maybeNeedToReportRouteInformation]();
          return new (T$.SynchronousFutureOfbool()).new(data);
        }, T$.boolToSynchronousFutureOfbool()));
      }
      [S$._verifyRouteInformationParserStillCurrent](transaction, originalWidget) {
        if (originalWidget == null) dart.nullFailed(I[13], 624, 97, "originalWidget");
        return dart.fn(data => {
          if (dart.equals(transaction, this[S$._currentRouteInformationParserTransaction]) && dart.equals(this.widget.routeInformationProvider, originalWidget.routeInformationProvider) && dart.equals(this.widget.backButtonDispatcher, originalWidget.backButtonDispatcher) && dart.equals(this.widget.routeInformationParser, originalWidget.routeInformationParser) && dart.equals(this.widget.routerDelegate, originalWidget.routerDelegate)) {
            return new (SynchronousFutureOfT()).new(data);
          }
          return FutureOfT().as(router._RouterState._never);
        }, TToFutureOfT());
      }
      [S$._verifyRouterDelegatePushStillCurrent](transaction, originalWidget) {
        if (originalWidget == null) dart.nullFailed(I[13], 637, 96, "originalWidget");
        return dart.fn(data => {
          if (dart.equals(transaction, this[S$._currentRouterDelegateTransaction]) && dart.equals(this.widget.routeInformationProvider, originalWidget.routeInformationProvider) && dart.equals(this.widget.backButtonDispatcher, originalWidget.backButtonDispatcher) && dart.equals(this.widget.routeInformationParser, originalWidget.routeInformationParser) && dart.equals(this.widget.routerDelegate, originalWidget.routerDelegate)) return new (T$.SynchronousFutureOfvoid()).new(data);
          return router._RouterState._never;
        }, T$.voidToFuture());
      }
      [S$._verifyRouterDelegatePopStillCurrent](transaction, originalWidget) {
        if (originalWidget == null) dart.nullFailed(I[13], 649, 95, "originalWidget");
        return dart.fn(data => {
          if (data == null) dart.nullFailed(I[13], 650, 18, "data");
          if (dart.equals(transaction, this[S$._currentRouterDelegateTransaction]) && dart.equals(this.widget.routeInformationProvider, originalWidget.routeInformationProvider) && dart.equals(this.widget.backButtonDispatcher, originalWidget.backButtonDispatcher) && dart.equals(this.widget.routeInformationParser, originalWidget.routeInformationParser) && dart.equals(this.widget.routerDelegate, originalWidget.routerDelegate)) {
            return new (T$.SynchronousFutureOfbool()).new(data);
          }
          return new (T$.SynchronousFutureOfbool()).new(true);
        }, T$.boolToSynchronousFutureOfbool());
      }
      [S$._rebuild](value = null) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
        return new (T$.SynchronousFutureOfvoid()).new(value);
      }
      [S$._handleRouterDelegateNotification]() {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
        this[S$._maybeNeedToReportRouteInformation]();
      }
      build(context) {
        if (context == null) dart.nullFailed(I[13], 675, 29, "context");
        return new router._RouterScope.new({routeInformationProvider: this.widget.routeInformationProvider, backButtonDispatcher: this.widget.backButtonDispatcher, routeInformationParser: this.widget.routeInformationParser, routerDelegate: this.widget.routerDelegate, routerState: this, child: new basic.Builder.new({builder: dart.bind(this.widget.routerDelegate, 'build'), $creationLocationd_0dea112b090073317d4: C[73] || CT.C73}), $creationLocationd_0dea112b090073317d4: C[76] || CT.C76});
      }
    }
    (_RouterState.new = function() {
      this[S$._currentRouteInformationParserTransaction] = null;
      this[S$._currentRouterDelegateTransaction] = null;
      this[S$.___RouterState__currentIntentionToReport] = null;
      this[S$.___RouterState__currentIntentionToReport_isSet] = false;
      this[S$._routeInformationReportingTaskScheduled] = false;
      this[S$._lastSeenLocation] = null;
      _RouterState.__proto__.new.call(this);
      ;
    }).prototype = _RouterState.prototype;
    dart.addTypeTests(_RouterState);
    _RouterState.prototype[_is__RouterState_default] = true;
    dart.addTypeCaches(_RouterState);
    dart.setMethodSignature(_RouterState, () => ({
      __proto__: dart.getMethods(_RouterState.__proto__),
      [S$._scheduleRouteInformationReportingTask]: dart.fnType(dart.void, []),
      [S$._reportRouteInformation]: dart.fnType(dart.void, [core.Duration]),
      [S$._retrieveNewRouteInformation]: dart.fnType(dart.nullable(router.RouteInformation), []),
      [S$._setStateWithExplicitReportStatus]: dart.fnType(dart.void, [router._IntentionToReportRouteInformation, dart.fnType(dart.void, [])]),
      [S$._maybeNeedToReportRouteInformation]: dart.fnType(dart.void, []),
      [S$._processInitialRoute]: dart.fnType(dart.void, []),
      [S$._handleRouteInformationProviderNotification]: dart.fnType(dart.void, []),
      [S$._handleBackButtonDispatcherNotification]: dart.fnType(async.Future$(core.bool), []),
      [S$._verifyRouteInformationParserStillCurrent]: dart.fnType(dart.fnType(async.Future$(T), [T]), [dart.nullable(core.Object), router.Router$(T)]),
      [S$._verifyRouterDelegatePushStillCurrent]: dart.fnType(dart.fnType(async.Future$(dart.void), [dart.void]), [dart.nullable(core.Object), router.Router$(T)]),
      [S$._verifyRouterDelegatePopStillCurrent]: dart.fnType(dart.fnType(async.Future$(core.bool), [core.bool]), [dart.nullable(core.Object), router.Router$(T)]),
      [S$._rebuild]: dart.fnType(async.Future$(dart.void), [], [dart.void]),
      [S$._handleRouterDelegateNotification]: dart.fnType(dart.void, []),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_RouterState, () => ({
      __proto__: dart.getGetters(_RouterState.__proto__),
      [S$._currentIntentionToReport]: router._IntentionToReportRouteInformation
    }));
    dart.setSetterSignature(_RouterState, () => ({
      __proto__: dart.getSetters(_RouterState.__proto__),
      [S$._currentIntentionToReport]: router._IntentionToReportRouteInformation
    }));
    dart.setLibraryUri(_RouterState, I[12]);
    dart.setFieldSignature(_RouterState, () => ({
      __proto__: dart.getFields(_RouterState.__proto__),
      [S$._currentRouteInformationParserTransaction]: dart.fieldType(dart.nullable(core.Object)),
      [S$._currentRouterDelegateTransaction]: dart.fieldType(dart.nullable(core.Object)),
      [S$.___RouterState__currentIntentionToReport]: dart.fieldType(dart.nullable(router._IntentionToReportRouteInformation)),
      [S$.___RouterState__currentIntentionToReport_isSet]: dart.fieldType(core.bool),
      [S$._routeInformationReportingTaskScheduled]: dart.fieldType(core.bool),
      [S$._lastSeenLocation]: dart.fieldType(dart.nullable(core.String))
    }));
    return _RouterState;
  });
  router._RouterState = router._RouterState$();
  dart.defineLazy(router._RouterState, {
    /*router._RouterState._never*/get _never() {
      return async.Completer.new().future;
    }
  }, false);
  dart.addTypeTests(router._RouterState, _is__RouterState_default);
  framework.ProxyWidget = class ProxyWidget extends framework.Widget {
    get child() {
      return this[S$.child$4];
    }
    set child(value) {
      super.child = value;
    }
  };
  (framework.ProxyWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[4], 1324, 47, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.child$4] = child;
    framework.ProxyWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.ProxyWidget.prototype;
  dart.addTypeTests(framework.ProxyWidget);
  dart.addTypeCaches(framework.ProxyWidget);
  dart.setLibraryUri(framework.ProxyWidget, I[5]);
  dart.setFieldSignature(framework.ProxyWidget, () => ({
    __proto__: dart.getFields(framework.ProxyWidget.__proto__),
    child: dart.finalFieldType(framework.Widget)
  }));
  framework.InheritedWidget = class InheritedWidget extends framework.ProxyWidget {
    createElement() {
      return new framework.InheritedElement.new(this);
    }
  };
  (framework.InheritedWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[4], 1619, 53, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    framework.InheritedWidget.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.InheritedWidget.prototype;
  dart.addTypeTests(framework.InheritedWidget);
  dart.addTypeCaches(framework.InheritedWidget);
  dart.setMethodSignature(framework.InheritedWidget, () => ({
    __proto__: dart.getMethods(framework.InheritedWidget.__proto__),
    createElement: dart.fnType(framework.InheritedElement, [])
  }));
  dart.setLibraryUri(framework.InheritedWidget, I[5]);
  router._RouterScope = class _RouterScope extends framework.InheritedWidget {
    get routeInformationProvider() {
      return this[S$.routeInformationProvider$1];
    }
    set routeInformationProvider(value) {
      super.routeInformationProvider = value;
    }
    get backButtonDispatcher() {
      return this[S$.backButtonDispatcher$1];
    }
    set backButtonDispatcher(value) {
      super.backButtonDispatcher = value;
    }
    get routeInformationParser() {
      return this[S$.routeInformationParser$1];
    }
    set routeInformationParser(value) {
      super.routeInformationParser = value;
    }
    get routerDelegate() {
      return this[S$.routerDelegate$1];
    }
    set routerDelegate(value) {
      super.routerDelegate = value;
    }
    get routerState() {
      return this[S$.routerState];
    }
    set routerState(value) {
      super.routerState = value;
    }
    updateShouldNotify(oldWidget) {
      router._RouterScope.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[13], 712, 40, "oldWidget");
      return !dart.equals(this.routeInformationProvider, oldWidget.routeInformationProvider) || !dart.equals(this.backButtonDispatcher, oldWidget.backButtonDispatcher) || !dart.equals(this.routeInformationParser, oldWidget.routeInformationParser) || !dart.equals(this.routerDelegate, oldWidget.routerDelegate) || !dart.equals(this.routerState, oldWidget.routerState);
    }
  };
  (router._RouterScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let routeInformationProvider = opts && 'routeInformationProvider' in opts ? opts.routeInformationProvider : null;
    let backButtonDispatcher = opts && 'backButtonDispatcher' in opts ? opts.backButtonDispatcher : null;
    let routeInformationParser = opts && 'routeInformationParser' in opts ? opts.routeInformationParser : null;
    let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
    if (routerDelegate == null) dart.nullFailed(I[13], 697, 19, "routerDelegate");
    let routerState = opts && 'routerState' in opts ? opts.routerState : null;
    if (routerState == null) dart.nullFailed(I[13], 698, 19, "routerState");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[13], 699, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.routeInformationProvider$1] = routeInformationProvider;
    this[S$.backButtonDispatcher$1] = backButtonDispatcher;
    this[S$.routeInformationParser$1] = routeInformationParser;
    this[S$.routerDelegate$1] = routerDelegate;
    this[S$.routerState] = routerState;
    if (!(routeInformationProvider == null || routeInformationParser != null)) dart.assertFailed(null, I[13], 700, 16, "routeInformationProvider == null || routeInformationParser != null");
    if (!(routerDelegate != null)) dart.assertFailed(null, I[13], 701, 16, "routerDelegate != null");
    if (!(routerState != null)) dart.assertFailed(null, I[13], 702, 16, "routerState != null");
    router._RouterScope.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = router._RouterScope.prototype;
  dart.addTypeTests(router._RouterScope);
  dart.addTypeCaches(router._RouterScope);
  dart.setMethodSignature(router._RouterScope, () => ({
    __proto__: dart.getMethods(router._RouterScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(router._RouterScope, I[12]);
  dart.setFieldSignature(router._RouterScope, () => ({
    __proto__: dart.getFields(router._RouterScope.__proto__),
    routeInformationProvider: dart.finalFieldType(dart.nullable(change_notifier.ValueListenable$(dart.nullable(router.RouteInformation)))),
    backButtonDispatcher: dart.finalFieldType(dart.nullable(router.BackButtonDispatcher)),
    routeInformationParser: dart.finalFieldType(dart.nullable(router.RouteInformationParser)),
    routerDelegate: dart.finalFieldType(router.RouterDelegate),
    routerState: dart.finalFieldType(router._RouterState)
  }));
  const _is__CallbackHookProvider_default = Symbol('_is__CallbackHookProvider_default');
  router._CallbackHookProvider$ = dart.generic(T => {
    var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
    var ObserverListOfVoidToT = () => (ObserverListOfVoidToT = dart.constFn(observer_list.ObserverList$(VoidToT())))();
    var _CallbackHookProviderOfT = () => (_CallbackHookProviderOfT = dart.constFn(router._CallbackHookProvider$(T)))();
    var DiagnosticsPropertyOf_CallbackHookProviderOfT = () => (DiagnosticsPropertyOf_CallbackHookProviderOfT = dart.constFn(diagnostics$.DiagnosticsProperty$(_CallbackHookProviderOfT())))();
    class _CallbackHookProvider extends core.Object {
      get hasCallbacks() {
        return this[S$._callbacks].isNotEmpty;
      }
      addCallback(callback) {
        VoidToT().as(callback);
        if (callback == null) dart.nullFailed(I[13], 745, 35, "callback");
        return this[S$._callbacks].add(callback);
      }
      removeCallback(callback) {
        VoidToT().as(callback);
        if (callback == null) dart.nullFailed(I[13], 750, 38, "callback");
        return this[S$._callbacks].remove(callback);
      }
      invokeCallback(defaultValue) {
        T.as(defaultValue);
        if (dart.test(this[S$._callbacks].isEmpty)) return defaultValue;
        try {
          return this[S$._callbacks][S$.$single]();
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "widget library", context: new assertions.ErrorDescription.new("while invoking the callback for " + dart.str(this[S$.$runtimeType])), informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNode()).new((function*() {
                yield new (DiagnosticsPropertyOf_CallbackHookProviderOfT()).new("The " + dart.str(this[S$.$runtimeType]) + " that invoked the callback was:", this, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty});
              }).bind(this)), T$.VoidToIterableOfDiagnosticsNode())}));
            return defaultValue;
          } else
            throw e;
        }
      }
    }
    (_CallbackHookProvider.new = function() {
      this[S$._callbacks] = new (ObserverListOfVoidToT()).new();
      ;
    }).prototype = _CallbackHookProvider.prototype;
    dart.addTypeTests(_CallbackHookProvider);
    _CallbackHookProvider.prototype[_is__CallbackHookProvider_default] = true;
    dart.addTypeCaches(_CallbackHookProvider);
    dart.setMethodSignature(_CallbackHookProvider, () => ({
      __proto__: dart.getMethods(_CallbackHookProvider.__proto__),
      addCallback: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeCallback: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      invokeCallback: dart.fnType(T, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_CallbackHookProvider, () => ({
      __proto__: dart.getGetters(_CallbackHookProvider.__proto__),
      hasCallbacks: core.bool
    }));
    dart.setLibraryUri(_CallbackHookProvider, I[12]);
    dart.setFieldSignature(_CallbackHookProvider, () => ({
      __proto__: dart.getFields(_CallbackHookProvider.__proto__),
      [S$._callbacks]: dart.finalFieldType(observer_list.ObserverList$(dart.fnType(T, [])))
    }));
    return _CallbackHookProvider;
  });
  router._CallbackHookProvider = router._CallbackHookProvider$();
  dart.addTypeTests(router._CallbackHookProvider, _is__CallbackHookProvider_default);
  router.BackButtonDispatcher = class BackButtonDispatcher extends router._CallbackHookProvider$(async.Future$(core.bool)) {
    get [S$._children]() {
      let t12;
      if (!dart.test(this[S$.__BackButtonDispatcher__children_isSet])) {
        let t11 = T$.LinkedHashSetOfChildBackButtonDispatcher().as(T$.LinkedHashSetOfChildBackButtonDispatcher().new());
        if (dart.test(this[S$.__BackButtonDispatcher__children_isSet])) dart.throw(new _internal.LateError.fieldADI("_children"));
        this[S$.__BackButtonDispatcher__children] = t11;
        this[S$.__BackButtonDispatcher__children_isSet] = true;
      }
      t12 = this[S$.__BackButtonDispatcher__children];
      return t12;
    }
    get hasCallbacks() {
      return dart.test(super.hasCallbacks) || dart.test(this[S$._children][S$.$isNotEmpty]);
    }
    invokeCallback(defaultValue) {
      T$.FutureOfbool().as(defaultValue);
      if (defaultValue == null) dart.nullFailed(I[13], 826, 44, "defaultValue");
      if (dart.test(this[S$._children][S$.$isNotEmpty])) {
        let children = this[S$._children][S$.$toList]();
        let childIndex = dart.notNull(children[S$.$length]) - 1;
        const notifyNextChild = result => {
          if (result == null) dart.nullFailed(I[13], 831, 41, "result");
          if (dart.test(result)) return new (T$.SynchronousFutureOfbool()).new(result);
          if (childIndex > 0) {
            childIndex = childIndex - 1;
            return children[S$.$_get](childIndex).notifiedByParent(defaultValue).then(core.bool, notifyNextChild);
          }
          return super.invokeCallback(defaultValue);
        };
        dart.fn(notifyNextChild, T$.boolToFutureOfbool());
        return children[S$.$_get](childIndex).notifiedByParent(defaultValue).then(core.bool, notifyNextChild);
      }
      return super.invokeCallback(defaultValue);
    }
    createChildBackButtonDispatcher() {
      return new router.ChildBackButtonDispatcher.new(this);
    }
    takePriority() {
      return this[S$._children].clear();
    }
    deferTo(child) {
      if (child == null) dart.nullFailed(I[13], 899, 42, "child");
      if (!dart.test(this.hasCallbacks)) dart.assertFailed(null, I[13], 900, 12, "hasCallbacks");
      this[S$._children].remove(child);
      this[S$._children].add(child);
    }
    forget(child) {
      if (child == null) dart.nullFailed(I[13], 917, 41, "child");
      return this[S$._children].remove(child);
    }
  };
  (router.BackButtonDispatcher.new = function() {
    this[S$.__BackButtonDispatcher__children] = null;
    this[S$.__BackButtonDispatcher__children_isSet] = false;
    router.BackButtonDispatcher.__proto__.new.call(this);
    ;
  }).prototype = router.BackButtonDispatcher.prototype;
  dart.addTypeTests(router.BackButtonDispatcher);
  dart.addTypeCaches(router.BackButtonDispatcher);
  dart.setMethodSignature(router.BackButtonDispatcher, () => ({
    __proto__: dart.getMethods(router.BackButtonDispatcher.__proto__),
    createChildBackButtonDispatcher: dart.fnType(router.ChildBackButtonDispatcher, []),
    takePriority: dart.fnType(dart.void, []),
    deferTo: dart.fnType(dart.void, [router.ChildBackButtonDispatcher]),
    forget: dart.fnType(dart.void, [router.ChildBackButtonDispatcher])
  }));
  dart.setGetterSignature(router.BackButtonDispatcher, () => ({
    __proto__: dart.getGetters(router.BackButtonDispatcher.__proto__),
    [S$._children]: collection.LinkedHashSet$(router.ChildBackButtonDispatcher)
  }));
  dart.setLibraryUri(router.BackButtonDispatcher, I[12]);
  dart.setFieldSignature(router.BackButtonDispatcher, () => ({
    __proto__: dart.getFields(router.BackButtonDispatcher.__proto__),
    [S$.__BackButtonDispatcher__children]: dart.fieldType(dart.nullable(collection.LinkedHashSet$(router.ChildBackButtonDispatcher))),
    [S$.__BackButtonDispatcher__children_isSet]: dart.fieldType(core.bool)
  }));
  const BackButtonDispatcher_WidgetsBindingObserver$36 = class BackButtonDispatcher_WidgetsBindingObserver extends router.BackButtonDispatcher {};
  (BackButtonDispatcher_WidgetsBindingObserver$36.new = function() {
    BackButtonDispatcher_WidgetsBindingObserver$36.__proto__.new.call(this);
  }).prototype = BackButtonDispatcher_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(BackButtonDispatcher_WidgetsBindingObserver$36, binding$5.WidgetsBindingObserver);
  router.RootBackButtonDispatcher = class RootBackButtonDispatcher extends BackButtonDispatcher_WidgetsBindingObserver$36 {
    addCallback(callback) {
      T$.VoidToFutureOfbool().as(callback);
      if (callback == null) dart.nullFailed(I[13], 930, 46, "callback");
      if (!dart.test(this.hasCallbacks)) dart.nullCheck(binding$5.WidgetsBinding.instance).addObserver(this);
      super.addCallback(callback);
    }
    removeCallback(callback) {
      T$.VoidToFutureOfbool().as(callback);
      if (callback == null) dart.nullFailed(I[13], 937, 49, "callback");
      super.removeCallback(callback);
      if (!dart.test(this.hasCallbacks)) dart.nullCheck(binding$5.WidgetsBinding.instance).removeObserver(this);
    }
    didPopRoute() {
      return this.invokeCallback(T$.FutureOfbool().value(false));
    }
  };
  (router.RootBackButtonDispatcher.new = function() {
    router.RootBackButtonDispatcher.__proto__.new.call(this);
    ;
  }).prototype = router.RootBackButtonDispatcher.prototype;
  dart.addTypeTests(router.RootBackButtonDispatcher);
  dart.addTypeCaches(router.RootBackButtonDispatcher);
  dart.setLibraryUri(router.RootBackButtonDispatcher, I[12]);
  router.ChildBackButtonDispatcher = class ChildBackButtonDispatcher extends router.BackButtonDispatcher {
    get parent() {
      return this[S$.parent];
    }
    set parent(value) {
      super.parent = value;
    }
    notifiedByParent(defaultValue) {
      if (defaultValue == null) dart.nullFailed(I[13], 976, 46, "defaultValue");
      return this.invokeCallback(defaultValue);
    }
    takePriority() {
      this.parent.deferTo(this);
      super.takePriority();
    }
    deferTo(child) {
      if (child == null) dart.nullFailed(I[13], 987, 42, "child");
      if (!dart.test(this.hasCallbacks)) dart.assertFailed(null, I[13], 988, 12, "hasCallbacks");
      this.parent.deferTo(this);
      super.deferTo(child);
    }
    removeCallback(callback) {
      T$.VoidToFutureOfbool().as(callback);
      if (callback == null) dart.nullFailed(I[13], 994, 49, "callback");
      super.removeCallback(callback);
      if (!dart.test(this.hasCallbacks)) this.parent.forget(this);
    }
  };
  (router.ChildBackButtonDispatcher.new = function(parent) {
    if (parent == null) dart.nullFailed(I[13], 960, 34, "parent");
    this[S$.parent] = parent;
    if (!(parent != null)) dart.assertFailed(null, I[13], 960, 51, "parent != null");
    router.ChildBackButtonDispatcher.__proto__.new.call(this);
    ;
  }).prototype = router.ChildBackButtonDispatcher.prototype;
  dart.addTypeTests(router.ChildBackButtonDispatcher);
  dart.addTypeCaches(router.ChildBackButtonDispatcher);
  dart.setMethodSignature(router.ChildBackButtonDispatcher, () => ({
    __proto__: dart.getMethods(router.ChildBackButtonDispatcher.__proto__),
    notifiedByParent: dart.fnType(async.Future$(core.bool), [async.Future$(core.bool)])
  }));
  dart.setLibraryUri(router.ChildBackButtonDispatcher, I[12]);
  dart.setFieldSignature(router.ChildBackButtonDispatcher, () => ({
    __proto__: dart.getFields(router.ChildBackButtonDispatcher.__proto__),
    parent: dart.finalFieldType(router.BackButtonDispatcher)
  }));
  router.BackButtonListener = class BackButtonListener extends framework.StatefulWidget {
    get child() {
      return this[S$.child$5];
    }
    set child(value) {
      super.child = value;
    }
    get onBackButtonPressed() {
      return this[S$.onBackButtonPressed];
    }
    set onBackButtonPressed(value) {
      super.onBackButtonPressed = value;
    }
    createState() {
      return new router._BackButtonListenerState.new();
    }
  };
  (router.BackButtonListener.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[13], 1017, 19, "child");
    let onBackButtonPressed = opts && 'onBackButtonPressed' in opts ? opts.onBackButtonPressed : null;
    if (onBackButtonPressed == null) dart.nullFailed(I[13], 1018, 19, "onBackButtonPressed");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.child$5] = child;
    this[S$.onBackButtonPressed] = onBackButtonPressed;
    router.BackButtonListener.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = router.BackButtonListener.prototype;
  dart.addTypeTests(router.BackButtonListener);
  dart.addTypeCaches(router.BackButtonListener);
  dart.setMethodSignature(router.BackButtonListener, () => ({
    __proto__: dart.getMethods(router.BackButtonListener.__proto__),
    createState: dart.fnType(router._BackButtonListenerState, [])
  }));
  dart.setLibraryUri(router.BackButtonListener, I[12]);
  dart.setFieldSignature(router.BackButtonListener, () => ({
    __proto__: dart.getFields(router.BackButtonListener.__proto__),
    child: dart.finalFieldType(framework.Widget),
    onBackButtonPressed: dart.finalFieldType(dart.fnType(async.Future$(core.bool), []))
  }));
  router._BackButtonListenerState = class _BackButtonListenerState extends framework.State$(router.BackButtonListener) {
    didChangeDependencies() {
      let t12, t12$;
      t12 = this.dispatcher;
      t12 == null ? null : t12.removeCallback(this.widget.onBackButtonPressed);
      let rootBackDispatcher = router.Router.of(this.context).backButtonDispatcher;
      if (!(rootBackDispatcher != null)) dart.assertFailed("The parent router must have a backButtonDispatcher to use this widget", I[13], 1042, 12, "rootBackDispatcher != null");
      this.dispatcher = (t12$ = dart.nullCheck(rootBackDispatcher).createChildBackButtonDispatcher(), (() => {
        t12$.addCallback(this.widget.onBackButtonPressed);
        t12$.takePriority();
        return t12$;
      })());
      super.didChangeDependencies();
    }
    didUpdateWidget(oldWidget) {
      let t12, t12$;
      router.BackButtonListener.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[13], 1051, 53, "oldWidget");
      if (!dart.equals(oldWidget.onBackButtonPressed, this.widget.onBackButtonPressed)) {
        t12 = this.dispatcher;
        t12 == null ? null : t12.removeCallback(oldWidget.onBackButtonPressed);
        t12$ = this.dispatcher;
        t12$ == null ? null : t12$.addCallback(this.widget.onBackButtonPressed);
      }
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      let t12;
      t12 = this.dispatcher;
      t12 == null ? null : t12.removeCallback(this.widget.onBackButtonPressed);
      super.dispose();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[13], 1066, 29, "context");
      return this.widget.child;
    }
  };
  (router._BackButtonListenerState.new = function() {
    this.dispatcher = null;
    router._BackButtonListenerState.__proto__.new.call(this);
    ;
  }).prototype = router._BackButtonListenerState.prototype;
  dart.addTypeTests(router._BackButtonListenerState);
  dart.addTypeCaches(router._BackButtonListenerState);
  dart.setMethodSignature(router._BackButtonListenerState, () => ({
    __proto__: dart.getMethods(router._BackButtonListenerState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(router._BackButtonListenerState, I[12]);
  dart.setFieldSignature(router._BackButtonListenerState, () => ({
    __proto__: dart.getFields(router._BackButtonListenerState.__proto__),
    dispatcher: dart.fieldType(dart.nullable(router.BackButtonDispatcher))
  }));
  const _is_RouteInformationParser_default = Symbol('_is_RouteInformationParser_default');
  router.RouteInformationParser$ = dart.generic(T => {
    class RouteInformationParser extends core.Object {
      restoreRouteInformation(configuration) {
        T.as(configuration);
        return null;
      }
    }
    (RouteInformationParser.new = function() {
      ;
    }).prototype = RouteInformationParser.prototype;
    dart.addTypeTests(RouteInformationParser);
    RouteInformationParser.prototype[_is_RouteInformationParser_default] = true;
    dart.addTypeCaches(RouteInformationParser);
    dart.setMethodSignature(RouteInformationParser, () => ({
      __proto__: dart.getMethods(RouteInformationParser.__proto__),
      restoreRouteInformation: dart.fnType(dart.nullable(router.RouteInformation), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(RouteInformationParser, I[12]);
    return RouteInformationParser;
  });
  router.RouteInformationParser = router.RouteInformationParser$();
  dart.addTypeTests(router.RouteInformationParser, _is_RouteInformationParser_default);
  const _is_RouterDelegate_default = Symbol('_is_RouterDelegate_default');
  router.RouterDelegate$ = dart.generic(T => {
    class RouterDelegate extends change_notifier.Listenable {
      setInitialRoutePath(configuration) {
        T.as(configuration);
        return this.setNewRoutePath(configuration);
      }
      get currentConfiguration() {
        return null;
      }
    }
    (RouterDelegate.new = function() {
      RouterDelegate.__proto__.new.call(this);
      ;
    }).prototype = RouterDelegate.prototype;
    dart.addTypeTests(RouterDelegate);
    RouterDelegate.prototype[_is_RouterDelegate_default] = true;
    dart.addTypeCaches(RouterDelegate);
    dart.setMethodSignature(RouterDelegate, () => ({
      __proto__: dart.getMethods(RouterDelegate.__proto__),
      setInitialRoutePath: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RouterDelegate, () => ({
      __proto__: dart.getGetters(RouterDelegate.__proto__),
      currentConfiguration: dart.nullable(T)
    }));
    dart.setLibraryUri(RouterDelegate, I[12]);
    return RouterDelegate;
  });
  router.RouterDelegate = router.RouterDelegate$();
  dart.addTypeTests(router.RouterDelegate, _is_RouterDelegate_default);
  router.RouteInformationProvider = class RouteInformationProvider extends change_notifier.ValueListenable$(dart.nullable(router.RouteInformation)) {
    routerReportsNewRouteInformation(routeInformation) {
      if (routeInformation == null) dart.nullFailed(I[13], 1241, 58, "routeInformation");
    }
  };
  (router.RouteInformationProvider.new = function() {
    router.RouteInformationProvider.__proto__.new.call(this);
    ;
  }).prototype = router.RouteInformationProvider.prototype;
  dart.addTypeTests(router.RouteInformationProvider);
  dart.addTypeCaches(router.RouteInformationProvider);
  dart.setMethodSignature(router.RouteInformationProvider, () => ({
    __proto__: dart.getMethods(router.RouteInformationProvider.__proto__),
    routerReportsNewRouteInformation: dart.fnType(dart.void, [router.RouteInformation])
  }));
  dart.setLibraryUri(router.RouteInformationProvider, I[12]);
  const RouteInformationProvider_WidgetsBindingObserver$36 = class RouteInformationProvider_WidgetsBindingObserver extends router.RouteInformationProvider {};
  (RouteInformationProvider_WidgetsBindingObserver$36.new = function() {
    RouteInformationProvider_WidgetsBindingObserver$36.__proto__.new.call(this);
  }).prototype = RouteInformationProvider_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(RouteInformationProvider_WidgetsBindingObserver$36, binding$5.WidgetsBindingObserver);
  const RouteInformationProvider_ChangeNotifier$36 = class RouteInformationProvider_ChangeNotifier extends RouteInformationProvider_WidgetsBindingObserver$36 {};
  (RouteInformationProvider_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
    RouteInformationProvider_ChangeNotifier$36.__proto__.new.call(this);
  }).prototype = RouteInformationProvider_ChangeNotifier$36.prototype;
  dart.applyMixin(RouteInformationProvider_ChangeNotifier$36, change_notifier.ChangeNotifier);
  router.PlatformRouteInformationProvider = class PlatformRouteInformationProvider extends RouteInformationProvider_ChangeNotifier$36 {
    routerReportsNewRouteInformation(routeInformation) {
      if (routeInformation == null) dart.nullFailed(I[13], 1259, 58, "routeInformation");
      system_navigator.SystemNavigator.routeInformationUpdated({location: dart.nullCheck(routeInformation.location), state: routeInformation.state});
      this[S$._value] = routeInformation;
    }
    get value() {
      return this[S$._value];
    }
    [S$._platformReportsNewRouteInformation](routeInformation) {
      if (routeInformation == null) dart.nullFailed(I[13], 1271, 61, "routeInformation");
      if (dart.equals(this[S$._value], routeInformation)) return;
      this[S$._value] = routeInformation;
      this.notifyListeners();
    }
    addListener(listener) {
      if (listener == null) dart.nullFailed(I[13], 1279, 33, "listener");
      if (!dart.test(this.hasListeners)) dart.nullCheck(binding$5.WidgetsBinding.instance).addObserver(this);
      super.addListener(listener);
    }
    removeListener(listener) {
      if (listener == null) dart.nullFailed(I[13], 1286, 36, "listener");
      super.removeListener(listener);
      if (!dart.test(this.hasListeners)) dart.nullCheck(binding$5.WidgetsBinding.instance).removeObserver(this);
    }
    dispose() {
      if (dart.test(this.hasListeners)) dart.nullCheck(binding$5.WidgetsBinding.instance).removeObserver(this);
      super.dispose();
    }
    didPushRouteInformation(routeInformation) {
      if (routeInformation == null) dart.nullFailed(I[13], 1304, 57, "routeInformation");
      return async.async(core.bool, (function* didPushRouteInformation() {
        if (!dart.test(this.hasListeners)) dart.assertFailed(null, I[13], 1305, 12, "hasListeners");
        this[S$._platformReportsNewRouteInformation](routeInformation);
        return true;
      }).bind(this));
    }
    didPushRoute(route) {
      if (route == null) dart.nullFailed(I[13], 1311, 36, "route");
      return async.async(core.bool, (function* didPushRoute() {
        if (!dart.test(this.hasListeners)) dart.assertFailed(null, I[13], 1312, 12, "hasListeners");
        this[S$._platformReportsNewRouteInformation](new router.RouteInformation.new({location: route}));
        return true;
      }).bind(this));
    }
  };
  (router.PlatformRouteInformationProvider.new = function(opts) {
    let initialRouteInformation = opts && 'initialRouteInformation' in opts ? opts.initialRouteInformation : null;
    this[S$._value] = initialRouteInformation;
    router.PlatformRouteInformationProvider.__proto__.new.call(this);
    ;
  }).prototype = router.PlatformRouteInformationProvider.prototype;
  dart.addTypeTests(router.PlatformRouteInformationProvider);
  dart.addTypeCaches(router.PlatformRouteInformationProvider);
  dart.setMethodSignature(router.PlatformRouteInformationProvider, () => ({
    __proto__: dart.getMethods(router.PlatformRouteInformationProvider.__proto__),
    [S$._platformReportsNewRouteInformation]: dart.fnType(dart.void, [router.RouteInformation])
  }));
  dart.setGetterSignature(router.PlatformRouteInformationProvider, () => ({
    __proto__: dart.getGetters(router.PlatformRouteInformationProvider.__proto__),
    value: dart.nullable(router.RouteInformation)
  }));
  dart.setLibraryUri(router.PlatformRouteInformationProvider, I[12]);
  dart.setFieldSignature(router.PlatformRouteInformationProvider, () => ({
    __proto__: dart.getFields(router.PlatformRouteInformationProvider.__proto__),
    [S$._value]: dart.fieldType(dart.nullable(router.RouteInformation))
  }));
  const _is_PopNavigatorRouterDelegateMixin_default = Symbol('_is_PopNavigatorRouterDelegateMixin_default');
  router.PopNavigatorRouterDelegateMixin$ = dart.generic(T => {
    class PopNavigatorRouterDelegateMixin extends router.RouterDelegate$(T) {}
    PopNavigatorRouterDelegateMixin[dart.mixinOn] = RouterDelegate => class PopNavigatorRouterDelegateMixin extends RouterDelegate {
      popRoute() {
        let t12;
        let navigator = (t12 = this.navigatorKey, t12 == null ? null : t12.currentState);
        if (navigator == null) return new (T$.SynchronousFutureOfbool()).new(false);
        return navigator.maybePop(T$.ObjectN());
      }
    };
    dart.addTypeTests(PopNavigatorRouterDelegateMixin);
    PopNavigatorRouterDelegateMixin.prototype[_is_PopNavigatorRouterDelegateMixin_default] = true;
    dart.addTypeCaches(PopNavigatorRouterDelegateMixin);
    PopNavigatorRouterDelegateMixin[dart.implements] = () => [router.RouterDelegate$(T)];
    dart.setMethodSignature(PopNavigatorRouterDelegateMixin, () => ({
      __proto__: dart.getMethods(PopNavigatorRouterDelegateMixin.__proto__),
      popRoute: dart.fnType(async.Future$(core.bool), [])
    }));
    dart.setLibraryUri(PopNavigatorRouterDelegateMixin, I[12]);
    return PopNavigatorRouterDelegateMixin;
  });
  router.PopNavigatorRouterDelegateMixin = router.PopNavigatorRouterDelegateMixin$();
  dart.addTypeTests(router.PopNavigatorRouterDelegateMixin, _is_PopNavigatorRouterDelegateMixin_default);
  performance_overlay$.PerformanceOverlay = class PerformanceOverlay extends framework.LeafRenderObjectWidget {
    get optionsMask() {
      return this[S$.optionsMask];
    }
    set optionsMask(value) {
      super.optionsMask = value;
    }
    get rasterizerThreshold() {
      return this[S$.rasterizerThreshold];
    }
    set rasterizerThreshold(value) {
      super.rasterizerThreshold = value;
    }
    get checkerboardRasterCacheImages() {
      return this[S$.checkerboardRasterCacheImages];
    }
    set checkerboardRasterCacheImages(value) {
      super.checkerboardRasterCacheImages = value;
    }
    get checkerboardOffscreenLayers() {
      return this[S$.checkerboardOffscreenLayers];
    }
    set checkerboardOffscreenLayers(value) {
      super.checkerboardOffscreenLayers = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[14], 108, 60, "context");
      return new performance_overlay.RenderPerformanceOverlay.new({optionsMask: this.optionsMask, rasterizerThreshold: this.rasterizerThreshold, checkerboardRasterCacheImages: this.checkerboardRasterCacheImages, checkerboardOffscreenLayers: this.checkerboardOffscreenLayers});
    }
    updateRenderObject(context, renderObject) {
      let t12;
      if (context == null) dart.nullFailed(I[14], 116, 40, "context");
      performance_overlay.RenderPerformanceOverlay.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[14], 116, 74, "renderObject");
      t12 = renderObject;
      (() => {
        t12.optionsMask = this.optionsMask;
        t12.rasterizerThreshold = this.rasterizerThreshold;
        return t12;
      })();
    }
  };
  (performance_overlay$.PerformanceOverlay.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let optionsMask = opts && 'optionsMask' in opts ? opts.optionsMask : 0;
    if (optionsMask == null) dart.nullFailed(I[14], 33, 10, "optionsMask");
    let rasterizerThreshold = opts && 'rasterizerThreshold' in opts ? opts.rasterizerThreshold : 0;
    if (rasterizerThreshold == null) dart.nullFailed(I[14], 34, 10, "rasterizerThreshold");
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
    if (checkerboardRasterCacheImages == null) dart.nullFailed(I[14], 35, 10, "checkerboardRasterCacheImages");
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
    if (checkerboardOffscreenLayers == null) dart.nullFailed(I[14], 36, 10, "checkerboardOffscreenLayers");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.optionsMask] = optionsMask;
    this[S$.rasterizerThreshold] = rasterizerThreshold;
    this[S$.checkerboardRasterCacheImages] = checkerboardRasterCacheImages;
    this[S$.checkerboardOffscreenLayers] = checkerboardOffscreenLayers;
    performance_overlay$.PerformanceOverlay.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = performance_overlay$.PerformanceOverlay.prototype;
  (performance_overlay$.PerformanceOverlay.allEnabled = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let rasterizerThreshold = opts && 'rasterizerThreshold' in opts ? opts.rasterizerThreshold : 0;
    if (rasterizerThreshold == null) dart.nullFailed(I[14], 42, 10, "rasterizerThreshold");
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
    if (checkerboardRasterCacheImages == null) dart.nullFailed(I[14], 43, 10, "checkerboardRasterCacheImages");
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
    if (checkerboardOffscreenLayers == null) dart.nullFailed(I[14], 44, 10, "checkerboardOffscreenLayers");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.rasterizerThreshold] = rasterizerThreshold;
    this[S$.checkerboardRasterCacheImages] = checkerboardRasterCacheImages;
    this[S$.checkerboardOffscreenLayers] = checkerboardOffscreenLayers;
    this[S$.optionsMask] = ((1)[S$.$leftShift](performance_overlay.PerformanceOverlayOption.displayRasterizerStatistics.index) | (1)[S$.$leftShift](performance_overlay.PerformanceOverlayOption.visualizeRasterizerStatistics.index) | (1)[S$.$leftShift](performance_overlay.PerformanceOverlayOption.displayEngineStatistics.index) | (1)[S$.$leftShift](performance_overlay.PerformanceOverlayOption.visualizeEngineStatistics.index)) >>> 0;
    performance_overlay$.PerformanceOverlay.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = performance_overlay$.PerformanceOverlay.prototype;
  dart.addTypeTests(performance_overlay$.PerformanceOverlay);
  dart.addTypeCaches(performance_overlay$.PerformanceOverlay);
  dart.setMethodSignature(performance_overlay$.PerformanceOverlay, () => ({
    __proto__: dart.getMethods(performance_overlay$.PerformanceOverlay.__proto__),
    createRenderObject: dart.fnType(performance_overlay.RenderPerformanceOverlay, [framework.BuildContext])
  }));
  dart.setLibraryUri(performance_overlay$.PerformanceOverlay, I[15]);
  dart.setFieldSignature(performance_overlay$.PerformanceOverlay, () => ({
    __proto__: dart.getFields(performance_overlay$.PerformanceOverlay.__proto__),
    optionsMask: dart.finalFieldType(core.int),
    rasterizerThreshold: dart.finalFieldType(core.int),
    checkerboardRasterCacheImages: dart.finalFieldType(core.bool),
    checkerboardOffscreenLayers: dart.finalFieldType(core.bool)
  }));
  modal_barrier.ModalBarrier = class ModalBarrier extends framework.StatelessWidget {
    get color() {
      return this[S$.color$1];
    }
    set color(value) {
      super.color = value;
    }
    get dismissible() {
      return this[S$.dismissible];
    }
    set dismissible(value) {
      super.dismissible = value;
    }
    get barrierSemanticsDismissible() {
      return this[S$.barrierSemanticsDismissible];
    }
    set barrierSemanticsDismissible(value) {
      super.barrierSemanticsDismissible = value;
    }
    get semanticsLabel() {
      return this[S$.semanticsLabel];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    build(context) {
      let t12;
      if (context == null) dart.nullFailed(I[16], 77, 29, "context");
      if (!(!dart.test(this.dismissible) || this.semanticsLabel == null || dart.test(debug$0.debugCheckHasDirectionality(context)))) dart.assertFailed(null, I[16], 78, 12, "!dismissible || semanticsLabel == null || debugCheckHasDirectionality(context)");
      let platformSupportsDismissingBarrier = null;
      switch (platform.defaultTargetPlatform) {
        case C[84] || CT.C84:
        case C[85] || CT.C85:
        case C[86] || CT.C86:
        case C[87] || CT.C87:
        {
          platformSupportsDismissingBarrier = false;
          break;
        }
        case C[88] || CT.C88:
        case C[89] || CT.C89:
        {
          platformSupportsDismissingBarrier = true;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (!(platformSupportsDismissingBarrier != null)) dart.assertFailed(null, I[16], 92, 12, "platformSupportsDismissingBarrier != null");
      let semanticsDismissible = dart.test(this.dismissible) && dart.test(platformSupportsDismissingBarrier);
      let modalBarrierSemanticsDismissible = (t12 = this.barrierSemanticsDismissible, t12 == null ? semanticsDismissible : t12);
      function handleDismiss() {
        navigator$.Navigator.maybePop(T$.ObjectN(), context);
      }
      dart.fn(handleDismiss, T$.VoidTovoid());
      return new basic.BlockSemantics.new({child: new basic.ExcludeSemantics.new({excluding: !semanticsDismissible || !dart.test(modalBarrierSemanticsDismissible), child: new modal_barrier._ModalBarrierGestureDetector.new({onDismiss: dart.fn(() => {
              if (dart.test(this.dismissible))
                handleDismiss();
              else
                system_sound.SystemSound.play(system_sound.SystemSoundType.alert);
            }, T$.VoidTovoid()), child: new basic.Semantics.new({label: semanticsDismissible ? this.semanticsLabel : null, onDismiss: semanticsDismissible ? handleDismiss : null, textDirection: semanticsDismissible && this.semanticsLabel != null ? basic.Directionality.of(context) : null, child: new basic.MouseRegion.new({cursor: mouse_cursor.SystemMouseCursors.basic, opaque: true, child: new basic.ConstrainedBox.new({constraints: C[90] || CT.C90, child: this.color == null ? null : new basic.ColoredBox.new({color: dart.nullCheck(this.color), $creationLocationd_0dea112b090073317d4: C[91] || CT.C91}), $creationLocationd_0dea112b090073317d4: C[94] || CT.C94}), $creationLocationd_0dea112b090073317d4: C[98] || CT.C98}), $creationLocationd_0dea112b090073317d4: C[103] || CT.C103}), $creationLocationd_0dea112b090073317d4: C[109] || CT.C109}), $creationLocationd_0dea112b090073317d4: C[113] || CT.C113}), $creationLocationd_0dea112b090073317d4: C[117] || CT.C117});
    }
  };
  (modal_barrier.ModalBarrier.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let dismissible = opts && 'dismissible' in opts ? opts.dismissible : true;
    if (dismissible == null) dart.nullFailed(I[16], 36, 10, "dismissible");
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let barrierSemanticsDismissible = opts && 'barrierSemanticsDismissible' in opts ? opts.barrierSemanticsDismissible : true;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.color$1] = color;
    this[S$.dismissible] = dismissible;
    this[S$.semanticsLabel] = semanticsLabel;
    this[S$.barrierSemanticsDismissible] = barrierSemanticsDismissible;
    modal_barrier.ModalBarrier.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = modal_barrier.ModalBarrier.prototype;
  dart.addTypeTests(modal_barrier.ModalBarrier);
  dart.addTypeCaches(modal_barrier.ModalBarrier);
  dart.setMethodSignature(modal_barrier.ModalBarrier, () => ({
    __proto__: dart.getMethods(modal_barrier.ModalBarrier.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(modal_barrier.ModalBarrier, I[17]);
  dart.setFieldSignature(modal_barrier.ModalBarrier, () => ({
    __proto__: dart.getFields(modal_barrier.ModalBarrier.__proto__),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    dismissible: dart.finalFieldType(core.bool),
    barrierSemanticsDismissible: dart.finalFieldType(dart.nullable(core.bool)),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  transitions.AnimatedWidget = class AnimatedWidget extends framework.StatefulWidget {
    get listenable() {
      return this[S$.listenable];
    }
    set listenable(value) {
      super.listenable = value;
    }
    createState() {
      return new transitions._AnimatedState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[18], 139, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfListenable()).new("animation", this.listenable));
    }
  };
  (transitions.AnimatedWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let listenable = opts && 'listenable' in opts ? opts.listenable : null;
    if (listenable == null) dart.nullFailed(I[18], 120, 19, "listenable");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.listenable] = listenable;
    if (!(listenable != null)) dart.assertFailed(null, I[18], 121, 15, "listenable != null");
    transitions.AnimatedWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.AnimatedWidget.prototype;
  dart.addTypeTests(transitions.AnimatedWidget);
  dart.addTypeCaches(transitions.AnimatedWidget);
  dart.setMethodSignature(transitions.AnimatedWidget, () => ({
    __proto__: dart.getMethods(transitions.AnimatedWidget.__proto__),
    createState: dart.fnType(transitions._AnimatedState, [])
  }));
  dart.setLibraryUri(transitions.AnimatedWidget, I[19]);
  dart.setFieldSignature(transitions.AnimatedWidget, () => ({
    __proto__: dart.getFields(transitions.AnimatedWidget.__proto__),
    listenable: dart.finalFieldType(change_notifier.Listenable)
  }));
  modal_barrier.AnimatedModalBarrier = class AnimatedModalBarrier extends transitions.AnimatedWidget {
    get dismissible() {
      return this[S$.dismissible$1];
    }
    set dismissible(value) {
      super.dismissible = value;
    }
    get semanticsLabel() {
      return this[S$.semanticsLabel$1];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get barrierSemanticsDismissible() {
      return this[S$.barrierSemanticsDismissible$1];
    }
    set barrierSemanticsDismissible(value) {
      super.barrierSemanticsDismissible = value;
    }
    get color() {
      return T$.AnimationOfColorN().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[16], 194, 29, "context");
      return new modal_barrier.ModalBarrier.new({color: this.color.value, dismissible: this.dismissible, semanticsLabel: this.semanticsLabel, barrierSemanticsDismissible: this.barrierSemanticsDismissible, $creationLocationd_0dea112b090073317d4: C[120] || CT.C120});
    }
  };
  (modal_barrier.AnimatedModalBarrier.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[16], 153, 32, "color");
    let dismissible = opts && 'dismissible' in opts ? opts.dismissible : true;
    if (dismissible == null) dart.nullFailed(I[16], 154, 10, "dismissible");
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let barrierSemanticsDismissible = opts && 'barrierSemanticsDismissible' in opts ? opts.barrierSemanticsDismissible : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.dismissible$1] = dismissible;
    this[S$.semanticsLabel$1] = semanticsLabel;
    this[S$.barrierSemanticsDismissible$1] = barrierSemanticsDismissible;
    modal_barrier.AnimatedModalBarrier.__proto__.new.call(this, {key: key, listenable: color, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = modal_barrier.AnimatedModalBarrier.prototype;
  dart.addTypeTests(modal_barrier.AnimatedModalBarrier);
  dart.addTypeCaches(modal_barrier.AnimatedModalBarrier);
  dart.setMethodSignature(modal_barrier.AnimatedModalBarrier, () => ({
    __proto__: dart.getMethods(modal_barrier.AnimatedModalBarrier.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(modal_barrier.AnimatedModalBarrier, () => ({
    __proto__: dart.getGetters(modal_barrier.AnimatedModalBarrier.__proto__),
    color: animation.Animation$(dart.nullable(ui.Color))
  }));
  dart.setLibraryUri(modal_barrier.AnimatedModalBarrier, I[17]);
  dart.setFieldSignature(modal_barrier.AnimatedModalBarrier, () => ({
    __proto__: dart.getFields(modal_barrier.AnimatedModalBarrier.__proto__),
    dismissible: dart.finalFieldType(core.bool),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    barrierSemanticsDismissible: dart.finalFieldType(dart.nullable(core.bool))
  }));
  modal_barrier._AnyTapGestureRecognizer = class _AnyTapGestureRecognizer extends tap$.BaseTapGestureRecognizer {
    isPointerAllowed(event) {
      if (event == null) dart.nullFailed(I[16], 216, 42, "event");
      if (this.onAnyTapUp == null) return false;
      return super.isPointerAllowed(event);
    }
    handleTapDown(opts) {
      let down = opts && 'down' in opts ? opts.down : null;
    }
    handleTapUp(opts) {
      let t12;
      let down = opts && 'down' in opts ? opts.down : null;
      let up = opts && 'up' in opts ? opts.up : null;
      t12 = this.onAnyTapUp;
      t12 == null ? null : t12();
    }
    handleTapCancel(opts) {
      let down = opts && 'down' in opts ? opts.down : null;
      let cancel = opts && 'cancel' in opts ? opts.cancel : null;
      let reason = opts && 'reason' in opts ? opts.reason : null;
    }
    get debugDescription() {
      return "any tap";
    }
  };
  (modal_barrier._AnyTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    this.onAnyTapUp = null;
    modal_barrier._AnyTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner});
    ;
  }).prototype = modal_barrier._AnyTapGestureRecognizer.prototype;
  dart.addTypeTests(modal_barrier._AnyTapGestureRecognizer);
  dart.addTypeCaches(modal_barrier._AnyTapGestureRecognizer);
  dart.setMethodSignature(modal_barrier._AnyTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(modal_barrier._AnyTapGestureRecognizer.__proto__),
    handleTapDown: dart.fnType(dart.void, [], {down: dart.nullable(events.PointerDownEvent)}, {}),
    handleTapUp: dart.fnType(dart.void, [], {down: dart.nullable(events.PointerDownEvent), up: dart.nullable(events.PointerUpEvent)}, {}),
    handleTapCancel: dart.fnType(dart.void, [], {cancel: dart.nullable(events.PointerCancelEvent), down: dart.nullable(events.PointerDownEvent), reason: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(modal_barrier._AnyTapGestureRecognizer, I[17]);
  dart.setFieldSignature(modal_barrier._AnyTapGestureRecognizer, () => ({
    __proto__: dart.getFields(modal_barrier._AnyTapGestureRecognizer.__proto__),
    onAnyTapUp: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  gesture_detector.SemanticsGestureDelegate = class SemanticsGestureDelegate extends core.Object {
    toString() {
      return dart.str(object.objectRuntimeType(this, "SemanticsGestureDelegate")) + "()";
    }
  };
  (gesture_detector.SemanticsGestureDelegate.new = function() {
    ;
  }).prototype = gesture_detector.SemanticsGestureDelegate.prototype;
  dart.addTypeTests(gesture_detector.SemanticsGestureDelegate);
  dart.addTypeCaches(gesture_detector.SemanticsGestureDelegate);
  dart.setLibraryUri(gesture_detector.SemanticsGestureDelegate, I[20]);
  dart.defineExtensionMethods(gesture_detector.SemanticsGestureDelegate, ['toString']);
  modal_barrier._ModalBarrierSemanticsDelegate = class _ModalBarrierSemanticsDelegate extends gesture_detector.SemanticsGestureDelegate {
    get onDismiss() {
      return this[S$.onDismiss];
    }
    set onDismiss(value) {
      super.onDismiss = value;
    }
    assignSemantics(renderObject) {
      if (renderObject == null) dart.nullFailed(I[16], 250, 54, "renderObject");
      renderObject.onTap = this.onDismiss;
    }
  };
  (modal_barrier._ModalBarrierSemanticsDelegate.new = function(opts) {
    let onDismiss = opts && 'onDismiss' in opts ? opts.onDismiss : null;
    this[S$.onDismiss] = onDismiss;
    modal_barrier._ModalBarrierSemanticsDelegate.__proto__.new.call(this);
    ;
  }).prototype = modal_barrier._ModalBarrierSemanticsDelegate.prototype;
  dart.addTypeTests(modal_barrier._ModalBarrierSemanticsDelegate);
  dart.addTypeCaches(modal_barrier._ModalBarrierSemanticsDelegate);
  dart.setMethodSignature(modal_barrier._ModalBarrierSemanticsDelegate, () => ({
    __proto__: dart.getMethods(modal_barrier._ModalBarrierSemanticsDelegate.__proto__),
    assignSemantics: dart.fnType(dart.void, [proxy_box.RenderSemanticsGestureHandler])
  }));
  dart.setLibraryUri(modal_barrier._ModalBarrierSemanticsDelegate, I[17]);
  dart.setFieldSignature(modal_barrier._ModalBarrierSemanticsDelegate, () => ({
    __proto__: dart.getFields(modal_barrier._ModalBarrierSemanticsDelegate.__proto__),
    onDismiss: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  const _is_GestureRecognizerFactory_default = Symbol('_is_GestureRecognizerFactory_default');
  gesture_detector.GestureRecognizerFactory$ = dart.generic(T => {
    class GestureRecognizerFactory extends core.Object {
      [S$._debugAssertTypeMatches](type) {
        if (type == null) dart.nullFailed(I[21], 76, 37, "type");
        if (!dart.equals(type, dart.wrapType(T))) dart.assertFailed("GestureRecognizerFactory of type " + dart.str(dart.wrapType(T)) + " was used where type " + dart.str(type) + " was specified.", I[21], 77, 12, "type == T");
        return true;
      }
    }
    (GestureRecognizerFactory.new = function() {
      ;
    }).prototype = GestureRecognizerFactory.prototype;
    dart.addTypeTests(GestureRecognizerFactory);
    GestureRecognizerFactory.prototype[_is_GestureRecognizerFactory_default] = true;
    dart.addTypeCaches(GestureRecognizerFactory);
    dart.setMethodSignature(GestureRecognizerFactory, () => ({
      __proto__: dart.getMethods(GestureRecognizerFactory.__proto__),
      [S$._debugAssertTypeMatches]: dart.fnType(core.bool, [core.Type])
    }));
    dart.setLibraryUri(GestureRecognizerFactory, I[20]);
    return GestureRecognizerFactory;
  });
  gesture_detector.GestureRecognizerFactory = gesture_detector.GestureRecognizerFactory$();
  dart.addTypeTests(gesture_detector.GestureRecognizerFactory, _is_GestureRecognizerFactory_default);
  modal_barrier._AnyTapGestureRecognizerFactory = class _AnyTapGestureRecognizerFactory extends gesture_detector.GestureRecognizerFactory$(modal_barrier._AnyTapGestureRecognizer) {
    get onAnyTapUp() {
      return this[S$.onAnyTapUp];
    }
    set onAnyTapUp(value) {
      super.onAnyTapUp = value;
    }
    _constructor() {
      return new modal_barrier._AnyTapGestureRecognizer.new();
    }
    initializer(instance) {
      modal_barrier._AnyTapGestureRecognizer.as(instance);
      if (instance == null) dart.nullFailed(I[16], 265, 45, "instance");
      instance.onAnyTapUp = this.onAnyTapUp;
    }
  };
  (modal_barrier._AnyTapGestureRecognizerFactory.new = function(opts) {
    let onAnyTapUp = opts && 'onAnyTapUp' in opts ? opts.onAnyTapUp : null;
    this[S$.onAnyTapUp] = onAnyTapUp;
    modal_barrier._AnyTapGestureRecognizerFactory.__proto__.new.call(this);
    ;
  }).prototype = modal_barrier._AnyTapGestureRecognizerFactory.prototype;
  dart.addTypeTests(modal_barrier._AnyTapGestureRecognizerFactory);
  dart.addTypeCaches(modal_barrier._AnyTapGestureRecognizerFactory);
  dart.setMethodSignature(modal_barrier._AnyTapGestureRecognizerFactory, () => ({
    __proto__: dart.getMethods(modal_barrier._AnyTapGestureRecognizerFactory.__proto__),
    _constructor: dart.fnType(modal_barrier._AnyTapGestureRecognizer, []),
    initializer: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(modal_barrier._AnyTapGestureRecognizerFactory, I[17]);
  dart.setFieldSignature(modal_barrier._AnyTapGestureRecognizerFactory, () => ({
    __proto__: dart.getFields(modal_barrier._AnyTapGestureRecognizerFactory.__proto__),
    onAnyTapUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  modal_barrier._ModalBarrierGestureDetector = class _ModalBarrierGestureDetector extends framework.StatelessWidget {
    get child() {
      return this[S$.child$6];
    }
    set child(value) {
      super.child = value;
    }
    get onDismiss() {
      return this[S$.onDismiss$1];
    }
    set onDismiss(value) {
      super.onDismiss = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[16], 290, 29, "context");
      let gestures = new (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer()).from([dart.wrapType(modal_barrier._AnyTapGestureRecognizer), new modal_barrier._AnyTapGestureRecognizerFactory.new({onAnyTapUp: this.onDismiss})]);
      return new gesture_detector.RawGestureDetector.new({gestures: gestures, behavior: proxy_box.HitTestBehavior.opaque, semantics: new modal_barrier._ModalBarrierSemanticsDelegate.new({onDismiss: this.onDismiss}), child: this.child, $creationLocationd_0dea112b090073317d4: C[126] || CT.C126});
    }
  };
  (modal_barrier._ModalBarrierGestureDetector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[16], 275, 19, "child");
    let onDismiss = opts && 'onDismiss' in opts ? opts.onDismiss : null;
    if (onDismiss == null) dart.nullFailed(I[16], 276, 19, "onDismiss");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.child$6] = child;
    this[S$.onDismiss$1] = onDismiss;
    if (!(child != null)) dart.assertFailed(null, I[16], 277, 15, "child != null");
    if (!(onDismiss != null)) dart.assertFailed(null, I[16], 278, 15, "onDismiss != null");
    modal_barrier._ModalBarrierGestureDetector.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = modal_barrier._ModalBarrierGestureDetector.prototype;
  dart.addTypeTests(modal_barrier._ModalBarrierGestureDetector);
  dart.addTypeCaches(modal_barrier._ModalBarrierGestureDetector);
  dart.setMethodSignature(modal_barrier._ModalBarrierGestureDetector, () => ({
    __proto__: dart.getMethods(modal_barrier._ModalBarrierGestureDetector.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(modal_barrier._ModalBarrierGestureDetector, I[17]);
  dart.setFieldSignature(modal_barrier._ModalBarrierGestureDetector, () => ({
    __proto__: dart.getFields(modal_barrier._ModalBarrierGestureDetector.__proto__),
    child: dart.finalFieldType(framework.Widget),
    onDismiss: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  const _is_Route_default = Symbol('_is_Route_default');
  navigator$.Route$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var CompleterOfTN = () => (CompleterOfTN = dart.constFn(async.Completer$(TN())))();
    class Route extends core.Object {
      get navigator() {
        return this[S$._navigator];
      }
      get settings() {
        return this[S$._settings];
      }
      get restorationScopeId() {
        return this[S$._restorationScopeId];
      }
      [S$._updateSettings](newSettings) {
        if (newSettings == null) dart.nullFailed(I[23], 170, 38, "newSettings");
        if (!(newSettings != null)) dart.assertFailed(null, I[23], 171, 12, "newSettings != null");
        if (!dart.equals(this[S$._settings], newSettings)) {
          this[S$._settings] = newSettings;
          this.changedInternalState();
        }
      }
      [S$._updateRestorationId](restorationId) {
        this[S$._restorationScopeId].value = restorationId;
      }
      get overlayEntries() {
        return C[133] || CT.C133;
      }
      install() {
      }
      didPush() {
        let t12;
        t12 = new ticker.TickerFuture.complete();
        return (() => {
          t12.then(dart.void, dart.fn(_ => {
            let t13;
            t13 = this.navigator;
            t13 == null ? null : t13.focusScopeNode.requestFocus();
          }, T$.voidToNull()));
          return t12;
        })();
      }
      didAdd() {
        new ticker.TickerFuture.complete().then(dart.void, dart.fn(_ => {
          let t12;
          t12 = this.navigator;
          t12 == null ? null : t12.focusScopeNode.requestFocus();
        }, T$.voidToNull()));
      }
      didReplace(oldRoute) {
      }
      willPop() {
        return async.async(navigator$.RoutePopDisposition, (function* willPop() {
          return dart.test(this.isFirst) ? navigator$.RoutePopDisposition.bubble : navigator$.RoutePopDisposition.pop;
        }).bind(this));
      }
      get willHandlePopInternally() {
        return false;
      }
      get currentResult() {
        return null;
      }
      get popped() {
        return this[S$._popCompleter].future;
      }
      didPop(result) {
        TN().as(result);
        this.didComplete(result);
        return true;
      }
      didComplete(result) {
        let t12;
        TN().as(result);
        this[S$._popCompleter].complete((t12 = result, t12 == null ? this.currentResult : t12));
      }
      didPopNext(nextRoute) {
        if (nextRoute == null) dart.nullFailed(I[23], 365, 34, "nextRoute");
      }
      didChangeNext(nextRoute) {
      }
      didChangePrevious(previousRoute) {
      }
      changedInternalState() {
      }
      changedExternalState() {
      }
      dispose() {
        this[S$._navigator] = null;
      }
      get isCurrent() {
        if (this[S$._navigator] == null) return false;
        let currentRouteEntry = dart.nullCheck(this[S$._navigator])[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
        if (currentRouteEntry == null) return false;
        return dart.equals(currentRouteEntry.route, this);
      }
      get isFirst() {
        if (this[S$._navigator] == null) return false;
        let currentRouteEntry = dart.nullCheck(this[S$._navigator])[S$._history][S$.$cast](T$._RouteEntryN())[S$.$firstWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
        if (currentRouteEntry == null) return false;
        return dart.equals(currentRouteEntry.route, this);
      }
      get hasActiveRouteBelow() {
        if (this[S$._navigator] == null) return false;
        for (let entry of dart.nullCheck(this[S$._navigator])[S$._history]) {
          if (dart.equals(entry.route, this)) return false;
          if (dart.test(navigator$._RouteEntry.isPresentPredicate(entry))) return true;
        }
        return false;
      }
      get isActive() {
        let t12;
        if (this[S$._navigator] == null) return false;
        return (t12 = dart.nullCheck(this[S$._navigator])[S$._history][S$.$cast](T$._RouteEntryN())[S$.$firstWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isRoutePredicate(this)(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())}), t12 == null ? null : t12.isPresent) === true;
      }
    }
    (Route.new = function(opts) {
      let t12;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      this[S$._navigator] = null;
      this[S$._restorationScopeId] = new (T$.ValueNotifierOfStringN()).new(null);
      this[S$._popCompleter] = CompleterOfTN().new();
      this[S$._settings] = (t12 = settings, t12 == null ? C[132] || CT.C132 : t12);
      ;
    }).prototype = Route.prototype;
    dart.addTypeTests(Route);
    Route.prototype[_is_Route_default] = true;
    dart.addTypeCaches(Route);
    dart.setMethodSignature(Route, () => ({
      __proto__: dart.getMethods(Route.__proto__),
      [S$._updateSettings]: dart.fnType(dart.void, [navigator$.RouteSettings]),
      [S$._updateRestorationId]: dart.fnType(dart.void, [dart.nullable(core.String)]),
      install: dart.fnType(dart.void, []),
      didPush: dart.fnType(ticker.TickerFuture, []),
      didAdd: dart.fnType(dart.void, []),
      didReplace: dart.fnType(dart.void, [dart.nullable(navigator$.Route)]),
      willPop: dart.fnType(async.Future$(navigator$.RoutePopDisposition), []),
      didPop: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      didComplete: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      didPopNext: dart.fnType(dart.void, [navigator$.Route]),
      didChangeNext: dart.fnType(dart.void, [dart.nullable(navigator$.Route)]),
      didChangePrevious: dart.fnType(dart.void, [dart.nullable(navigator$.Route)]),
      changedInternalState: dart.fnType(dart.void, []),
      changedExternalState: dart.fnType(dart.void, []),
      dispose: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(Route, () => ({
      __proto__: dart.getGetters(Route.__proto__),
      navigator: dart.nullable(navigator$.NavigatorState),
      settings: navigator$.RouteSettings,
      restorationScopeId: change_notifier.ValueListenable$(dart.nullable(core.String)),
      overlayEntries: core.List$(overlay$.OverlayEntry),
      willHandlePopInternally: core.bool,
      currentResult: dart.nullable(T),
      popped: async.Future$(dart.nullable(T)),
      isCurrent: core.bool,
      isFirst: core.bool,
      hasActiveRouteBelow: core.bool,
      isActive: core.bool
    }));
    dart.setLibraryUri(Route, I[24]);
    dart.setFieldSignature(Route, () => ({
      __proto__: dart.getFields(Route.__proto__),
      [S$._navigator]: dart.fieldType(dart.nullable(navigator$.NavigatorState)),
      [S$._settings]: dart.fieldType(navigator$.RouteSettings),
      [S$._restorationScopeId]: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(core.String))),
      [S$._popCompleter]: dart.finalFieldType(async.Completer$(dart.nullable(T)))
    }));
    return Route;
  });
  navigator$.Route = navigator$.Route$();
  dart.addTypeTests(navigator$.Route, _is_Route_default);
  const _is_OverlayRoute_default = Symbol('_is_OverlayRoute_default');
  routes.OverlayRoute$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class OverlayRoute extends navigator$.Route$(T) {
      get overlayEntries() {
        return this[S$._overlayEntries];
      }
      install() {
        if (!dart.test(this[S$._overlayEntries][S$.$isEmpty])) dart.assertFailed(null, I[22], 47, 12, "_overlayEntries.isEmpty");
        this[S$._overlayEntries][S$.$addAll](this.createOverlayEntries());
        super.install();
      }
      get finishedWhenPopped() {
        return true;
      }
      didPop(result) {
        TN().as(result);
        let returnValue = super.didPop(result);
        if (!dart.test(returnValue)) dart.assertFailed(null, I[22], 67, 12, "returnValue");
        if (dart.test(this.finishedWhenPopped)) dart.nullCheck(this.navigator).finalizeRoute(this);
        return returnValue;
      }
      dispose() {
        this[S$._overlayEntries][S$.$clear]();
        super.dispose();
      }
    }
    (OverlayRoute.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      this[S$._overlayEntries] = T$.JSArrayOfOverlayEntry().of([]);
      OverlayRoute.__proto__.new.call(this, {settings: settings});
      ;
    }).prototype = OverlayRoute.prototype;
    dart.addTypeTests(OverlayRoute);
    OverlayRoute.prototype[_is_OverlayRoute_default] = true;
    dart.addTypeCaches(OverlayRoute);
    dart.setGetterSignature(OverlayRoute, () => ({
      __proto__: dart.getGetters(OverlayRoute.__proto__),
      finishedWhenPopped: core.bool
    }));
    dart.setLibraryUri(OverlayRoute, I[25]);
    dart.setFieldSignature(OverlayRoute, () => ({
      __proto__: dart.getFields(OverlayRoute.__proto__),
      [S$._overlayEntries]: dart.finalFieldType(core.List$(overlay$.OverlayEntry))
    }));
    return OverlayRoute;
  });
  routes.OverlayRoute = routes.OverlayRoute$();
  dart.addTypeTests(routes.OverlayRoute, _is_OverlayRoute_default);
  const _is_TransitionRoute_default = Symbol('_is_TransitionRoute_default');
  routes.TransitionRoute$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var CompleterOfTN = () => (CompleterOfTN = dart.constFn(async.Completer$(TN())))();
    class TransitionRoute extends routes.OverlayRoute$(T) {
      get completed() {
        return this[S$._transitionCompleter].future;
      }
      get reverseTransitionDuration() {
        return this.transitionDuration;
      }
      get finishedWhenPopped() {
        return dart.nullCheck(this[S$._controller]).status == animation.AnimationStatus.dismissed;
      }
      get animation() {
        return this[S$._animation];
      }
      get controller() {
        return this[S$._controller];
      }
      get secondaryAnimation() {
        return this[S$._secondaryAnimation];
      }
      createAnimationController() {
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 151, 12, "!_transitionCompleter.isCompleted");
        let duration = this.transitionDuration;
        let reverseDuration = this.reverseTransitionDuration;
        if (!(duration != null && dart.test(duration['>='](core.Duration.zero)))) dart.assertFailed(null, I[22], 154, 12, "duration != null && duration >= Duration.zero");
        return new animation_controller.AnimationController.new({duration: duration, reverseDuration: reverseDuration, debugLabel: this.debugLabel, vsync: dart.nullCheck(this.navigator)});
      }
      createAnimation() {
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 167, 12, "!_transitionCompleter.isCompleted");
        if (!(this[S$._controller] != null)) dart.assertFailed(null, I[22], 168, 12, "_controller != null");
        return dart.nullCheck(this[S$._controller]).view;
      }
      [S$._handleStatusChanged](status) {
        if (status == null) dart.nullFailed(I[22], 174, 45, "status");
        switch (status) {
          case C[134] || CT.C134:
          {
            if (dart.test(this.overlayEntries[S$.$isNotEmpty])) this.overlayEntries[S$.$first].opaque = this.opaque;
            break;
          }
          case C[135] || CT.C135:
          case C[136] || CT.C136:
          {
            if (dart.test(this.overlayEntries[S$.$isNotEmpty])) this.overlayEntries[S$.$first].opaque = false;
            break;
          }
          case C[137] || CT.C137:
          {
            if (!dart.test(this.isActive)) {
              dart.nullCheck(this.navigator).finalizeRoute(this);
            }
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      install() {
        let t12;
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot install a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 199, 12, "!_transitionCompleter.isCompleted");
        this[S$._controller] = this.createAnimationController();
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".createAnimationController() returned null.", I[22], 201, 12, "_controller != null");
        this[S$._animation] = (t12 = this.createAnimation(), (() => {
          t12.addStatusListener(dart.bind(this, S$._handleStatusChanged));
          return t12;
        })());
        if (!(this[S$._animation] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".createAnimation() returned null.", I[22], 204, 12, "_animation != null");
        super.install();
        if (dart.test(dart.nullCheck(this[S$._animation]).isCompleted) && dart.test(this.overlayEntries[S$.$isNotEmpty])) {
          this.overlayEntries[S$.$first].opaque = this.opaque;
        }
      }
      didPush() {
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".didPush called before calling install() or after calling dispose().", I[22], 213, 12, "_controller != null");
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 214, 12, "!_transitionCompleter.isCompleted");
        super.didPush();
        return dart.nullCheck(this[S$._controller]).forward();
      }
      didAdd() {
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".didPush called before calling install() or after calling dispose().", I[22], 221, 12, "_controller != null");
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 222, 12, "!_transitionCompleter.isCompleted");
        super.didAdd();
        dart.nullCheck(this[S$._controller]).value = dart.nullCheck(this[S$._controller]).upperBound;
      }
      didReplace(oldRoute) {
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".didReplace called before calling install() or after calling dispose().", I[22], 229, 12, "_controller != null");
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 230, 12, "!_transitionCompleter.isCompleted");
        if (routes.TransitionRoute.is(oldRoute)) dart.nullCheck(this[S$._controller]).value = dart.nullCheck(oldRoute[S$._controller]).value;
        super.didReplace(oldRoute);
      }
      didPop(result) {
        TN().as(result);
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".didPop called before calling install() or after calling dispose().", I[22], 238, 12, "_controller != null");
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 239, 12, "!_transitionCompleter.isCompleted");
        this[S$._result] = result;
        dart.nullCheck(this[S$._controller]).reverse();
        return super.didPop(result);
      }
      didPopNext(nextRoute) {
        if (nextRoute == null) dart.nullFailed(I[22], 246, 34, "nextRoute");
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".didPopNext called before calling install() or after calling dispose().", I[22], 247, 12, "_controller != null");
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 248, 12, "!_transitionCompleter.isCompleted");
        this[S$._updateSecondaryAnimation](nextRoute);
        super.didPopNext(nextRoute);
      }
      didChangeNext(nextRoute) {
        if (!(this[S$._controller] != null)) dart.assertFailed(dart.str(this[S$.$runtimeType]) + ".didChangeNext called before calling install() or after calling dispose().", I[22], 255, 12, "_controller != null");
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot reuse a " + dart.str(this[S$.$runtimeType]) + " after disposing it.", I[22], 256, 12, "!_transitionCompleter.isCompleted");
        this[S$._updateSecondaryAnimation](nextRoute);
        super.didChangeNext(nextRoute);
      }
      [S$._updateSecondaryAnimation](nextRoute) {
        let previousTrainHoppingListenerRemover = this[S$._trainHoppingListenerRemover];
        this[S$._trainHoppingListenerRemover] = null;
        if (routes.TransitionRoute.is(nextRoute) && dart.test(this.canTransitionTo(nextRoute)) && dart.test(nextRoute.canTransitionFrom(this))) {
          let current = this[S$._secondaryAnimation].parent;
          if (current != null) {
            let currentTrain = dart.nullCheck(animations.TrainHoppingAnimation.is(current) ? current.currentTrain : current);
            let nextTrain = dart.nullCheck(nextRoute[S$._animation]);
            if (currentTrain.value == nextTrain.value || nextTrain.status == animation.AnimationStatus.completed || nextTrain.status == animation.AnimationStatus.dismissed) {
              this[S$._setSecondaryAnimation](nextTrain, nextRoute.completed);
            } else {
              let newAnimation = null;
              const _jumpOnAnimationEnd = status => {
                if (status == null) dart.nullFailed(I[22], 298, 52, "status");
                switch (status) {
                  case C[134] || CT.C134:
                  case C[137] || CT.C137:
                  {
                    this[S$._setSecondaryAnimation](nextTrain, nextRoute.completed);
                    if (this[S$._trainHoppingListenerRemover] != null) {
                      dart.nullCheck(this[S$._trainHoppingListenerRemover])();
                      this[S$._trainHoppingListenerRemover] = null;
                    }
                    break;
                  }
                  case C[135] || CT.C135:
                  case C[136] || CT.C136:
                  {
                    break;
                  }
                  default:
                  {
                    dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
                  }
                }
              };
              dart.fn(_jumpOnAnimationEnd, T$.AnimationStatusTovoid());
              this[S$._trainHoppingListenerRemover] = dart.fn(() => {
                let t12;
                nextTrain.removeStatusListener(_jumpOnAnimationEnd);
                t12 = newAnimation;
                t12 == null ? null : t12.dispose();
              }, T$.VoidTovoid());
              nextTrain.addStatusListener(_jumpOnAnimationEnd);
              newAnimation = new animations.TrainHoppingAnimation.new(currentTrain, nextTrain, {onSwitchedTrain: dart.fn(() => {
                  if (!dart.equals(this[S$._secondaryAnimation].parent, newAnimation)) dart.assertFailed(null, I[22], 325, 22, "_secondaryAnimation.parent == newAnimation");
                  if (!dart.equals(dart.nullCheck(newAnimation).currentTrain, nextRoute[S$._animation])) dart.assertFailed(null, I[22], 326, 22, "newAnimation!.currentTrain == nextRoute._animation");
                  this[S$._setSecondaryAnimation](dart.nullCheck(newAnimation).currentTrain, nextRoute.completed);
                  if (this[S$._trainHoppingListenerRemover] != null) {
                    dart.nullCheck(this[S$._trainHoppingListenerRemover])();
                    this[S$._trainHoppingListenerRemover] = null;
                  }
                }, T$.VoidTovoid())});
              this[S$._setSecondaryAnimation](newAnimation, nextRoute.completed);
            }
          } else {
            this[S$._setSecondaryAnimation](nextRoute[S$._animation], nextRoute.completed);
          }
        } else {
          this[S$._setSecondaryAnimation](animations.kAlwaysDismissedAnimation);
        }
        if (previousTrainHoppingListenerRemover != null) {
          previousTrainHoppingListenerRemover();
        }
      }
      [S$._setSecondaryAnimation](animation, disposed = null) {
        let t12;
        this[S$._secondaryAnimation].parent = animation;
        t12 = disposed;
        t12 == null ? null : t12.then(core.Null, dart.fn(_ => {
          if (dart.equals(this[S$._secondaryAnimation].parent, animation)) {
            this[S$._secondaryAnimation].parent = animations.kAlwaysDismissedAnimation;
            if (animations.TrainHoppingAnimation.is(animation)) {
              animation.dispose();
            }
          }
        }, T$.dynamicToNull()));
      }
      canTransitionTo(nextRoute) {
        if (nextRoute == null) dart.nullFailed(I[22], 389, 49, "nextRoute");
        return true;
      }
      canTransitionFrom(previousRoute) {
        if (previousRoute == null) dart.nullFailed(I[22], 414, 51, "previousRoute");
        return true;
      }
      dispose() {
        let t12;
        if (!!dart.test(this[S$._transitionCompleter].isCompleted)) dart.assertFailed("Cannot dispose a " + dart.str(this[S$.$runtimeType]) + " twice.", I[22], 418, 12, "!_transitionCompleter.isCompleted");
        t12 = this[S$._controller];
        t12 == null ? null : t12.dispose();
        this[S$._transitionCompleter].complete(this[S$._result]);
        super.dispose();
      }
      get debugLabel() {
        return object.objectRuntimeType(this, "TransitionRoute");
      }
      toString() {
        return dart.str(object.objectRuntimeType(this, "TransitionRoute")) + "(animation: " + dart.str(this[S$._controller]) + ")";
      }
    }
    (TransitionRoute.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      this[S$._transitionCompleter] = CompleterOfTN().new();
      this[S$._animation] = null;
      this[S$._controller] = null;
      this[S$._secondaryAnimation] = new animations.ProxyAnimation.new(animations.kAlwaysDismissedAnimation);
      this[S$._result] = null;
      this[S$._trainHoppingListenerRemover] = null;
      TransitionRoute.__proto__.new.call(this, {settings: settings});
      ;
    }).prototype = TransitionRoute.prototype;
    dart.addTypeTests(TransitionRoute);
    TransitionRoute.prototype[_is_TransitionRoute_default] = true;
    dart.addTypeCaches(TransitionRoute);
    dart.setMethodSignature(TransitionRoute, () => ({
      __proto__: dart.getMethods(TransitionRoute.__proto__),
      createAnimationController: dart.fnType(animation_controller.AnimationController, []),
      createAnimation: dart.fnType(animation.Animation$(core.double), []),
      [S$._handleStatusChanged]: dart.fnType(dart.void, [animation.AnimationStatus]),
      [S$._updateSecondaryAnimation]: dart.fnType(dart.void, [dart.nullable(navigator$.Route)]),
      [S$._setSecondaryAnimation]: dart.fnType(dart.void, [dart.nullable(animation.Animation$(core.double))], [dart.nullable(async.Future)]),
      canTransitionTo: dart.fnType(core.bool, [routes.TransitionRoute]),
      canTransitionFrom: dart.fnType(core.bool, [routes.TransitionRoute])
    }));
    dart.setGetterSignature(TransitionRoute, () => ({
      __proto__: dart.getGetters(TransitionRoute.__proto__),
      completed: async.Future$(dart.nullable(T)),
      reverseTransitionDuration: core.Duration,
      animation: dart.nullable(animation.Animation$(core.double)),
      controller: dart.nullable(animation_controller.AnimationController),
      secondaryAnimation: dart.nullable(animation.Animation$(core.double)),
      debugLabel: core.String
    }));
    dart.setLibraryUri(TransitionRoute, I[25]);
    dart.setFieldSignature(TransitionRoute, () => ({
      __proto__: dart.getFields(TransitionRoute.__proto__),
      [S$._transitionCompleter]: dart.finalFieldType(async.Completer$(dart.nullable(T))),
      [S$._animation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
      [S$._controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [S$._secondaryAnimation]: dart.finalFieldType(animations.ProxyAnimation),
      [S$._result]: dart.fieldType(dart.nullable(T)),
      [S$._trainHoppingListenerRemover]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    dart.defineExtensionMethods(TransitionRoute, ['toString']);
    return TransitionRoute;
  });
  routes.TransitionRoute = routes.TransitionRoute$();
  dart.addTypeTests(routes.TransitionRoute, _is_TransitionRoute_default);
  routes.LocalHistoryEntry = class LocalHistoryEntry extends core.Object {
    get onRemove() {
      return this[S$.onRemove];
    }
    set onRemove(value) {
      super.onRemove = value;
    }
    remove() {
      dart.nullCheck(this[S$._owner]).removeLocalHistoryEntry(this);
      if (!(this[S$._owner] == null)) dart.assertFailed(null, I[22], 444, 12, "_owner == null");
    }
    [S$._notifyRemoved]() {
      let t12;
      t12 = this.onRemove;
      t12 == null ? null : t12();
    }
  };
  (routes.LocalHistoryEntry.new = function(opts) {
    let onRemove = opts && 'onRemove' in opts ? opts.onRemove : null;
    this[S$._owner] = null;
    this[S$.onRemove] = onRemove;
    ;
  }).prototype = routes.LocalHistoryEntry.prototype;
  dart.addTypeTests(routes.LocalHistoryEntry);
  dart.addTypeCaches(routes.LocalHistoryEntry);
  dart.setMethodSignature(routes.LocalHistoryEntry, () => ({
    __proto__: dart.getMethods(routes.LocalHistoryEntry.__proto__),
    remove: dart.fnType(dart.void, []),
    [S$._notifyRemoved]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(routes.LocalHistoryEntry, I[25]);
  dart.setFieldSignature(routes.LocalHistoryEntry, () => ({
    __proto__: dart.getFields(routes.LocalHistoryEntry.__proto__),
    onRemove: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    [S$._owner]: dart.fieldType(dart.nullable(routes.LocalHistoryRoute))
  }));
  const _is_LocalHistoryRoute_default = Symbol('_is_LocalHistoryRoute_default');
  routes.LocalHistoryRoute$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    const willPop = Symbol("willPop");
    class LocalHistoryRoute extends navigator$.Route$(T) {}
    LocalHistoryRoute[dart.mixinOn] = Route => class LocalHistoryRoute extends Route {
      get [S$._localHistory$1]() {
        return this[S$._localHistory];
      }
      set [S$._localHistory$1](value) {
        this[S$._localHistory] = value;
      }
      addLocalHistoryEntry(entry) {
        if (entry == null) dart.nullFailed(I[22], 593, 47, "entry");
        if (!(entry[S$._owner] == null)) dart.assertFailed(null, I[22], 594, 12, "entry._owner == null");
        entry[S$._owner] = this;
        this[S$._localHistory$1] == null ? this[S$._localHistory$1] = T$.JSArrayOfLocalHistoryEntry().of([]) : null;
        let wasEmpty = dart.nullCheck(this[S$._localHistory$1])[S$.$isEmpty];
        dart.nullCheck(this[S$._localHistory$1])[S$.$add](entry);
        if (dart.test(wasEmpty)) this.changedInternalState();
      }
      removeLocalHistoryEntry(entry) {
        if (entry == null) dart.nullFailed(I[22], 607, 50, "entry");
        if (!(entry != null)) dart.assertFailed(null, I[22], 608, 12, "entry != null");
        if (!dart.equals(entry[S$._owner], this)) dart.assertFailed(null, I[22], 609, 12, "entry._owner == this");
        if (!dart.test(dart.nullCheck(this[S$._localHistory$1])[S$.$contains](entry))) dart.assertFailed(null, I[22], 610, 12, "_localHistory!.contains(entry)");
        dart.nullCheck(this[S$._localHistory$1])[S$.$remove](entry);
        entry[S$._owner] = null;
        entry[S$._notifyRemoved]();
        if (dart.test(dart.nullCheck(this[S$._localHistory$1])[S$.$isEmpty])) {
          if (dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase == binding$.SchedulerPhase.persistentCallbacks) {
            dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.fn(duration => {
              if (duration == null) dart.nullFailed(I[22], 619, 67, "duration");
              this.changedInternalState();
            }, T$.DurationTovoid()));
          } else {
            this.changedInternalState();
          }
        }
      }
      willPop() {
        return async.async(navigator$.RoutePopDisposition, (function* willPop$() {
          if (dart.test(this.willHandlePopInternally)) return navigator$.RoutePopDisposition.pop;
          return this[willPop]();
        }).bind(this));
      }
      didPop(result) {
        TN().as(result);
        if (this[S$._localHistory$1] != null && dart.test(dart.nullCheck(this[S$._localHistory$1])[S$.$isNotEmpty])) {
          let entry = dart.nullCheck(this[S$._localHistory$1])[S$.$removeLast]();
          if (!dart.equals(entry[S$._owner], this)) dart.assertFailed(null, I[22], 639, 14, "entry._owner == this");
          entry[S$._owner] = null;
          entry[S$._notifyRemoved]();
          if (dart.test(dart.nullCheck(this[S$._localHistory$1])[S$.$isEmpty])) this.changedInternalState();
          return false;
        }
        return super.didPop(result);
      }
      get willHandlePopInternally() {
        return this[S$._localHistory$1] != null && dart.test(dart.nullCheck(this[S$._localHistory$1])[S$.$isNotEmpty]);
      }
      [willPop]() {
        return super.willPop();
      }
    };
    (LocalHistoryRoute[dart.mixinNew] = function() {
      this[S$._localHistory] = null;
    }).prototype = LocalHistoryRoute.prototype;
    dart.addTypeTests(LocalHistoryRoute);
    LocalHistoryRoute.prototype[_is_LocalHistoryRoute_default] = true;
    dart.addTypeCaches(LocalHistoryRoute);
    LocalHistoryRoute[dart.implements] = () => [navigator$.Route$(T)];
    dart.setMethodSignature(LocalHistoryRoute, () => ({
      __proto__: dart.getMethods(LocalHistoryRoute.__proto__),
      addLocalHistoryEntry: dart.fnType(dart.void, [routes.LocalHistoryEntry]),
      removeLocalHistoryEntry: dart.fnType(dart.void, [routes.LocalHistoryEntry])
    }));
    dart.setLibraryUri(LocalHistoryRoute, I[25]);
    dart.setFieldSignature(LocalHistoryRoute, () => ({
      __proto__: dart.getFields(LocalHistoryRoute.__proto__),
      [S$._localHistory$1]: dart.fieldType(dart.nullable(core.List$(routes.LocalHistoryEntry)))
    }));
    return LocalHistoryRoute;
  });
  routes.LocalHistoryRoute = routes.LocalHistoryRoute$();
  dart.addTypeTests(routes.LocalHistoryRoute, _is_LocalHistoryRoute_default);
  const _is_Action_default = Symbol('_is_Action_default');
  actions$.Action$ = dart.generic(T => {
    var ActionOfT = () => (ActionOfT = dart.constFn(actions$.Action$(T)))();
    var DiagnosticsPropertyOfActionOfT = () => (DiagnosticsPropertyOfActionOfT = dart.constFn(diagnostics$.DiagnosticsProperty$(ActionOfT())))();
    const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
    (Object_Diagnosticable$36.new = function() {
    }).prototype = Object_Diagnosticable$36.prototype;
    dart.applyMixin(Object_Diagnosticable$36, diagnostics$.Diagnosticable);
    class Action extends Object_Diagnosticable$36 {
      get intentType() {
        return dart.wrapType(T);
      }
      isEnabled(intent) {
        T.as(intent);
        if (intent == null) dart.nullFailed(I[26], 96, 30, "intent");
        return true;
      }
      consumesKey(intent) {
        T.as(intent);
        if (intent == null) dart.nullFailed(I[26], 109, 32, "intent");
        return true;
      }
      addActionListener(listener) {
        if (listener == null) dart.nullFailed(I[26], 170, 49, "listener");
        return this[S$._listeners].add(listener);
      }
      removeActionListener(listener) {
        if (listener == null) dart.nullFailed(I[26], 184, 52, "listener");
        return this[S$._listeners].remove(listener);
      }
      notifyActionListeners() {
        if (dart.test(this[S$._listeners].isEmpty)) {
          return;
        }
        let localListeners = T$.ListOfActionOfIntentTovoid().from(this[S$._listeners]);
        for (let listener of localListeners) {
          let collector = null;
          if (!dart.test(dart.fn(() => {
            collector = dart.fn(() => new (T$.SyncIterableOfDiagnosticsNode()).new((function*() {
              yield new (DiagnosticsPropertyOfActionOfT()).new("The " + dart.str(this[S$.$runtimeType]) + " sending notification was", this, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty});
            }).bind(this)), T$.VoidToIterableOfDiagnosticsNode());
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[26], 211, 14, "() {\r\n        collector = () sync* {\r\n          yield DiagnosticsProperty<Action<T>>(\r\n            'The $runtimeType sending notification was',\r\n            this,\r\n            style: DiagnosticsTreeStyle.errorProperty,\r\n          );\r\n        };\r\n        return true;\r\n      }()");
          try {
            if (dart.test(this[S$._listeners].contains(listener))) {
              listener(this);
            }
          } catch (e) {
            let exception = dart.getThrown(e);
            let stack = dart.stackTrace(e);
            if (core.Object.is(exception)) {
              assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "widgets library", context: new assertions.ErrorDescription.new("while dispatching notifications for " + dart.str(this[S$.$runtimeType])), informationCollector: collector}));
            } else
              throw e;
          }
        }
      }
    }
    (Action.new = function() {
      this[S$._listeners] = new (T$.ObserverListOfActionOfIntentTovoid()).new();
      ;
    }).prototype = Action.prototype;
    dart.addTypeTests(Action);
    Action.prototype[_is_Action_default] = true;
    dart.addTypeCaches(Action);
    dart.setMethodSignature(Action, () => ({
      __proto__: dart.getMethods(Action.__proto__),
      isEnabled: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      consumesKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addActionListener: dart.fnType(dart.void, [dart.fnType(dart.void, [actions$.Action$(actions$.Intent)])]),
      removeActionListener: dart.fnType(dart.void, [dart.fnType(dart.void, [actions$.Action$(actions$.Intent)])]),
      notifyActionListeners: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(Action, () => ({
      __proto__: dart.getGetters(Action.__proto__),
      intentType: core.Type
    }));
    dart.setLibraryUri(Action, I[27]);
    dart.setFieldSignature(Action, () => ({
      __proto__: dart.getFields(Action.__proto__),
      [S$._listeners]: dart.finalFieldType(observer_list.ObserverList$(dart.fnType(dart.void, [actions$.Action$(actions$.Intent)])))
    }));
    return Action;
  });
  actions$.Action = actions$.Action$();
  dart.addTypeTests(actions$.Action, _is_Action_default);
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics$.Diagnosticable);
  actions$.Intent = class Intent extends Object_Diagnosticable$36 {};
  (actions$.Intent.new = function() {
    ;
  }).prototype = actions$.Intent.prototype;
  dart.addTypeTests(actions$.Intent);
  dart.addTypeCaches(actions$.Intent);
  dart.setLibraryUri(actions$.Intent, I[27]);
  dart.defineLazy(actions$.Intent, {
    /*actions$.Intent.doNothing*/get doNothing() {
      return C[138] || CT.C138;
    }
  }, false);
  actions$.DismissIntent = class DismissIntent extends actions$.Intent {};
  (actions$.DismissIntent.new = function() {
    actions$.DismissIntent.__proto__.new.call(this);
    ;
  }).prototype = actions$.DismissIntent.prototype;
  dart.addTypeTests(actions$.DismissIntent);
  dart.addTypeCaches(actions$.DismissIntent);
  dart.setLibraryUri(actions$.DismissIntent, I[27]);
  actions$.DismissAction = class DismissAction extends actions$.Action$(actions$.DismissIntent) {};
  (actions$.DismissAction.new = function() {
    actions$.DismissAction.__proto__.new.call(this);
    ;
  }).prototype = actions$.DismissAction.prototype;
  dart.addTypeTests(actions$.DismissAction);
  dart.addTypeCaches(actions$.DismissAction);
  dart.setLibraryUri(actions$.DismissAction, I[27]);
  routes._DismissModalAction = class _DismissModalAction extends actions$.DismissAction {
    isEnabled(intent) {
      actions$.DismissIntent.as(intent);
      if (intent == null) dart.nullFailed(I[22], 661, 32, "intent");
      let route = dart.nullCheck(routes.ModalRoute.of(dart.dynamic, this.context));
      return route.barrierDismissible;
    }
    invoke(intent) {
      actions$.DismissIntent.as(intent);
      if (intent == null) dart.nullFailed(I[22], 667, 31, "intent");
      return navigator$.Navigator.of(this.context).maybePop(T$.ObjectN());
    }
  };
  (routes._DismissModalAction.new = function(context) {
    if (context == null) dart.nullFailed(I[22], 656, 28, "context");
    this.context = context;
    routes._DismissModalAction.__proto__.new.call(this);
    ;
  }).prototype = routes._DismissModalAction.prototype;
  dart.addTypeTests(routes._DismissModalAction);
  dart.addTypeCaches(routes._DismissModalAction);
  dart.setMethodSignature(routes._DismissModalAction, () => ({
    __proto__: dart.getMethods(routes._DismissModalAction.__proto__),
    invoke: dart.fnType(core.Object, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(routes._DismissModalAction, I[25]);
  dart.setFieldSignature(routes._DismissModalAction, () => ({
    __proto__: dart.getFields(routes._DismissModalAction.__proto__),
    context: dart.finalFieldType(framework.BuildContext)
  }));
  routes._ModalScopeStatus = class _ModalScopeStatus extends framework.InheritedWidget {
    get isCurrent() {
      return this[S$.isCurrent];
    }
    set isCurrent(value) {
      super.isCurrent = value;
    }
    get canPop() {
      return this[S$.canPop];
    }
    set canPop(value) {
      super.canPop = value;
    }
    get route() {
      return this[S$.route];
    }
    set route(value) {
      super.route = value;
    }
    updateShouldNotify(old) {
      routes._ModalScopeStatus.as(old);
      if (old == null) dart.nullFailed(I[22], 690, 45, "old");
      return this.isCurrent != old.isCurrent || this.canPop != old.canPop || !dart.equals(this.route, old.route);
    }
    debugFillProperties(description) {
      if (description == null) dart.nullFailed(I[22], 697, 56, "description");
      super.debugFillProperties(description);
      description.add(new diagnostics$.FlagProperty.new("isCurrent", {value: this.isCurrent, ifTrue: "active", ifFalse: "inactive"}));
      description.add(new diagnostics$.FlagProperty.new("canPop", {value: this.canPop, ifTrue: "can pop"}));
    }
  };
  (routes._ModalScopeStatus.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let isCurrent = opts && 'isCurrent' in opts ? opts.isCurrent : null;
    if (isCurrent == null) dart.nullFailed(I[22], 675, 19, "isCurrent");
    let canPop = opts && 'canPop' in opts ? opts.canPop : null;
    if (canPop == null) dart.nullFailed(I[22], 676, 19, "canPop");
    let route = opts && 'route' in opts ? opts.route : null;
    if (route == null) dart.nullFailed(I[22], 677, 19, "route");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[22], 678, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.isCurrent] = isCurrent;
    this[S$.canPop] = canPop;
    this[S$.route] = route;
    if (!(isCurrent != null)) dart.assertFailed(null, I[22], 679, 15, "isCurrent != null");
    if (!(canPop != null)) dart.assertFailed(null, I[22], 680, 15, "canPop != null");
    if (!(route != null)) dart.assertFailed(null, I[22], 681, 15, "route != null");
    if (!(child != null)) dart.assertFailed(null, I[22], 682, 15, "child != null");
    routes._ModalScopeStatus.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = routes._ModalScopeStatus.prototype;
  dart.addTypeTests(routes._ModalScopeStatus);
  dart.addTypeCaches(routes._ModalScopeStatus);
  dart.setMethodSignature(routes._ModalScopeStatus, () => ({
    __proto__: dart.getMethods(routes._ModalScopeStatus.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(routes._ModalScopeStatus, I[25]);
  dart.setFieldSignature(routes._ModalScopeStatus, () => ({
    __proto__: dart.getFields(routes._ModalScopeStatus.__proto__),
    isCurrent: dart.finalFieldType(core.bool),
    canPop: dart.finalFieldType(core.bool),
    route: dart.finalFieldType(navigator$.Route)
  }));
  const _is__ModalScope_default = Symbol('_is__ModalScope_default');
  routes._ModalScope$ = dart.generic(T => {
    var _ModalScopeStateOfT = () => (_ModalScopeStateOfT = dart.constFn(routes._ModalScopeState$(T)))();
    class _ModalScope extends framework.StatefulWidget {
      get route() {
        return this[S$.route$1];
      }
      set route(value) {
        super.route = value;
      }
      createState() {
        return new (_ModalScopeStateOfT()).new();
      }
    }
    (_ModalScope.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let route = opts && 'route' in opts ? opts.route : null;
      if (route == null) dart.nullFailed(I[22], 707, 19, "route");
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[S$.route$1] = route;
      _ModalScope.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = _ModalScope.prototype;
    dart.addTypeTests(_ModalScope);
    _ModalScope.prototype[_is__ModalScope_default] = true;
    dart.addTypeCaches(_ModalScope);
    dart.setMethodSignature(_ModalScope, () => ({
      __proto__: dart.getMethods(_ModalScope.__proto__),
      createState: dart.fnType(routes._ModalScopeState$(T), [])
    }));
    dart.setLibraryUri(_ModalScope, I[25]);
    dart.setFieldSignature(_ModalScope, () => ({
      __proto__: dart.getFields(_ModalScope.__proto__),
      route: dart.finalFieldType(routes.ModalRoute$(T))
    }));
    return _ModalScope;
  });
  routes._ModalScope = routes._ModalScope$();
  dart.addTypeTests(routes._ModalScope, _is__ModalScope_default);
  const _is__ModalScopeState_default = Symbol('_is__ModalScopeState_default');
  routes._ModalScopeState$ = dart.generic(T => {
    var _ModalScopeOfT = () => (_ModalScopeOfT = dart.constFn(routes._ModalScope$(T)))();
    class _ModalScopeState extends framework.State$(routes._ModalScope$(T)) {
      get [S$._listenable]() {
        let t13;
        return dart.test(this[S$.___ModalScopeState__listenable_isSet]) ? (t13 = this[S$.___ModalScopeState__listenable], t13) : dart.throw(new _internal.LateError.fieldNI("_listenable"));
      }
      set [S$._listenable](t13) {
        if (t13 == null) dart.nullFailed(I[22], 724, 19, "null");
        this[S$.___ModalScopeState__listenable_isSet] = true;
        this[S$.___ModalScopeState__listenable] = t13;
      }
      initState() {
        super.initState();
        let animations = (() => {
          let t14 = T$.JSArrayOfListenable().of([]);
          if (this.widget.route.animation != null) t14[S$.$add](dart.nullCheck(this.widget.route.animation));
          if (this.widget.route.secondaryAnimation != null) t14[S$.$add](dart.nullCheck(this.widget.route.secondaryAnimation));
          return t14;
        })();
        this[S$._listenable] = new change_notifier._MergingListenable.new(animations);
        if (dart.test(this.widget.route.isCurrent)) {
          dart.nullCheck(this.widget.route.navigator).focusScopeNode.setFirstFocus(this.focusScopeNode);
        }
      }
      didUpdateWidget(oldWidget) {
        _ModalScopeOfT().as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[22], 744, 39, "oldWidget");
        super.didUpdateWidget(oldWidget);
        if (!dart.equals(this.widget.route, oldWidget.route)) dart.assertFailed(null, I[22], 746, 12, "widget.route == oldWidget.route");
        if (dart.test(this.widget.route.isCurrent)) {
          dart.nullCheck(this.widget.route.navigator).focusScopeNode.setFirstFocus(this.focusScopeNode);
        }
      }
      didChangeDependencies() {
        super.didChangeDependencies();
        this[S$._page] = null;
      }
      [S$._forceRebuildPage]() {
        this.setState(dart.fn(() => {
          this[S$._page] = null;
        }, T$.VoidTovoid()));
      }
      dispose() {
        this.focusScopeNode.dispose();
        super.dispose();
      }
      get [S$._shouldIgnoreFocusRequest]() {
        let t15, t15$, t15$0;
        return (t15 = this.widget.route.animation, t15 == null ? null : t15.status) == animation.AnimationStatus.reverse || dart.test((t15$0 = (t15$ = this.widget.route.navigator, t15$ == null ? null : t15$.userGestureInProgress), t15$0 == null ? false : t15$0));
      }
      [S$._routeSetState](fn) {
        if (fn == null) dart.nullFailed(I[22], 777, 36, "fn");
        if (dart.test(this.widget.route.isCurrent) && !dart.test(this[S$._shouldIgnoreFocusRequest])) {
          dart.nullCheck(this.widget.route.navigator).focusScopeNode.setFirstFocus(this.focusScopeNode);
        }
        this.setState(fn);
      }
      build(context) {
        if (context == null) dart.nullFailed(I[22], 785, 29, "context");
        return new transitions.AnimatedBuilder.new({animation: this.widget.route.restorationScopeId, builder: dart.fn((context, child) => {
            if (context == null) dart.nullFailed(I[22], 788, 30, "context");
            if (!(child != null)) dart.assertFailed(null, I[22], 789, 16, "child != null");
            return new restoration$.RestorationScope.new({restorationId: this.widget.route.restorationScopeId.value, child: dart.nullCheck(child), $creationLocationd_0dea112b090073317d4: C[139] || CT.C139});
          }, T$.BuildContextAndWidgetNToRestorationScope()), child: new routes._ModalScopeStatus.new({route: this.widget.route, isCurrent: this.widget.route.isCurrent, canPop: this.widget.route.canPop, child: new basic.Offstage.new({offstage: this.widget.route.offstage, child: new page_storage.PageStorage.new({bucket: this.widget.route[S$._storageBucket], child: new basic.Builder.new({builder: dart.fn(context => {
                    let t15;
                    if (context == null) dart.nullFailed(I[22], 804, 38, "context");
                    return new actions$.Actions.new({actions: new (T$.LinkedMapOfType$ActionOfIntent()).from([dart.wrapType(actions$.DismissIntent), new routes._DismissModalAction.new(context)]), child: new primary_scroll_controller.PrimaryScrollController.new({controller: this.primaryScrollController, child: new focus_scope.FocusScope.new({node: this.focusScopeNode, child: new basic.RepaintBoundary.new({child: new transitions.AnimatedBuilder.new({animation: this[S$._listenable], builder: dart.fn((context, child) => {
                                let t15, t15$;
                                if (context == null) dart.nullFailed(I[22], 816, 50, "context");
                                return this.widget.route.buildTransitions(context, dart.nullCheck(this.widget.route.animation), dart.nullCheck(this.widget.route.secondaryAnimation), new transitions.AnimatedBuilder.new({animation: (t15$ = (t15 = this.widget.route.navigator, t15 == null ? null : t15.userGestureInProgressNotifier), t15$ == null ? new (T$.ValueNotifierOfbool()).new(false) : t15$), builder: dart.fn((context, child) => {
                                    if (context == null) dart.nullFailed(I[22], 827, 56, "context");
                                    let ignoreEvents = this[S$._shouldIgnoreFocusRequest];
                                    this.focusScopeNode.canRequestFocus = !dart.test(ignoreEvents);
                                    return new basic.IgnorePointer.new({ignoring: ignoreEvents, child: child, $creationLocationd_0dea112b090073317d4: C[143] || CT.C143});
                                  }, T$.BuildContextAndWidgetNToIgnorePointer()), child: child, $creationLocationd_0dea112b090073317d4: C[147] || CT.C147}));
                              }, T$.BuildContextAndWidgetNToWidget()), child: (t15 = this[S$._page], t15 == null ? this[S$._page] = new basic.RepaintBoundary.new({key: this.widget.route[S$._subtreeKey], child: new basic.Builder.new({builder: dart.fn(context => {
                                    if (context == null) dart.nullFailed(I[22], 842, 54, "context");
                                    return this.widget.route.buildPage(context, dart.nullCheck(this.widget.route.animation), dart.nullCheck(this.widget.route.secondaryAnimation));
                                  }, T$.BuildContextToWidget()), $creationLocationd_0dea112b090073317d4: C[152] || CT.C152}), $creationLocationd_0dea112b090073317d4: C[155] || CT.C155}) : t15), $creationLocationd_0dea112b090073317d4: C[159] || CT.C159}), $creationLocationd_0dea112b090073317d4: C[164] || CT.C164}), $creationLocationd_0dea112b090073317d4: C[167] || CT.C167}), $creationLocationd_0dea112b090073317d4: C[171] || CT.C171}), $creationLocationd_0dea112b090073317d4: C[175] || CT.C175});
                  }, T$.BuildContextToActions()), $creationLocationd_0dea112b090073317d4: C[179] || CT.C179}), $creationLocationd_0dea112b090073317d4: C[182] || CT.C182}), $creationLocationd_0dea112b090073317d4: C[186] || CT.C186}), $creationLocationd_0dea112b090073317d4: C[190] || CT.C190}), $creationLocationd_0dea112b090073317d4: C[196] || CT.C196});
      }
    }
    (_ModalScopeState.new = function() {
      this[S$._page] = null;
      this[S$.___ModalScopeState__listenable] = null;
      this[S$.___ModalScopeState__listenable_isSet] = false;
      this.focusScopeNode = new focus_manager.FocusScopeNode.new({debugLabel: dart.str(dart.wrapType(routes._ModalScopeState)) + " Focus Scope"});
      this.primaryScrollController = new scroll_controller.ScrollController.new();
      _ModalScopeState.__proto__.new.call(this);
      ;
    }).prototype = _ModalScopeState.prototype;
    dart.addTypeTests(_ModalScopeState);
    _ModalScopeState.prototype[_is__ModalScopeState_default] = true;
    dart.addTypeCaches(_ModalScopeState);
    dart.setMethodSignature(_ModalScopeState, () => ({
      __proto__: dart.getMethods(_ModalScopeState.__proto__),
      [S$._forceRebuildPage]: dart.fnType(dart.void, []),
      [S$._routeSetState]: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(_ModalScopeState, () => ({
      __proto__: dart.getGetters(_ModalScopeState.__proto__),
      [S$._listenable]: change_notifier.Listenable,
      [S$._shouldIgnoreFocusRequest]: core.bool
    }));
    dart.setSetterSignature(_ModalScopeState, () => ({
      __proto__: dart.getSetters(_ModalScopeState.__proto__),
      [S$._listenable]: change_notifier.Listenable
    }));
    dart.setLibraryUri(_ModalScopeState, I[25]);
    dart.setFieldSignature(_ModalScopeState, () => ({
      __proto__: dart.getFields(_ModalScopeState.__proto__),
      [S$._page]: dart.fieldType(dart.nullable(framework.Widget)),
      [S$.___ModalScopeState__listenable]: dart.fieldType(dart.nullable(change_notifier.Listenable)),
      [S$.___ModalScopeState__listenable_isSet]: dart.fieldType(core.bool),
      focusScopeNode: dart.finalFieldType(focus_manager.FocusScopeNode),
      primaryScrollController: dart.finalFieldType(scroll_controller.ScrollController)
    }));
    return _ModalScopeState;
  });
  routes._ModalScopeState = routes._ModalScopeState$();
  dart.addTypeTests(routes._ModalScopeState, _is__ModalScopeState_default);
  const _is_ModalRoute_default = Symbol('_is_ModalRoute_default');
  routes.ModalRoute$ = dart.generic(T => {
    var _ModalScopeStateOfT = () => (_ModalScopeStateOfT = dart.constFn(routes._ModalScopeState$(T)))();
    var GlobalKeyOf_ModalScopeStateOfT = () => (GlobalKeyOf_ModalScopeStateOfT = dart.constFn(framework.GlobalKey$(_ModalScopeStateOfT())))();
    var _ModalScopeOfT = () => (_ModalScopeOfT = dart.constFn(routes._ModalScope$(T)))();
    const willPop = Symbol("willPop");
    const TransitionRoute_LocalHistoryRoute$36 = class TransitionRoute_LocalHistoryRoute extends routes.TransitionRoute$(T) {};
    (TransitionRoute_LocalHistoryRoute$36.new = function(opts) {
      routes.LocalHistoryRoute$(T)[dart.mixinNew].call(this);
      TransitionRoute_LocalHistoryRoute$36.__proto__.new.call(this, opts);
    }).prototype = TransitionRoute_LocalHistoryRoute$36.prototype;
    dart.applyMixin(TransitionRoute_LocalHistoryRoute$36, routes.LocalHistoryRoute$(T));
    class ModalRoute extends TransitionRoute_LocalHistoryRoute$36 {
      get filter() {
        return this[S$.filter];
      }
      set filter(value) {
        super.filter = value;
      }
      static of(T, context) {
        let t15;
        if (context == null) dart.nullFailed(I[22], 901, 60, "context");
        let widget = context.dependOnInheritedWidgetOfExactType(routes._ModalScopeStatus);
        return dart.nullable(routes.ModalRoute$(T)).as((t15 = widget, t15 == null ? null : t15.route));
      }
      setState(fn) {
        if (fn == null) dart.nullFailed(I[22], 919, 30, "fn");
        if (this[S$._scopeKey].currentState != null) {
          dart.nullCheck(this[S$._scopeKey].currentState)[S$._routeSetState](fn);
        } else {
          fn();
        }
      }
      static withName(name) {
        if (name == null) dart.nullFailed(I[22], 935, 41, "name");
        return dart.fn(route => {
          if (route == null) dart.nullFailed(I[22], 936, 28, "route");
          return !dart.test(route.willHandlePopInternally) && routes.ModalRoute.is(route) && route.settings.name == name;
        }, T$.RouteTobool());
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        if (context == null) dart.nullFailed(I[22], 1087, 18, "context");
        if (animation == null) dart.nullFailed(I[22], 1088, 23, "animation");
        if (secondaryAnimation == null) dart.nullFailed(I[22], 1089, 23, "secondaryAnimation");
        if (child == null) dart.nullFailed(I[22], 1090, 12, "child");
        return child;
      }
      install() {
        super.install();
        this[S$._animationProxy] = new animations.ProxyAnimation.new(super.animation);
        this[S$._secondaryAnimationProxy] = new animations.ProxyAnimation.new(super.secondaryAnimation);
      }
      didPush() {
        if (this[S$._scopeKey].currentState != null) {
          dart.nullCheck(this.navigator).focusScopeNode.setFirstFocus(dart.nullCheck(this[S$._scopeKey].currentState).focusScopeNode);
        }
        return super.didPush();
      }
      didAdd() {
        if (this[S$._scopeKey].currentState != null) {
          dart.nullCheck(this.navigator).focusScopeNode.setFirstFocus(dart.nullCheck(this[S$._scopeKey].currentState).focusScopeNode);
        }
        super.didAdd();
      }
      get semanticsDismissible() {
        return true;
      }
      get barrierCurve() {
        return curves.Curves.ease;
      }
      get offstage() {
        return this[S$._offstage];
      }
      set offstage(value) {
        if (value == null) dart.nullFailed(I[22], 1313, 21, "value");
        if (this[S$._offstage] == value) return;
        this.setState(dart.fn(() => {
          this[S$._offstage] = value;
        }, T$.VoidTovoid()));
        dart.nullCheck(this[S$._animationProxy]).parent = dart.test(this[S$._offstage]) ? animations.kAlwaysCompleteAnimation : super.animation;
        dart.nullCheck(this[S$._secondaryAnimationProxy]).parent = dart.test(this[S$._offstage]) ? animations.kAlwaysDismissedAnimation : super.secondaryAnimation;
        this.changedInternalState();
      }
      get subtreeContext() {
        return this[S$._subtreeKey].currentContext;
      }
      get animation() {
        return this[S$._animationProxy];
      }
      get secondaryAnimation() {
        return this[S$._secondaryAnimationProxy];
      }
      willPop() {
        return async.async(navigator$.RoutePopDisposition, (function* willPop$() {
          let scope = this[S$._scopeKey].currentState;
          if (!(scope != null)) dart.assertFailed(null, I[22], 1358, 12, "scope != null");
          for (let callback of T$.ListOfVoidToFutureOfbool().from(this[S$._willPopCallbacks])) {
            if ((yield callback()) !== true) return navigator$.RoutePopDisposition.doNotPop;
          }
          return this[willPop]();
        }).bind(this));
      }
      addScopedWillPopCallback(callback) {
        if (callback == null) dart.nullFailed(I[22], 1426, 49, "callback");
        if (!(this[S$._scopeKey].currentState != null)) dart.assertFailed("Tried to add a willPop callback to a route that is not currently in the tree.", I[22], 1427, 12, "_scopeKey.currentState != null");
        this[S$._willPopCallbacks][S$.$add](callback);
      }
      removeScopedWillPopCallback(callback) {
        if (callback == null) dart.nullFailed(I[22], 1438, 52, "callback");
        if (!(this[S$._scopeKey].currentState != null)) dart.assertFailed("Tried to remove a willPop callback from a route that is not currently in the tree.", I[22], 1439, 12, "_scopeKey.currentState != null");
        this[S$._willPopCallbacks][S$.$remove](callback);
      }
      get hasScopedWillPopCallback() {
        return this[S$._willPopCallbacks][S$.$isNotEmpty];
      }
      didChangePrevious(previousRoute) {
        super.didChangePrevious(previousRoute);
        this.changedInternalState();
      }
      changedInternalState() {
        super.changedInternalState();
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
        this[S$._modalBarrier].markNeedsBuild();
        this[S$._modalScope].maintainState = this.maintainState;
      }
      changedExternalState() {
        super.changedExternalState();
        this[S$._modalBarrier].markNeedsBuild();
        if (this[S$._scopeKey].currentState != null) dart.nullCheck(this[S$._scopeKey].currentState)[S$._forceRebuildPage]();
      }
      get canPop() {
        return dart.test(this.hasActiveRouteBelow) || dart.test(this.willHandlePopInternally);
      }
      get [S$._modalBarrier]() {
        let t15;
        return dart.test(this[S$.__ModalRoute__modalBarrier_isSet]) ? (t15 = this[S$.__ModalRoute__modalBarrier], t15) : dart.throw(new _internal.LateError.fieldNI("_modalBarrier"));
      }
      set [S$._modalBarrier](t15) {
        if (t15 == null) dart.nullFailed(I[22], 1504, 21, "null");
        this[S$.__ModalRoute__modalBarrier_isSet] = true;
        this[S$.__ModalRoute__modalBarrier] = t15;
      }
      [S$._buildModalBarrier](context) {
        if (context == null) dart.nullFailed(I[22], 1505, 42, "context");
        let barrier = null;
        if (this.barrierColor != null && dart.nullCheck(this.barrierColor).alpha !== 0 && !dart.test(this.offstage)) {
          if (!!dart.equals(this.barrierColor, dart.nullCheck(this.barrierColor).withOpacity(0.0))) dart.assertFailed(null, I[22], 1508, 14, "barrierColor != barrierColor!.withOpacity(0.0)");
          let color = dart.nullCheck(this.animation).drive(T$.ColorN(), new tween.ColorTween.new({begin: dart.nullCheck(this.barrierColor).withOpacity(0.0), end: this.barrierColor}).chain(new tween.CurveTween.new({curve: this.barrierCurve})));
          barrier = new modal_barrier.AnimatedModalBarrier.new({color: color, dismissible: this.barrierDismissible, semanticsLabel: this.barrierLabel, barrierSemanticsDismissible: this.semanticsDismissible, $creationLocationd_0dea112b090073317d4: C[201] || CT.C201});
        } else {
          barrier = new modal_barrier.ModalBarrier.new({dismissible: this.barrierDismissible, semanticsLabel: this.barrierLabel, barrierSemanticsDismissible: this.semanticsDismissible, $creationLocationd_0dea112b090073317d4: C[207] || CT.C207});
        }
        if (this.filter != null) {
          barrier = new basic.BackdropFilter.new({filter: dart.nullCheck(this.filter), child: barrier, $creationLocationd_0dea112b090073317d4: C[212] || CT.C212});
        }
        barrier = new basic.IgnorePointer.new({ignoring: dart.nullCheck(this.animation).status == animation.AnimationStatus.reverse || dart.nullCheck(this.animation).status == animation.AnimationStatus.dismissed, child: barrier, $creationLocationd_0dea112b090073317d4: C[216] || CT.C216});
        if (dart.test(this.semanticsDismissible) && dart.test(this.barrierDismissible)) {
          barrier = new basic.Semantics.new({sortKey: C[220] || CT.C220, child: barrier, $creationLocationd_0dea112b090073317d4: C[221] || CT.C221});
        }
        return barrier;
      }
      [S$._buildModalScope](context) {
        let t16;
        if (context == null) dart.nullFailed(I[22], 1554, 40, "context");
        t16 = this[S$._modalScopeCache];
        return t16 == null ? this[S$._modalScopeCache] = new basic.Semantics.new({sortKey: C[225] || CT.C225, child: new (_ModalScopeOfT()).new({key: this[S$._scopeKey], route: this, $creationLocationd_0dea112b090073317d4: C[226] || CT.C226}), $creationLocationd_0dea112b090073317d4: C[230] || CT.C230}) : t16;
      }
      get [S$._modalScope]() {
        let t16;
        return dart.test(this[S$.__ModalRoute__modalScope_isSet]) ? (t16 = this[S$.__ModalRoute__modalScope], t16) : dart.throw(new _internal.LateError.fieldNI("_modalScope"));
      }
      set [S$._modalScope](t16) {
        if (t16 == null) dart.nullFailed(I[22], 1566, 21, "null");
        this[S$.__ModalRoute__modalScope_isSet] = true;
        this[S$.__ModalRoute__modalScope] = t16;
      }
      createOverlayEntries() {
        return new (T$.SyncIterableOfOverlayEntry()).new((function* createOverlayEntries() {
          yield this[S$._modalBarrier] = new overlay$.OverlayEntry.new({builder: dart.bind(this, S$._buildModalBarrier)});
          yield this[S$._modalScope] = new overlay$.OverlayEntry.new({builder: dart.bind(this, S$._buildModalScope), maintainState: this.maintainState});
        }).bind(this));
      }
      toString() {
        return dart.str(object.objectRuntimeType(this, "ModalRoute")) + "(" + dart.str(this.settings) + ", animation: " + dart.str(this[S$._animation]) + ")";
      }
      [willPop]() {
        return super.willPop();
      }
    }
    (ModalRoute.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let filter = opts && 'filter' in opts ? opts.filter : null;
      this[S$._offstage] = false;
      this[S$._animationProxy] = null;
      this[S$._secondaryAnimationProxy] = null;
      this[S$._willPopCallbacks] = T$.JSArrayOfVoidToFutureOfbool().of([]);
      this[S$._scopeKey] = GlobalKeyOf_ModalScopeStateOfT().new();
      this[S$._subtreeKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
      this[S$._storageBucket] = new page_storage.PageStorageBucket.new();
      this[S$.__ModalRoute__modalBarrier] = null;
      this[S$.__ModalRoute__modalBarrier_isSet] = false;
      this[S$._modalScopeCache] = null;
      this[S$.__ModalRoute__modalScope] = null;
      this[S$.__ModalRoute__modalScope_isSet] = false;
      this[S$.filter] = filter;
      ModalRoute.__proto__.new.call(this, {settings: settings});
      ;
    }).prototype = ModalRoute.prototype;
    dart.addTypeTests(ModalRoute);
    ModalRoute.prototype[_is_ModalRoute_default] = true;
    dart.addTypeCaches(ModalRoute);
    dart.setMethodSignature(ModalRoute, () => ({
      __proto__: dart.getMethods(ModalRoute.__proto__),
      setState: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget]),
      addScopedWillPopCallback: dart.fnType(dart.void, [dart.fnType(async.Future$(core.bool), [])]),
      removeScopedWillPopCallback: dart.fnType(dart.void, [dart.fnType(async.Future$(core.bool), [])]),
      [S$._buildModalBarrier]: dart.fnType(framework.Widget, [framework.BuildContext]),
      [S$._buildModalScope]: dart.fnType(framework.Widget, [framework.BuildContext]),
      createOverlayEntries: dart.fnType(core.Iterable$(overlay$.OverlayEntry), [])
    }));
    dart.setGetterSignature(ModalRoute, () => ({
      __proto__: dart.getGetters(ModalRoute.__proto__),
      semanticsDismissible: core.bool,
      barrierCurve: curves.Curve,
      offstage: core.bool,
      subtreeContext: dart.nullable(framework.BuildContext),
      hasScopedWillPopCallback: core.bool,
      canPop: core.bool,
      [S$._modalBarrier]: overlay$.OverlayEntry,
      [S$._modalScope]: overlay$.OverlayEntry
    }));
    dart.setSetterSignature(ModalRoute, () => ({
      __proto__: dart.getSetters(ModalRoute.__proto__),
      offstage: core.bool,
      [S$._modalBarrier]: overlay$.OverlayEntry,
      [S$._modalScope]: overlay$.OverlayEntry
    }));
    dart.setLibraryUri(ModalRoute, I[25]);
    dart.setFieldSignature(ModalRoute, () => ({
      __proto__: dart.getFields(ModalRoute.__proto__),
      filter: dart.finalFieldType(dart.nullable(ui.ImageFilter)),
      [S$._offstage]: dart.fieldType(core.bool),
      [S$._animationProxy]: dart.fieldType(dart.nullable(animations.ProxyAnimation)),
      [S$._secondaryAnimationProxy]: dart.fieldType(dart.nullable(animations.ProxyAnimation)),
      [S$._willPopCallbacks]: dart.finalFieldType(core.List$(dart.fnType(async.Future$(core.bool), []))),
      [S$._scopeKey]: dart.finalFieldType(framework.GlobalKey$(routes._ModalScopeState$(T))),
      [S$._subtreeKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
      [S$._storageBucket]: dart.finalFieldType(page_storage.PageStorageBucket),
      [S$.__ModalRoute__modalBarrier]: dart.fieldType(dart.nullable(overlay$.OverlayEntry)),
      [S$.__ModalRoute__modalBarrier_isSet]: dart.fieldType(core.bool),
      [S$._modalScopeCache]: dart.fieldType(dart.nullable(framework.Widget)),
      [S$.__ModalRoute__modalScope]: dart.fieldType(dart.nullable(overlay$.OverlayEntry)),
      [S$.__ModalRoute__modalScope_isSet]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(ModalRoute, ['toString']);
    return ModalRoute;
  });
  routes.ModalRoute = routes.ModalRoute$();
  dart.addTypeTests(routes.ModalRoute, _is_ModalRoute_default);
  const _is_PopupRoute_default = Symbol('_is_PopupRoute_default');
  routes.PopupRoute$ = dart.generic(T => {
    class PopupRoute extends routes.ModalRoute$(T) {
      get opaque() {
        return false;
      }
      get maintainState() {
        return true;
      }
    }
    (PopupRoute.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let filter = opts && 'filter' in opts ? opts.filter : null;
      PopupRoute.__proto__.new.call(this, {filter: filter, settings: settings});
      ;
    }).prototype = PopupRoute.prototype;
    dart.addTypeTests(PopupRoute);
    PopupRoute.prototype[_is_PopupRoute_default] = true;
    dart.addTypeCaches(PopupRoute);
    dart.setGetterSignature(PopupRoute, () => ({
      __proto__: dart.getGetters(PopupRoute.__proto__),
      opaque: core.bool,
      maintainState: core.bool
    }));
    dart.setLibraryUri(PopupRoute, I[25]);
    return PopupRoute;
  });
  routes.PopupRoute = routes.PopupRoute$();
  dart.addTypeTests(routes.PopupRoute, _is_PopupRoute_default);
  navigator$.NavigatorObserver = class NavigatorObserver extends core.Object {
    get navigator() {
      return this[S$._navigator];
    }
    didPush(route, previousRoute) {
      if (route == null) dart.nullFailed(I[23], 616, 31, "route");
    }
    didPop(route, previousRoute) {
      if (route == null) dart.nullFailed(I[23], 622, 30, "route");
    }
    didRemove(route, previousRoute) {
      if (route == null) dart.nullFailed(I[23], 633, 33, "route");
    }
    didReplace(opts) {
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
    }
    didStartUserGesture(route, previousRoute) {
      if (route == null) dart.nullFailed(I[23], 642, 43, "route");
    }
    didStopUserGesture() {
    }
  };
  (navigator$.NavigatorObserver.new = function() {
    this[S$._navigator] = null;
    ;
  }).prototype = navigator$.NavigatorObserver.prototype;
  dart.addTypeTests(navigator$.NavigatorObserver);
  dart.addTypeCaches(navigator$.NavigatorObserver);
  dart.setMethodSignature(navigator$.NavigatorObserver, () => ({
    __proto__: dart.getMethods(navigator$.NavigatorObserver.__proto__),
    didPush: dart.fnType(dart.void, [navigator$.Route, dart.nullable(navigator$.Route)]),
    didPop: dart.fnType(dart.void, [navigator$.Route, dart.nullable(navigator$.Route)]),
    didRemove: dart.fnType(dart.void, [navigator$.Route, dart.nullable(navigator$.Route)]),
    didReplace: dart.fnType(dart.void, [], {newRoute: dart.nullable(navigator$.Route), oldRoute: dart.nullable(navigator$.Route)}, {}),
    didStartUserGesture: dart.fnType(dart.void, [navigator$.Route, dart.nullable(navigator$.Route)]),
    didStopUserGesture: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(navigator$.NavigatorObserver, () => ({
    __proto__: dart.getGetters(navigator$.NavigatorObserver.__proto__),
    navigator: dart.nullable(navigator$.NavigatorState)
  }));
  dart.setLibraryUri(navigator$.NavigatorObserver, I[24]);
  dart.setFieldSignature(navigator$.NavigatorObserver, () => ({
    __proto__: dart.getFields(navigator$.NavigatorObserver.__proto__),
    [S$._navigator]: dart.fieldType(dart.nullable(navigator$.NavigatorState))
  }));
  const _is_RouteObserver_default = Symbol('_is_RouteObserver_default');
  routes.RouteObserver$ = dart.generic(R => {
    var LinkedMapOfR$SetOfRouteAware = () => (LinkedMapOfR$SetOfRouteAware = dart.constFn(_js_helper.LinkedMap$(R, T$.SetOfRouteAware())))();
    class RouteObserver extends navigator$.NavigatorObserver {
      subscribe(routeAware, route) {
        if (routeAware == null) dart.nullFailed(I[22], 1680, 29, "routeAware");
        R.as(route);
        if (route == null) dart.nullFailed(I[22], 1680, 43, "route");
        if (!(routeAware != null)) dart.assertFailed(null, I[22], 1681, 12, "routeAware != null");
        if (!(route != null)) dart.assertFailed(null, I[22], 1682, 12, "route != null");
        let subscribers = this[S$._listeners$1][S$.$putIfAbsent](route, dart.fn(() => T$.LinkedHashSetOfRouteAware().new(), T$.VoidToSetOfRouteAware()));
        if (dart.test(subscribers.add(routeAware))) {
          routeAware.didPush();
        }
      }
      unsubscribe(routeAware) {
        let t17;
        if (routeAware == null) dart.nullFailed(I[22], 1693, 31, "routeAware");
        if (!(routeAware != null)) dart.assertFailed(null, I[22], 1694, 12, "routeAware != null");
        for (let route of this[S$._listeners$1][S$.$keys]) {
          let subscribers = this[S$._listeners$1][S$.$_get](route);
          t17 = subscribers;
          t17 == null ? null : t17.remove(routeAware);
        }
      }
      didPop(route, previousRoute) {
        let t17, t17$;
        if (route == null) dart.nullFailed(I[22], 1702, 30, "route");
        if (R.is(route) && R.is(previousRoute)) {
          let previousSubscribers = (t17 = this[S$._listeners$1][S$.$_get](previousRoute), t17 == null ? null : t17[S$.$toList]());
          if (previousSubscribers != null) {
            for (let routeAware of previousSubscribers) {
              routeAware.didPopNext();
            }
          }
          let subscribers = (t17$ = this[S$._listeners$1][S$.$_get](route), t17$ == null ? null : t17$[S$.$toList]());
          if (subscribers != null) {
            for (let routeAware of subscribers) {
              routeAware.didPop();
            }
          }
        }
      }
      didPush(route, previousRoute) {
        if (route == null) dart.nullFailed(I[22], 1723, 31, "route");
        if (R.is(route) && R.is(previousRoute)) {
          let previousSubscribers = this[S$._listeners$1][S$.$_get](previousRoute);
          if (previousSubscribers != null) {
            for (let routeAware of previousSubscribers) {
              routeAware.didPushNext();
            }
          }
        }
      }
    }
    (RouteObserver.new = function() {
      this[S$._listeners$1] = new (LinkedMapOfR$SetOfRouteAware()).new();
      RouteObserver.__proto__.new.call(this);
      ;
    }).prototype = RouteObserver.prototype;
    dart.addTypeTests(RouteObserver);
    RouteObserver.prototype[_is_RouteObserver_default] = true;
    dart.addTypeCaches(RouteObserver);
    dart.setMethodSignature(RouteObserver, () => ({
      __proto__: dart.getMethods(RouteObserver.__proto__),
      subscribe: dart.fnType(dart.void, [routes.RouteAware, dart.nullable(core.Object)]),
      unsubscribe: dart.fnType(dart.void, [routes.RouteAware])
    }));
    dart.setLibraryUri(RouteObserver, I[25]);
    dart.setFieldSignature(RouteObserver, () => ({
      __proto__: dart.getFields(RouteObserver.__proto__),
      [S$._listeners$1]: dart.finalFieldType(core.Map$(R, core.Set$(routes.RouteAware)))
    }));
    return RouteObserver;
  });
  routes.RouteObserver = routes.RouteObserver$();
  dart.addTypeTests(routes.RouteObserver, _is_RouteObserver_default);
  routes.RouteAware = class RouteAware extends core.Object {
    didPopNext() {
    }
    didPush() {
    }
    didPop() {
    }
    didPushNext() {
    }
  };
  (routes.RouteAware.new = function() {
    ;
  }).prototype = routes.RouteAware.prototype;
  dart.addTypeTests(routes.RouteAware);
  dart.addTypeCaches(routes.RouteAware);
  dart.setMethodSignature(routes.RouteAware, () => ({
    __proto__: dart.getMethods(routes.RouteAware.__proto__),
    didPopNext: dart.fnType(dart.void, []),
    didPush: dart.fnType(dart.void, []),
    didPop: dart.fnType(dart.void, []),
    didPushNext: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(routes.RouteAware, I[25]);
  const _is_RawDialogRoute_default = Symbol('_is_RawDialogRoute_default');
  routes.RawDialogRoute$ = dart.generic(T => {
    class RawDialogRoute extends routes.PopupRoute$(T) {
      get barrierDismissible() {
        return this[S$._barrierDismissible];
      }
      get barrierLabel() {
        return this[S$._barrierLabel];
      }
      get barrierColor() {
        return this[S$._barrierColor];
      }
      get transitionDuration() {
        return this[S$._transitionDuration];
      }
      buildPage(context, animation, secondaryAnimation) {
        let t19, t18, t17;
        if (context == null) dart.nullFailed(I[22], 1823, 33, "context");
        if (animation == null) dart.nullFailed(I[22], 1823, 60, "animation");
        if (secondaryAnimation == null) dart.nullFailed(I[22], 1823, 89, "secondaryAnimation");
        return new basic.Semantics.new({child: (t17 = context, t18 = animation, t19 = secondaryAnimation, this[S$._pageBuilder](t17, t18, t19)), scopesRoute: true, explicitChildNodes: true, $creationLocationd_0dea112b090073317d4: C[236] || CT.C236});
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        if (context == null) dart.nullFailed(I[22], 1832, 40, "context");
        if (animation == null) dart.nullFailed(I[22], 1832, 67, "animation");
        if (secondaryAnimation == null) dart.nullFailed(I[22], 1832, 96, "secondaryAnimation");
        if (child == null) dart.nullFailed(I[22], 1832, 123, "child");
        if (this[S$._transitionBuilder] == null) {
          return new transitions.FadeTransition.new({opacity: new animations.CurvedAnimation.new({parent: animation, curve: curves.Curves.linear}), child: child, $creationLocationd_0dea112b090073317d4: C[241] || CT.C241});
        }
        return dart.nullCheck(this[S$._transitionBuilder])(context, animation, secondaryAnimation, child);
      }
    }
    (RawDialogRoute.new = function(opts) {
      let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
      if (pageBuilder == null) dart.nullFailed(I[22], 1786, 31, "pageBuilder");
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
      if (barrierDismissible == null) dart.nullFailed(I[22], 1787, 10, "barrierDismissible");
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : C[234] || CT.C234;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[235] || CT.C235;
      if (transitionDuration == null) dart.nullFailed(I[22], 1790, 14, "transitionDuration");
      let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      if (!(barrierDismissible != null)) dart.assertFailed(null, I[22], 1793, 15, "barrierDismissible != null");
      this[S$._pageBuilder] = pageBuilder;
      this[S$._barrierDismissible] = barrierDismissible;
      this[S$._barrierLabel] = barrierLabel;
      this[S$._barrierColor] = barrierColor;
      this[S$._transitionDuration] = transitionDuration;
      this[S$._transitionBuilder] = transitionBuilder;
      RawDialogRoute.__proto__.new.call(this, {settings: settings});
      ;
    }).prototype = RawDialogRoute.prototype;
    dart.addTypeTests(RawDialogRoute);
    RawDialogRoute.prototype[_is_RawDialogRoute_default] = true;
    dart.addTypeCaches(RawDialogRoute);
    dart.setMethodSignature(RawDialogRoute, () => ({
      __proto__: dart.getMethods(RawDialogRoute.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])
    }));
    dart.setGetterSignature(RawDialogRoute, () => ({
      __proto__: dart.getGetters(RawDialogRoute.__proto__),
      barrierDismissible: core.bool,
      barrierLabel: dart.nullable(core.String),
      barrierColor: dart.nullable(ui.Color),
      transitionDuration: core.Duration
    }));
    dart.setLibraryUri(RawDialogRoute, I[25]);
    dart.setFieldSignature(RawDialogRoute, () => ({
      __proto__: dart.getFields(RawDialogRoute.__proto__),
      [S$._pageBuilder]: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])),
      [S$._barrierDismissible]: dart.finalFieldType(core.bool),
      [S$._barrierLabel]: dart.finalFieldType(dart.nullable(core.String)),
      [S$._barrierColor]: dart.finalFieldType(dart.nullable(ui.Color)),
      [S$._transitionDuration]: dart.finalFieldType(core.Duration),
      [S$._transitionBuilder]: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])))
    }));
    return RawDialogRoute;
  });
  routes.RawDialogRoute = routes.RawDialogRoute$();
  dart.addTypeTests(routes.RawDialogRoute, _is_RawDialogRoute_default);
  routes.showGeneralDialog = function showGeneralDialog(T, opts) {
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[22], 1947, 25, "context");
    let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
    if (pageBuilder == null) dart.nullFailed(I[22], 1948, 29, "pageBuilder");
    let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
    if (barrierDismissible == null) dart.nullFailed(I[22], 1949, 8, "barrierDismissible");
    let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
    let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : C[234] || CT.C234;
    if (barrierColor == null) dart.nullFailed(I[22], 1951, 9, "barrierColor");
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[235] || CT.C235;
    if (transitionDuration == null) dart.nullFailed(I[22], 1952, 12, "transitionDuration");
    let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
    let useRootNavigator = opts && 'useRootNavigator' in opts ? opts.useRootNavigator : true;
    if (useRootNavigator == null) dart.nullFailed(I[22], 1954, 8, "useRootNavigator");
    let routeSettings = opts && 'routeSettings' in opts ? opts.routeSettings : null;
    if (!(pageBuilder != null)) dart.assertFailed(null, I[22], 1957, 10, "pageBuilder != null");
    if (!(useRootNavigator != null)) dart.assertFailed(null, I[22], 1958, 10, "useRootNavigator != null");
    if (!(!dart.test(barrierDismissible) || barrierLabel != null)) dart.assertFailed(null, I[22], 1959, 10, "!barrierDismissible || barrierLabel != null");
    return navigator$.Navigator.of(context, {rootNavigator: useRootNavigator}).push(T, new (routes.RawDialogRoute$(T)).new({pageBuilder: pageBuilder, barrierDismissible: barrierDismissible, barrierLabel: barrierLabel, barrierColor: barrierColor, transitionDuration: transitionDuration, transitionBuilder: transitionBuilder, settings: routeSettings}));
  };
  const _is_PageRoute_default = Symbol('_is_PageRoute_default');
  pages.PageRoute$ = dart.generic(T => {
    class PageRoute extends routes.ModalRoute$(T) {
      get fullscreenDialog() {
        return this[S$.fullscreenDialog];
      }
      set fullscreenDialog(value) {
        super.fullscreenDialog = value;
      }
      get opaque() {
        return true;
      }
      get barrierDismissible() {
        return false;
      }
      canTransitionTo(nextRoute) {
        if (nextRoute == null) dart.nullFailed(I[28], 35, 49, "nextRoute");
        return pages.PageRoute.is(nextRoute);
      }
      canTransitionFrom(previousRoute) {
        if (previousRoute == null) dart.nullFailed(I[28], 38, 51, "previousRoute");
        return pages.PageRoute.is(previousRoute);
      }
    }
    (PageRoute.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      if (fullscreenDialog == null) dart.nullFailed(I[28], 15, 10, "fullscreenDialog");
      this[S$.fullscreenDialog] = fullscreenDialog;
      PageRoute.__proto__.new.call(this, {settings: settings});
      ;
    }).prototype = PageRoute.prototype;
    dart.addTypeTests(PageRoute);
    PageRoute.prototype[_is_PageRoute_default] = true;
    dart.addTypeCaches(PageRoute);
    dart.setGetterSignature(PageRoute, () => ({
      __proto__: dart.getGetters(PageRoute.__proto__),
      opaque: core.bool,
      barrierDismissible: core.bool
    }));
    dart.setLibraryUri(PageRoute, I[29]);
    dart.setFieldSignature(PageRoute, () => ({
      __proto__: dart.getFields(PageRoute.__proto__),
      fullscreenDialog: dart.finalFieldType(core.bool)
    }));
    return PageRoute;
  });
  pages.PageRoute = pages.PageRoute$();
  dart.addTypeTests(pages.PageRoute, _is_PageRoute_default);
  const _is_PageRouteBuilder_default = Symbol('_is_PageRouteBuilder_default');
  pages.PageRouteBuilder$ = dart.generic(T => {
    class PageRouteBuilder extends pages.PageRoute$(T) {
      get pageBuilder() {
        return this[S$.pageBuilder];
      }
      set pageBuilder(value) {
        super.pageBuilder = value;
      }
      get transitionsBuilder() {
        return this[S$.transitionsBuilder];
      }
      set transitionsBuilder(value) {
        super.transitionsBuilder = value;
      }
      get transitionDuration() {
        return this[S$.transitionDuration];
      }
      set transitionDuration(value) {
        super.transitionDuration = value;
      }
      get reverseTransitionDuration() {
        return this[S$.reverseTransitionDuration];
      }
      set reverseTransitionDuration(value) {
        super.reverseTransitionDuration = value;
      }
      get opaque() {
        return this[S$.opaque];
      }
      set opaque(value) {
        super.opaque = value;
      }
      get barrierDismissible() {
        return this[S$.barrierDismissible];
      }
      set barrierDismissible(value) {
        super.barrierDismissible = value;
      }
      get barrierColor() {
        return this[S$.barrierColor];
      }
      set barrierColor(value) {
        super.barrierColor = value;
      }
      get barrierLabel() {
        return this[S$.barrierLabel];
      }
      set barrierLabel(value) {
        super.barrierLabel = value;
      }
      get maintainState() {
        return this[S$.maintainState];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      buildPage(context, animation, secondaryAnimation) {
        let t19, t18, t17;
        if (context == null) dart.nullFailed(I[28], 110, 33, "context");
        if (animation == null) dart.nullFailed(I[28], 110, 60, "animation");
        if (secondaryAnimation == null) dart.nullFailed(I[28], 110, 89, "secondaryAnimation");
        t17 = context;
        t18 = animation;
        t19 = secondaryAnimation;
        return this.pageBuilder(t17, t18, t19);
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        let t20, t19, t18, t17;
        if (context == null) dart.nullFailed(I[28], 115, 40, "context");
        if (animation == null) dart.nullFailed(I[28], 115, 67, "animation");
        if (secondaryAnimation == null) dart.nullFailed(I[28], 115, 96, "secondaryAnimation");
        if (child == null) dart.nullFailed(I[28], 115, 123, "child");
        t17 = context;
        t18 = animation;
        t19 = secondaryAnimation;
        t20 = child;
        return this.transitionsBuilder(t17, t18, t19, t20);
      }
    }
    (PageRouteBuilder.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
      if (pageBuilder == null) dart.nullFailed(I[28], 56, 19, "pageBuilder");
      let transitionsBuilder = opts && 'transitionsBuilder' in opts ? opts.transitionsBuilder : C[245] || CT.C245;
      if (transitionsBuilder == null) dart.nullFailed(I[28], 57, 10, "transitionsBuilder");
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[246] || CT.C246;
      if (transitionDuration == null) dart.nullFailed(I[28], 58, 10, "transitionDuration");
      let reverseTransitionDuration = opts && 'reverseTransitionDuration' in opts ? opts.reverseTransitionDuration : C[246] || CT.C246;
      if (reverseTransitionDuration == null) dart.nullFailed(I[28], 59, 10, "reverseTransitionDuration");
      let opaque = opts && 'opaque' in opts ? opts.opaque : true;
      if (opaque == null) dart.nullFailed(I[28], 60, 10, "opaque");
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
      if (barrierDismissible == null) dart.nullFailed(I[28], 61, 10, "barrierDismissible");
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      if (maintainState == null) dart.nullFailed(I[28], 64, 10, "maintainState");
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      if (fullscreenDialog == null) dart.nullFailed(I[28], 65, 10, "fullscreenDialog");
      this[S$.pageBuilder] = pageBuilder;
      this[S$.transitionsBuilder] = transitionsBuilder;
      this[S$.transitionDuration] = transitionDuration;
      this[S$.reverseTransitionDuration] = reverseTransitionDuration;
      this[S$.opaque] = opaque;
      this[S$.barrierDismissible] = barrierDismissible;
      this[S$.barrierColor] = barrierColor;
      this[S$.barrierLabel] = barrierLabel;
      this[S$.maintainState] = maintainState;
      if (!(pageBuilder != null)) dart.assertFailed(null, I[28], 66, 15, "pageBuilder != null");
      if (!(transitionsBuilder != null)) dart.assertFailed(null, I[28], 67, 15, "transitionsBuilder != null");
      if (!(opaque != null)) dart.assertFailed(null, I[28], 68, 15, "opaque != null");
      if (!(barrierDismissible != null)) dart.assertFailed(null, I[28], 69, 15, "barrierDismissible != null");
      if (!(maintainState != null)) dart.assertFailed(null, I[28], 70, 15, "maintainState != null");
      if (!(fullscreenDialog != null)) dart.assertFailed(null, I[28], 71, 15, "fullscreenDialog != null");
      PageRouteBuilder.__proto__.new.call(this, {settings: settings, fullscreenDialog: fullscreenDialog});
      ;
    }).prototype = PageRouteBuilder.prototype;
    dart.addTypeTests(PageRouteBuilder);
    PageRouteBuilder.prototype[_is_PageRouteBuilder_default] = true;
    dart.addTypeCaches(PageRouteBuilder);
    dart.setMethodSignature(PageRouteBuilder, () => ({
      __proto__: dart.getMethods(PageRouteBuilder.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])
    }));
    dart.setLibraryUri(PageRouteBuilder, I[29]);
    dart.setFieldSignature(PageRouteBuilder, () => ({
      __proto__: dart.getFields(PageRouteBuilder.__proto__),
      pageBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])),
      transitionsBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])),
      transitionDuration: dart.finalFieldType(core.Duration),
      reverseTransitionDuration: dart.finalFieldType(core.Duration),
      opaque: dart.finalFieldType(core.bool),
      barrierDismissible: dart.finalFieldType(core.bool),
      barrierColor: dart.finalFieldType(dart.nullable(ui.Color)),
      barrierLabel: dart.finalFieldType(dart.nullable(core.String)),
      maintainState: dart.finalFieldType(core.bool)
    }));
    return PageRouteBuilder;
  });
  pages.PageRouteBuilder = pages.PageRouteBuilder$();
  dart.addTypeTests(pages.PageRouteBuilder, _is_PageRouteBuilder_default);
  pages._defaultTransitionsBuilder = function _defaultTransitionsBuilder(context, animation, secondaryAnimation, child) {
    if (context == null) dart.nullFailed(I[28], 41, 48, "context");
    if (animation == null) dart.nullFailed(I[28], 41, 75, "animation");
    if (secondaryAnimation == null) dart.nullFailed(I[28], 41, 104, "secondaryAnimation");
    if (child == null) dart.nullFailed(I[28], 41, 131, "child");
    return child;
  };
  heroes.HeroFlightDirection = class HeroFlightDirection extends core.Object {
    toString() {
      return this[S$._name$4];
    }
  };
  (heroes.HeroFlightDirection.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[30], 56, 6, "index");
    if (_name == null) dart.nullFailed(I[30], 56, 6, "_name");
    this.index = index;
    this[S$._name$4] = _name;
    ;
  }).prototype = heroes.HeroFlightDirection.prototype;
  dart.addTypeTests(heroes.HeroFlightDirection);
  dart.addTypeCaches(heroes.HeroFlightDirection);
  dart.setLibraryUri(heroes.HeroFlightDirection, I[31]);
  dart.setFieldSignature(heroes.HeroFlightDirection, () => ({
    __proto__: dart.getFields(heroes.HeroFlightDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(heroes.HeroFlightDirection, ['toString']);
  heroes.HeroFlightDirection.push = C[247] || CT.C247;
  heroes.HeroFlightDirection.pop = C[248] || CT.C248;
  heroes.HeroFlightDirection.values = C[249] || CT.C249;
  heroes.Hero = class Hero extends framework.StatefulWidget {
    get tag() {
      return this[S$.tag];
    }
    set tag(value) {
      super.tag = value;
    }
    get createRectTween() {
      return this[S$.createRectTween];
    }
    set createRectTween(value) {
      super.createRectTween = value;
    }
    get child() {
      return this[S$.child$7];
    }
    set child(value) {
      super.child = value;
    }
    get flightShuttleBuilder() {
      return this[S$.flightShuttleBuilder];
    }
    set flightShuttleBuilder(value) {
      super.flightShuttleBuilder = value;
    }
    get placeholderBuilder() {
      return this[S$.placeholderBuilder];
    }
    set placeholderBuilder(value) {
      super.placeholderBuilder = value;
    }
    get transitionOnUserGestures() {
      return this[S$.transitionOnUserGestures];
    }
    set transitionOnUserGestures(value) {
      super.transitionOnUserGestures = value;
    }
    static _allHeroesFor(context, isUserGestureTransition, navigator) {
      if (context == null) dart.nullFailed(I[30], 308, 18, "context");
      if (isUserGestureTransition == null) dart.nullFailed(I[30], 309, 10, "isUserGestureTransition");
      if (navigator == null) dart.nullFailed(I[30], 310, 20, "navigator");
      if (!(context != null)) dart.assertFailed(null, I[30], 312, 12, "context != null");
      if (!(isUserGestureTransition != null)) dart.assertFailed(null, I[30], 313, 12, "isUserGestureTransition != null");
      if (!(navigator != null)) dart.assertFailed(null, I[30], 314, 12, "navigator != null");
      let result = new (T$.LinkedMapOfObject$_HeroState()).new();
      function inviteHero(hero, tag) {
        if (hero == null) dart.nullFailed(I[30], 317, 37, "hero");
        if (tag == null) dart.nullFailed(I[30], 317, 50, "tag");
        if (!dart.test(dart.fn(() => {
          if (dart.test(result[S$.$containsKey](tag))) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("There are multiple heroes that share the same tag within a subtree."), new assertions.ErrorDescription.new("Within each subtree for which heroes are to be animated (i.e. a PageRoute subtree), " + "each Hero must have a unique non-null tag.\n" + "In this case, multiple heroes had the following tag: " + dart.str(tag)), new (T$.DiagnosticsPropertyOfStatefulElement()).new("Here is the subtree for one of the offending heroes", hero, {linePrefix: "# ", style: diagnostics$.DiagnosticsTreeStyle.dense})])));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[30], 318, 14, "() {\r\n        if (result.containsKey(tag)) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('There are multiple heroes that share the same tag within a subtree.'),\r\n            ErrorDescription(\r\n              'Within each subtree for which heroes are to be animated (i.e. a PageRoute subtree), '\r\n              'each Hero must have a unique non-null tag.\\n'\r\n              'In this case, multiple heroes had the following tag: $tag',\r\n            ),\r\n            DiagnosticsProperty<StatefulElement>('Here is the subtree for one of the offending heroes', hero, linePrefix: '# ', style: DiagnosticsTreeStyle.dense),\r\n          ]);\r\n        }\r\n        return true;\r\n      }()");
        let heroWidget = heroes.Hero.as(hero.widget);
        let heroState = heroes._HeroState.as(hero.state);
        if (!dart.test(isUserGestureTransition) || dart.test(heroWidget.transitionOnUserGestures)) {
          result[S$.$_set](tag, heroState);
        } else {
          heroState.endFlight();
        }
      }
      dart.fn(inviteHero, T$.StatefulElementAndObjectTovoid());
      function visitor(element) {
        if (element == null) dart.nullFailed(I[30], 343, 26, "element");
        let widget = element.widget;
        if (heroes.Hero.is(widget)) {
          let hero = framework.StatefulElement.as(element);
          let tag = widget.tag;
          if (!(tag != null)) dart.assertFailed(null, I[30], 348, 16, "tag != null");
          if (dart.equals(navigator$.Navigator.of(hero), navigator)) {
            inviteHero(hero, tag);
          } else {
            let heroRoute = routes.ModalRoute.of(T$.ObjectN(), hero);
            if (heroRoute != null && pages.PageRoute.is(heroRoute) && dart.test(heroRoute.isCurrent)) {
              inviteHero(hero, tag);
            }
          }
        } else if (heroes.HeroMode.is(widget) && !dart.test(widget.enabled)) {
          return;
        }
        element.visitChildren(visitor);
      }
      dart.fn(visitor, T$.ElementTovoid());
      context.visitChildElements(visitor);
      return result;
    }
    createState() {
      return new heroes._HeroState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[30], 376, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfObject()).new("tag", this.tag));
    }
  };
  (heroes.Hero.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let tag = opts && 'tag' in opts ? opts.tag : null;
    if (tag == null) dart.nullFailed(I[30], 213, 19, "tag");
    let createRectTween = opts && 'createRectTween' in opts ? opts.createRectTween : null;
    let flightShuttleBuilder = opts && 'flightShuttleBuilder' in opts ? opts.flightShuttleBuilder : null;
    let placeholderBuilder = opts && 'placeholderBuilder' in opts ? opts.placeholderBuilder : null;
    let transitionOnUserGestures = opts && 'transitionOnUserGestures' in opts ? opts.transitionOnUserGestures : false;
    if (transitionOnUserGestures == null) dart.nullFailed(I[30], 217, 10, "transitionOnUserGestures");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[30], 218, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.tag] = tag;
    this[S$.createRectTween] = createRectTween;
    this[S$.flightShuttleBuilder] = flightShuttleBuilder;
    this[S$.placeholderBuilder] = placeholderBuilder;
    this[S$.transitionOnUserGestures] = transitionOnUserGestures;
    this[S$.child$7] = child;
    if (!(tag != null)) dart.assertFailed(null, I[30], 219, 15, "tag != null");
    if (!(transitionOnUserGestures != null)) dart.assertFailed(null, I[30], 220, 15, "transitionOnUserGestures != null");
    if (!(child != null)) dart.assertFailed(null, I[30], 221, 15, "child != null");
    heroes.Hero.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = heroes.Hero.prototype;
  dart.addTypeTests(heroes.Hero);
  dart.addTypeCaches(heroes.Hero);
  dart.setMethodSignature(heroes.Hero, () => ({
    __proto__: dart.getMethods(heroes.Hero.__proto__),
    createState: dart.fnType(heroes._HeroState, [])
  }));
  dart.setLibraryUri(heroes.Hero, I[31]);
  dart.setFieldSignature(heroes.Hero, () => ({
    __proto__: dart.getFields(heroes.Hero.__proto__),
    tag: dart.finalFieldType(core.Object),
    createRectTween: dart.finalFieldType(dart.nullable(dart.fnType(tween.Tween$(dart.nullable(ui.Rect)), [dart.nullable(ui.Rect), dart.nullable(ui.Rect)]))),
    child: dart.finalFieldType(framework.Widget),
    flightShuttleBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), heroes.HeroFlightDirection, framework.BuildContext, framework.BuildContext]))),
    placeholderBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, ui.Size, framework.Widget]))),
    transitionOnUserGestures: dart.finalFieldType(core.bool)
  }));
  heroes._HeroState = class _HeroState extends framework.State$(heroes.Hero) {
    startFlight(opts) {
      let shouldIncludedChildInPlaceholder = opts && 'shouldIncludedChildInPlaceholder' in opts ? opts.shouldIncludedChildInPlaceholder : false;
      if (shouldIncludedChildInPlaceholder == null) dart.nullFailed(I[30], 408, 27, "shouldIncludedChildInPlaceholder");
      this[S$._shouldIncludeChild] = shouldIncludedChildInPlaceholder;
      if (!dart.test(this.mounted)) dart.assertFailed(null, I[30], 410, 12, "mounted");
      let box = box$.RenderBox.as(dart.nullCheck(this.context.findRenderObject()));
      if (!(box !== null && dart.test(box.hasSize))) dart.assertFailed(null, I[30], 412, 12, "box != null && box.hasSize");
      this.setState(dart.fn(() => {
        this[S$._placeholderSize] = box.size;
      }, T$.VoidTovoid()));
    }
    endFlight(opts) {
      let keepPlaceholder = opts && 'keepPlaceholder' in opts ? opts.keepPlaceholder : false;
      if (keepPlaceholder == null) dart.nullFailed(I[30], 424, 25, "keepPlaceholder");
      if (dart.test(keepPlaceholder) || this[S$._placeholderSize] == null) return;
      this[S$._placeholderSize] = null;
      if (dart.test(this.mounted)) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    build(context) {
      let t17, t17$;
      if (context == null) dart.nullFailed(I[30], 437, 29, "context");
      if (!(context.findAncestorWidgetOfExactType(heroes.Hero) == null)) dart.assertFailed("A Hero widget cannot be the descendant of another Hero widget.", I[30], 439, 7, "context.findAncestorWidgetOfExactType<Hero>() == null");
      let showPlaceholder = this[S$._placeholderSize] != null;
      if (showPlaceholder && this.widget.placeholderBuilder != null) {
        return dart.nullCheck(this.widget.placeholderBuilder)(context, dart.nullCheck(this[S$._placeholderSize]), this.widget.child);
      }
      if (showPlaceholder && !dart.test(this[S$._shouldIncludeChild])) {
        return new basic.SizedBox.new({width: dart.nullCheck(this[S$._placeholderSize]).width, height: dart.nullCheck(this[S$._placeholderSize]).height, $creationLocationd_0dea112b090073317d4: C[250] || CT.C250});
      }
      return new basic.SizedBox.new({width: (t17 = this[S$._placeholderSize], t17 == null ? null : t17.width), height: (t17$ = this[S$._placeholderSize], t17$ == null ? null : t17$.height), child: new basic.Offstage.new({offstage: showPlaceholder, child: new ticker_provider.TickerMode.new({enabled: !showPlaceholder, child: new basic.KeyedSubtree.new({key: this[S$._key], child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[254] || CT.C254}), $creationLocationd_0dea112b090073317d4: C[258] || CT.C258}), $creationLocationd_0dea112b090073317d4: C[262] || CT.C262}), $creationLocationd_0dea112b090073317d4: C[266] || CT.C266});
    }
  };
  (heroes._HeroState.new = function() {
    this[S$._key] = T$.GlobalKeyOfStateOfStatefulWidget().new();
    this[S$._placeholderSize] = null;
    this[S$._shouldIncludeChild] = true;
    heroes._HeroState.__proto__.new.call(this);
    ;
  }).prototype = heroes._HeroState.prototype;
  dart.addTypeTests(heroes._HeroState);
  dart.addTypeCaches(heroes._HeroState);
  dart.setMethodSignature(heroes._HeroState, () => ({
    __proto__: dart.getMethods(heroes._HeroState.__proto__),
    startFlight: dart.fnType(dart.void, [], {shouldIncludedChildInPlaceholder: core.bool}, {}),
    endFlight: dart.fnType(dart.void, [], {keepPlaceholder: core.bool}, {}),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(heroes._HeroState, I[31]);
  dart.setFieldSignature(heroes._HeroState, () => ({
    __proto__: dart.getFields(heroes._HeroState.__proto__),
    [S$._key]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [S$._placeholderSize]: dart.fieldType(dart.nullable(ui.Size)),
    [S$._shouldIncludeChild]: dart.fieldType(core.bool)
  }));
  heroes._HeroFlightManifest = class _HeroFlightManifest extends core.Object {
    get tag() {
      return this.fromHero.widget.tag;
    }
    get animation() {
      return new animations.CurvedAnimation.new({parent: this.type == heroes.HeroFlightDirection.push ? dart.nullCheck(this.toRoute.animation) : dart.nullCheck(this.fromRoute.animation), curve: curves.Curves.fastOutSlowIn, reverseCurve: dart.test(this.isDiverted) ? null : curves.Curves.fastOutSlowIn.flipped});
    }
    createHeroRectTween(opts) {
      let t17, t17$, t17$0;
      let begin = opts && 'begin' in opts ? opts.begin : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let createRectTween = (t17 = this.toHero.widget.createRectTween, t17 == null ? this.createRectTween : t17);
      t17$0 = (t17$ = createRectTween, t17$ == null ? null : t17$(begin, end));
      return t17$0 == null ? new tween.RectTween.new({begin: begin, end: end}) : t17$0;
    }
    static _boundingBoxFor(context, ancestorContext) {
      let t17;
      if (context == null) dart.nullFailed(I[30], 516, 44, "context");
      if (!(ancestorContext != null)) dart.assertFailed(null, I[30], 517, 12, "ancestorContext != null");
      let box = box$.RenderBox.as(dart.nullCheck(context.findRenderObject()));
      if (!(box !== null && dart.test(box.hasSize) && dart.test(box.size.isFinite))) dart.assertFailed(null, I[30], 519, 12, "box != null && box.hasSize && box.size.isFinite");
      return matrix_utils.MatrixUtils.transformRect(box.getTransformTo((t17 = ancestorContext, t17 == null ? null : t17.findRenderObject())), ui.Offset.zero['&'](box.size));
    }
    get fromHeroLocation() {
      let t18;
      if (!dart.test(this[S$.___HeroFlightManifest_fromHeroLocation_isSet])) {
        let t17 = heroes._HeroFlightManifest._boundingBoxFor(this.fromHero.context, this.fromRoute.subtreeContext);
        if (dart.test(this[S$.___HeroFlightManifest_fromHeroLocation_isSet])) dart.throw(new _internal.LateError.fieldADI("fromHeroLocation"));
        this[S$.___HeroFlightManifest_fromHeroLocation] = t17;
        this[S$.___HeroFlightManifest_fromHeroLocation_isSet] = true;
      }
      t18 = this[S$.___HeroFlightManifest_fromHeroLocation];
      return t18;
    }
    get toHeroLocation() {
      let t19;
      if (!dart.test(this[S$.___HeroFlightManifest_toHeroLocation_isSet])) {
        let t18 = heroes._HeroFlightManifest._boundingBoxFor(this.toHero.context, this.toRoute.subtreeContext);
        if (dart.test(this[S$.___HeroFlightManifest_toHeroLocation_isSet])) dart.throw(new _internal.LateError.fieldADI("toHeroLocation"));
        this[S$.___HeroFlightManifest_toHeroLocation] = t18;
        this[S$.___HeroFlightManifest_toHeroLocation_isSet] = true;
      }
      t19 = this[S$.___HeroFlightManifest_toHeroLocation];
      return t19;
    }
    get isValid() {
      let t20;
      if (!dart.test(this[S$.___HeroFlightManifest_isValid_isSet])) {
        let t19 = dart.test(this.toHeroLocation.isFinite) && (dart.test(this.isDiverted) || dart.test(this.fromHeroLocation.isFinite));
        if (dart.test(this[S$.___HeroFlightManifest_isValid_isSet])) dart.throw(new _internal.LateError.fieldADI("isValid"));
        this[S$.___HeroFlightManifest_isValid] = t19;
        this[S$.___HeroFlightManifest_isValid_isSet] = true;
      }
      t20 = this[S$.___HeroFlightManifest_isValid];
      return t20;
    }
    toString() {
      return "_HeroFlightManifest(" + dart.str(this.type) + " tag: " + dart.str(this.tag) + " from route: " + dart.str(this.fromRoute.settings) + " " + "to route: " + dart.str(this.toRoute.settings) + " with hero: " + dart.str(this.fromHero) + " to " + dart.str(this.toHero) + ")" + (dart.test(this.isValid) ? "" : ", INVALID");
    }
  };
  (heroes._HeroFlightManifest.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    if (type == null) dart.nullFailed(I[30], 474, 19, "type");
    let overlay = opts && 'overlay' in opts ? opts.overlay : null;
    if (overlay == null) dart.nullFailed(I[30], 475, 19, "overlay");
    let navigatorSize = opts && 'navigatorSize' in opts ? opts.navigatorSize : null;
    if (navigatorSize == null) dart.nullFailed(I[30], 476, 19, "navigatorSize");
    let fromRoute = opts && 'fromRoute' in opts ? opts.fromRoute : null;
    if (fromRoute == null) dart.nullFailed(I[30], 477, 19, "fromRoute");
    let toRoute = opts && 'toRoute' in opts ? opts.toRoute : null;
    if (toRoute == null) dart.nullFailed(I[30], 478, 19, "toRoute");
    let fromHero = opts && 'fromHero' in opts ? opts.fromHero : null;
    if (fromHero == null) dart.nullFailed(I[30], 479, 19, "fromHero");
    let toHero = opts && 'toHero' in opts ? opts.toHero : null;
    if (toHero == null) dart.nullFailed(I[30], 480, 19, "toHero");
    let createRectTween = opts && 'createRectTween' in opts ? opts.createRectTween : null;
    let shuttleBuilder = opts && 'shuttleBuilder' in opts ? opts.shuttleBuilder : null;
    if (shuttleBuilder == null) dart.nullFailed(I[30], 482, 19, "shuttleBuilder");
    let isUserGestureTransition = opts && 'isUserGestureTransition' in opts ? opts.isUserGestureTransition : null;
    if (isUserGestureTransition == null) dart.nullFailed(I[30], 483, 19, "isUserGestureTransition");
    let isDiverted = opts && 'isDiverted' in opts ? opts.isDiverted : null;
    if (isDiverted == null) dart.nullFailed(I[30], 484, 19, "isDiverted");
    this[S$.___HeroFlightManifest_fromHeroLocation] = null;
    this[S$.___HeroFlightManifest_fromHeroLocation_isSet] = false;
    this[S$.___HeroFlightManifest_toHeroLocation] = null;
    this[S$.___HeroFlightManifest_toHeroLocation_isSet] = false;
    this[S$.___HeroFlightManifest_isValid] = null;
    this[S$.___HeroFlightManifest_isValid_isSet] = false;
    this.type = type;
    this.overlay = overlay;
    this.navigatorSize = navigatorSize;
    this.fromRoute = fromRoute;
    this.toRoute = toRoute;
    this.fromHero = fromHero;
    this.toHero = toHero;
    this.createRectTween = createRectTween;
    this.shuttleBuilder = shuttleBuilder;
    this.isUserGestureTransition = isUserGestureTransition;
    this.isDiverted = isDiverted;
    if (!dart.equals(fromHero.widget.tag, toHero.widget.tag)) dart.assertFailed(null, I[30], 485, 15, "fromHero.widget.tag == toHero.widget.tag");
    ;
  }).prototype = heroes._HeroFlightManifest.prototype;
  dart.addTypeTests(heroes._HeroFlightManifest);
  dart.addTypeCaches(heroes._HeroFlightManifest);
  dart.setMethodSignature(heroes._HeroFlightManifest, () => ({
    __proto__: dart.getMethods(heroes._HeroFlightManifest.__proto__),
    createHeroRectTween: dart.fnType(tween.Tween$(dart.nullable(ui.Rect)), [], {}, {begin: dart.nullable(ui.Rect), end: dart.nullable(ui.Rect)})
  }));
  dart.setGetterSignature(heroes._HeroFlightManifest, () => ({
    __proto__: dart.getGetters(heroes._HeroFlightManifest.__proto__),
    tag: core.Object,
    animation: animation.Animation$(core.double),
    fromHeroLocation: ui.Rect,
    toHeroLocation: ui.Rect,
    isValid: core.bool
  }));
  dart.setLibraryUri(heroes._HeroFlightManifest, I[31]);
  dart.setFieldSignature(heroes._HeroFlightManifest, () => ({
    __proto__: dart.getFields(heroes._HeroFlightManifest.__proto__),
    type: dart.finalFieldType(heroes.HeroFlightDirection),
    overlay: dart.finalFieldType(overlay$.OverlayState),
    navigatorSize: dart.finalFieldType(ui.Size),
    fromRoute: dart.finalFieldType(pages.PageRoute),
    toRoute: dart.finalFieldType(pages.PageRoute),
    fromHero: dart.finalFieldType(heroes._HeroState),
    toHero: dart.finalFieldType(heroes._HeroState),
    createRectTween: dart.finalFieldType(dart.nullable(dart.fnType(tween.Tween$(dart.nullable(ui.Rect)), [dart.nullable(ui.Rect), dart.nullable(ui.Rect)]))),
    shuttleBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), heroes.HeroFlightDirection, framework.BuildContext, framework.BuildContext])),
    isUserGestureTransition: dart.finalFieldType(core.bool),
    isDiverted: dart.finalFieldType(core.bool),
    [S$.___HeroFlightManifest_fromHeroLocation]: dart.fieldType(dart.nullable(ui.Rect)),
    [S$.___HeroFlightManifest_fromHeroLocation_isSet]: dart.fieldType(core.bool),
    [S$.___HeroFlightManifest_toHeroLocation]: dart.fieldType(dart.nullable(ui.Rect)),
    [S$.___HeroFlightManifest_toHeroLocation_isSet]: dart.fieldType(core.bool),
    [S$.___HeroFlightManifest_isValid]: dart.fieldType(dart.nullable(core.bool)),
    [S$.___HeroFlightManifest_isValid_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(heroes._HeroFlightManifest, ['toString']);
  heroes._HeroFlight = class _HeroFlight extends core.Object {
    get heroRectTween() {
      let t20;
      return dart.test(this[S$.___HeroFlight_heroRectTween_isSet]) ? (t20 = this[S$.___HeroFlight_heroRectTween], t20) : dart.throw(new _internal.LateError.fieldNI("heroRectTween"));
    }
    set heroRectTween(t20) {
      if (t20 == null) dart.nullFailed(I[30], 561, 21, "null");
      this[S$.___HeroFlight_heroRectTween_isSet] = true;
      this[S$.___HeroFlight_heroRectTween] = t20;
    }
    get [S$._proxyAnimation]() {
      let t21;
      return dart.test(this[S$.___HeroFlight__proxyAnimation_isSet]) ? (t21 = this[S$.___HeroFlight__proxyAnimation], t21) : dart.throw(new _internal.LateError.fieldNI("_proxyAnimation"));
    }
    set [S$._proxyAnimation](t21) {
      if (t21 == null) dart.nullFailed(I[30], 565, 23, "null");
      this[S$.___HeroFlight__proxyAnimation_isSet] = true;
      this[S$.___HeroFlight__proxyAnimation] = t21;
    }
    get manifest() {
      let t22;
      return dart.test(this[S$.___HeroFlight_manifest_isSet]) ? (t22 = this[S$.___HeroFlight_manifest], t22) : dart.throw(new _internal.LateError.fieldNI("manifest"));
    }
    set manifest(t22) {
      if (t22 == null) dart.nullFailed(I[30], 568, 28, "null");
      this[S$.___HeroFlight_manifest_isSet] = true;
      this[S$.___HeroFlight_manifest] = t22;
    }
    [S$._buildOverlay](context) {
      let t28, t27, t26, t25, t24, t23;
      if (context == null) dart.nullFailed(I[30], 575, 37, "context");
      if (!(this.manifest != null)) dart.assertFailed(null, I[30], 576, 12, "manifest != null");
      this.shuttle == null ? this.shuttle = (t23 = this.manifest, t24 = context, t25 = this.manifest.animation, t26 = this.manifest.type, t27 = this.manifest.fromHero.context, t28 = this.manifest.toHero.context, t23.shuttleBuilder(t24, t25, t26, t27, t28)) : null;
      if (!(this.shuttle != null)) dart.assertFailed(null, I[30], 584, 12, "shuttle != null");
      return new transitions.AnimatedBuilder.new({animation: this[S$._proxyAnimation], child: this.shuttle, builder: dart.fn((context, child) => {
          if (context == null) dart.nullFailed(I[30], 589, 30, "context");
          let rect = dart.nullCheck(this.heroRectTween.evaluate(this[S$._proxyAnimation]));
          let offsets = stack.RelativeRect.fromSize(rect, this.manifest.navigatorSize);
          return new basic.Positioned.new({top: offsets.top, right: offsets.right, bottom: offsets.bottom, left: offsets.left, child: new basic.IgnorePointer.new({child: new basic.RepaintBoundary.new({child: new basic.Opacity.new({opacity: this[S$._heroOpacity].value, child: child, $creationLocationd_0dea112b090073317d4: C[271] || CT.C271}), $creationLocationd_0dea112b090073317d4: C[275] || CT.C275}), $creationLocationd_0dea112b090073317d4: C[278] || CT.C278}), $creationLocationd_0dea112b090073317d4: C[281] || CT.C281});
        }, T$.BuildContextAndWidgetNToPositioned()), $creationLocationd_0dea112b090073317d4: C[288] || CT.C288});
    }
    [S$._performAnimationUpdate](status) {
      if (status == null) dart.nullFailed(I[30], 610, 48, "status");
      if (status == animation.AnimationStatus.completed || status == animation.AnimationStatus.dismissed) {
        this[S$._proxyAnimation].parent = null;
        if (!(this.overlayEntry != null)) dart.assertFailed(null, I[30], 614, 14, "overlayEntry != null");
        dart.nullCheck(this.overlayEntry).remove();
        this.overlayEntry = null;
        this.manifest.fromHero.endFlight({keepPlaceholder: status == animation.AnimationStatus.completed});
        this.manifest.toHero.endFlight({keepPlaceholder: status == animation.AnimationStatus.dismissed});
        this.onFlightEnded(this);
        this[S$._proxyAnimation].removeListener(dart.bind(this, 'onTick'));
      }
    }
    [S$._handleAnimationUpdate](status) {
      let t23;
      if (status == null) dart.nullFailed(I[30], 630, 47, "status");
      if ((t23 = this.manifest.fromRoute.navigator, t23 == null ? null : t23.userGestureInProgress) !== true) {
        this[S$._performAnimationUpdate](status);
        return;
      }
      if (dart.test(this[S$._scheduledPerformAnimtationUpdate])) return;
      let navigator = dart.nullCheck(this.manifest.fromRoute.navigator);
      const delayedPerformAnimtationUpdate = () => {
        if (!!dart.test(navigator.userGestureInProgress)) dart.assertFailed(null, I[30], 647, 14, "!navigator.userGestureInProgress");
        if (!dart.test(this[S$._scheduledPerformAnimtationUpdate])) dart.assertFailed(null, I[30], 648, 14, "_scheduledPerformAnimtationUpdate");
        this[S$._scheduledPerformAnimtationUpdate] = false;
        navigator.userGestureInProgressNotifier.removeListener(delayedPerformAnimtationUpdate);
        this[S$._performAnimationUpdate](this[S$._proxyAnimation].status);
      };
      dart.fn(delayedPerformAnimtationUpdate, T$.VoidTovoid());
      if (!dart.test(navigator.userGestureInProgress)) dart.assertFailed(null, I[30], 653, 12, "navigator.userGestureInProgress");
      this[S$._scheduledPerformAnimtationUpdate] = true;
      navigator.userGestureInProgressNotifier.addListener(delayedPerformAnimtationUpdate);
    }
    onTick() {
      let t23;
      let toHeroBox = !dart.test(this[S$._aborted]) && dart.test(this.manifest.toHero.mounted) ? T$.RenderBoxN().as(this.manifest.toHero.context.findRenderObject()) : null;
      let toHeroOrigin = toHeroBox != null && dart.test(toHeroBox.attached) && dart.test(toHeroBox.hasSize) ? toHeroBox.localToGlobal(ui.Offset.zero, {ancestor: T$.RenderBoxN().as((t23 = this.manifest.toRoute.subtreeContext, t23 == null ? null : t23.findRenderObject()))}) : null;
      if (toHeroOrigin != null && dart.test(toHeroOrigin.isFinite)) {
        if (!dart.equals(toHeroOrigin, dart.nullCheck(this.heroRectTween.end).topLeft)) {
          let heroRectEnd = toHeroOrigin['&'](dart.nullCheck(this.heroRectTween.end).size);
          this.heroRectTween = this.manifest.createHeroRectTween({begin: this.heroRectTween.begin, end: heroRectEnd});
        }
      } else if (dart.test(this[S$._heroOpacity].isCompleted)) {
        this[S$._heroOpacity] = this[S$._proxyAnimation].drive(core.double, heroes._HeroFlight._reverseTween.chain(new tween.CurveTween.new({curve: new curves.Interval.new(this[S$._proxyAnimation].value, 1.0)})));
      }
      this[S$._aborted] = toHeroOrigin == null || !dart.test(toHeroOrigin.isFinite);
    }
    start(initialManifest) {
      if (initialManifest == null) dart.nullFailed(I[30], 686, 34, "initialManifest");
      if (!!dart.test(this[S$._aborted])) dart.assertFailed(null, I[30], 687, 12, "!_aborted");
      if (!dart.test(dart.fn(() => {
        let initial = initialManifest.animation;
        if (!(initial != null)) dart.assertFailed(null, I[30], 690, 14, "initial != null");
        let type = initialManifest.type;
        if (!(type != null)) dart.assertFailed(null, I[30], 692, 14, "type != null");
        switch (type) {
          case C[248] || CT.C248:
          {
            return initial.value === 1.0 && dart.test(initialManifest.isUserGestureTransition) ? initial.status == animation.AnimationStatus.completed : initial.status == animation.AnimationStatus.reverse;
          }
          case C[247] || CT.C247:
          {
            return initial.value === 0.0 && initial.status == animation.AnimationStatus.forward;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }, T$.VoidTobool())())) dart.assertFailed(null, I[30], 688, 12, "() {\r\n      final Animation<double> initial = initialManifest.animation;\r\n      assert(initial != null);\r\n      final HeroFlightDirection type = initialManifest.type;\r\n      assert(type != null);\r\n      switch (type) {\r\n        case HeroFlightDirection.pop:\r\n          return initial.value == 1.0 && initialManifest.isUserGestureTransition\r\n              // During user gesture transitions, the animation controller isn't\r\n              // driving the reverse transition, but should still be in a previously\r\n              // completed stage with the initial value at 1.0.\r\n              ? initial.status == AnimationStatus.completed\r\n              : initial.status == AnimationStatus.reverse;\r\n        case HeroFlightDirection.push:\r\n          return initial.value == 0.0 && initial.status == AnimationStatus.forward;\r\n      }\r\n    }()");
      this.manifest = initialManifest;
      let shouldIncludeChildInPlacehold = null;
      switch (this.manifest.type) {
        case C[248] || CT.C248:
        {
          this[S$._proxyAnimation].parent = new animations.ReverseAnimation.new(this.manifest.animation);
          shouldIncludeChildInPlacehold = false;
          break;
        }
        case C[247] || CT.C247:
        {
          this[S$._proxyAnimation].parent = this.manifest.animation;
          shouldIncludeChildInPlacehold = true;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      this.heroRectTween = this.manifest.createHeroRectTween({begin: this.manifest.fromHeroLocation, end: this.manifest.toHeroLocation});
      this.manifest.fromHero.startFlight({shouldIncludedChildInPlaceholder: shouldIncludeChildInPlacehold});
      this.manifest.toHero.startFlight();
      this.manifest.overlay.insert(this.overlayEntry = new overlay$.OverlayEntry.new({builder: dart.bind(this, S$._buildOverlay)}));
      this[S$._proxyAnimation].addListener(dart.bind(this, 'onTick'));
    }
    divert(newManifest) {
      if (newManifest == null) dart.nullFailed(I[30], 729, 35, "newManifest");
      if (!dart.equals(this.manifest.tag, newManifest.tag)) dart.assertFailed(null, I[30], 730, 12, "manifest.tag == newManifest.tag");
      if (this.manifest.type == heroes.HeroFlightDirection.push && newManifest.type == heroes.HeroFlightDirection.pop) {
        if (!(newManifest.animation.status == animation.AnimationStatus.reverse)) dart.assertFailed(null, I[30], 733, 14, "newManifest.animation.status == AnimationStatus.reverse");
        if (!dart.equals(this.manifest.fromHero, newManifest.toHero)) dart.assertFailed(null, I[30], 734, 14, "manifest.fromHero == newManifest.toHero");
        if (!dart.equals(this.manifest.toHero, newManifest.fromHero)) dart.assertFailed(null, I[30], 735, 14, "manifest.toHero == newManifest.fromHero");
        if (!dart.equals(this.manifest.fromRoute, newManifest.toRoute)) dart.assertFailed(null, I[30], 736, 14, "manifest.fromRoute == newManifest.toRoute");
        if (!dart.equals(this.manifest.toRoute, newManifest.fromRoute)) dart.assertFailed(null, I[30], 737, 14, "manifest.toRoute == newManifest.fromRoute");
        this[S$._proxyAnimation].parent = new animations.ReverseAnimation.new(newManifest.animation);
        this.heroRectTween = new (T$.ReverseTweenOfRectN()).new(this.heroRectTween);
      } else if (this.manifest.type == heroes.HeroFlightDirection.pop && newManifest.type == heroes.HeroFlightDirection.push) {
        if (!(newManifest.animation.status == animation.AnimationStatus.forward)) dart.assertFailed(null, I[30], 748, 14, "newManifest.animation.status == AnimationStatus.forward");
        if (!dart.equals(this.manifest.toHero, newManifest.fromHero)) dart.assertFailed(null, I[30], 749, 14, "manifest.toHero == newManifest.fromHero");
        if (!dart.equals(this.manifest.toRoute, newManifest.fromRoute)) dart.assertFailed(null, I[30], 750, 14, "manifest.toRoute == newManifest.fromRoute");
        this[S$._proxyAnimation].parent = newManifest.animation.drive(core.double, new (T$.TweenOfdouble()).new({begin: this.manifest.animation.value, end: 1.0}));
        if (!dart.equals(this.manifest.fromHero, newManifest.toHero)) {
          this.manifest.fromHero.endFlight({keepPlaceholder: true});
          newManifest.toHero.startFlight();
          this.heroRectTween = this.manifest.createHeroRectTween({begin: this.heroRectTween.end, end: newManifest.toHeroLocation});
        } else {
          this.heroRectTween = this.manifest.createHeroRectTween({begin: this.heroRectTween.end, end: this.heroRectTween.begin});
        }
      } else {
        if (!!dart.equals(this.manifest.fromHero, newManifest.fromHero)) dart.assertFailed(null, I[30], 770, 14, "manifest.fromHero != newManifest.fromHero");
        if (!!dart.equals(this.manifest.toHero, newManifest.toHero)) dart.assertFailed(null, I[30], 771, 14, "manifest.toHero != newManifest.toHero");
        this.heroRectTween = this.manifest.createHeroRectTween({begin: this.heroRectTween.evaluate(this[S$._proxyAnimation]), end: newManifest.toHeroLocation});
        this.shuttle = null;
        if (newManifest.type == heroes.HeroFlightDirection.pop)
          this[S$._proxyAnimation].parent = new animations.ReverseAnimation.new(newManifest.animation);
        else
          this[S$._proxyAnimation].parent = newManifest.animation;
        this.manifest.fromHero.endFlight({keepPlaceholder: true});
        this.manifest.toHero.endFlight({keepPlaceholder: true});
        newManifest.fromHero.startFlight({shouldIncludedChildInPlaceholder: newManifest.type == heroes.HeroFlightDirection.push});
        newManifest.toHero.startFlight();
        dart.nullCheck(this.overlayEntry).markNeedsBuild();
      }
      this.manifest = newManifest;
    }
    abort() {
      this[S$._aborted] = true;
    }
    toString() {
      let from = this.manifest.fromRoute.settings;
      let to = this.manifest.toRoute.settings;
      let tag = this.manifest.tag;
      return "HeroFlight(for: " + dart.str(tag) + ", from: " + dart.str(from) + ", to: " + dart.str(to) + " " + dart.str(this[S$._proxyAnimation].parent) + ")";
    }
  };
  (heroes._HeroFlight.new = function(onFlightEnded) {
    let t20;
    if (onFlightEnded == null) dart.nullFailed(I[30], 555, 20, "onFlightEnded");
    this[S$.___HeroFlight_heroRectTween] = null;
    this[S$.___HeroFlight_heroRectTween_isSet] = false;
    this.shuttle = null;
    this[S$._heroOpacity] = animations.kAlwaysCompleteAnimation;
    this[S$.___HeroFlight__proxyAnimation] = null;
    this[S$.___HeroFlight__proxyAnimation_isSet] = false;
    this[S$.___HeroFlight_manifest] = null;
    this[S$.___HeroFlight_manifest_isSet] = false;
    this.overlayEntry = null;
    this[S$._aborted] = false;
    this[S$._scheduledPerformAnimtationUpdate] = false;
    this.onFlightEnded = onFlightEnded;
    this[S$._proxyAnimation] = (t20 = new animations.ProxyAnimation.new(), (() => {
      t20.addStatusListener(dart.bind(this, S$._handleAnimationUpdate));
      return t20;
    })());
  }).prototype = heroes._HeroFlight.prototype;
  dart.addTypeTests(heroes._HeroFlight);
  dart.addTypeCaches(heroes._HeroFlight);
  dart.setMethodSignature(heroes._HeroFlight, () => ({
    __proto__: dart.getMethods(heroes._HeroFlight.__proto__),
    [S$._buildOverlay]: dart.fnType(framework.Widget, [framework.BuildContext]),
    [S$._performAnimationUpdate]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [S$._handleAnimationUpdate]: dart.fnType(dart.void, [animation.AnimationStatus]),
    onTick: dart.fnType(dart.void, []),
    start: dart.fnType(dart.void, [heroes._HeroFlightManifest]),
    divert: dart.fnType(dart.void, [heroes._HeroFlightManifest]),
    abort: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(heroes._HeroFlight, () => ({
    __proto__: dart.getGetters(heroes._HeroFlight.__proto__),
    heroRectTween: tween.Tween$(dart.nullable(ui.Rect)),
    [S$._proxyAnimation]: animations.ProxyAnimation,
    manifest: heroes._HeroFlightManifest
  }));
  dart.setSetterSignature(heroes._HeroFlight, () => ({
    __proto__: dart.getSetters(heroes._HeroFlight.__proto__),
    heroRectTween: tween.Tween$(dart.nullable(ui.Rect)),
    [S$._proxyAnimation]: animations.ProxyAnimation,
    manifest: heroes._HeroFlightManifest
  }));
  dart.setLibraryUri(heroes._HeroFlight, I[31]);
  dart.setFieldSignature(heroes._HeroFlight, () => ({
    __proto__: dart.getFields(heroes._HeroFlight.__proto__),
    onFlightEnded: dart.finalFieldType(dart.fnType(dart.void, [heroes._HeroFlight])),
    [S$.___HeroFlight_heroRectTween]: dart.fieldType(dart.nullable(tween.Tween$(dart.nullable(ui.Rect)))),
    [S$.___HeroFlight_heroRectTween_isSet]: dart.fieldType(core.bool),
    shuttle: dart.fieldType(dart.nullable(framework.Widget)),
    [S$._heroOpacity]: dart.fieldType(animation.Animation$(core.double)),
    [S$.___HeroFlight__proxyAnimation]: dart.fieldType(dart.nullable(animations.ProxyAnimation)),
    [S$.___HeroFlight__proxyAnimation_isSet]: dart.fieldType(core.bool),
    [S$.___HeroFlight_manifest]: dart.fieldType(dart.nullable(heroes._HeroFlightManifest)),
    [S$.___HeroFlight_manifest_isSet]: dart.fieldType(core.bool),
    overlayEntry: dart.fieldType(dart.nullable(overlay$.OverlayEntry)),
    [S$._aborted]: dart.fieldType(core.bool),
    [S$._scheduledPerformAnimtationUpdate]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(heroes._HeroFlight, ['toString']);
  dart.defineLazy(heroes._HeroFlight, {
    /*heroes._HeroFlight._reverseTween*/get _reverseTween() {
      return new (T$.TweenOfdouble()).new({begin: 1.0, end: 0.0});
    }
  }, false);
  heroes.HeroController = class HeroController extends navigator$.NavigatorObserver {
    get createRectTween() {
      return this[S$.createRectTween$1];
    }
    set createRectTween(value) {
      super.createRectTween = value;
    }
    didPush(route, previousRoute) {
      if (route == null) dart.nullFailed(I[30], 833, 31, "route");
      if (!(this.navigator != null)) dart.assertFailed(null, I[30], 834, 12, "navigator != null");
      if (!(route != null)) dart.assertFailed(null, I[30], 835, 12, "route != null");
      this[S$._maybeStartHeroTransition](previousRoute, route, heroes.HeroFlightDirection.push, false);
    }
    didPop(route, previousRoute) {
      if (route == null) dart.nullFailed(I[30], 840, 30, "route");
      if (!(this.navigator != null)) dart.assertFailed(null, I[30], 841, 12, "navigator != null");
      if (!(route != null)) dart.assertFailed(null, I[30], 842, 12, "route != null");
      if (!dart.test(dart.nullCheck(this.navigator).userGestureInProgress)) this[S$._maybeStartHeroTransition](route, previousRoute, heroes.HeroFlightDirection.pop, false);
    }
    didReplace(opts) {
      let t23;
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      if (!(this.navigator != null)) dart.assertFailed(null, I[30], 851, 12, "navigator != null");
      if ((t23 = newRoute, t23 == null ? null : t23.isCurrent) === true) {
        this[S$._maybeStartHeroTransition](oldRoute, newRoute, heroes.HeroFlightDirection.push, false);
      }
    }
    didStartUserGesture(route, previousRoute) {
      if (route == null) dart.nullFailed(I[30], 859, 43, "route");
      if (!(this.navigator != null)) dart.assertFailed(null, I[30], 860, 12, "navigator != null");
      if (!(route != null)) dart.assertFailed(null, I[30], 861, 12, "route != null");
      this[S$._maybeStartHeroTransition](route, previousRoute, heroes.HeroFlightDirection.pop, true);
    }
    didStopUserGesture() {
      if (dart.test(dart.nullCheck(this.navigator).userGestureInProgress)) return;
      function isInvalidFlight(flight) {
        if (flight == null) dart.nullFailed(I[30], 875, 38, "flight");
        return dart.test(flight.manifest.isUserGestureTransition) && flight.manifest.type == heroes.HeroFlightDirection.pop && dart.test(flight[S$._proxyAnimation].isDismissed);
      }
      dart.fn(isInvalidFlight, T$._HeroFlightTobool());
      let invalidFlights = this[S$._flights][S$.$values][S$.$where](isInvalidFlight)[S$.$toList]({growable: false});
      for (let flight of invalidFlights) {
        flight[S$._handleAnimationUpdate](animation.AnimationStatus.dismissed);
      }
    }
    [S$._maybeStartHeroTransition](fromRoute, toRoute, flightType, isUserGestureTransition) {
      if (flightType == null) dart.nullFailed(I[30], 897, 25, "flightType");
      if (isUserGestureTransition == null) dart.nullFailed(I[30], 898, 10, "isUserGestureTransition");
      if (!dart.equals(toRoute, fromRoute) && pages.PageRoute.is(toRoute) && pages.PageRoute.is(fromRoute)) {
        let from = fromRoute;
        let to = toRoute;
        let animation = flightType == heroes.HeroFlightDirection.push ? dart.nullCheck(to.animation) : dart.nullCheck(from.animation);
        switch (flightType) {
          case C[248] || CT.C248:
          {
            if (animation.value === 0.0) {
              return;
            }
            break;
          }
          case C[247] || CT.C247:
          {
            if (animation.value === 1.0) {
              return;
            }
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        if (dart.test(isUserGestureTransition) && flightType == heroes.HeroFlightDirection.pop && dart.test(to.maintainState)) {
          this[S$._startHeroTransition](from, to, animation, flightType, isUserGestureTransition);
        } else {
          to.offstage = dart.nullCheck(to.animation).value === 0.0;
          dart.nullCheck(binding$5.WidgetsBinding.instance).addPostFrameCallback(dart.fn(value => {
            if (value == null) dart.nullFailed(I[30], 933, 65, "value");
            this[S$._startHeroTransition](from, to, animation, flightType, isUserGestureTransition);
          }, T$.DurationTovoid()));
        }
      }
    }
    [S$._startHeroTransition](from, to, animation, flightType, isUserGestureTransition) {
      let t23, t23$, t23$0, t23$1, t23$2;
      if (from == null) dart.nullFailed(I[30], 943, 24, "from");
      if (to == null) dart.nullFailed(I[30], 944, 24, "to");
      if (animation == null) dart.nullFailed(I[30], 945, 23, "animation");
      if (flightType == null) dart.nullFailed(I[30], 946, 25, "flightType");
      if (isUserGestureTransition == null) dart.nullFailed(I[30], 947, 10, "isUserGestureTransition");
      to.offstage = false;
      let navigator = this.navigator;
      let overlay = (t23 = navigator, t23 == null ? null : t23.overlay);
      if (navigator == null || overlay == null) return;
      let navigatorRenderObject = navigator.context.findRenderObject();
      if (!box$.RenderBox.is(navigatorRenderObject)) {
        if (!false) dart.assertFailed("Navigator " + dart.str(navigator) + " has an invalid RenderObject type " + dart.str(dart.runtimeType(navigatorRenderObject)) + ".", I[30], 965, 14, "false");
        return;
      }
      if (!dart.test(navigatorRenderObject.hasSize)) dart.assertFailed(null, I[30], 968, 12, "navigatorRenderObject.hasSize");
      let fromSubtreeContext = from.subtreeContext;
      let fromHeroes = fromSubtreeContext != null ? heroes.Hero._allHeroesFor(fromSubtreeContext, isUserGestureTransition, navigator) : C[293] || CT.C293;
      let toSubtreeContext = to.subtreeContext;
      let toHeroes = toSubtreeContext != null ? heroes.Hero._allHeroesFor(toSubtreeContext, isUserGestureTransition, navigator) : C[293] || CT.C293;
      for (let fromHeroEntry of fromHeroes[S$.$entries]) {
        let tag = fromHeroEntry.key;
        let fromHero = fromHeroEntry.value;
        let toHero = toHeroes[S$.$_get](tag);
        let existingFlight = this[S$._flights][S$.$_get](tag);
        let manifest = toHero == null ? null : new heroes._HeroFlightManifest.new({type: flightType, overlay: overlay, navigatorSize: navigatorRenderObject.size, fromRoute: from, toRoute: to, fromHero: fromHero, toHero: toHero, createRectTween: this.createRectTween, shuttleBuilder: (t23$0 = (t23$ = toHero.widget.flightShuttleBuilder, t23$ == null ? fromHero.widget.flightShuttleBuilder : t23$), t23$0 == null ? dart.bind(this, S$._defaultHeroFlightShuttleBuilder) : t23$0), isUserGestureTransition: isUserGestureTransition, isDiverted: existingFlight != null});
        if (manifest != null && dart.test(manifest.isValid)) {
          toHeroes[S$.$remove](tag);
          if (existingFlight != null) {
            existingFlight.divert(manifest);
          } else {
            this[S$._flights][S$.$_set](tag, (t23$1 = new heroes._HeroFlight.new(dart.bind(this, S$._handleFlightEnded)), (() => {
              t23$1.start(manifest);
              return t23$1;
            })()));
          }
        } else {
          t23$2 = existingFlight;
          t23$2 == null ? null : t23$2.abort();
        }
      }
      for (let toHero of toHeroes[S$.$values])
        toHero.endFlight();
    }
    [S$._handleFlightEnded](flight) {
      if (flight == null) dart.nullFailed(I[30], 1030, 39, "flight");
      this[S$._flights][S$.$remove](flight.manifest.tag);
    }
    [S$._defaultHeroFlightShuttleBuilder](flightContext, animation, flightDirection, fromHeroContext, toHeroContext) {
      if (flightContext == null) dart.nullFailed(I[30], 1035, 18, "flightContext");
      if (animation == null) dart.nullFailed(I[30], 1036, 23, "animation");
      if (flightDirection == null) dart.nullFailed(I[30], 1037, 25, "flightDirection");
      if (fromHeroContext == null) dart.nullFailed(I[30], 1038, 18, "fromHeroContext");
      if (toHeroContext == null) dart.nullFailed(I[30], 1039, 18, "toHeroContext");
      let toHero = heroes.Hero.as(toHeroContext.widget);
      return toHero.child;
    }
  };
  (heroes.HeroController.new = function(opts) {
    let createRectTween = opts && 'createRectTween' in opts ? opts.createRectTween : null;
    this[S$._flights] = new (T$.LinkedMapOfObject$_HeroFlight()).new();
    this[S$.createRectTween$1] = createRectTween;
    heroes.HeroController.__proto__.new.call(this);
    ;
  }).prototype = heroes.HeroController.prototype;
  dart.addTypeTests(heroes.HeroController);
  dart.addTypeCaches(heroes.HeroController);
  dart.setMethodSignature(heroes.HeroController, () => ({
    __proto__: dart.getMethods(heroes.HeroController.__proto__),
    [S$._maybeStartHeroTransition]: dart.fnType(dart.void, [dart.nullable(navigator$.Route), dart.nullable(navigator$.Route), heroes.HeroFlightDirection, core.bool]),
    [S$._startHeroTransition]: dart.fnType(dart.void, [pages.PageRoute, pages.PageRoute, animation.Animation$(core.double), heroes.HeroFlightDirection, core.bool]),
    [S$._handleFlightEnded]: dart.fnType(dart.void, [heroes._HeroFlight]),
    [S$._defaultHeroFlightShuttleBuilder]: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), heroes.HeroFlightDirection, framework.BuildContext, framework.BuildContext])
  }));
  dart.setLibraryUri(heroes.HeroController, I[31]);
  dart.setFieldSignature(heroes.HeroController, () => ({
    __proto__: dart.getFields(heroes.HeroController.__proto__),
    createRectTween: dart.finalFieldType(dart.nullable(dart.fnType(tween.Tween$(dart.nullable(ui.Rect)), [dart.nullable(ui.Rect), dart.nullable(ui.Rect)]))),
    [S$._flights]: dart.finalFieldType(core.Map$(core.Object, heroes._HeroFlight))
  }));
  heroes.HeroMode = class HeroMode extends framework.StatelessWidget {
    get child() {
      return this[S$.child$8];
    }
    set child(value) {
      super.child = value;
    }
    get enabled() {
      return this[S$.enabled];
    }
    set enabled(value) {
      super.enabled = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[30], 1077, 29, "context");
      return this.child;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[30], 1080, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.FlagProperty.new("mode", {value: this.enabled, ifTrue: "enabled", ifFalse: "disabled", showName: true}));
    }
  };
  (heroes.HeroMode.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[30], 1059, 19, "child");
    let enabled = opts && 'enabled' in opts ? opts.enabled : true;
    if (enabled == null) dart.nullFailed(I[30], 1060, 10, "enabled");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.child$8] = child;
    this[S$.enabled] = enabled;
    if (!(child != null)) dart.assertFailed(null, I[30], 1061, 15, "child != null");
    if (!(enabled != null)) dart.assertFailed(null, I[30], 1062, 15, "enabled != null");
    heroes.HeroMode.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = heroes.HeroMode.prototype;
  dart.addTypeTests(heroes.HeroMode);
  dart.addTypeCaches(heroes.HeroMode);
  dart.setMethodSignature(heroes.HeroMode, () => ({
    __proto__: dart.getMethods(heroes.HeroMode.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(heroes.HeroMode, I[31]);
  dart.setFieldSignature(heroes.HeroMode, () => ({
    __proto__: dart.getFields(heroes.HeroMode.__proto__),
    child: dart.finalFieldType(framework.Widget),
    enabled: dart.finalFieldType(core.bool)
  }));
  navigator$.RoutePopDisposition = class RoutePopDisposition extends core.Object {
    toString() {
      return this[S$._name$5];
    }
  };
  (navigator$.RoutePopDisposition.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[23], 86, 6, "index");
    if (_name == null) dart.nullFailed(I[23], 86, 6, "_name");
    this.index = index;
    this[S$._name$5] = _name;
    ;
  }).prototype = navigator$.RoutePopDisposition.prototype;
  dart.addTypeTests(navigator$.RoutePopDisposition);
  dart.addTypeCaches(navigator$.RoutePopDisposition);
  dart.setLibraryUri(navigator$.RoutePopDisposition, I[24]);
  dart.setFieldSignature(navigator$.RoutePopDisposition, () => ({
    __proto__: dart.getFields(navigator$.RoutePopDisposition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(navigator$.RoutePopDisposition, ['toString']);
  navigator$.RoutePopDisposition.pop = C[294] || CT.C294;
  navigator$.RoutePopDisposition.doNotPop = C[295] || CT.C295;
  navigator$.RoutePopDisposition.bubble = C[296] || CT.C296;
  navigator$.RoutePopDisposition.values = C[297] || CT.C297;
  navigator$.RouteSettings = class RouteSettings extends core.Object {
    get name() {
      return this[S$.name$1];
    }
    set name(value) {
      super.name = value;
    }
    get arguments() {
      return this[S$.$arguments];
    }
    set arguments(value) {
      super.arguments = value;
    }
    copyWith(opts) {
      let t23, t23$;
      let name = opts && 'name' in opts ? opts.name : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return new navigator$.RouteSettings.new({name: (t23 = name, t23 == null ? this.name : t23), arguments: (t23$ = $arguments, t23$ == null ? this.arguments : t23$)});
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "RouteSettings")) + "(\"" + dart.str(this.name) + "\", " + dart.str(this.arguments) + ")";
    }
  };
  (navigator$.RouteSettings.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    this[S$.name$1] = name;
    this[S$.$arguments] = $arguments;
    ;
  }).prototype = navigator$.RouteSettings.prototype;
  dart.addTypeTests(navigator$.RouteSettings);
  dart.addTypeCaches(navigator$.RouteSettings);
  dart.setMethodSignature(navigator$.RouteSettings, () => ({
    __proto__: dart.getMethods(navigator$.RouteSettings.__proto__),
    copyWith: dart.fnType(navigator$.RouteSettings, [], {arguments: dart.nullable(core.Object), name: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(navigator$.RouteSettings, I[24]);
  dart.setFieldSignature(navigator$.RouteSettings, () => ({
    __proto__: dart.getFields(navigator$.RouteSettings.__proto__),
    name: dart.finalFieldType(dart.nullable(core.String)),
    arguments: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(navigator$.RouteSettings, ['toString']);
  const _is_Page_default = Symbol('_is_Page_default');
  navigator$.Page$ = dart.generic(T => {
    class Page extends navigator$.RouteSettings {
      get key() {
        return this[S$.key$1];
      }
      set key(value) {
        super.key = value;
      }
      get restorationId() {
        return this[S$.restorationId];
      }
      set restorationId(value) {
        super.restorationId = value;
      }
      canUpdate(other) {
        if (other == null) dart.nullFailed(I[23], 591, 32, "other");
        return dart.equals(dart.runtimeType(other), this[S$.$runtimeType]) && dart.equals(other.key, this.key);
      }
      toString() {
        return dart.str(object.objectRuntimeType(this, "Page")) + "(\"" + dart.str(this.name) + "\", " + dart.str(this.key) + ", " + dart.str(this.arguments) + ")";
      }
    }
    (Page.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
      this[S$.key$1] = key;
      this[S$.restorationId] = restorationId;
      Page.__proto__.new.call(this, {name: name, arguments: $arguments});
      ;
    }).prototype = Page.prototype;
    dart.addTypeTests(Page);
    Page.prototype[_is_Page_default] = true;
    dart.addTypeCaches(Page);
    dart.setMethodSignature(Page, () => ({
      __proto__: dart.getMethods(Page.__proto__),
      canUpdate: dart.fnType(core.bool, [navigator$.Page])
    }));
    dart.setLibraryUri(Page, I[24]);
    dart.setFieldSignature(Page, () => ({
      __proto__: dart.getFields(Page.__proto__),
      key: dart.finalFieldType(dart.nullable(key.LocalKey)),
      restorationId: dart.finalFieldType(dart.nullable(core.String))
    }));
    dart.defineExtensionMethods(Page, ['toString']);
    return Page;
  });
  navigator$.Page = navigator$.Page$();
  dart.addTypeTests(navigator$.Page, _is_Page_default);
  navigator$.HeroControllerScope = class HeroControllerScope extends framework.InheritedWidget {
    get controller() {
      return this[S$.controller];
    }
    set controller(value) {
      super.controller = value;
    }
    static of(context) {
      let t23;
      if (context == null) dart.nullFailed(I[23], 682, 42, "context");
      let host = context.dependOnInheritedWidgetOfExactType(navigator$.HeroControllerScope);
      t23 = host;
      return t23 == null ? null : t23.controller;
    }
    updateShouldNotify(oldWidget) {
      navigator$.HeroControllerScope.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[23], 688, 47, "oldWidget");
      return !dart.equals(oldWidget.controller, this.controller);
    }
  };
  (navigator$.HeroControllerScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    if (controller == null) dart.nullFailed(I[23], 664, 34, "controller");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[23], 665, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.controller] = controller;
    if (!(controller != null)) dart.assertFailed(null, I[23], 666, 15, "controller != null");
    navigator$.HeroControllerScope.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = navigator$.HeroControllerScope.prototype;
  (navigator$.HeroControllerScope.none = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[23], 673, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.controller] = null;
    navigator$.HeroControllerScope.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = navigator$.HeroControllerScope.prototype;
  dart.addTypeTests(navigator$.HeroControllerScope);
  dart.addTypeCaches(navigator$.HeroControllerScope);
  dart.setMethodSignature(navigator$.HeroControllerScope, () => ({
    __proto__: dart.getMethods(navigator$.HeroControllerScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(navigator$.HeroControllerScope, I[24]);
  dart.setFieldSignature(navigator$.HeroControllerScope, () => ({
    __proto__: dart.getFields(navigator$.HeroControllerScope.__proto__),
    controller: dart.finalFieldType(dart.nullable(heroes.HeroController))
  }));
  navigator$.RouteTransitionRecord = class RouteTransitionRecord extends core.Object {};
  (navigator$.RouteTransitionRecord.new = function() {
    ;
  }).prototype = navigator$.RouteTransitionRecord.prototype;
  dart.addTypeTests(navigator$.RouteTransitionRecord);
  dart.addTypeCaches(navigator$.RouteTransitionRecord);
  dart.setLibraryUri(navigator$.RouteTransitionRecord, I[24]);
  const _is_TransitionDelegate_default = Symbol('_is_TransitionDelegate_default');
  navigator$.TransitionDelegate$ = dart.generic(T => {
    class TransitionDelegate extends core.Object {
      [S$._transition](opts) {
        let newPageRouteHistory = opts && 'newPageRouteHistory' in opts ? opts.newPageRouteHistory : null;
        if (newPageRouteHistory == null) dart.nullFailed(I[23], 814, 42, "newPageRouteHistory");
        let locationToExitingPageRoute = opts && 'locationToExitingPageRoute' in opts ? opts.locationToExitingPageRoute : null;
        if (locationToExitingPageRoute == null) dart.nullFailed(I[23], 815, 65, "locationToExitingPageRoute");
        let pageRouteToPagelessRoutes = opts && 'pageRouteToPagelessRoutes' in opts ? opts.pageRouteToPagelessRoutes : null;
        if (pageRouteToPagelessRoutes == null) dart.nullFailed(I[23], 816, 71, "pageRouteToPagelessRoutes");
        let results = this.resolve({newPageRouteHistory: newPageRouteHistory, locationToExitingPageRoute: locationToExitingPageRoute, pageRouteToPagelessRoutes: pageRouteToPagelessRoutes});
        if (!dart.test(dart.fn(() => {
          let resultsToVerify = results[S$.$toList]({growable: false});
          let exitingPageRoutes = locationToExitingPageRoute[S$.$values][S$.$toSet]();
          for (let exitingPageRoute of exitingPageRoutes) {
            if (!!dart.test(exitingPageRoute.isWaitingForExitingDecision)) dart.assertFailed(null, I[23], 852, 16, "!exitingPageRoute.isWaitingForExitingDecision");
            if (dart.test(pageRouteToPagelessRoutes[S$.$containsKey](exitingPageRoute))) {
              for (let pagelessRoute of dart.nullCheck(pageRouteToPagelessRoutes[S$.$_get](exitingPageRoute))) {
                if (!!dart.test(pagelessRoute.isWaitingForExitingDecision)) dart.assertFailed(null, I[23], 855, 20, "!pagelessRoute.isWaitingForExitingDecision");
              }
            }
          }
          let indexOfNextRouteInNewHistory = 0;
          for (let routeEntry of resultsToVerify[S$.$cast](navigator$._RouteEntry)) {
            if (!(routeEntry != null)) dart.assertFailed(null, I[23], 864, 16, "routeEntry != null");
            if (!(!dart.test(routeEntry.isWaitingForEnteringDecision) && !dart.test(routeEntry.isWaitingForExitingDecision))) dart.assertFailed(null, I[23], 865, 16, "!routeEntry.isWaitingForEnteringDecision && !routeEntry.isWaitingForExitingDecision");
            if (indexOfNextRouteInNewHistory >= dart.notNull(newPageRouteHistory[S$.$length]) || !dart.equals(routeEntry, newPageRouteHistory[S$.$_get](indexOfNextRouteInNewHistory))) {
              if (!dart.test(exitingPageRoutes.contains(routeEntry))) dart.assertFailed(null, I[23], 870, 18, "exitingPageRoutes.contains(routeEntry)");
              exitingPageRoutes.remove(routeEntry);
            } else {
              indexOfNextRouteInNewHistory = indexOfNextRouteInNewHistory + 1;
            }
          }
          if (!(indexOfNextRouteInNewHistory === newPageRouteHistory[S$.$length] && dart.test(exitingPageRoutes[S$.$isEmpty]))) dart.assertFailed("The merged result from the " + dart.str(this[S$.$runtimeType]) + ".resolve does not include all " + "required routes. Do you remember to merge all exiting routes?", I[23], 878, 9, "indexOfNextRouteInNewHistory == newPageRouteHistory.length &&\r\n        exitingPageRoutes.isEmpty");
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 847, 12, "() {\r\n      final List<RouteTransitionRecord> resultsToVerify = results.toList(growable: false);\r\n      final Set<RouteTransitionRecord> exitingPageRoutes = locationToExitingPageRoute.values.toSet();\r\n      // Firstly, verifies all exiting routes have been marked.\r\n      for (final RouteTransitionRecord exitingPageRoute in exitingPageRoutes) {\r\n        assert(!exitingPageRoute.isWaitingForExitingDecision);\r\n        if (pageRouteToPagelessRoutes.containsKey(exitingPageRoute)) {\r\n          for (final RouteTransitionRecord pagelessRoute in pageRouteToPagelessRoutes[exitingPageRoute]!) {\r\n            assert(!pagelessRoute.isWaitingForExitingDecision);\r\n          }\r\n        }\r\n      }\r\n      // Secondly, verifies the order of results matches the newPageRouteHistory\r\n      // and contains all the exiting routes.\r\n      int indexOfNextRouteInNewHistory = 0;\r\n\r\n      for (final _RouteEntry routeEntry in resultsToVerify.cast<_RouteEntry>()) {\r\n        assert(routeEntry != null);\r\n        assert(!routeEntry.isWaitingForEnteringDecision && !routeEntry.isWaitingForExitingDecision);\r\n        if (\r\n          indexOfNextRouteInNewHistory >= newPageRouteHistory.length ||\r\n          routeEntry != newPageRouteHistory[indexOfNextRouteInNewHistory]\r\n        ) {\r\n          assert(exitingPageRoutes.contains(routeEntry));\r\n          exitingPageRoutes.remove(routeEntry);\r\n        } else {\r\n          indexOfNextRouteInNewHistory += 1;\r\n        }\r\n      }\r\n\r\n      assert(\r\n        indexOfNextRouteInNewHistory == newPageRouteHistory.length &&\r\n        exitingPageRoutes.isEmpty,\r\n        'The merged result from the $runtimeType.resolve does not include all '\r\n        'required routes. Do you remember to merge all exiting routes?',\r\n      );\r\n      return true;\r\n    }()");
        return results;
      }
    }
    (TransitionDelegate.new = function() {
      ;
    }).prototype = TransitionDelegate.prototype;
    dart.addTypeTests(TransitionDelegate);
    TransitionDelegate.prototype[_is_TransitionDelegate_default] = true;
    dart.addTypeCaches(TransitionDelegate);
    dart.setMethodSignature(TransitionDelegate, () => ({
      __proto__: dart.getMethods(TransitionDelegate.__proto__),
      [S$._transition]: dart.fnType(core.Iterable$(navigator$.RouteTransitionRecord), [], {}, {locationToExitingPageRoute: core.Map$(dart.nullable(navigator$.RouteTransitionRecord), navigator$.RouteTransitionRecord), newPageRouteHistory: core.List$(navigator$.RouteTransitionRecord), pageRouteToPagelessRoutes: core.Map$(dart.nullable(navigator$.RouteTransitionRecord), core.List$(navigator$.RouteTransitionRecord))})
    }));
    dart.setLibraryUri(TransitionDelegate, I[24]);
    return TransitionDelegate;
  });
  navigator$.TransitionDelegate = navigator$.TransitionDelegate$();
  dart.addTypeTests(navigator$.TransitionDelegate, _is_TransitionDelegate_default);
  const _is_DefaultTransitionDelegate_default = Symbol('_is_DefaultTransitionDelegate_default');
  navigator$.DefaultTransitionDelegate$ = dart.generic(T => {
    class DefaultTransitionDelegate extends navigator$.TransitionDelegate$(T) {
      resolve(opts) {
        let newPageRouteHistory = opts && 'newPageRouteHistory' in opts ? opts.newPageRouteHistory : null;
        if (newPageRouteHistory == null) dart.nullFailed(I[23], 986, 42, "newPageRouteHistory");
        let locationToExitingPageRoute = opts && 'locationToExitingPageRoute' in opts ? opts.locationToExitingPageRoute : null;
        if (locationToExitingPageRoute == null) dart.nullFailed(I[23], 987, 65, "locationToExitingPageRoute");
        let pageRouteToPagelessRoutes = opts && 'pageRouteToPagelessRoutes' in opts ? opts.pageRouteToPagelessRoutes : null;
        if (pageRouteToPagelessRoutes == null) dart.nullFailed(I[23], 988, 71, "pageRouteToPagelessRoutes");
        let results = T$.JSArrayOfRouteTransitionRecord().of([]);
        function handleExitingRoute(location, isLast) {
          if (isLast == null) dart.nullFailed(I[23], 994, 67, "isLast");
          let exitingPageRoute = locationToExitingPageRoute[S$.$_get](location);
          if (exitingPageRoute == null) return;
          if (dart.test(exitingPageRoute.isWaitingForExitingDecision)) {
            let hasPagelessRoute = pageRouteToPagelessRoutes[S$.$containsKey](exitingPageRoute);
            let isLastExitingPageRoute = dart.test(isLast) && !dart.test(locationToExitingPageRoute[S$.$containsKey](exitingPageRoute));
            if (isLastExitingPageRoute && !dart.test(hasPagelessRoute)) {
              exitingPageRoute.markForPop(exitingPageRoute.route.currentResult);
            } else {
              exitingPageRoute.markForComplete(exitingPageRoute.route.currentResult);
            }
            if (dart.test(hasPagelessRoute)) {
              let pagelessRoutes = dart.nullCheck(pageRouteToPagelessRoutes[S$.$_get](exitingPageRoute));
              for (let pagelessRoute of pagelessRoutes) {
                if (dart.test(pagelessRoute.isWaitingForExitingDecision)) {
                  if (isLastExitingPageRoute && dart.equals(pagelessRoute, pagelessRoutes[S$.$last])) {
                    pagelessRoute.markForPop(pagelessRoute.route.currentResult);
                  } else {
                    pagelessRoute.markForComplete(pagelessRoute.route.currentResult);
                  }
                }
              }
            }
          }
          results[S$.$add](exitingPageRoute);
          handleExitingRoute(exitingPageRoute, isLast);
        }
        dart.fn(handleExitingRoute, T$.RouteTransitionRecordNAndboolTovoid());
        handleExitingRoute(null, newPageRouteHistory[S$.$isEmpty]);
        for (let pageRoute of newPageRouteHistory) {
          let isLastIteration = dart.equals(newPageRouteHistory[S$.$last], pageRoute);
          if (dart.test(pageRoute.isWaitingForEnteringDecision)) {
            if (!dart.test(locationToExitingPageRoute[S$.$containsKey](pageRoute)) && isLastIteration) {
              pageRoute.markForPush();
            } else {
              pageRoute.markForAdd();
            }
          }
          results[S$.$add](pageRoute);
          handleExitingRoute(pageRoute, isLastIteration);
        }
        return results;
      }
    }
    (DefaultTransitionDelegate.new = function() {
      DefaultTransitionDelegate.__proto__.new.call(this);
      ;
    }).prototype = DefaultTransitionDelegate.prototype;
    dart.addTypeTests(DefaultTransitionDelegate);
    DefaultTransitionDelegate.prototype[_is_DefaultTransitionDelegate_default] = true;
    dart.addTypeCaches(DefaultTransitionDelegate);
    dart.setMethodSignature(DefaultTransitionDelegate, () => ({
      __proto__: dart.getMethods(DefaultTransitionDelegate.__proto__),
      resolve: dart.fnType(core.Iterable$(navigator$.RouteTransitionRecord), [], {}, {locationToExitingPageRoute: core.Map$(dart.nullable(navigator$.RouteTransitionRecord), navigator$.RouteTransitionRecord), newPageRouteHistory: core.List$(navigator$.RouteTransitionRecord), pageRouteToPagelessRoutes: core.Map$(dart.nullable(navigator$.RouteTransitionRecord), core.List$(navigator$.RouteTransitionRecord))})
    }));
    dart.setLibraryUri(DefaultTransitionDelegate, I[24]);
    return DefaultTransitionDelegate;
  });
  navigator$.DefaultTransitionDelegate = navigator$.DefaultTransitionDelegate$();
  dart.addTypeTests(navigator$.DefaultTransitionDelegate, _is_DefaultTransitionDelegate_default);
  navigator$.Navigator = class Navigator extends framework.StatefulWidget {
    get pages() {
      return this[S$.pages];
    }
    set pages(value) {
      super.pages = value;
    }
    get onPopPage() {
      return this[S$.onPopPage];
    }
    set onPopPage(value) {
      super.onPopPage = value;
    }
    get transitionDelegate() {
      return this[S$.transitionDelegate];
    }
    set transitionDelegate(value) {
      super.transitionDelegate = value;
    }
    get initialRoute() {
      return this[S$.initialRoute];
    }
    set initialRoute(value) {
      super.initialRoute = value;
    }
    get onGenerateRoute() {
      return this[S$.onGenerateRoute];
    }
    set onGenerateRoute(value) {
      super.onGenerateRoute = value;
    }
    get onUnknownRoute() {
      return this[S$.onUnknownRoute];
    }
    set onUnknownRoute(value) {
      super.onUnknownRoute = value;
    }
    get observers() {
      return this[S$.observers];
    }
    set observers(value) {
      super.observers = value;
    }
    get restorationScopeId() {
      return this[S$.restorationScopeId];
    }
    set restorationScopeId(value) {
      super.restorationScopeId = value;
    }
    get onGenerateInitialRoutes() {
      return this[S$.onGenerateInitialRoutes];
    }
    set onGenerateInitialRoutes(value) {
      super.onGenerateInitialRoutes = value;
    }
    get reportsRouteUpdateToEngine() {
      return this[S$.reportsRouteUpdateToEngine];
    }
    set reportsRouteUpdateToEngine(value) {
      super.reportsRouteUpdateToEngine = value;
    }
    static pushNamed(T, context, routeName, opts) {
      if (context == null) dart.nullFailed(I[23], 1731, 18, "context");
      if (routeName == null) dart.nullFailed(I[23], 1732, 12, "routeName");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).pushNamed(T, routeName, {arguments: $arguments});
    }
    static restorablePushNamed(T, context, routeName, opts) {
      if (context == null) dart.nullFailed(I[23], 1786, 18, "context");
      if (routeName == null) dart.nullFailed(I[23], 1787, 12, "routeName");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePushNamed(T, routeName, {arguments: $arguments});
    }
    static pushReplacementNamed(T, TO, context, routeName, opts) {
      if (context == null) dart.nullFailed(I[23], 1848, 18, "context");
      if (routeName == null) dart.nullFailed(I[23], 1849, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).pushReplacementNamed(T, TO, routeName, {arguments: $arguments, result: result});
    }
    static restorablePushReplacementNamed(T, TO, context, routeName, opts) {
      if (context == null) dart.nullFailed(I[23], 1884, 18, "context");
      if (routeName == null) dart.nullFailed(I[23], 1885, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePushReplacementNamed(T, TO, routeName, {arguments: $arguments, result: result});
    }
    static popAndPushNamed(T, TO, context, routeName, opts) {
      if (context == null) dart.nullFailed(I[23], 1942, 18, "context");
      if (routeName == null) dart.nullFailed(I[23], 1943, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).popAndPushNamed(T, TO, routeName, {arguments: $arguments, result: result});
    }
    static restorablePopAndPushNamed(T, TO, context, routeName, opts) {
      if (context == null) dart.nullFailed(I[23], 1977, 20, "context");
      if (routeName == null) dart.nullFailed(I[23], 1978, 14, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePopAndPushNamed(T, TO, routeName, {arguments: $arguments, result: result});
    }
    static pushNamedAndRemoveUntil(T, context, newRouteName, predicate, opts) {
      if (context == null) dart.nullFailed(I[23], 2046, 18, "context");
      if (newRouteName == null) dart.nullFailed(I[23], 2047, 12, "newRouteName");
      if (predicate == null) dart.nullFailed(I[23], 2048, 20, "predicate");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).pushNamedAndRemoveUntil(T, newRouteName, predicate, {arguments: $arguments});
    }
    static restorablePushNamedAndRemoveUntil(T, context, newRouteName, predicate, opts) {
      if (context == null) dart.nullFailed(I[23], 2082, 20, "context");
      if (newRouteName == null) dart.nullFailed(I[23], 2083, 14, "newRouteName");
      if (predicate == null) dart.nullFailed(I[23], 2084, 22, "predicate");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePushNamedAndRemoveUntil(T, newRouteName, predicate, {arguments: $arguments});
    }
    static push(T, context, route) {
      if (context == null) dart.nullFailed(I[23], 2129, 58, "context");
      if (route == null) dart.nullFailed(I[23], 2129, 76, "route");
      return navigator$.Navigator.of(context).push(T, route);
    }
    static restorablePush(T, context, routeBuilder, opts) {
      if (context == null) dart.nullFailed(I[23], 2184, 64, "context");
      if (routeBuilder == null) dart.nullFailed(I[23], 2184, 99, "routeBuilder");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePush(T, routeBuilder, {arguments: $arguments});
    }
    static pushReplacement(T, TO, context, newRoute, opts) {
      if (context == null) dart.nullFailed(I[23], 2237, 89, "context");
      if (newRoute == null) dart.nullFailed(I[23], 2237, 107, "newRoute");
      let result = opts && 'result' in opts ? opts.result : null;
      return navigator$.Navigator.of(context).pushReplacement(T, TO, newRoute, {result: result});
    }
    static restorablePushReplacement(T, TO, context, routeBuilder, opts) {
      if (context == null) dart.nullFailed(I[23], 2284, 95, "context");
      if (routeBuilder == null) dart.nullFailed(I[23], 2284, 130, "routeBuilder");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePushReplacement(T, TO, routeBuilder, {result: result, arguments: $arguments});
    }
    static pushAndRemoveUntil(T, context, newRoute, predicate) {
      if (context == null) dart.nullFailed(I[23], 2343, 72, "context");
      if (newRoute == null) dart.nullFailed(I[23], 2343, 90, "newRoute");
      if (predicate == null) dart.nullFailed(I[23], 2343, 115, "predicate");
      return navigator$.Navigator.of(context).pushAndRemoveUntil(T, newRoute, predicate);
    }
    static restorablePushAndRemoveUntil(T, context, newRouteBuilder, predicate, opts) {
      if (context == null) dart.nullFailed(I[23], 2394, 78, "context");
      if (newRouteBuilder == null) dart.nullFailed(I[23], 2394, 113, "newRouteBuilder");
      if (predicate == null) dart.nullFailed(I[23], 2394, 145, "predicate");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorablePushAndRemoveUntil(T, newRouteBuilder, predicate, {arguments: $arguments});
    }
    static replace(T, context, opts) {
      if (context == null) dart.nullFailed(I[23], 2432, 55, "context");
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      if (oldRoute == null) dart.nullFailed(I[23], 2432, 90, "oldRoute");
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      if (newRoute == null) dart.nullFailed(I[23], 2432, 118, "newRoute");
      return navigator$.Navigator.of(context).replace(T, {oldRoute: oldRoute, newRoute: newRoute});
    }
    static restorableReplace(T, context, opts) {
      if (context == null) dart.nullFailed(I[23], 2451, 67, "context");
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      if (oldRoute == null) dart.nullFailed(I[23], 2451, 102, "oldRoute");
      let newRouteBuilder = opts && 'newRouteBuilder' in opts ? opts.newRouteBuilder : null;
      if (newRouteBuilder == null) dart.nullFailed(I[23], 2451, 147, "newRouteBuilder");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorableReplace(T, {oldRoute: oldRoute, newRouteBuilder: newRouteBuilder, arguments: $arguments});
    }
    static replaceRouteBelow(T, context, opts) {
      if (context == null) dart.nullFailed(I[23], 2487, 65, "context");
      let anchorRoute = opts && 'anchorRoute' in opts ? opts.anchorRoute : null;
      if (anchorRoute == null) dart.nullFailed(I[23], 2487, 100, "anchorRoute");
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      if (newRoute == null) dart.nullFailed(I[23], 2487, 131, "newRoute");
      return navigator$.Navigator.of(context).replaceRouteBelow(T, {anchorRoute: anchorRoute, newRoute: newRoute});
    }
    static restorableReplaceRouteBelow(T, context, opts) {
      if (context == null) dart.nullFailed(I[23], 2507, 77, "context");
      let anchorRoute = opts && 'anchorRoute' in opts ? opts.anchorRoute : null;
      if (anchorRoute == null) dart.nullFailed(I[23], 2507, 112, "anchorRoute");
      let newRouteBuilder = opts && 'newRouteBuilder' in opts ? opts.newRouteBuilder : null;
      if (newRouteBuilder == null) dart.nullFailed(I[23], 2507, 160, "newRouteBuilder");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return navigator$.Navigator.of(context).restorableReplaceRouteBelow(T, {anchorRoute: anchorRoute, newRouteBuilder: newRouteBuilder, arguments: $arguments});
    }
    static canPop(context) {
      if (context == null) dart.nullFailed(I[23], 2526, 35, "context");
      let navigator = navigator$.Navigator.maybeOf(context);
      return navigator != null && dart.test(navigator.canPop());
    }
    static maybePop(T, context, result = null) {
      if (context == null) dart.nullFailed(I[23], 2562, 64, "context");
      return navigator$.Navigator.of(context).maybePop(T, result);
    }
    static pop(T, context, result = null) {
      if (context == null) dart.nullFailed(I[23], 2612, 51, "context");
      navigator$.Navigator.of(context).pop(T, result);
    }
    static popUntil(context, predicate) {
      if (context == null) dart.nullFailed(I[23], 2641, 37, "context");
      if (predicate == null) dart.nullFailed(I[23], 2641, 61, "predicate");
      navigator$.Navigator.of(context).popUntil(predicate);
    }
    static removeRoute(context, route) {
      if (context == null) dart.nullFailed(I[23], 2668, 40, "context");
      if (route == null) dart.nullFailed(I[23], 2668, 64, "route");
      return navigator$.Navigator.of(context).removeRoute(route);
    }
    static removeRouteBelow(context, anchorRoute) {
      if (context == null) dart.nullFailed(I[23], 2693, 45, "context");
      if (anchorRoute == null) dart.nullFailed(I[23], 2693, 69, "anchorRoute");
      return navigator$.Navigator.of(context).removeRouteBelow(anchorRoute);
    }
    static of(context, opts) {
      let t23, t23$;
      if (context == null) dart.nullFailed(I[23], 2716, 18, "context");
      let rootNavigator = opts && 'rootNavigator' in opts ? opts.rootNavigator : false;
      if (rootNavigator == null) dart.nullFailed(I[23], 2717, 10, "rootNavigator");
      let navigator = null;
      if (framework.StatefulElement.is(context) && navigator$.NavigatorState.is(context.state)) {
        navigator = navigator$.NavigatorState.as(context.state);
      }
      if (dart.test(rootNavigator)) {
        navigator = (t23 = context.findRootAncestorStateOfType(navigator$.NavigatorState), t23 == null ? navigator : t23);
      } else {
        navigator = (t23$ = navigator, t23$ == null ? context.findAncestorStateOfType(navigator$.NavigatorState) : t23$);
      }
      if (!dart.test(dart.fn(() => {
        if (navigator == null) {
          dart.throw(assertions.FlutterError.new("Navigator operation requested with a context that does not include a Navigator.\n" + "The context used to push or pop routes from the Navigator must be that of a " + "widget that is a descendant of a Navigator widget."));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 2730, 12, "() {\r\n      if (navigator == null) {\r\n        throw FlutterError(\r\n          'Navigator operation requested with a context that does not include a Navigator.\\n'\r\n          'The context used to push or pop routes from the Navigator must be that of a '\r\n          'widget that is a descendant of a Navigator widget.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return dart.nullCheck(navigator);
    }
    static maybeOf(context, opts) {
      let t23, t23$;
      if (context == null) dart.nullFailed(I[23], 2764, 20, "context");
      let rootNavigator = opts && 'rootNavigator' in opts ? opts.rootNavigator : false;
      if (rootNavigator == null) dart.nullFailed(I[23], 2765, 14, "rootNavigator");
      let navigator = null;
      if (framework.StatefulElement.is(context) && navigator$.NavigatorState.is(context.state)) {
        navigator = navigator$.NavigatorState.as(context.state);
      }
      if (dart.test(rootNavigator)) {
        navigator = (t23 = context.findRootAncestorStateOfType(navigator$.NavigatorState), t23 == null ? navigator : t23);
      } else {
        navigator = (t23$ = navigator, t23$ == null ? context.findAncestorStateOfType(navigator$.NavigatorState) : t23$);
      }
      return navigator;
    }
    static defaultGenerateInitialRoutes(navigator, initialRouteName) {
      if (navigator == null) dart.nullFailed(I[23], 2794, 75, "navigator");
      if (initialRouteName == null) dart.nullFailed(I[23], 2794, 93, "initialRouteName");
      let result = T$.JSArrayOfRouteN().of([]);
      if (initialRouteName[S$.$startsWith]("/") && initialRouteName.length > 1) {
        initialRouteName = initialRouteName[S$.$substring](1);
        if (!("/" === "/")) dart.assertFailed(null, I[23], 2798, 14, "Navigator.defaultRouteName == '/'");
        let debugRouteNames = null;
        if (!dart.test(dart.fn(() => {
          debugRouteNames = T$.JSArrayOfString().of(["/"]);
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 2800, 14, "() {\r\n        debugRouteNames = <String>[ Navigator.defaultRouteName ];\r\n        return true;\r\n      }()");
        result[S$.$add](navigator[S$._routeNamed](dart.dynamic, "/", {arguments: null, allowNull: true}));
        let routeParts = initialRouteName[S$.$split]("/");
        if (initialRouteName[S$.$isNotEmpty]) {
          let routeName = "";
          for (let part of routeParts) {
            routeName = routeName + ("/" + dart.str(part));
            if (!dart.test(dart.fn(() => {
              dart.nullCheck(debugRouteNames)[S$.$add](routeName);
              return true;
            }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 2810, 18, "() {\r\n            debugRouteNames!.add(routeName);\r\n            return true;\r\n          }()");
            result[S$.$add](navigator[S$._routeNamed](dart.dynamic, routeName, {arguments: null, allowNull: true}));
          }
        }
        if (result[S$.$last] == null) {
          if (!dart.test(dart.fn(() => {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: "Could not navigate to initial route.\n" + "The requested route name was: \"/" + dart.str(initialRouteName) + "\"\n" + "There was no corresponding route in the app, and therefore the initial route specified will be " + "ignored and \"" + "/" + "\" will be used instead."}));
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 2818, 16, "() {\r\n          FlutterError.reportError(\r\n            FlutterErrorDetails(\r\n              exception:\r\n                'Could not navigate to initial route.\\n'\r\n                'The requested route name was: \"/$initialRouteName\"\\n'\r\n                'There was no corresponding route in the app, and therefore the initial route specified will be '\r\n                'ignored and \"${Navigator.defaultRouteName}\" will be used instead.',\r\n            ),\r\n          );\r\n          return true;\r\n        }()");
          result[S$.$clear]();
        }
      } else if (initialRouteName !== "/") {
        result[S$.$add](navigator[S$._routeNamed](dart.dynamic, initialRouteName, {arguments: null, allowNull: true}));
      }
      result[S$.$removeWhere](dart.fn(route => route == null, T$.RouteNTobool()));
      if (dart.test(result[S$.$isEmpty])) result[S$.$add](navigator[S$._routeNamed](dart.dynamic, "/", {arguments: null}));
      return result[S$.$cast](navigator$.Route);
    }
    createState() {
      return new navigator$.NavigatorState.new();
    }
  };
  (navigator$.Navigator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let pages = opts && 'pages' in opts ? opts.pages : C[298] || CT.C298;
    if (pages == null) dart.nullFailed(I[23], 1470, 10, "pages");
    let onPopPage = opts && 'onPopPage' in opts ? opts.onPopPage : null;
    let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
    let onGenerateInitialRoutes = opts && 'onGenerateInitialRoutes' in opts ? opts.onGenerateInitialRoutes : C[299] || CT.C299;
    if (onGenerateInitialRoutes == null) dart.nullFailed(I[23], 1473, 10, "onGenerateInitialRoutes");
    let onGenerateRoute = opts && 'onGenerateRoute' in opts ? opts.onGenerateRoute : null;
    let onUnknownRoute = opts && 'onUnknownRoute' in opts ? opts.onUnknownRoute : null;
    let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : C[300] || CT.C300;
    if (transitionDelegate == null) dart.nullFailed(I[23], 1476, 10, "transitionDelegate");
    let reportsRouteUpdateToEngine = opts && 'reportsRouteUpdateToEngine' in opts ? opts.reportsRouteUpdateToEngine : false;
    if (reportsRouteUpdateToEngine == null) dart.nullFailed(I[23], 1477, 10, "reportsRouteUpdateToEngine");
    let observers = opts && 'observers' in opts ? opts.observers : C[301] || CT.C301;
    if (observers == null) dart.nullFailed(I[23], 1478, 10, "observers");
    let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$.pages] = pages;
    this[S$.onPopPage] = onPopPage;
    this[S$.initialRoute] = initialRoute;
    this[S$.onGenerateInitialRoutes] = onGenerateInitialRoutes;
    this[S$.onGenerateRoute] = onGenerateRoute;
    this[S$.onUnknownRoute] = onUnknownRoute;
    this[S$.transitionDelegate] = transitionDelegate;
    this[S$.reportsRouteUpdateToEngine] = reportsRouteUpdateToEngine;
    this[S$.observers] = observers;
    this[S$.restorationScopeId] = restorationScopeId;
    if (!(pages != null)) dart.assertFailed(null, I[23], 1480, 15, "pages != null");
    if (!(onGenerateInitialRoutes != null)) dart.assertFailed(null, I[23], 1481, 15, "onGenerateInitialRoutes != null");
    if (!(transitionDelegate != null)) dart.assertFailed(null, I[23], 1482, 15, "transitionDelegate != null");
    if (!(observers != null)) dart.assertFailed(null, I[23], 1483, 15, "observers != null");
    if (!(reportsRouteUpdateToEngine != null)) dart.assertFailed(null, I[23], 1484, 15, "reportsRouteUpdateToEngine != null");
    navigator$.Navigator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = navigator$.Navigator.prototype;
  dart.addTypeTests(navigator$.Navigator);
  dart.addTypeCaches(navigator$.Navigator);
  dart.setMethodSignature(navigator$.Navigator, () => ({
    __proto__: dart.getMethods(navigator$.Navigator.__proto__),
    createState: dart.fnType(navigator$.NavigatorState, [])
  }));
  dart.setLibraryUri(navigator$.Navigator, I[24]);
  dart.setFieldSignature(navigator$.Navigator, () => ({
    __proto__: dart.getFields(navigator$.Navigator.__proto__),
    pages: dart.finalFieldType(core.List$(navigator$.Page)),
    onPopPage: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [navigator$.Route, dart.dynamic]))),
    transitionDelegate: dart.finalFieldType(navigator$.TransitionDelegate),
    initialRoute: dart.finalFieldType(dart.nullable(core.String)),
    onGenerateRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(navigator$.Route), [navigator$.RouteSettings]))),
    onUnknownRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(navigator$.Route), [navigator$.RouteSettings]))),
    observers: dart.finalFieldType(core.List$(navigator$.NavigatorObserver)),
    restorationScopeId: dart.finalFieldType(dart.nullable(core.String)),
    onGenerateInitialRoutes: dart.finalFieldType(dart.fnType(core.List$(navigator$.Route), [navigator$.NavigatorState, core.String])),
    reportsRouteUpdateToEngine: dart.finalFieldType(core.bool)
  }));
  dart.defineLazy(navigator$.Navigator, {
    /*navigator$.Navigator.defaultRouteName*/get defaultRouteName() {
      return "/";
    }
  }, false);
  navigator$._RouteLifecycle = class _RouteLifecycle extends core.Object {
    toString() {
      return this[S$._name$5];
    }
  };
  (navigator$._RouteLifecycle.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[23], 2897, 6, "index");
    if (_name == null) dart.nullFailed(I[23], 2897, 6, "_name");
    this.index = index;
    this[S$._name$5] = _name;
    ;
  }).prototype = navigator$._RouteLifecycle.prototype;
  dart.addTypeTests(navigator$._RouteLifecycle);
  dart.addTypeCaches(navigator$._RouteLifecycle);
  dart.setLibraryUri(navigator$._RouteLifecycle, I[24]);
  dart.setFieldSignature(navigator$._RouteLifecycle, () => ({
    __proto__: dart.getFields(navigator$._RouteLifecycle.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(navigator$._RouteLifecycle, ['toString']);
  navigator$._RouteLifecycle.staging = C[302] || CT.C302;
  navigator$._RouteLifecycle.add = C[303] || CT.C303;
  navigator$._RouteLifecycle.adding = C[304] || CT.C304;
  navigator$._RouteLifecycle.push = C[305] || CT.C305;
  navigator$._RouteLifecycle.pushReplace = C[306] || CT.C306;
  navigator$._RouteLifecycle.pushing = C[307] || CT.C307;
  navigator$._RouteLifecycle.replace = C[308] || CT.C308;
  navigator$._RouteLifecycle.idle = C[309] || CT.C309;
  navigator$._RouteLifecycle.pop = C[310] || CT.C310;
  navigator$._RouteLifecycle.remove = C[311] || CT.C311;
  navigator$._RouteLifecycle.popping = C[312] || CT.C312;
  navigator$._RouteLifecycle.removing = C[313] || CT.C313;
  navigator$._RouteLifecycle.dispose = C[314] || CT.C314;
  navigator$._RouteLifecycle.disposed = C[315] || CT.C315;
  navigator$._RouteLifecycle.values = C[316] || CT.C316;
  navigator$._NotAnnounced = class _NotAnnounced extends navigator$.Route$(dart.void) {};
  (navigator$._NotAnnounced.new = function() {
    navigator$._NotAnnounced.__proto__.new.call(this);
    ;
  }).prototype = navigator$._NotAnnounced.prototype;
  dart.addTypeTests(navigator$._NotAnnounced);
  dart.addTypeCaches(navigator$._NotAnnounced);
  dart.setLibraryUri(navigator$._NotAnnounced, I[24]);
  navigator$._RouteEntry = class _RouteEntry extends navigator$.RouteTransitionRecord {
    get route() {
      return this[S$.route$2];
    }
    set route(value) {
      super.route = value;
    }
    get restorationId() {
      if (dart.test(this.hasPage)) {
        let page = T$.PageOfObjectN().as(this.route.settings);
        return page.restorationId != null ? "p+" + dart.str(page.restorationId) : null;
      }
      if (this.restorationInformation != null) {
        return "r+" + dart.str(dart.nullCheck(this.restorationInformation).restorationScopeId);
      }
      return null;
    }
    get hasPage() {
      return navigator$.Page.is(this.route.settings);
    }
    canUpdateFrom(page) {
      if (page == null) dart.nullFailed(I[23], 2976, 36, "page");
      if (dart.notNull(this.currentState.index) > dart.notNull(navigator$._RouteLifecycle.idle.index)) return false;
      if (!dart.test(this.hasPage)) return false;
      let routePage = navigator$.Page.as(this.route.settings);
      return page.canUpdate(routePage);
    }
    handleAdd(opts) {
      let navigator = opts && 'navigator' in opts ? opts.navigator : null;
      if (navigator == null) dart.nullFailed(I[23], 2985, 44, "navigator");
      let previousPresent = opts && 'previousPresent' in opts ? opts.previousPresent : null;
      if (!(this.currentState == navigator$._RouteLifecycle.add)) dart.assertFailed(null, I[23], 2986, 12, "currentState == _RouteLifecycle.add");
      if (!(navigator != null)) dart.assertFailed(null, I[23], 2987, 12, "navigator != null");
      if (!dart.test(navigator[S$._debugLocked])) dart.assertFailed(null, I[23], 2988, 12, "navigator._debugLocked");
      if (!(this.route[S$._navigator] == null)) dart.assertFailed(null, I[23], 2989, 12, "route._navigator == null");
      this.route[S$._navigator] = navigator;
      this.route.install();
      if (!dart.test(this.route.overlayEntries[S$.$isNotEmpty])) dart.assertFailed(null, I[23], 2992, 12, "route.overlayEntries.isNotEmpty");
      this.currentState = navigator$._RouteLifecycle.adding;
      navigator[S$._observedRouteAdditions].add(new navigator$._NavigatorPushObservation.new(this.route, previousPresent));
    }
    handlePush(opts) {
      let navigator = opts && 'navigator' in opts ? opts.navigator : null;
      if (navigator == null) dart.nullFailed(I[23], 2999, 45, "navigator");
      let isNewFirst = opts && 'isNewFirst' in opts ? opts.isNewFirst : null;
      if (isNewFirst == null) dart.nullFailed(I[23], 2999, 70, "isNewFirst");
      let previous = opts && 'previous' in opts ? opts.previous : null;
      let previousPresent = opts && 'previousPresent' in opts ? opts.previousPresent : null;
      if (!(this.currentState == navigator$._RouteLifecycle.push || this.currentState == navigator$._RouteLifecycle.pushReplace || this.currentState == navigator$._RouteLifecycle.replace)) dart.assertFailed(null, I[23], 3000, 12, "currentState == _RouteLifecycle.push || currentState == _RouteLifecycle.pushReplace || currentState == _RouteLifecycle.replace");
      if (!(navigator != null)) dart.assertFailed(null, I[23], 3001, 12, "navigator != null");
      if (!dart.test(navigator[S$._debugLocked])) dart.assertFailed(null, I[23], 3002, 12, "navigator._debugLocked");
      if (!(this.route[S$._navigator] == null)) dart.assertFailed("The pushed route has already been used. When pushing a route, a new " + "Route object must be provided.", I[23], 3004, 7, "route._navigator == null");
      let previousState = this.currentState;
      this.route[S$._navigator] = navigator;
      this.route.install();
      if (!dart.test(this.route.overlayEntries[S$.$isNotEmpty])) dart.assertFailed(null, I[23], 3011, 12, "route.overlayEntries.isNotEmpty");
      if (this.currentState == navigator$._RouteLifecycle.push || this.currentState == navigator$._RouteLifecycle.pushReplace) {
        let routeFuture = this.route.didPush();
        this.currentState = navigator$._RouteLifecycle.pushing;
        routeFuture.whenCompleteOrCancel(dart.fn(() => {
          if (this.currentState == navigator$._RouteLifecycle.pushing) {
            this.currentState = navigator$._RouteLifecycle.idle;
            if (!!dart.test(navigator[S$._debugLocked])) dart.assertFailed(null, I[23], 3018, 18, "!navigator._debugLocked");
            if (!dart.test(dart.fn(() => {
              navigator[S$._debugLocked] = true;
              return true;
            }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3019, 18, "() { navigator._debugLocked = true; return true; }()");
            navigator[S$._flushHistoryUpdates]();
            if (!dart.test(dart.fn(() => {
              navigator[S$._debugLocked] = false;
              return true;
            }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3021, 18, "() { navigator._debugLocked = false; return true; }()");
          }
        }, T$.VoidTovoid()));
      } else {
        if (!(this.currentState == navigator$._RouteLifecycle.replace)) dart.assertFailed(null, I[23], 3025, 14, "currentState == _RouteLifecycle.replace");
        this.route.didReplace(previous);
        this.currentState = navigator$._RouteLifecycle.idle;
      }
      if (dart.test(isNewFirst)) {
        this.route.didChangeNext(null);
      }
      if (previousState == navigator$._RouteLifecycle.replace || previousState == navigator$._RouteLifecycle.pushReplace) {
        navigator[S$._observedRouteAdditions].add(new navigator$._NavigatorReplaceObservation.new(this.route, previousPresent));
      } else {
        if (!(previousState == navigator$._RouteLifecycle.push)) dart.assertFailed(null, I[23], 3038, 14, "previousState == _RouteLifecycle.push");
        navigator[S$._observedRouteAdditions].add(new navigator$._NavigatorPushObservation.new(this.route, previousPresent));
      }
    }
    handleDidPopNext(poppedRoute) {
      if (poppedRoute == null) dart.nullFailed(I[23], 3045, 40, "poppedRoute");
      this.route.didPopNext(poppedRoute);
      this.lastAnnouncedPoppedNextRoute = poppedRoute;
    }
    handlePop(opts) {
      let navigator = opts && 'navigator' in opts ? opts.navigator : null;
      if (navigator == null) dart.nullFailed(I[23], 3050, 44, "navigator");
      let previousPresent = opts && 'previousPresent' in opts ? opts.previousPresent : null;
      if (!(navigator != null)) dart.assertFailed(null, I[23], 3051, 12, "navigator != null");
      if (!dart.test(navigator[S$._debugLocked])) dart.assertFailed(null, I[23], 3052, 12, "navigator._debugLocked");
      if (!dart.equals(this.route[S$._navigator], navigator)) dart.assertFailed(null, I[23], 3053, 12, "route._navigator == navigator");
      this.currentState = navigator$._RouteLifecycle.popping;
      navigator[S$._observedRouteDeletions].add(new navigator$._NavigatorPopObservation.new(this.route, previousPresent));
    }
    handleRemoval(opts) {
      let navigator = opts && 'navigator' in opts ? opts.navigator : null;
      if (navigator == null) dart.nullFailed(I[23], 3060, 48, "navigator");
      let previousPresent = opts && 'previousPresent' in opts ? opts.previousPresent : null;
      if (!(navigator != null)) dart.assertFailed(null, I[23], 3061, 12, "navigator != null");
      if (!dart.test(navigator[S$._debugLocked])) dart.assertFailed(null, I[23], 3062, 12, "navigator._debugLocked");
      if (!dart.equals(this.route[S$._navigator], navigator)) dart.assertFailed(null, I[23], 3063, 12, "route._navigator == navigator");
      this.currentState = navigator$._RouteLifecycle.removing;
      if (dart.test(this[S$._reportRemovalToObserver])) {
        navigator[S$._observedRouteDeletions].add(new navigator$._NavigatorRemoveObservation.new(this.route, previousPresent));
      }
    }
    didAdd(opts) {
      let navigator = opts && 'navigator' in opts ? opts.navigator : null;
      if (navigator == null) dart.nullFailed(I[23], 3074, 41, "navigator");
      let isNewFirst = opts && 'isNewFirst' in opts ? opts.isNewFirst : null;
      if (isNewFirst == null) dart.nullFailed(I[23], 3074, 66, "isNewFirst");
      this.route.didAdd();
      this.currentState = navigator$._RouteLifecycle.idle;
      if (dart.test(isNewFirst)) {
        this.route.didChangeNext(null);
      }
    }
    pop(T, result) {
      if (!dart.test(this.isPresent)) dart.assertFailed(null, I[23], 3083, 12, "isPresent");
      this.doingPop = true;
      if (dart.test(this.route.didPop(result)) && dart.test(this.doingPop)) {
        this.currentState = navigator$._RouteLifecycle.pop;
      }
      this.doingPop = false;
    }
    remove(opts) {
      let isReplaced = opts && 'isReplaced' in opts ? opts.isReplaced : false;
      if (isReplaced == null) dart.nullFailed(I[23], 3094, 22, "isReplaced");
      if (!(!dart.test(this.hasPage) || dart.test(this.isWaitingForExitingDecision))) dart.assertFailed("A page-based route cannot be completed using imperative api, provide a " + "new list without the corresponding Page to Navigator.pages instead. ", I[23], 3096, 7, "!hasPage || isWaitingForExitingDecision");
      if (dart.notNull(this.currentState.index) >= dart.notNull(navigator$._RouteLifecycle.remove.index)) return;
      if (!dart.test(this.isPresent)) dart.assertFailed(null, I[23], 3102, 12, "isPresent");
      this[S$._reportRemovalToObserver] = !dart.test(isReplaced);
      this.currentState = navigator$._RouteLifecycle.remove;
    }
    complete(T, result, opts) {
      let isReplaced = opts && 'isReplaced' in opts ? opts.isReplaced : false;
      if (isReplaced == null) dart.nullFailed(I[23], 3108, 37, "isReplaced");
      if (!(!dart.test(this.hasPage) || dart.test(this.isWaitingForExitingDecision))) dart.assertFailed("A page-based route cannot be completed using imperative api, provide a " + "new list without the corresponding Page to Navigator.pages instead. ", I[23], 3110, 7, "!hasPage || isWaitingForExitingDecision");
      if (dart.notNull(this.currentState.index) >= dart.notNull(navigator$._RouteLifecycle.remove.index)) return;
      if (!dart.test(this.isPresent)) dart.assertFailed(null, I[23], 3116, 12, "isPresent");
      this[S$._reportRemovalToObserver] = !dart.test(isReplaced);
      this.route.didComplete(result);
      if (!dart.test(this.route[S$._popCompleter].isCompleted)) dart.assertFailed(null, I[23], 3119, 12, "route._popCompleter.isCompleted");
      this.currentState = navigator$._RouteLifecycle.remove;
    }
    finalize() {
      if (!(dart.notNull(this.currentState.index) < dart.notNull(navigator$._RouteLifecycle.dispose.index))) dart.assertFailed(null, I[23], 3124, 12, "currentState.index < _RouteLifecycle.dispose.index");
      this.currentState = navigator$._RouteLifecycle.dispose;
    }
    dispose() {
      if (!(dart.notNull(this.currentState.index) < dart.notNull(navigator$._RouteLifecycle.disposed.index))) dart.assertFailed(null, I[23], 3129, 12, "currentState.index < _RouteLifecycle.disposed.index");
      this.currentState = navigator$._RouteLifecycle.disposed;
      let mountedEntries = this.route.overlayEntries[S$.$where](dart.fn(e => {
        if (e == null) dart.nullFailed(I[23], 3138, 92, "e");
        return e.mounted;
      }, T$.OverlayEntryTobool()));
      if (dart.test(mountedEntries[S$.$isEmpty])) {
        this.route.dispose();
      } else {
        let mounted = mountedEntries[S$.$length];
        if (!(dart.notNull(mounted) > 0)) dart.assertFailed(null, I[23], 3144, 14, "mounted > 0");
        for (let entry of mountedEntries) {
          let listener = null;
          let listener$35isSet = false;
          function listener$35get() {
            return listener$35isSet ? listener : dart.throw(new _internal.LateError.localNI("listener"));
          }
          dart.fn(listener$35get, T$.VoidToFn());
          function listener$35set(t26) {
            if (t26 == null) dart.nullFailed(I[23], 3146, 27, "null");
            listener$35isSet = true;
            return listener = t26;
          }
          dart.fn(listener$35set, T$.FnTodynamic());
          listener$35set(dart.fn(() => {
            if (!(dart.notNull(mounted) > 0)) dart.assertFailed(null, I[23], 3148, 18, "mounted > 0");
            if (!!dart.test(entry.mounted)) dart.assertFailed(null, I[23], 3149, 18, "!entry.mounted");
            mounted = dart.notNull(mounted) - 1;
            entry.removeListener(listener$35get());
            if (mounted === 0) {
              if (!dart.test(this.route.overlayEntries[S$.$every](dart.fn(e => {
                if (e == null) dart.nullFailed(I[23], 3153, 61, "e");
                return !dart.test(e.mounted);
              }, T$.OverlayEntryTobool())))) dart.assertFailed(null, I[23], 3153, 20, "route.overlayEntries.every((OverlayEntry e) => !e.mounted)");
              this.route.dispose();
            }
          }, T$.VoidTovoid()));
          entry.addListener(listener$35get());
        }
      }
    }
    get willBePresent() {
      return dart.notNull(this.currentState.index) <= dart.notNull(navigator$._RouteLifecycle.idle.index) && dart.notNull(this.currentState.index) >= dart.notNull(navigator$._RouteLifecycle.add.index);
    }
    get isPresent() {
      return dart.notNull(this.currentState.index) <= dart.notNull(navigator$._RouteLifecycle.remove.index) && dart.notNull(this.currentState.index) >= dart.notNull(navigator$._RouteLifecycle.add.index);
    }
    get isPresentForRestoration() {
      return dart.notNull(this.currentState.index) <= dart.notNull(navigator$._RouteLifecycle.idle.index);
    }
    get suitableForAnnouncement() {
      return dart.notNull(this.currentState.index) <= dart.notNull(navigator$._RouteLifecycle.removing.index) && dart.notNull(this.currentState.index) >= dart.notNull(navigator$._RouteLifecycle.push.index);
    }
    get suitableForTransitionAnimation() {
      return dart.notNull(this.currentState.index) <= dart.notNull(navigator$._RouteLifecycle.remove.index) && dart.notNull(this.currentState.index) >= dart.notNull(navigator$._RouteLifecycle.push.index);
    }
    shouldAnnounceChangeToNext(nextRoute) {
      if (!!dart.equals(nextRoute, this.lastAnnouncedNextRoute)) dart.assertFailed(null, I[23], 3185, 12, "nextRoute != lastAnnouncedNextRoute");
      return !(nextRoute == null && this.lastAnnouncedPoppedNextRoute != null && dart.equals(this.lastAnnouncedPoppedNextRoute, this.lastAnnouncedNextRoute));
    }
    static isPresentPredicate(entry) {
      if (entry == null) dart.nullFailed(I[23], 3195, 46, "entry");
      return entry.isPresent;
    }
    static suitableForTransitionAnimationPredicate(entry) {
      if (entry == null) dart.nullFailed(I[23], 3196, 67, "entry");
      return entry.suitableForTransitionAnimation;
    }
    static willBePresentPredicate(entry) {
      if (entry == null) dart.nullFailed(I[23], 3197, 50, "entry");
      return entry.willBePresent;
    }
    static isRoutePredicate(route) {
      if (route == null) dart.nullFailed(I[23], 3199, 63, "route");
      return dart.fn(entry => {
        if (entry == null) dart.nullFailed(I[23], 3200, 25, "entry");
        return dart.equals(entry.route, route);
      }, T$._RouteEntryTobool());
    }
    get isWaitingForEnteringDecision() {
      return this.currentState == navigator$._RouteLifecycle.staging;
    }
    get isWaitingForExitingDecision() {
      return this[S$._isWaitingForExitingDecision];
    }
    markNeedsExitingDecision() {
      return this[S$._isWaitingForExitingDecision] = true;
    }
    markForPush() {
      if (!(dart.test(this.isWaitingForEnteringDecision) && !dart.test(this.isWaitingForExitingDecision))) dart.assertFailed("This route cannot be marked for push. Either a decision has already been " + "made or it does not require an explicit decision on how to transition in.", I[23], 3215, 7, "isWaitingForEnteringDecision && !isWaitingForExitingDecision");
      this.currentState = navigator$._RouteLifecycle.push;
    }
    markForAdd() {
      if (!(dart.test(this.isWaitingForEnteringDecision) && !dart.test(this.isWaitingForExitingDecision))) dart.assertFailed("This route cannot be marked for add. Either a decision has already been " + "made or it does not require an explicit decision on how to transition in.", I[23], 3225, 7, "isWaitingForEnteringDecision && !isWaitingForExitingDecision");
      this.currentState = navigator$._RouteLifecycle.add;
    }
    markForPop(result = null) {
      if (!(!dart.test(this.isWaitingForEnteringDecision) && dart.test(this.isWaitingForExitingDecision) && dart.test(this.isPresent))) dart.assertFailed("This route cannot be marked for pop. Either a decision has already been " + "made or it does not require an explicit decision on how to transition out.", I[23], 3235, 7, "!isWaitingForEnteringDecision && isWaitingForExitingDecision && isPresent");
      this.pop(dart.dynamic, result);
      this[S$._isWaitingForExitingDecision] = false;
    }
    markForComplete(result = null) {
      if (!(!dart.test(this.isWaitingForEnteringDecision) && dart.test(this.isWaitingForExitingDecision) && dart.test(this.isPresent))) dart.assertFailed("This route cannot be marked for complete. Either a decision has already " + "been made or it does not require an explicit decision on how to transition " + "out.", I[23], 3246, 7, "!isWaitingForEnteringDecision && isWaitingForExitingDecision && isPresent");
      this.complete(dart.dynamic, result);
      this[S$._isWaitingForExitingDecision] = false;
    }
    markForRemove() {
      if (!(!dart.test(this.isWaitingForEnteringDecision) && dart.test(this.isWaitingForExitingDecision) && dart.test(this.isPresent))) dart.assertFailed("This route cannot be marked for remove. Either a decision has already " + "been made or it does not require an explicit decision on how to transition " + "out.", I[23], 3258, 7, "!isWaitingForEnteringDecision && isWaitingForExitingDecision && isPresent");
      this.remove();
      this[S$._isWaitingForExitingDecision] = false;
    }
    get restorationEnabled() {
      return this.route.restorationScopeId.value != null;
    }
    set restorationEnabled(value) {
      if (value == null) dart.nullFailed(I[23], 3268, 31, "value");
      if (!(!dart.test(value) || this.restorationId != null)) dart.assertFailed(null, I[23], 3269, 12, "!value || restorationId != null");
      this.route[S$._updateRestorationId](dart.test(value) ? this.restorationId : null);
    }
  };
  (navigator$._RouteEntry.new = function(route, opts) {
    if (route == null) dart.nullFailed(I[23], 2934, 10, "route");
    let initialState = opts && 'initialState' in opts ? opts.initialState : null;
    if (initialState == null) dart.nullFailed(I[23], 2935, 32, "initialState");
    let restorationInformation = opts && 'restorationInformation' in opts ? opts.restorationInformation : null;
    this.lastAnnouncedPreviousRoute = navigator$._RouteEntry.notAnnounced;
    this.lastAnnouncedPoppedNextRoute = navigator$._RouteEntry.notAnnounced;
    this.lastAnnouncedNextRoute = navigator$._RouteEntry.notAnnounced;
    this.doingPop = false;
    this[S$._reportRemovalToObserver] = true;
    this[S$._isWaitingForExitingDecision] = false;
    this[S$.route$2] = route;
    this.restorationInformation = restorationInformation;
    if (!(route != null)) dart.assertFailed(null, I[23], 2937, 17, "route != null");
    if (!(initialState != null)) dart.assertFailed(null, I[23], 2938, 17, "initialState != null");
    if (!(initialState == navigator$._RouteLifecycle.staging || initialState == navigator$._RouteLifecycle.add || initialState == navigator$._RouteLifecycle.push || initialState == navigator$._RouteLifecycle.pushReplace || initialState == navigator$._RouteLifecycle.replace)) dart.assertFailed(null, I[23], 2940, 12, "initialState == _RouteLifecycle.staging ||\r\n           initialState == _RouteLifecycle.add ||\r\n           initialState == _RouteLifecycle.push ||\r\n           initialState == _RouteLifecycle.pushReplace ||\r\n           initialState == _RouteLifecycle.replace");
    this.currentState = initialState;
    ;
  }).prototype = navigator$._RouteEntry.prototype;
  dart.addTypeTests(navigator$._RouteEntry);
  dart.addTypeCaches(navigator$._RouteEntry);
  dart.setMethodSignature(navigator$._RouteEntry, () => ({
    __proto__: dart.getMethods(navigator$._RouteEntry.__proto__),
    canUpdateFrom: dart.fnType(core.bool, [navigator$.Page]),
    handleAdd: dart.fnType(dart.void, [], {}, {navigator: navigator$.NavigatorState, previousPresent: dart.nullable(navigator$.Route)}),
    handlePush: dart.fnType(dart.void, [], {}, {isNewFirst: core.bool, navigator: navigator$.NavigatorState, previous: dart.nullable(navigator$.Route), previousPresent: dart.nullable(navigator$.Route)}),
    handleDidPopNext: dart.fnType(dart.void, [navigator$.Route]),
    handlePop: dart.fnType(dart.void, [], {}, {navigator: navigator$.NavigatorState, previousPresent: dart.nullable(navigator$.Route)}),
    handleRemoval: dart.fnType(dart.void, [], {}, {navigator: navigator$.NavigatorState, previousPresent: dart.nullable(navigator$.Route)}),
    didAdd: dart.fnType(dart.void, [], {}, {isNewFirst: core.bool, navigator: navigator$.NavigatorState}),
    pop: dart.gFnType(T => [dart.void, [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    remove: dart.fnType(dart.void, [], {isReplaced: core.bool}, {}),
    complete: dart.gFnType(T => [dart.void, [T], {isReplaced: core.bool}, {}], T => [dart.nullable(core.Object)]),
    finalize: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    shouldAnnounceChangeToNext: dart.fnType(core.bool, [dart.nullable(navigator$.Route)]),
    markNeedsExitingDecision: dart.fnType(dart.void, []),
    markForPush: dart.fnType(dart.void, []),
    markForAdd: dart.fnType(dart.void, []),
    markForPop: dart.fnType(dart.void, [], [dart.dynamic]),
    markForComplete: dart.fnType(dart.void, [], [dart.dynamic]),
    markForRemove: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(navigator$._RouteEntry, () => ({
    __proto__: dart.getGetters(navigator$._RouteEntry.__proto__),
    restorationId: dart.nullable(core.String),
    hasPage: core.bool,
    willBePresent: core.bool,
    isPresent: core.bool,
    isPresentForRestoration: core.bool,
    suitableForAnnouncement: core.bool,
    suitableForTransitionAnimation: core.bool,
    isWaitingForEnteringDecision: core.bool,
    isWaitingForExitingDecision: core.bool,
    restorationEnabled: core.bool
  }));
  dart.setSetterSignature(navigator$._RouteEntry, () => ({
    __proto__: dart.getSetters(navigator$._RouteEntry.__proto__),
    restorationEnabled: core.bool
  }));
  dart.setLibraryUri(navigator$._RouteEntry, I[24]);
  dart.setFieldSignature(navigator$._RouteEntry, () => ({
    __proto__: dart.getFields(navigator$._RouteEntry.__proto__),
    route: dart.finalFieldType(navigator$.Route),
    restorationInformation: dart.finalFieldType(dart.nullable(navigator$._RestorationInformation)),
    currentState: dart.fieldType(navigator$._RouteLifecycle),
    lastAnnouncedPreviousRoute: dart.fieldType(dart.nullable(navigator$.Route)),
    lastAnnouncedPoppedNextRoute: dart.fieldType(navigator$.Route),
    lastAnnouncedNextRoute: dart.fieldType(dart.nullable(navigator$.Route)),
    doingPop: dart.fieldType(core.bool),
    [S$._reportRemovalToObserver]: dart.fieldType(core.bool),
    [S$._isWaitingForExitingDecision]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(navigator$._RouteEntry, {
    /*navigator$._RouteEntry.notAnnounced*/get notAnnounced() {
      return new navigator$._NotAnnounced.new();
    },
    set notAnnounced(_) {}
  }, false);
  navigator$._NavigatorObservation = class _NavigatorObservation extends core.Object {};
  (navigator$._NavigatorObservation.new = function(primaryRoute, secondaryRoute) {
    if (primaryRoute == null) dart.nullFailed(I[23], 3276, 10, "primaryRoute");
    this.primaryRoute = primaryRoute;
    this.secondaryRoute = secondaryRoute;
    ;
  }).prototype = navigator$._NavigatorObservation.prototype;
  dart.addTypeTests(navigator$._NavigatorObservation);
  dart.addTypeCaches(navigator$._NavigatorObservation);
  dart.setLibraryUri(navigator$._NavigatorObservation, I[24]);
  dart.setFieldSignature(navigator$._NavigatorObservation, () => ({
    __proto__: dart.getFields(navigator$._NavigatorObservation.__proto__),
    primaryRoute: dart.finalFieldType(navigator$.Route),
    secondaryRoute: dart.finalFieldType(dart.nullable(navigator$.Route))
  }));
  navigator$._NavigatorPushObservation = class _NavigatorPushObservation extends navigator$._NavigatorObservation {
    notify(observer) {
      if (observer == null) dart.nullFailed(I[23], 3292, 33, "observer");
      observer.didPush(this.primaryRoute, this.secondaryRoute);
    }
  };
  (navigator$._NavigatorPushObservation.new = function(primaryRoute, secondaryRoute) {
    if (primaryRoute == null) dart.nullFailed(I[23], 3287, 20, "primaryRoute");
    navigator$._NavigatorPushObservation.__proto__.new.call(this, primaryRoute, secondaryRoute);
    ;
  }).prototype = navigator$._NavigatorPushObservation.prototype;
  dart.addTypeTests(navigator$._NavigatorPushObservation);
  dart.addTypeCaches(navigator$._NavigatorPushObservation);
  dart.setMethodSignature(navigator$._NavigatorPushObservation, () => ({
    __proto__: dart.getMethods(navigator$._NavigatorPushObservation.__proto__),
    notify: dart.fnType(dart.void, [navigator$.NavigatorObserver])
  }));
  dart.setLibraryUri(navigator$._NavigatorPushObservation, I[24]);
  navigator$._NavigatorPopObservation = class _NavigatorPopObservation extends navigator$._NavigatorObservation {
    notify(observer) {
      if (observer == null) dart.nullFailed(I[23], 3304, 33, "observer");
      observer.didPop(this.primaryRoute, this.secondaryRoute);
    }
  };
  (navigator$._NavigatorPopObservation.new = function(primaryRoute, secondaryRoute) {
    if (primaryRoute == null) dart.nullFailed(I[23], 3299, 20, "primaryRoute");
    navigator$._NavigatorPopObservation.__proto__.new.call(this, primaryRoute, secondaryRoute);
    ;
  }).prototype = navigator$._NavigatorPopObservation.prototype;
  dart.addTypeTests(navigator$._NavigatorPopObservation);
  dart.addTypeCaches(navigator$._NavigatorPopObservation);
  dart.setMethodSignature(navigator$._NavigatorPopObservation, () => ({
    __proto__: dart.getMethods(navigator$._NavigatorPopObservation.__proto__),
    notify: dart.fnType(dart.void, [navigator$.NavigatorObserver])
  }));
  dart.setLibraryUri(navigator$._NavigatorPopObservation, I[24]);
  navigator$._NavigatorRemoveObservation = class _NavigatorRemoveObservation extends navigator$._NavigatorObservation {
    notify(observer) {
      if (observer == null) dart.nullFailed(I[23], 3316, 33, "observer");
      observer.didRemove(this.primaryRoute, this.secondaryRoute);
    }
  };
  (navigator$._NavigatorRemoveObservation.new = function(primaryRoute, secondaryRoute) {
    if (primaryRoute == null) dart.nullFailed(I[23], 3311, 20, "primaryRoute");
    navigator$._NavigatorRemoveObservation.__proto__.new.call(this, primaryRoute, secondaryRoute);
    ;
  }).prototype = navigator$._NavigatorRemoveObservation.prototype;
  dart.addTypeTests(navigator$._NavigatorRemoveObservation);
  dart.addTypeCaches(navigator$._NavigatorRemoveObservation);
  dart.setMethodSignature(navigator$._NavigatorRemoveObservation, () => ({
    __proto__: dart.getMethods(navigator$._NavigatorRemoveObservation.__proto__),
    notify: dart.fnType(dart.void, [navigator$.NavigatorObserver])
  }));
  dart.setLibraryUri(navigator$._NavigatorRemoveObservation, I[24]);
  navigator$._NavigatorReplaceObservation = class _NavigatorReplaceObservation extends navigator$._NavigatorObservation {
    notify(observer) {
      if (observer == null) dart.nullFailed(I[23], 3328, 33, "observer");
      observer.didReplace({newRoute: this.primaryRoute, oldRoute: this.secondaryRoute});
    }
  };
  (navigator$._NavigatorReplaceObservation.new = function(primaryRoute, secondaryRoute) {
    if (primaryRoute == null) dart.nullFailed(I[23], 3323, 20, "primaryRoute");
    navigator$._NavigatorReplaceObservation.__proto__.new.call(this, primaryRoute, secondaryRoute);
    ;
  }).prototype = navigator$._NavigatorReplaceObservation.prototype;
  dart.addTypeTests(navigator$._NavigatorReplaceObservation);
  dart.addTypeCaches(navigator$._NavigatorReplaceObservation);
  dart.setMethodSignature(navigator$._NavigatorReplaceObservation, () => ({
    __proto__: dart.getMethods(navigator$._NavigatorReplaceObservation.__proto__),
    notify: dart.fnType(dart.void, [navigator$.NavigatorObserver])
  }));
  dart.setLibraryUri(navigator$._NavigatorReplaceObservation, I[24]);
  const _is_TickerProviderStateMixin_default = Symbol('_is_TickerProviderStateMixin_default');
  ticker_provider.TickerProviderStateMixin$ = dart.generic(T => {
    class TickerProviderStateMixin extends framework.State$(T) {}
    TickerProviderStateMixin[dart.mixinOn] = State => class TickerProviderStateMixin extends State {
      createTicker(onTick) {
        if (onTick == null) dart.nullFailed(I[32], 200, 38, "onTick");
        this[S$0._tickers] == null ? this[S$0._tickers] = T$.LinkedHashSetOf_WidgetTicker().new() : null;
        let result = new ticker_provider._WidgetTicker.new(onTick, this, {debugLabel: "created by " + dart.str(this)});
        dart.nullCheck(this[S$0._tickers]).add(result);
        return result;
      }
      [S$0._removeTicker](ticker) {
        if (ticker == null) dart.nullFailed(I[32], 207, 36, "ticker");
        if (!(this[S$0._tickers] != null)) dart.assertFailed(null, I[32], 208, 12, "_tickers != null");
        if (!dart.test(dart.nullCheck(this[S$0._tickers]).contains(ticker))) dart.assertFailed(null, I[32], 209, 12, "_tickers!.contains(ticker)");
        dart.nullCheck(this[S$0._tickers]).remove(ticker);
      }
      dispose() {
        if (!dart.test(dart.fn(() => {
          if (this[S$0._tickers] != null) {
            for (let ticker of dart.nullCheck(this[S$0._tickers])) {
              if (dart.test(ticker.isActive)) {
                dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this) + " was disposed with an active Ticker."), new assertions.ErrorDescription.new(dart.str(this[S$.$runtimeType]) + " created a Ticker via its TickerProviderStateMixin, but at the time " + "dispose() was called on the mixin, that Ticker was still active. All Tickers must " + "be disposed before calling super.dispose()."), new assertions.ErrorHint.new("Tickers used by AnimationControllers " + "should be disposed by calling dispose() on the AnimationController itself. " + "Otherwise, the ticker will leak."), ticker.describeForError("The offending ticker was")])));
              }
            }
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[32], 215, 12, "() {\r\n      if (_tickers != null) {\r\n        for (final Ticker ticker in _tickers!) {\r\n          if (ticker.isActive) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('$this was disposed with an active Ticker.'),\r\n              ErrorDescription(\r\n                '$runtimeType created a Ticker via its TickerProviderStateMixin, but at the time '\r\n                'dispose() was called on the mixin, that Ticker was still active. All Tickers must '\r\n                'be disposed before calling super.dispose().',\r\n              ),\r\n              ErrorHint(\r\n                'Tickers used by AnimationControllers '\r\n                'should be disposed by calling dispose() on the AnimationController itself. '\r\n                'Otherwise, the ticker will leak.',\r\n              ),\r\n              ticker.describeForError('The offending ticker was'),\r\n            ]);\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }()");
        super.dispose();
      }
      didChangeDependencies() {
        let muted = !dart.test(ticker_provider.TickerMode.of(this.context));
        if (this[S$0._tickers] != null) {
          for (let ticker of dart.nullCheck(this[S$0._tickers])) {
            ticker.muted = muted;
          }
        }
        super.didChangeDependencies();
      }
      debugFillProperties(properties) {
        if (properties == null) dart.nullFailed(I[32], 253, 56, "properties");
        super.debugFillProperties(properties);
        properties.add(new (T$.DiagnosticsPropertyOfSetOfTicker()).new("tickers", this[S$0._tickers], {description: this[S$0._tickers] != null ? "tracking " + dart.str(dart.nullCheck(this[S$0._tickers])[S$.$length]) + " ticker" + (dart.nullCheck(this[S$0._tickers])[S$.$length] === 1 ? "" : "s") : null, defaultValue: null}));
      }
    };
    (TickerProviderStateMixin[dart.mixinNew] = function() {
      this[S$0._tickers] = null;
    }).prototype = TickerProviderStateMixin.prototype;
    dart.addTypeTests(TickerProviderStateMixin);
    TickerProviderStateMixin.prototype[_is_TickerProviderStateMixin_default] = true;
    dart.addTypeCaches(TickerProviderStateMixin);
    TickerProviderStateMixin[dart.implements] = () => [ticker.TickerProvider, framework.State$(T)];
    dart.setMethodSignature(TickerProviderStateMixin, () => ({
      __proto__: dart.getMethods(TickerProviderStateMixin.__proto__),
      createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])]),
      [S$0._removeTicker]: dart.fnType(dart.void, [ticker_provider._WidgetTicker])
    }));
    dart.setLibraryUri(TickerProviderStateMixin, I[33]);
    dart.setFieldSignature(TickerProviderStateMixin, () => ({
      __proto__: dart.getFields(TickerProviderStateMixin.__proto__),
      [S$0._tickers]: dart.fieldType(dart.nullable(core.Set$(ticker.Ticker)))
    }));
    return TickerProviderStateMixin;
  });
  ticker_provider.TickerProviderStateMixin = ticker_provider.TickerProviderStateMixin$();
  dart.addTypeTests(ticker_provider.TickerProviderStateMixin, _is_TickerProviderStateMixin_default);
  const _is_RestorationMixin_default = Symbol('_is_RestorationMixin_default');
  restoration$.RestorationMixin$ = dart.generic(S => {
    class RestorationMixin extends framework.State$(S) {}
    RestorationMixin[dart.mixinOn] = State => class RestorationMixin extends State {
      get [S$0._bucket$1]() {
        return this[S$0._bucket];
      }
      set [S$0._bucket$1](value) {
        this[S$0._bucket] = value;
      }
      get [S$0._properties$1]() {
        return this[S$0._properties];
      }
      set [S$0._properties$1](value) {
        super[S$0._properties$1] = value;
      }
      get [S$0._debugPropertiesWaitingForReregistration$1]() {
        return this[S$0._debugPropertiesWaitingForReregistration];
      }
      set [S$0._debugPropertiesWaitingForReregistration$1](value) {
        this[S$0._debugPropertiesWaitingForReregistration] = value;
      }
      get [S$0._firstRestorePending$1]() {
        return this[S$0._firstRestorePending];
      }
      set [S$0._firstRestorePending$1](value) {
        this[S$0._firstRestorePending] = value;
      }
      get [S$0._currentParent$1]() {
        return this[S$0._currentParent];
      }
      set [S$0._currentParent$1](value) {
        this[S$0._currentParent] = value;
      }
      get bucket() {
        return this[S$0._bucket$1];
      }
      didToggleBucket(oldBucket) {
        let t30;
        if (!((t30 = this[S$0._bucket$1], t30 == null ? null : t30.isReplacing) !== true)) dart.assertFailed(null, I[34], 810, 12, "_bucket?.isReplacing != true");
      }
      registerForRestoration(property, restorationId) {
        let t30;
        if (property == null) dart.nullFailed(I[34], 838, 59, "property");
        if (restorationId == null) dart.nullFailed(I[34], 838, 76, "restorationId");
        if (!(property != null)) dart.assertFailed(null, I[34], 839, 12, "property != null");
        if (!(restorationId != null)) dart.assertFailed(null, I[34], 840, 12, "restorationId != null");
        if (!(property[S$0._restorationId] == null || dart.test(this[S$0._debugDoingRestore]) && property[S$0._restorationId] == restorationId)) dart.assertFailed("Property is already registered under " + dart.str(property[S$0._restorationId]) + ".", I[34], 841, 12, "property._restorationId == null || (_debugDoingRestore && property._restorationId == restorationId)");
        if (!(dart.test(this[S$0._debugDoingRestore]) || !dart.test(this[S$0._properties$1][S$.$keys][S$.$map](T$.StringN(), dart.fn(r => {
          if (r == null) dart.nullFailed(I[34], 844, 85, "r");
          return r[S$0._restorationId];
        }, T$.RestorablePropertyOfObjectNToStringN()))[S$.$contains](restorationId)))) dart.assertFailed("\"" + dart.str(restorationId) + "\" is already registered to another property.", I[34], 844, 12, "_debugDoingRestore || !_properties.keys.map((RestorableProperty<Object?> r) => r._restorationId).contains(restorationId)");
        let hasSerializedValue = (t30 = this.bucket, t30 == null ? null : t30.contains(restorationId)) === true;
        let initialValue = hasSerializedValue ? property.fromPrimitives(dart.nullCheck(this.bucket).read(core.Object, restorationId)) : property.createDefaultValue();
        if (!dart.test(property.isRegistered)) {
          property[S$0._register](restorationId, this);
          const listener = () => {
            if (this.bucket == null) return;
            this[S$0._updateProperty](property);
          };
          dart.fn(listener, T$.VoidTovoid());
          property.addListener(listener);
          this[S$0._properties$1][S$.$_set](property, listener);
        }
        if (!(property[S$0._restorationId] == restorationId && dart.equals(property[S$0._owner$1], this) && dart.test(this[S$0._properties$1][S$.$containsKey](property)))) dart.assertFailed(null, I[34], 864, 7, "property._restorationId == restorationId &&\r\n      property._owner == this &&\r\n      _properties.containsKey(property)");
        property.initWithValue(initialValue);
        if (!hasSerializedValue && dart.test(property.enabled) && this.bucket != null) {
          this[S$0._updateProperty](property);
        }
        if (!dart.test(dart.fn(() => {
          let t30;
          t30 = this[S$0._debugPropertiesWaitingForReregistration$1];
          t30 == null ? null : t30[S$.$remove](property);
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[34], 874, 12, "() {\r\n      _debugPropertiesWaitingForReregistration?.remove(property);\r\n      return true;\r\n    }()");
      }
      unregisterFromRestoration(property) {
        let t30;
        if (property == null) dart.nullFailed(I[34], 891, 62, "property");
        if (!(property != null)) dart.assertFailed(null, I[34], 892, 12, "property != null");
        if (!dart.equals(property[S$0._owner$1], this)) dart.assertFailed(null, I[34], 893, 12, "property._owner == this");
        t30 = this[S$0._bucket$1];
        t30 == null ? null : t30.remove(T$.ObjectN(), dart.nullCheck(property[S$0._restorationId]));
        this[S$0._unregister](property);
      }
      didUpdateRestorationId() {
        let t30, t30$;
        if (this[S$0._currentParent$1] == null || (t30 = this[S$0._bucket$1], t30 == null ? null : t30.restorationId) == this.restorationId || dart.test(this.restorePending)) {
          return;
        }
        let oldBucket = this[S$0._bucket$1];
        if (!!dart.test(this.restorePending)) dart.assertFailed(null, I[34], 915, 12, "!restorePending");
        let didReplaceBucket = this[S$0._updateBucketIfNecessary]({parent: this[S$0._currentParent$1], restorePending: false});
        if (dart.test(didReplaceBucket)) {
          if (!!dart.equals(oldBucket, this[S$0._bucket$1])) dart.assertFailed(null, I[34], 918, 14, "oldBucket != _bucket");
          if (!(this[S$0._bucket$1] == null || oldBucket == null)) dart.assertFailed(null, I[34], 919, 14, "_bucket == null || oldBucket == null");
          t30$ = oldBucket;
          t30$ == null ? null : t30$.dispose();
        }
      }
      didUpdateWidget(oldWidget) {
        S.as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[34], 925, 26, "oldWidget");
        super.didUpdateWidget(oldWidget);
        this.didUpdateRestorationId();
      }
      get restorePending() {
        let t30;
        if (dart.test(this[S$0._firstRestorePending$1])) {
          return true;
        }
        if (this.restorationId == null) {
          return false;
        }
        let potentialNewParent = restoration$.RestorationScope.of(this.context);
        return !dart.equals(potentialNewParent, this[S$0._currentParent$1]) && (t30 = potentialNewParent, t30 == null ? null : t30.isReplacing) === true;
      }
      get [S$0._debugDoingRestore]() {
        return this[S$0._debugPropertiesWaitingForReregistration$1] != null;
      }
      didChangeDependencies() {
        let t30;
        super.didChangeDependencies();
        let oldBucket = this[S$0._bucket$1];
        let needsRestore = this.restorePending;
        this[S$0._currentParent$1] = restoration$.RestorationScope.of(this.context);
        let didReplaceBucket = this[S$0._updateBucketIfNecessary]({parent: this[S$0._currentParent$1], restorePending: needsRestore});
        if (dart.test(needsRestore)) {
          this[S$0._doRestore](oldBucket);
        }
        if (dart.test(didReplaceBucket)) {
          if (!!dart.equals(oldBucket, this[S$0._bucket$1])) dart.assertFailed(null, I[34], 973, 14, "oldBucket != _bucket");
          t30 = oldBucket;
          t30 == null ? null : t30.dispose();
        }
      }
      [S$0._doRestore](oldBucket) {
        if (!dart.test(dart.fn(() => {
          this[S$0._debugPropertiesWaitingForReregistration$1] = this[S$0._properties$1][S$.$keys][S$.$toList]();
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[34], 979, 12, "() {\r\n      _debugPropertiesWaitingForReregistration = _properties.keys.toList();\r\n      return true;\r\n    }()");
        this.restoreState(oldBucket, this[S$0._firstRestorePending$1]);
        this[S$0._firstRestorePending$1] = false;
        if (!dart.test(dart.fn(() => {
          if (dart.test(dart.nullCheck(this[S$0._debugPropertiesWaitingForReregistration$1])[S$.$isNotEmpty])) {
            dart.throw(new assertions.FlutterError.fromParts((() => {
              let t30 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Previously registered RestorableProperties must be re-registered in \"restoreState\"."), new assertions.ErrorDescription.new("The RestorableProperties with the following IDs were not re-registered to " + dart.str(this) + " when " + "\"restoreState\" was called:")]);
              t30[S$.$addAll](dart.nullCheck(this[S$0._debugPropertiesWaitingForReregistration$1])[S$.$map](diagnostics$.DiagnosticsNode, dart.fn(property => {
                if (property == null) dart.nullFailed(I[34], 997, 89, "property");
                return new assertions.ErrorDescription.new(" * " + dart.str(property[S$0._restorationId]));
              }, T$.RestorablePropertyOfObjectNToErrorDescription())));
              return t30;
            })()));
          }
          this[S$0._debugPropertiesWaitingForReregistration$1] = null;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[34], 987, 12, "() {\r\n      if (_debugPropertiesWaitingForReregistration!.isNotEmpty) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            'Previously registered RestorableProperties must be re-registered in \"restoreState\".',\r\n          ),\r\n          ErrorDescription(\r\n            'The RestorableProperties with the following IDs were not re-registered to $this when '\r\n                '\"restoreState\" was called:',\r\n          ),\r\n          ..._debugPropertiesWaitingForReregistration!.map((RestorableProperty<Object?> property) => ErrorDescription(\r\n            ' * ${property._restorationId}',\r\n          )),\r\n        ]);\r\n      }\r\n      _debugPropertiesWaitingForReregistration = null;\r\n      return true;\r\n    }()");
      }
      [S$0._updateBucketIfNecessary](opts) {
        let parent = opts && 'parent' in opts ? opts.parent : null;
        let restorePending = opts && 'restorePending' in opts ? opts.restorePending : null;
        if (restorePending == null) dart.nullFailed(I[34], 1011, 19, "restorePending");
        if (this.restorationId == null || parent == null) {
          let didReplace = this[S$0._setNewBucketIfNecessary]({newBucket: null, restorePending: restorePending});
          if (!(this[S$0._bucket$1] == null)) dart.assertFailed(null, I[34], 1015, 14, "_bucket == null");
          return didReplace;
        }
        if (!(this.restorationId != null)) dart.assertFailed(null, I[34], 1018, 12, "restorationId != null");
        if (!(parent != null)) dart.assertFailed(null, I[34], 1019, 12, "parent != null");
        if (dart.test(restorePending) || this[S$0._bucket$1] == null) {
          let newBucket = parent.claimChild(dart.nullCheck(this.restorationId), {debugOwner: this});
          if (!(newBucket != null)) dart.assertFailed(null, I[34], 1022, 14, "newBucket != null");
          let didReplace = this[S$0._setNewBucketIfNecessary]({newBucket: newBucket, restorePending: restorePending});
          if (!dart.equals(this[S$0._bucket$1], newBucket)) dart.assertFailed(null, I[34], 1024, 14, "_bucket == newBucket");
          return didReplace;
        }
        if (!(this[S$0._bucket$1] != null)) dart.assertFailed(null, I[34], 1028, 12, "_bucket != null");
        if (!!dart.test(restorePending)) dart.assertFailed(null, I[34], 1029, 12, "!restorePending");
        dart.nullCheck(this[S$0._bucket$1]).rename(dart.nullCheck(this.restorationId));
        parent.adoptChild(dart.nullCheck(this[S$0._bucket$1]));
        return false;
      }
      [S$0._setNewBucketIfNecessary](opts) {
        let newBucket = opts && 'newBucket' in opts ? opts.newBucket : null;
        let restorePending = opts && 'restorePending' in opts ? opts.restorePending : null;
        if (restorePending == null) dart.nullFailed(I[34], 1037, 87, "restorePending");
        if (dart.equals(newBucket, this[S$0._bucket$1])) {
          return false;
        }
        let oldBucket = this[S$0._bucket$1];
        this[S$0._bucket$1] = newBucket;
        if (!dart.test(restorePending)) {
          if (this[S$0._bucket$1] != null) {
            this[S$0._properties$1][S$.$keys][S$.$forEach](dart.bind(this, S$0._updateProperty));
          }
          this.didToggleBucket(oldBucket);
        }
        return true;
      }
      [S$0._updateProperty](property) {
        let t31, t31$;
        if (property == null) dart.nullFailed(I[34], 1053, 52, "property");
        if (dart.test(property.enabled)) {
          t31 = this[S$0._bucket$1];
          t31 == null ? null : t31.write(T$.ObjectN(), dart.nullCheck(property[S$0._restorationId]), property.toPrimitives());
        } else {
          t31$ = this[S$0._bucket$1];
          t31$ == null ? null : t31$.remove(core.Object, dart.nullCheck(property[S$0._restorationId]));
        }
      }
      [S$0._unregister](property) {
        if (property == null) dart.nullFailed(I[34], 1061, 48, "property");
        let listener = dart.nullCheck(this[S$0._properties$1][S$.$remove](property));
        if (!dart.test(dart.fn(() => {
          let t31;
          t31 = this[S$0._debugPropertiesWaitingForReregistration$1];
          t31 == null ? null : t31[S$.$remove](property);
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[34], 1063, 12, "() {\r\n      _debugPropertiesWaitingForReregistration?.remove(property);\r\n      return true;\r\n    }()");
        property.removeListener(listener);
        property[S$0._unregister]();
      }
      dispose() {
        let t31;
        this[S$0._properties$1][S$.$forEach](dart.fn((property, listener) => {
          if (property == null) dart.nullFailed(I[34], 1073, 54, "property");
          if (listener == null) dart.nullFailed(I[34], 1073, 77, "listener");
          if (!dart.test(property[S$0._disposed])) {
            property.removeListener(listener);
          }
        }, T$.RestorablePropertyOfObjectNAndFnTovoid()));
        t31 = this[S$0._bucket$1];
        t31 == null ? null : t31.dispose();
        this[S$0._bucket$1] = null;
        super.dispose();
      }
    };
    (RestorationMixin[dart.mixinNew] = function() {
      this[S$0._bucket] = null;
      this[S$0._properties] = new (T$.LinkedMapOfRestorablePropertyOfObjectN$VoidTovoid()).new();
      this[S$0._debugPropertiesWaitingForReregistration] = null;
      this[S$0._firstRestorePending] = true;
      this[S$0._currentParent] = null;
    }).prototype = RestorationMixin.prototype;
    dart.addTypeTests(RestorationMixin);
    RestorationMixin.prototype[_is_RestorationMixin_default] = true;
    dart.addTypeCaches(RestorationMixin);
    RestorationMixin[dart.implements] = () => [framework.State$(S)];
    dart.setMethodSignature(RestorationMixin, () => ({
      __proto__: dart.getMethods(RestorationMixin.__proto__),
      didToggleBucket: dart.fnType(dart.void, [dart.nullable(restoration.RestorationBucket)]),
      registerForRestoration: dart.fnType(dart.void, [restoration$.RestorableProperty$(dart.nullable(core.Object)), core.String]),
      unregisterFromRestoration: dart.fnType(dart.void, [restoration$.RestorableProperty$(dart.nullable(core.Object))]),
      didUpdateRestorationId: dart.fnType(dart.void, []),
      [S$0._doRestore]: dart.fnType(dart.void, [dart.nullable(restoration.RestorationBucket)]),
      [S$0._updateBucketIfNecessary]: dart.fnType(core.bool, [], {}, {parent: dart.nullable(restoration.RestorationBucket), restorePending: core.bool}),
      [S$0._setNewBucketIfNecessary]: dart.fnType(core.bool, [], {}, {newBucket: dart.nullable(restoration.RestorationBucket), restorePending: core.bool}),
      [S$0._updateProperty]: dart.fnType(dart.void, [restoration$.RestorableProperty$(dart.nullable(core.Object))]),
      [S$0._unregister]: dart.fnType(dart.void, [restoration$.RestorableProperty$(dart.nullable(core.Object))])
    }));
    dart.setGetterSignature(RestorationMixin, () => ({
      __proto__: dart.getGetters(RestorationMixin.__proto__),
      bucket: dart.nullable(restoration.RestorationBucket),
      restorePending: core.bool,
      [S$0._debugDoingRestore]: core.bool
    }));
    dart.setLibraryUri(RestorationMixin, I[35]);
    dart.setFieldSignature(RestorationMixin, () => ({
      __proto__: dart.getFields(RestorationMixin.__proto__),
      [S$0._bucket$1]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
      [S$0._properties$1]: dart.finalFieldType(core.Map$(restoration$.RestorableProperty$(dart.nullable(core.Object)), dart.fnType(dart.void, []))),
      [S$0._debugPropertiesWaitingForReregistration$1]: dart.fieldType(dart.nullable(core.List$(restoration$.RestorableProperty$(dart.nullable(core.Object))))),
      [S$0._firstRestorePending$1]: dart.fieldType(core.bool),
      [S$0._currentParent$1]: dart.fieldType(dart.nullable(restoration.RestorationBucket))
    }));
    return RestorationMixin;
  });
  restoration$.RestorationMixin = restoration$.RestorationMixin$();
  dart.addTypeTests(restoration$.RestorationMixin, _is_RestorationMixin_default);
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(navigator$.Navigator) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(navigator$.Navigator)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(navigator$.Navigator));
  const State_RestorationMixin$36 = class State_RestorationMixin extends State_TickerProviderStateMixin$36 {};
  (State_RestorationMixin$36.new = function() {
    restoration$.RestorationMixin$(navigator$.Navigator)[dart.mixinNew].call(this);
    State_RestorationMixin$36.__proto__.new.call(this);
  }).prototype = State_RestorationMixin$36.prototype;
  dart.applyMixin(State_RestorationMixin$36, restoration$.RestorationMixin$(navigator$.Navigator));
  navigator$.NavigatorState = class NavigatorState extends State_RestorationMixin$36 {
    get focusScopeNode() {
      return this[S$.focusScopeNode];
    }
    set focusScopeNode(value) {
      super.focusScopeNode = value;
    }
    get userGestureInProgressNotifier() {
      return this[S$.userGestureInProgressNotifier];
    }
    set userGestureInProgressNotifier(value) {
      super.userGestureInProgressNotifier = value;
    }
    get [S$._overlayKey]() {
      let t28;
      return dart.test(this[S$.__NavigatorState__overlayKey_isSet]) ? (t28 = this[S$.__NavigatorState__overlayKey], t28) : dart.throw(new _internal.LateError.fieldNI("_overlayKey"));
    }
    set [S$._overlayKey](t28) {
      if (t28 == null) dart.nullFailed(I[23], 3337, 32, "null");
      this[S$.__NavigatorState__overlayKey_isSet] = true;
      this[S$.__NavigatorState__overlayKey] = t28;
    }
    get [S$._effectiveObservers]() {
      let t29;
      return dart.test(this[S$.__NavigatorState__effectiveObservers_isSet]) ? (t29 = this[S$.__NavigatorState__effectiveObservers], t29) : dart.throw(new _internal.LateError.fieldNI("_effectiveObservers"));
    }
    set [S$._effectiveObservers](t29) {
      if (t29 == null) dart.nullFailed(I[23], 3350, 32, "null");
      this[S$.__NavigatorState__effectiveObservers_isSet] = true;
      this[S$.__NavigatorState__effectiveObservers] = t29;
    }
    initState() {
      let t30, t30$;
      super.initState();
      if (!dart.test(dart.fn(() => {
        if (!dart.equals(this.widget.pages, C[298] || CT.C298)) {
          if (dart.test(this.widget.pages[S$.$isEmpty])) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("The Navigator.pages must not be empty to use the " + "Navigator.pages API"), library: "widget library", stack: core.StackTrace.current}));
          } else if (this.widget.onPopPage == null) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("The Navigator.onPopPage must be provided to use the " + "Navigator.pages API"), library: "widget library", stack: core.StackTrace.current}));
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3355, 12, "(){\r\n      if (widget.pages != const <Page<dynamic>>[]) {\r\n        // This navigator uses page API.\r\n        if (widget.pages.isEmpty) {\r\n          FlutterError.reportError(\r\n            FlutterErrorDetails(\r\n              exception: FlutterError(\r\n                'The Navigator.pages must not be empty to use the '\r\n                'Navigator.pages API',\r\n              ),\r\n              library: 'widget library',\r\n              stack: StackTrace.current,\r\n            ),\r\n          );\r\n        } else if (widget.onPopPage == null) {\r\n          FlutterError.reportError(\r\n            FlutterErrorDetails(\r\n              exception: FlutterError(\r\n                'The Navigator.onPopPage must be provided to use the '\r\n                'Navigator.pages API',\r\n              ),\r\n              library: 'widget library',\r\n              stack: StackTrace.current,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      for (let observer of this.widget.observers) {
        if (!(observer.navigator == null)) dart.assertFailed(null, I[23], 3385, 14, "observer.navigator == null");
        observer[S$._navigator] = this;
      }
      this[S$._effectiveObservers] = this.widget.observers;
      let heroControllerScope = T$.HeroControllerScopeN().as((t30 = this.context.getElementForInheritedWidgetOfExactType(navigator$.HeroControllerScope), t30 == null ? null : t30.widget));
      this[S$._updateHeroController]((t30$ = heroControllerScope, t30$ == null ? null : t30$.controller));
    }
    get [S$._nextPagelessRestorationScopeId]() {
      let t31, t30;
      t30 = this[S$._rawNextPagelessRestorationScopeId];
      t31 = t30.value;
      t30.value = dart.notNull(t31) + 1;
      return t31;
    }
    restoreState(oldBucket, initialRestore) {
      let t30, t30$, t31, t30$0;
      if (initialRestore == null) dart.nullFailed(I[23], 3404, 56, "initialRestore");
      this.registerForRestoration(this[S$._rawNextPagelessRestorationScopeId], "id");
      this.registerForRestoration(this[S$._serializableHistory], "history");
      while (dart.test(this[S$._history][S$.$isNotEmpty])) {
        this[S$._history][S$.$removeLast]().dispose();
      }
      if (!dart.test(this[S$._history][S$.$isEmpty])) dart.assertFailed(null, I[23], 3412, 12, "_history.isEmpty");
      this[S$._overlayKey] = T$.GlobalKeyOfOverlayState().new();
      this[S$._history][S$.$addAll](this[S$._serializableHistory].restoreEntriesForPage(null, this));
      for (let page of this.widget.pages) {
        let entry = new navigator$._RouteEntry.new(page.createRoute(this.context), {initialState: navigator$._RouteLifecycle.add});
        if (!dart.equals(entry.route.settings, page)) dart.assertFailed("The settings getter of a page-based Route must return a Page object. " + "Please set the settings to the Page in the Page.createRoute method.", I[23], 3423, 9, "entry.route.settings == page");
        this[S$._history][S$.$add](entry);
        this[S$._history][S$.$addAll](this[S$._serializableHistory].restoreEntriesForPage(entry, this));
      }
      if (!dart.test(this[S$._serializableHistory].hasData)) {
        let initialRoute = this.widget.initialRoute;
        if (dart.test(this.widget.pages[S$.$isEmpty])) {
          initialRoute = (t30 = initialRoute, t30 == null ? "/" : t30);
        }
        if (initialRoute != null) {
          this[S$._history][S$.$addAll]((t30$0 = this.widget, t31 = (t30$ = this.widget.initialRoute, t30$ == null ? "/" : t30$), t30$0.onGenerateInitialRoutes(this, t31))[S$.$map](navigator$._RouteEntry, dart.fn(route => {
            if (route == null) dart.nullFailed(I[23], 3442, 33, "route");
            return new navigator$._RouteEntry.new(route, {initialState: navigator$._RouteLifecycle.add, restorationInformation: route.settings.name != null ? new navigator$._NamedRestorationInformation.new({name: dart.nullCheck(route.settings.name), arguments: null, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}) : null});
          }, T$.RouteTo_RouteEntry())));
        }
      }
      if (!dart.test(this[S$._history][S$.$isNotEmpty])) dart.assertFailed("All routes returned by onGenerateInitialRoutes are not restorable. " + "Please make sure that all routes returned by onGenerateInitialRoutes " + "have their RouteSettings defined with names that are defined in the " + "app's routes table.", I[23], 3459, 7, "_history.isNotEmpty");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 3465, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3466, 12, "() { _debugLocked = true; return true; }()");
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3468, 12, "() { _debugLocked = false; return true; }()");
    }
    didToggleBucket(oldBucket) {
      super.didToggleBucket(oldBucket);
      if (this.bucket != null) {
        this[S$._serializableHistory].update(this[S$._history]);
      } else {
        this[S$._serializableHistory].clear();
      }
    }
    get restorationId() {
      return this.widget.restorationScopeId;
    }
    didChangeDependencies() {
      super.didChangeDependencies();
      this[S$._updateHeroController](navigator$.HeroControllerScope.of(this.context));
      for (let entry of this[S$._history])
        entry.route.changedExternalState();
    }
    [S$._updateHeroController](newHeroController) {
      let t30, t30$;
      if (!dart.equals(this[S$._heroControllerFromScope], newHeroController)) {
        if (newHeroController != null) {
          if (!dart.test(dart.fn(() => {
            if (newHeroController.navigator != null) {
              let previousOwner = dart.nullCheck(newHeroController.navigator);
              dart.nullCheck(binding$0.ServicesBinding.instance).addPostFrameCallback(dart.fn(timestamp => {
                if (timestamp == null) dart.nullFailed(I[23], 3501, 70, "timestamp");
                if (dart.equals(this[S$._heroControllerFromScope], newHeroController)) {
                  let hasHeroControllerOwnerShip = dart.equals(dart.nullCheck(this[S$._heroControllerFromScope])[S$._navigator], this);
                  if (!hasHeroControllerOwnerShip || dart.equals(previousOwner[S$._heroControllerFromScope], newHeroController)) {
                    let otherOwner = hasHeroControllerOwnerShip ? previousOwner : dart.nullCheck(dart.nullCheck(this[S$._heroControllerFromScope])[S$._navigator]);
                    assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("A HeroController can not be shared by multiple Navigators. " + "The Navigators that share the same HeroController are:\n" + "- " + dart.str(this) + "\n" + "- " + dart.str(otherOwner) + "\n" + "Please create a HeroControllerScope for each Navigator or " + "use a HeroControllerScope.none to prevent subtree from " + "receiving a HeroController."), library: "widget library", stack: core.StackTrace.current}));
                  }
                }
              }, T$.DurationTovoid()));
            }
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3495, 16, "() {\r\n          // It is possible that the hero controller subscribes to an existing\r\n          // navigator. We are fine as long as that navigator gives up the hero\r\n          // controller at the end of the build.\r\n          if (newHeroController.navigator != null) {\r\n            final NavigatorState previousOwner = newHeroController.navigator!;\r\n            ServicesBinding.instance!.addPostFrameCallback((Duration timestamp) {\r\n              // We only check if this navigator still owns the hero controller.\r\n              if (_heroControllerFromScope == newHeroController) {\r\n                final bool hasHeroControllerOwnerShip = _heroControllerFromScope!._navigator == this;\r\n                if (!hasHeroControllerOwnerShip ||\r\n                    previousOwner._heroControllerFromScope == newHeroController) {\r\n                  final NavigatorState otherOwner = hasHeroControllerOwnerShip\r\n                    ? previousOwner\r\n                    : _heroControllerFromScope!._navigator!;\r\n                  FlutterError.reportError(\r\n                    FlutterErrorDetails(\r\n                      exception: FlutterError(\r\n                        'A HeroController can not be shared by multiple Navigators. '\r\n                        'The Navigators that share the same HeroController are:\\n'\r\n                        '- $this\\n'\r\n                        '- $otherOwner\\n'\r\n                        'Please create a HeroControllerScope for each Navigator or '\r\n                        'use a HeroControllerScope.none to prevent subtree from '\r\n                        'receiving a HeroController.',\r\n                      ),\r\n                      library: 'widget library',\r\n                      stack: StackTrace.current,\r\n                    ),\r\n                  );\r\n                }\r\n              }\r\n            });\r\n          }\r\n          return true;\r\n        }()");
          newHeroController[S$._navigator] = this;
        }
        if (dart.equals((t30 = this[S$._heroControllerFromScope], t30 == null ? null : t30[S$._navigator]), this)) {
          t30$ = this[S$._heroControllerFromScope];
          t30$ == null ? null : t30$[S$._navigator] = null;
        }
        this[S$._heroControllerFromScope] = newHeroController;
        this[S$._updateEffectiveObservers]();
      }
    }
    [S$._updateEffectiveObservers]() {
      if (this[S$._heroControllerFromScope] != null)
        this[S$._effectiveObservers] = this.widget.observers[S$.$plus](T$.JSArrayOfNavigatorObserver().of([dart.nullCheck(this[S$._heroControllerFromScope])]));
      else
        this[S$._effectiveObservers] = this.widget.observers;
    }
    didUpdateWidget(oldWidget) {
      navigator$.Navigator.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[23], 3550, 34, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (!dart.test(dart.fn(() => {
        if (!dart.equals(this.widget.pages, C[298] || CT.C298)) {
          if (dart.test(this.widget.pages[S$.$isEmpty])) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("The Navigator.pages must not be empty to use the " + "Navigator.pages API"), library: "widget library", stack: core.StackTrace.current}));
          } else if (this.widget.onPopPage == null) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("The Navigator.onPopPage must be provided to use the " + "Navigator.pages API"), library: "widget library", stack: core.StackTrace.current}));
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3552, 12, "(){\r\n      if (widget.pages != const <Page<dynamic>>[]) {\r\n        // This navigator uses page API.\r\n        if (widget.pages.isEmpty) {\r\n          FlutterError.reportError(\r\n            FlutterErrorDetails(\r\n              exception: FlutterError(\r\n                'The Navigator.pages must not be empty to use the '\r\n                'Navigator.pages API',\r\n              ),\r\n              library: 'widget library',\r\n              stack: StackTrace.current,\r\n            ),\r\n          );\r\n        } else if (widget.onPopPage == null) {\r\n          FlutterError.reportError(\r\n            FlutterErrorDetails(\r\n              exception: FlutterError(\r\n                'The Navigator.onPopPage must be provided to use the '\r\n                'Navigator.pages API',\r\n              ),\r\n              library: 'widget library',\r\n              stack: StackTrace.current,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      if (!dart.equals(oldWidget.observers, this.widget.observers)) {
        for (let observer of oldWidget.observers)
          observer[S$._navigator] = null;
        for (let observer of this.widget.observers) {
          if (!(observer.navigator == null)) dart.assertFailed(null, I[23], 3585, 16, "observer.navigator == null");
          observer[S$._navigator] = this;
        }
        this[S$._updateEffectiveObservers]();
      }
      if (!dart.equals(oldWidget.pages, this.widget.pages) && !dart.test(this.restorePending)) {
        if (!dart.test(dart.fn(() => {
          if (dart.test(this.widget.pages[S$.$isEmpty])) {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("The Navigator.pages must not be empty to use the " + "Navigator.pages API"), library: "widget library", stack: core.StackTrace.current}));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3591, 14, "(){\r\n        if (widget.pages.isEmpty) {\r\n          FlutterError.reportError(\r\n            FlutterErrorDetails(\r\n              exception: FlutterError(\r\n                'The Navigator.pages must not be empty to use the '\r\n                'Navigator.pages API',\r\n              ),\r\n              library: 'widget library',\r\n              stack: StackTrace.current,\r\n            ),\r\n          );\r\n        }\r\n        return true;\r\n      }()");
        this[S$._updatePages]();
      }
      for (let entry of this[S$._history])
        entry.route.changedExternalState();
    }
    [S$._debugCheckDuplicatedPageKeys]() {
      if (!dart.test(dart.fn(() => {
        let keyReservation = T$.LinkedHashSetOfKey().new();
        for (let page of this.widget.pages) {
          let key = page.key;
          if (key != null) {
            if (!!dart.test(keyReservation.contains(key))) dart.assertFailed(null, I[23], 3619, 18, "!keyReservation.contains(key)");
            keyReservation.add(key);
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3614, 12, "(){\r\n      final Set<Key> keyReservation = <Key>{};\r\n      for (final Page<dynamic> page in widget.pages) {\r\n        final LocalKey? key = page.key;\r\n        if (key != null) {\r\n          assert(!keyReservation.contains(key));\r\n          keyReservation.add(key);\r\n        }\r\n      }\r\n      return true;\r\n    }()");
    }
    dispose() {
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 3629, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3630, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      this[S$._updateHeroController](null);
      for (let observer of this[S$._effectiveObservers])
        observer[S$._navigator] = null;
      this.focusScopeNode.dispose();
      for (let entry of this[S$._history])
        entry.dispose();
      super.dispose();
      if (!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 3642, 12, "_debugLocked");
    }
    get overlay() {
      return this[S$._overlayKey].currentState;
    }
    get [S$._allRouteOverlayEntries]() {
      return new (T$.SyncIterableOfOverlayEntry()).new((function* _allRouteOverlayEntries() {
        for (let entry of this[S$._history])
          yield* entry.route.overlayEntries;
      }).bind(this));
    }
    [S$._updatePages]() {
      if (!dart.test(dart.fn(() => {
        if (!!dart.test(this[S$._debugUpdatingPage])) dart.assertFailed(null, I[23], 3658, 14, "!_debugUpdatingPage");
        this[S$._debugCheckDuplicatedPageKeys]();
        this[S$._debugUpdatingPage] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3657, 12, "() {\r\n      assert(!_debugUpdatingPage);\r\n      _debugCheckDuplicatedPageKeys();\r\n      _debugUpdatingPage = true;\r\n      return true;\r\n    }()");
      let needsExplicitDecision = false;
      let newPagesBottom = 0;
      let oldEntriesBottom = 0;
      let newPagesTop = dart.notNull(this.widget.pages[S$.$length]) - 1;
      let oldEntriesTop = dart.notNull(this[S$._history][S$.$length]) - 1;
      let newHistory = T$.JSArrayOf_RouteEntry().of([]);
      let pageRouteToPagelessRoutes = new (T$.LinkedMapOf_RouteEntryN$ListOf_RouteEntry()).new();
      let previousOldPageRouteEntry = null;
      while (oldEntriesBottom <= oldEntriesTop) {
        let oldEntry = this[S$._history][S$.$_get](oldEntriesBottom);
        if (!(oldEntry != null && oldEntry.currentState != navigator$._RouteLifecycle.disposed)) dart.assertFailed(null, I[23], 3715, 14, "oldEntry != null && oldEntry.currentState != _RouteLifecycle.disposed");
        if (!dart.test(oldEntry.hasPage)) {
          let pagelessRoutes = pageRouteToPagelessRoutes[S$.$putIfAbsent](previousOldPageRouteEntry, dart.fn(() => T$.JSArrayOf_RouteEntry().of([]), T$.VoidToListOf_RouteEntry()));
          pagelessRoutes[S$.$add](oldEntry);
          oldEntriesBottom = oldEntriesBottom + 1;
          continue;
        }
        if (newPagesBottom > newPagesTop) break;
        let newPage = this.widget.pages[S$.$_get](newPagesBottom);
        if (!dart.test(oldEntry.canUpdateFrom(newPage))) break;
        previousOldPageRouteEntry = oldEntry;
        oldEntry.route[S$._updateSettings](newPage);
        newHistory[S$.$add](oldEntry);
        newPagesBottom = newPagesBottom + 1;
        oldEntriesBottom = oldEntriesBottom + 1;
      }
      let pagelessRoutesToSkip = 0;
      while (oldEntriesBottom <= oldEntriesTop && newPagesBottom <= newPagesTop) {
        let oldEntry = this[S$._history][S$.$_get](oldEntriesTop);
        if (!(oldEntry != null && oldEntry.currentState != navigator$._RouteLifecycle.disposed)) dart.assertFailed(null, I[23], 3744, 14, "oldEntry != null && oldEntry.currentState != _RouteLifecycle.disposed");
        if (!dart.test(oldEntry.hasPage)) {
          pagelessRoutesToSkip = pagelessRoutesToSkip + 1;
          oldEntriesTop = oldEntriesTop - 1;
          continue;
        }
        let newPage = this.widget.pages[S$.$_get](newPagesTop);
        if (!dart.test(oldEntry.canUpdateFrom(newPage))) break;
        pagelessRoutesToSkip = 0;
        oldEntriesTop = oldEntriesTop - 1;
        newPagesTop = newPagesTop - 1;
      }
      oldEntriesTop = oldEntriesTop + pagelessRoutesToSkip;
      let oldEntriesBottomToScan = oldEntriesBottom;
      let pageKeyToOldEntry = new (T$.LinkedMapOfLocalKey$_RouteEntry()).new();
      while (oldEntriesBottomToScan <= oldEntriesTop) {
        let oldEntry = this[S$._history][S$.$_get](oldEntriesBottomToScan);
        oldEntriesBottomToScan = oldEntriesBottomToScan + 1;
        if (!(oldEntry != null && oldEntry.currentState != navigator$._RouteLifecycle.disposed)) dart.assertFailed(null, I[23], 3770, 9, "oldEntry != null &&\r\n        oldEntry.currentState != _RouteLifecycle.disposed");
        if (!dart.test(oldEntry.hasPage)) continue;
        if (!dart.test(oldEntry.hasPage)) dart.assertFailed(null, I[23], 3778, 14, "oldEntry.hasPage");
        let page = navigator$.Page.as(oldEntry.route.settings);
        if (page.key == null) continue;
        if (!!dart.test(pageKeyToOldEntry[S$.$containsKey](page.key))) dart.assertFailed(null, I[23], 3784, 14, "!pageKeyToOldEntry.containsKey(page.key)");
        pageKeyToOldEntry[S$.$_set](dart.nullCheck(page.key), oldEntry);
      }
      while (newPagesBottom <= newPagesTop) {
        let nextPage = this.widget.pages[S$.$_get](newPagesBottom);
        newPagesBottom = newPagesBottom + 1;
        if (nextPage.key == null || !dart.test(pageKeyToOldEntry[S$.$containsKey](nextPage.key)) || !dart.test(dart.nullCheck(pageKeyToOldEntry[S$.$_get](nextPage.key)).canUpdateFrom(nextPage))) {
          let newEntry = new navigator$._RouteEntry.new(nextPage.createRoute(this.context), {initialState: navigator$._RouteLifecycle.staging});
          needsExplicitDecision = true;
          if (!dart.equals(newEntry.route.settings, nextPage)) dart.assertFailed("The settings getter of a page-based Route must return a Page object. " + "Please set the settings to the Page in the Page.createRoute method.", I[23], 3806, 11, "newEntry.route.settings == nextPage");
          newHistory[S$.$add](newEntry);
        } else {
          let matchingEntry = dart.nullCheck(pageKeyToOldEntry[S$.$remove](nextPage.key));
          if (!dart.test(matchingEntry.canUpdateFrom(nextPage))) dart.assertFailed(null, I[23], 3814, 16, "matchingEntry.canUpdateFrom(nextPage)");
          matchingEntry.route[S$._updateSettings](nextPage);
          newHistory[S$.$add](matchingEntry);
        }
      }
      let locationToExitingPageRoute = new (T$.LinkedMapOfRouteTransitionRecordN$RouteTransitionRecord()).new();
      while (oldEntriesBottom <= oldEntriesTop) {
        let potentialEntryToRemove = this[S$._history][S$.$_get](oldEntriesBottom);
        oldEntriesBottom = oldEntriesBottom + 1;
        if (!dart.test(potentialEntryToRemove.hasPage)) {
          if (!(previousOldPageRouteEntry != null)) dart.assertFailed(null, I[23], 3827, 16, "previousOldPageRouteEntry != null");
          let pagelessRoutes = pageRouteToPagelessRoutes[S$.$putIfAbsent](previousOldPageRouteEntry, dart.fn(() => T$.JSArrayOf_RouteEntry().of([]), T$.VoidToListOf_RouteEntry()));
          pagelessRoutes[S$.$add](potentialEntryToRemove);
          if (dart.test(dart.nullCheck(previousOldPageRouteEntry).isWaitingForExitingDecision) && dart.test(potentialEntryToRemove.isPresent)) potentialEntryToRemove.markNeedsExitingDecision();
          continue;
        }
        let potentialPageToRemove = navigator$.Page.as(potentialEntryToRemove.route.settings);
        if (potentialPageToRemove.key == null || dart.test(pageKeyToOldEntry[S$.$containsKey](potentialPageToRemove.key))) {
          locationToExitingPageRoute[S$.$_set](previousOldPageRouteEntry, potentialEntryToRemove);
          if (dart.test(potentialEntryToRemove.isPresent)) potentialEntryToRemove.markNeedsExitingDecision();
        }
        previousOldPageRouteEntry = potentialEntryToRemove;
      }
      if (!(oldEntriesBottom === oldEntriesTop + 1)) dart.assertFailed(null, I[23], 3855, 12, "oldEntriesBottom == oldEntriesTop + 1");
      if (!(newPagesBottom === newPagesTop + 1)) dart.assertFailed(null, I[23], 3856, 12, "newPagesBottom == newPagesTop + 1");
      newPagesTop = dart.notNull(this.widget.pages[S$.$length]) - 1;
      oldEntriesTop = dart.notNull(this[S$._history][S$.$length]) - 1;
      if (!dart.test(dart.fn(() => {
        if (oldEntriesBottom <= oldEntriesTop)
          return newPagesBottom <= newPagesTop && dart.test(this[S$._history][S$.$_get](oldEntriesBottom).hasPage) && dart.test(this[S$._history][S$.$_get](oldEntriesBottom).canUpdateFrom(this.widget.pages[S$.$_get](newPagesBottom)));
        else
          return newPagesBottom > newPagesTop;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3861, 12, "() {\r\n      if (oldEntriesBottom <= oldEntriesTop)\r\n        return newPagesBottom <= newPagesTop &&\r\n          _history[oldEntriesBottom].hasPage &&\r\n          _history[oldEntriesBottom].canUpdateFrom(widget.pages[newPagesBottom]);\r\n      else\r\n        return newPagesBottom > newPagesTop;\r\n    }()");
      while (oldEntriesBottom <= oldEntriesTop && newPagesBottom <= newPagesTop) {
        let oldEntry = this[S$._history][S$.$_get](oldEntriesBottom);
        if (!(oldEntry != null && oldEntry.currentState != navigator$._RouteLifecycle.disposed)) dart.assertFailed(null, I[23], 3873, 14, "oldEntry != null && oldEntry.currentState != _RouteLifecycle.disposed");
        if (!dart.test(oldEntry.hasPage)) {
          if (!(previousOldPageRouteEntry != null)) dart.assertFailed(null, I[23], 3875, 16, "previousOldPageRouteEntry != null");
          let pagelessRoutes = pageRouteToPagelessRoutes[S$.$putIfAbsent](previousOldPageRouteEntry, dart.fn(() => T$.JSArrayOf_RouteEntry().of([]), T$.VoidToListOf_RouteEntry()));
          pagelessRoutes[S$.$add](oldEntry);
          continue;
        }
        previousOldPageRouteEntry = oldEntry;
        let newPage = this.widget.pages[S$.$_get](newPagesBottom);
        if (!dart.test(oldEntry.canUpdateFrom(newPage))) dart.assertFailed(null, I[23], 3886, 14, "oldEntry.canUpdateFrom(newPage)");
        oldEntry.route[S$._updateSettings](newPage);
        newHistory[S$.$add](oldEntry);
        oldEntriesBottom = oldEntriesBottom + 1;
        newPagesBottom = newPagesBottom + 1;
      }
      needsExplicitDecision = needsExplicitDecision || dart.test(locationToExitingPageRoute[S$.$isNotEmpty]);
      let results = newHistory;
      if (needsExplicitDecision) {
        results = this.widget.transitionDelegate[S$._transition]({newPageRouteHistory: newHistory, locationToExitingPageRoute: locationToExitingPageRoute, pageRouteToPagelessRoutes: pageRouteToPagelessRoutes})[S$.$cast](navigator$._RouteEntry);
      }
      this[S$._history] = T$.JSArrayOf_RouteEntry().of([]);
      if (dart.test(pageRouteToPagelessRoutes[S$.$containsKey](null))) {
        this[S$._history][S$.$addAll](dart.nullCheck(pageRouteToPagelessRoutes[S$.$_get](null)));
      }
      for (let result of results) {
        this[S$._history][S$.$add](result);
        if (dart.test(pageRouteToPagelessRoutes[S$.$containsKey](result))) {
          this[S$._history][S$.$addAll](dart.nullCheck(pageRouteToPagelessRoutes[S$.$_get](result)));
        }
      }
      if (!dart.test(dart.fn(() => {
        this[S$._debugUpdatingPage] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3914, 12, "() {_debugUpdatingPage = false; return true;}()");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3915, 12, "() { _debugLocked = true; return true; }()");
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 3917, 12, "() { _debugLocked = false; return true; }()");
    }
    [S$._flushHistoryUpdates](opts) {
      let t30, t30$, t30$0, t30$1, t30$2, t30$3, t30$4;
      let rearrangeOverlay = opts && 'rearrangeOverlay' in opts ? opts.rearrangeOverlay : true;
      if (rearrangeOverlay == null) dart.nullFailed(I[23], 3920, 35, "rearrangeOverlay");
      if (!(dart.test(this[S$._debugLocked]) && !dart.test(this[S$._debugUpdatingPage]))) dart.assertFailed(null, I[23], 3921, 12, "_debugLocked && !_debugUpdatingPage");
      let index = dart.notNull(this[S$._history][S$.$length]) - 1;
      let next = null;
      let entry = this[S$._history][S$.$_get](index);
      let previous = index > 0 ? this[S$._history][S$.$_get](index - 1) : null;
      let canRemoveOrAdd = false;
      let poppedRoute = null;
      let seenTopActiveRoute = false;
      let toBeDisposed = T$.JSArrayOf_RouteEntry().of([]);
      while (index >= 0) {
        switch (dart.nullCheck(entry).currentState) {
          case C[303] || CT.C303:
          {
            if (!dart.test(rearrangeOverlay)) dart.assertFailed(null, I[23], 3937, 18, "rearrangeOverlay");
            entry.handleAdd({navigator: this, previousPresent: (t30 = this[S$._getRouteBefore](index - 1, C[317] || CT.C317), t30 == null ? null : t30.route)});
            if (!(entry.currentState == navigator$._RouteLifecycle.adding)) dart.assertFailed(null, I[23], 3942, 18, "entry.currentState == _RouteLifecycle.adding");
            continue;
          }
          case C[304] || CT.C304:
          {
            if (canRemoveOrAdd || next == null) {
              entry.didAdd({navigator: this, isNewFirst: next == null});
              if (!(entry.currentState == navigator$._RouteLifecycle.idle)) dart.assertFailed(null, I[23], 3950, 20, "entry.currentState == _RouteLifecycle.idle");
              continue;
            }
            break;
          }
          case C[305] || CT.C305:
          case C[306] || CT.C306:
          case C[308] || CT.C308:
          {
            if (!dart.test(rearrangeOverlay)) dart.assertFailed(null, I[23], 3957, 18, "rearrangeOverlay");
            entry.handlePush({navigator: this, previous: (t30$ = previous, t30$ == null ? null : t30$.route), previousPresent: (t30$0 = this[S$._getRouteBefore](index - 1, C[317] || CT.C317), t30$0 == null ? null : t30$0.route), isNewFirst: next == null});
            if (!(entry.currentState != navigator$._RouteLifecycle.push)) dart.assertFailed(null, I[23], 3964, 18, "entry.currentState != _RouteLifecycle.push");
            if (!(entry.currentState != navigator$._RouteLifecycle.pushReplace)) dart.assertFailed(null, I[23], 3965, 18, "entry.currentState != _RouteLifecycle.pushReplace");
            if (!(entry.currentState != navigator$._RouteLifecycle.replace)) dart.assertFailed(null, I[23], 3966, 18, "entry.currentState != _RouteLifecycle.replace");
            if (entry.currentState == navigator$._RouteLifecycle.idle) {
              continue;
            }
            break;
          }
          case C[307] || CT.C307:
          {
            if (!seenTopActiveRoute && poppedRoute != null) entry.handleDidPopNext(poppedRoute);
            seenTopActiveRoute = true;
            break;
          }
          case C[309] || CT.C309:
          {
            if (!seenTopActiveRoute && poppedRoute != null) entry.handleDidPopNext(poppedRoute);
            seenTopActiveRoute = true;
            canRemoveOrAdd = true;
            break;
          }
          case C[310] || CT.C310:
          {
            if (!seenTopActiveRoute) {
              if (poppedRoute != null) entry.handleDidPopNext(poppedRoute);
              poppedRoute = entry.route;
            }
            entry.handlePop({navigator: this, previousPresent: (t30$1 = this[S$._getRouteBefore](index, C[318] || CT.C318), t30$1 == null ? null : t30$1.route)});
            if (!(entry.currentState == navigator$._RouteLifecycle.popping)) dart.assertFailed(null, I[23], 3994, 18, "entry.currentState == _RouteLifecycle.popping");
            canRemoveOrAdd = true;
            break;
          }
          case C[312] || CT.C312:
          {
            break;
          }
          case C[311] || CT.C311:
          {
            if (!seenTopActiveRoute) {
              if (poppedRoute != null) entry.route.didPopNext(poppedRoute);
              poppedRoute = null;
            }
            entry.handleRemoval({navigator: this, previousPresent: (t30$2 = this[S$._getRouteBefore](index, C[318] || CT.C318), t30$2 == null ? null : t30$2.route)});
            if (!(entry.currentState == navigator$._RouteLifecycle.removing)) dart.assertFailed(null, I[23], 4010, 18, "entry.currentState == _RouteLifecycle.removing");
            continue;
          }
          case C[313] || CT.C313:
          {
            if (!canRemoveOrAdd && next != null) {
              break;
            }
            entry.currentState = navigator$._RouteLifecycle.dispose;
            continue;
          }
          case C[314] || CT.C314:
          {
            toBeDisposed[S$.$add](this[S$._history][S$.$removeAt](index));
            entry = next;
            break;
          }
          case C[315] || CT.C315:
          case C[302] || CT.C302:
          {
            if (!false) dart.assertFailed(null, I[23], 4026, 18, "false");
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        index = index - 1;
        next = entry;
        entry = previous;
        previous = index > 0 ? this[S$._history][S$.$_get](index - 1) : null;
      }
      this[S$._flushObserverNotifications]();
      this[S$._flushRouteAnnouncement]();
      if (dart.test(this.widget.reportsRouteUpdateToEngine)) {
        let lastEntry = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
        let routeName = (t30$3 = lastEntry, t30$3 == null ? null : t30$3.route.settings.name);
        if (routeName != this[S$._lastAnnouncedRouteName]) {
          system_navigator.SystemNavigator.routeUpdated({routeName: routeName, previousRouteName: this[S$._lastAnnouncedRouteName]});
          this[S$._lastAnnouncedRouteName] = routeName;
        }
      }
      for (let entry of toBeDisposed) {
        for (let overlayEntry of entry.route.overlayEntries)
          overlayEntry.remove();
        entry.dispose();
      }
      if (dart.test(rearrangeOverlay)) {
        t30$4 = this.overlay;
        t30$4 == null ? null : t30$4.rearrange(this[S$._allRouteOverlayEntries]);
      }
      if (this.bucket != null) {
        this[S$._serializableHistory].update(this[S$._history]);
      }
    }
    [S$._flushObserverNotifications]() {
      if (dart.test(this[S$._effectiveObservers][S$.$isEmpty])) {
        this[S$._observedRouteDeletions].clear();
        this[S$._observedRouteAdditions].clear();
        return;
      }
      while (dart.test(this[S$._observedRouteAdditions][S$.$isNotEmpty])) {
        let observation = this[S$._observedRouteAdditions].removeLast();
        this[S$._effectiveObservers][S$.$forEach](dart.bind(observation, 'notify'));
      }
      while (dart.test(this[S$._observedRouteDeletions][S$.$isNotEmpty])) {
        let observation = this[S$._observedRouteDeletions].removeFirst();
        this[S$._effectiveObservers][S$.$forEach](dart.bind(observation, 'notify'));
      }
    }
    [S$._flushRouteAnnouncement]() {
      let t30, t30$, t30$0, t30$1, t30$2, t30$3, t30$4;
      let index = dart.notNull(this[S$._history][S$.$length]) - 1;
      while (index >= 0) {
        let entry = this[S$._history][S$.$_get](index);
        if (!dart.test(entry.suitableForAnnouncement)) {
          index = index - 1;
          continue;
        }
        let next = this[S$._getRouteAfter](index + 1, C[319] || CT.C319);
        if (!dart.equals((t30 = next, t30 == null ? null : t30.route), entry.lastAnnouncedNextRoute)) {
          if (dart.test(entry.shouldAnnounceChangeToNext((t30$ = next, t30$ == null ? null : t30$.route)))) {
            entry.route.didChangeNext((t30$0 = next, t30$0 == null ? null : t30$0.route));
          }
          entry.lastAnnouncedNextRoute = (t30$1 = next, t30$1 == null ? null : t30$1.route);
        }
        let previous = this[S$._getRouteBefore](index - 1, C[319] || CT.C319);
        if (!dart.equals((t30$2 = previous, t30$2 == null ? null : t30$2.route), entry.lastAnnouncedPreviousRoute)) {
          entry.route.didChangePrevious((t30$3 = previous, t30$3 == null ? null : t30$3.route));
          entry.lastAnnouncedPreviousRoute = (t30$4 = previous, t30$4 == null ? null : t30$4.route);
        }
        index = index - 1;
      }
    }
    [S$._getRouteBefore](index, predicate) {
      if (index == null) dart.nullFailed(I[23], 4114, 36, "index");
      if (predicate == null) dart.nullFailed(I[23], 4114, 64, "predicate");
      index = this[S$._getIndexBefore](index, predicate);
      return dart.notNull(index) >= 0 ? this[S$._history][S$.$_get](index) : null;
    }
    [S$._getIndexBefore](index, predicate) {
      if (index == null) dart.nullFailed(I[23], 4119, 27, "index");
      if (predicate == null) dart.nullFailed(I[23], 4119, 55, "predicate");
      while (dart.notNull(index) >= 0 && !dart.test(predicate(this[S$._history][S$.$_get](index)))) {
        index = dart.notNull(index) - 1;
      }
      return index;
    }
    [S$._getRouteAfter](index, predicate) {
      if (index == null) dart.nullFailed(I[23], 4126, 35, "index");
      if (predicate == null) dart.nullFailed(I[23], 4126, 63, "predicate");
      while (dart.notNull(index) < dart.notNull(this[S$._history][S$.$length]) && !dart.test(predicate(this[S$._history][S$.$_get](index)))) {
        index = dart.notNull(index) + 1;
      }
      return dart.notNull(index) < dart.notNull(this[S$._history][S$.$length]) ? this[S$._history][S$.$_get](index) : null;
    }
    [S$._routeNamed](T, name, opts) {
      if (name == null) dart.nullFailed(I[23], 4133, 35, "name");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let allowNull = opts && 'allowNull' in opts ? opts.allowNull : false;
      if (allowNull == null) dart.nullFailed(I[23], 4133, 76, "allowNull");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4134, 12, "!_debugLocked");
      if (!(name != null)) dart.assertFailed(null, I[23], 4135, 12, "name != null");
      if (dart.test(allowNull) && this.widget.onGenerateRoute == null) return null;
      if (!dart.test(dart.fn(() => {
        if (this.widget.onGenerateRoute == null) {
          dart.throw(assertions.FlutterError.new("Navigator.onGenerateRoute was null, but the route named \"" + dart.str(name) + "\" was referenced.\n" + "To use the Navigator API with named routes (pushNamed, pushReplacementNamed, or " + "pushNamedAndRemoveUntil), the Navigator must be provided with an " + "onGenerateRoute handler.\n" + "The Navigator was:\n" + "  " + dart.str(this)));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4138, 12, "() {\r\n      if (widget.onGenerateRoute == null) {\r\n        throw FlutterError(\r\n          'Navigator.onGenerateRoute was null, but the route named \"$name\" was referenced.\\n'\r\n          'To use the Navigator API with named routes (pushNamed, pushReplacementNamed, or '\r\n          'pushNamedAndRemoveUntil), the Navigator must be provided with an '\r\n          'onGenerateRoute handler.\\n'\r\n          'The Navigator was:\\n'\r\n          '  $this',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      let settings = new navigator$.RouteSettings.new({name: name, arguments: $arguments});
      let route = dart.nullable(navigator$.Route$(T)).as(dart.nullCheck(this.widget.onGenerateRoute)(settings));
      if (route == null && !dart.test(allowNull)) {
        if (!dart.test(dart.fn(() => {
          if (this.widget.onUnknownRoute == null) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Navigator.onGenerateRoute returned null when requested to build route \"" + dart.str(name) + "\"."), new assertions.ErrorDescription.new("The onGenerateRoute callback must never return null, unless an onUnknownRoute " + "callback is provided as well."), new (T$.DiagnosticsPropertyOfNavigatorState()).new("The Navigator was", this, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty})])));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4157, 14, "() {\r\n        if (widget.onUnknownRoute == null) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Navigator.onGenerateRoute returned null when requested to build route \"$name\".'),\r\n            ErrorDescription(\r\n              'The onGenerateRoute callback must never return null, unless an onUnknownRoute '\r\n              'callback is provided as well.',\r\n            ),\r\n            DiagnosticsProperty<NavigatorState>('The Navigator was', this, style: DiagnosticsTreeStyle.errorProperty),\r\n          ]);\r\n        }\r\n        return true;\r\n      }()");
        route = dart.nullable(navigator$.Route$(T)).as(dart.nullCheck(this.widget.onUnknownRoute)(settings));
        if (!dart.test(dart.fn(() => {
          if (route == null) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Navigator.onUnknownRoute returned null when requested to build route \"" + dart.str(name) + "\"."), new assertions.ErrorDescription.new("The onUnknownRoute callback must never return null."), new (T$.DiagnosticsPropertyOfNavigatorState()).new("The Navigator was", this, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty})])));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4171, 14, "() {\r\n        if (route == null) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Navigator.onUnknownRoute returned null when requested to build route \"$name\".'),\r\n            ErrorDescription('The onUnknownRoute callback must never return null.'),\r\n            DiagnosticsProperty<NavigatorState>('The Navigator was', this, style: DiagnosticsTreeStyle.errorProperty),\r\n          ]);\r\n        }\r\n        return true;\r\n      }()");
      }
      if (!(route != null || dart.test(allowNull))) dart.assertFailed(null, I[23], 4182, 12, "route != null || allowNull");
      return route;
    }
    pushNamed(T, routeName, opts) {
      if (routeName == null) dart.nullFailed(I[23], 4209, 12, "routeName");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return this.push(T, dart.nullCheck(this[S$._routeNamed](T, routeName, {arguments: $arguments})));
    }
    restorablePushNamed(T, routeName, opts) {
      if (routeName == null) dart.nullFailed(I[23], 4237, 12, "routeName");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(routeName != null)) dart.assertFailed(null, I[23], 4240, 12, "routeName != null");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4241, 12, "debugIsSerializableForRestoration(arguments)");
      let entry = new navigator$._NamedRestorationInformation.new({name: routeName, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.push});
      this[S$._pushEntry](entry);
      return dart.nullCheck(entry.restorationId);
    }
    pushReplacementNamed(T, TO, routeName, opts) {
      if (routeName == null) dart.nullFailed(I[23], 4276, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return this.pushReplacement(T, TO, dart.nullCheck(this[S$._routeNamed](T, routeName, {arguments: $arguments})), {result: result});
    }
    restorablePushReplacementNamed(T, TO, routeName, opts) {
      if (routeName == null) dart.nullFailed(I[23], 4307, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(routeName != null)) dart.assertFailed(null, I[23], 4311, 12, "routeName != null");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4312, 12, "debugIsSerializableForRestoration(arguments)");
      let entry = new navigator$._NamedRestorationInformation.new({name: routeName, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.pushReplace});
      this[S$._pushReplacementEntry](TO, entry, result);
      return dart.nullCheck(entry.restorationId);
    }
    popAndPushNamed(T, TO, routeName, opts) {
      if (routeName == null) dart.nullFailed(I[23], 4346, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      this.pop(TO, result);
      return this.pushNamed(T, routeName, {arguments: $arguments});
    }
    restorablePopAndPushNamed(T, TO, routeName, opts) {
      if (routeName == null) dart.nullFailed(I[23], 4377, 12, "routeName");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      this.pop(TO, result);
      return this.restorablePushNamed(T$.ObjectN(), routeName, {arguments: $arguments});
    }
    pushNamedAndRemoveUntil(T, newRouteName, predicate, opts) {
      if (newRouteName == null) dart.nullFailed(I[23], 4409, 12, "newRouteName");
      if (predicate == null) dart.nullFailed(I[23], 4410, 20, "predicate");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      return this.pushAndRemoveUntil(T, dart.nullCheck(this[S$._routeNamed](T, newRouteName, {arguments: $arguments})), predicate);
    }
    restorablePushNamedAndRemoveUntil(T, newRouteName, predicate, opts) {
      if (newRouteName == null) dart.nullFailed(I[23], 4439, 12, "newRouteName");
      if (predicate == null) dart.nullFailed(I[23], 4440, 20, "predicate");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(newRouteName != null)) dart.assertFailed(null, I[23], 4443, 12, "newRouteName != null");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4444, 12, "debugIsSerializableForRestoration(arguments)");
      let entry = new navigator$._NamedRestorationInformation.new({name: newRouteName, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.push});
      this[S$._pushEntryAndRemoveUntil](entry, predicate);
      return dart.nullCheck(entry.restorationId);
    }
    push(T, route) {
      if (route == null) dart.nullFailed(I[23], 4478, 47, "route");
      if (!dart.test(this[S$._debugCheckIsPagelessRoute](route))) dart.assertFailed(null, I[23], 4479, 12, "_debugCheckIsPagelessRoute(route)");
      this[S$._pushEntry](new navigator$._RouteEntry.new(route, {initialState: navigator$._RouteLifecycle.push}));
      return route.popped;
    }
    [S$._debugCheckIsPagelessRoute](route) {
      if (route == null) dart.nullFailed(I[23], 4484, 50, "route");
      if (!dart.test(dart.fn(() => {
        if (navigator$.Page.is(route.settings)) {
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: assertions.FlutterError.new("A page-based route should not be added using the imperative api. " + "Provide a new list with the corresponding Page to Navigator.pages instead."), library: "widget library", stack: core.StackTrace.current}));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4485, 12, "(){\r\n      if (route.settings is Page) {\r\n        FlutterError.reportError(\r\n          FlutterErrorDetails(\r\n            exception: FlutterError(\r\n              'A page-based route should not be added using the imperative api. '\r\n              'Provide a new list with the corresponding Page to Navigator.pages instead.',\r\n            ),\r\n            library: 'widget library',\r\n            stack: StackTrace.current,\r\n          ),\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    [S$._debugIsStaticCallback](callback) {
      if (callback == null) dart.nullFailed(I[23], 4503, 40, "callback");
      let result = false;
      if (!dart.test(dart.fn(() => {
        result = true || ui.PluginUtilities.getCallbackHandle(callback) != null;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4505, 12, "() {\r\n      // TODO(goderbauer): remove the kIsWeb check when https://github.com/flutter/flutter/issues/33615 is resolved.\r\n      result = kIsWeb || ui.PluginUtilities.getCallbackHandle(callback) != null;\r\n      return true;\r\n    }()");
      return result;
    }
    restorablePush(T, routeBuilder, opts) {
      if (routeBuilder == null) dart.nullFailed(I[23], 4550, 70, "routeBuilder");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(routeBuilder != null)) dart.assertFailed(null, I[23], 4551, 12, "routeBuilder != null");
      if (!dart.test(this[S$._debugIsStaticCallback](routeBuilder))) dart.assertFailed("The provided routeBuilder must be a static function.", I[23], 4552, 12, "_debugIsStaticCallback(routeBuilder)");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4553, 12, "debugIsSerializableForRestoration(arguments)");
      let entry = new navigator$._AnonymousRestorationInformation.new({routeBuilder: routeBuilder, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.push});
      this[S$._pushEntry](entry);
      return dart.nullCheck(entry.restorationId);
    }
    [S$._pushEntry](entry) {
      if (entry == null) dart.nullFailed(I[23], 4563, 31, "entry");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4564, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4565, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      if (!(entry.route != null)) dart.assertFailed(null, I[23], 4569, 12, "entry.route != null");
      if (!(entry.route[S$._navigator] == null)) dart.assertFailed(null, I[23], 4570, 12, "entry.route._navigator == null");
      if (!(entry.currentState == navigator$._RouteLifecycle.push)) dart.assertFailed(null, I[23], 4571, 12, "entry.currentState == _RouteLifecycle.push");
      this[S$._history][S$.$add](entry);
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4574, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
      this[S$0._afterNavigation](entry.route);
    }
    [S$0._afterNavigation](route) {
      if (!false) {
        let routeJsonable = null;
        if (route != null) {
          routeJsonable = new (T$.IdentityMapOfString$dynamic()).new();
          let description = null;
          if (routes.TransitionRoute.is(route)) {
            let transitionRoute = route;
            description = transitionRoute.debugLabel;
          } else {
            description = dart.str(route);
          }
          routeJsonable[S$.$_set]("description", description);
          let settings = route.settings;
          let settingsJsonable = new (T$.IdentityMapOfString$dynamic()).from(["name", settings.name]);
          if (settings.arguments != null) {
            settingsJsonable[S$.$_set]("arguments", convert.jsonEncode(settings.arguments, {toEncodable: dart.fn(object => dart.str(object), T$.ObjectNToString())}));
          }
          routeJsonable[S$.$_set]("settings", settingsJsonable);
        }
        developer.postEvent("Flutter.Navigation", new (T$.IdentityMapOfString$dynamic()).from(["route", routeJsonable]));
      }
      this[S$0._cancelActivePointers]();
    }
    pushReplacement(T, TO, newRoute, opts) {
      if (newRoute == null) dart.nullFailed(I[23], 4646, 78, "newRoute");
      let result = opts && 'result' in opts ? opts.result : null;
      if (!(newRoute != null)) dart.assertFailed(null, I[23], 4647, 12, "newRoute != null");
      if (!(newRoute[S$._navigator] == null)) dart.assertFailed(null, I[23], 4648, 12, "newRoute._navigator == null");
      if (!dart.test(this[S$._debugCheckIsPagelessRoute](newRoute))) dart.assertFailed(null, I[23], 4649, 12, "_debugCheckIsPagelessRoute(newRoute)");
      this[S$._pushReplacementEntry](TO, new navigator$._RouteEntry.new(newRoute, {initialState: navigator$._RouteLifecycle.pushReplace}), result);
      return newRoute.popped;
    }
    restorablePushReplacement(T, TO, routeBuilder, opts) {
      if (routeBuilder == null) dart.nullFailed(I[23], 4695, 101, "routeBuilder");
      let result = opts && 'result' in opts ? opts.result : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(routeBuilder != null)) dart.assertFailed(null, I[23], 4696, 12, "routeBuilder != null");
      if (!dart.test(this[S$._debugIsStaticCallback](routeBuilder))) dart.assertFailed("The provided routeBuilder must be a static function.", I[23], 4697, 12, "_debugIsStaticCallback(routeBuilder)");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4698, 12, "debugIsSerializableForRestoration(arguments)");
      let entry = new navigator$._AnonymousRestorationInformation.new({routeBuilder: routeBuilder, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.pushReplace});
      this[S$._pushReplacementEntry](TO, entry, result);
      return dart.nullCheck(entry.restorationId);
    }
    [S$._pushReplacementEntry](TO, entry, result) {
      if (entry == null) dart.nullFailed(I[23], 4708, 62, "entry");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4709, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4710, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      if (!(entry.route != null)) dart.assertFailed(null, I[23], 4714, 12, "entry.route != null");
      if (!(entry.route[S$._navigator] == null)) dart.assertFailed(null, I[23], 4715, 12, "entry.route._navigator == null");
      if (!dart.test(this[S$._history][S$.$isNotEmpty])) dart.assertFailed(null, I[23], 4716, 12, "_history.isNotEmpty");
      if (!dart.test(this[S$._history][S$0.$any](C[317] || CT.C317))) dart.assertFailed("Navigator has no active routes to replace.", I[23], 4717, 12, "_history.any(_RouteEntry.isPresentPredicate)");
      if (!(entry.currentState == navigator$._RouteLifecycle.pushReplace)) dart.assertFailed(null, I[23], 4718, 12, "entry.currentState == _RouteLifecycle.pushReplace");
      this[S$._history][S$.$lastWhere](C[317] || CT.C317).complete(dart.nullable(TO), result, {isReplaced: true});
      this[S$._history][S$.$add](entry);
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4722, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
      this[S$0._afterNavigation](entry.route);
    }
    pushAndRemoveUntil(T, newRoute, predicate) {
      if (newRoute == null) dart.nullFailed(I[23], 4754, 61, "newRoute");
      if (predicate == null) dart.nullFailed(I[23], 4754, 86, "predicate");
      if (!(newRoute != null)) dart.assertFailed(null, I[23], 4755, 12, "newRoute != null");
      if (!(newRoute[S$._navigator] == null)) dart.assertFailed(null, I[23], 4756, 12, "newRoute._navigator == null");
      if (!dart.test(newRoute.overlayEntries[S$.$isEmpty])) dart.assertFailed(null, I[23], 4757, 12, "newRoute.overlayEntries.isEmpty");
      if (!dart.test(this[S$._debugCheckIsPagelessRoute](newRoute))) dart.assertFailed(null, I[23], 4758, 12, "_debugCheckIsPagelessRoute(newRoute)");
      this[S$._pushEntryAndRemoveUntil](new navigator$._RouteEntry.new(newRoute, {initialState: navigator$._RouteLifecycle.push}), predicate);
      return newRoute.popped;
    }
    restorablePushAndRemoveUntil(T, newRouteBuilder, predicate, opts) {
      if (newRouteBuilder == null) dart.nullFailed(I[23], 4804, 84, "newRouteBuilder");
      if (predicate == null) dart.nullFailed(I[23], 4804, 116, "predicate");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(newRouteBuilder != null)) dart.assertFailed(null, I[23], 4805, 12, "newRouteBuilder != null");
      if (!dart.test(this[S$._debugIsStaticCallback](newRouteBuilder))) dart.assertFailed("The provided routeBuilder must be a static function.", I[23], 4806, 12, "_debugIsStaticCallback(newRouteBuilder)");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4807, 12, "debugIsSerializableForRestoration(arguments)");
      let entry = new navigator$._AnonymousRestorationInformation.new({routeBuilder: newRouteBuilder, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.push});
      this[S$._pushEntryAndRemoveUntil](entry, predicate);
      return dart.nullCheck(entry.restorationId);
    }
    [S$._pushEntryAndRemoveUntil](entry, predicate) {
      if (entry == null) dart.nullFailed(I[23], 4817, 45, "entry");
      if (predicate == null) dart.nullFailed(I[23], 4817, 67, "predicate");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4818, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4819, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      if (!(entry.route != null)) dart.assertFailed(null, I[23], 4823, 12, "entry.route != null");
      if (!(entry.route[S$._navigator] == null)) dart.assertFailed(null, I[23], 4824, 12, "entry.route._navigator == null");
      if (!dart.test(entry.route.overlayEntries[S$.$isEmpty])) dart.assertFailed(null, I[23], 4825, 12, "entry.route.overlayEntries.isEmpty");
      if (!(predicate != null)) dart.assertFailed(null, I[23], 4826, 12, "predicate != null");
      if (!(entry.currentState == navigator$._RouteLifecycle.push)) dart.assertFailed(null, I[23], 4827, 12, "entry.currentState == _RouteLifecycle.push");
      let index = dart.notNull(this[S$._history][S$.$length]) - 1;
      this[S$._history][S$.$add](entry);
      while (index >= 0 && !dart.test(predicate(this[S$._history][S$.$_get](index).route))) {
        if (dart.test(this[S$._history][S$.$_get](index).isPresent)) this[S$._history][S$.$_get](index).remove();
        index = index - 1;
      }
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4837, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
      this[S$0._afterNavigation](entry.route);
    }
    replace(T, opts) {
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      if (oldRoute == null) dart.nullFailed(I[23], 4855, 61, "oldRoute");
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      if (newRoute == null) dart.nullFailed(I[23], 4855, 89, "newRoute");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4856, 12, "!_debugLocked");
      if (!(oldRoute != null)) dart.assertFailed(null, I[23], 4857, 12, "oldRoute != null");
      if (!dart.equals(oldRoute[S$._navigator], this)) dart.assertFailed(null, I[23], 4858, 12, "oldRoute._navigator == this");
      if (!(newRoute != null)) dart.assertFailed(null, I[23], 4859, 12, "newRoute != null");
      this[S$0._replaceEntry](new navigator$._RouteEntry.new(newRoute, {initialState: navigator$._RouteLifecycle.replace}), oldRoute);
    }
    restorableReplace(T, opts) {
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      if (oldRoute == null) dart.nullFailed(I[23], 4873, 73, "oldRoute");
      let newRouteBuilder = opts && 'newRouteBuilder' in opts ? opts.newRouteBuilder : null;
      if (newRouteBuilder == null) dart.nullFailed(I[23], 4873, 118, "newRouteBuilder");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(oldRoute != null)) dart.assertFailed(null, I[23], 4874, 12, "oldRoute != null");
      if (!dart.equals(oldRoute[S$._navigator], this)) dart.assertFailed(null, I[23], 4875, 12, "oldRoute._navigator == this");
      if (!(newRouteBuilder != null)) dart.assertFailed(null, I[23], 4876, 12, "newRouteBuilder != null");
      if (!dart.test(this[S$._debugIsStaticCallback](newRouteBuilder))) dart.assertFailed("The provided routeBuilder must be a static function.", I[23], 4877, 12, "_debugIsStaticCallback(newRouteBuilder)");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4878, 12, "debugIsSerializableForRestoration(arguments)");
      if (!(oldRoute != null)) dart.assertFailed(null, I[23], 4879, 12, "oldRoute != null");
      let entry = new navigator$._AnonymousRestorationInformation.new({routeBuilder: newRouteBuilder, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.replace});
      this[S$0._replaceEntry](entry, oldRoute);
      return dart.nullCheck(entry.restorationId);
    }
    [S$0._replaceEntry](entry, oldRoute) {
      if (entry == null) dart.nullFailed(I[23], 4889, 34, "entry");
      if (oldRoute == null) dart.nullFailed(I[23], 4889, 56, "oldRoute");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4890, 12, "!_debugLocked");
      if (dart.equals(oldRoute, entry.route)) return;
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4893, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      if (!(entry.currentState == navigator$._RouteLifecycle.replace)) dart.assertFailed(null, I[23], 4897, 12, "entry.currentState == _RouteLifecycle.replace");
      if (!(entry.route[S$._navigator] == null)) dart.assertFailed(null, I[23], 4898, 12, "entry.route._navigator == null");
      let index = this[S$._history][S$0.$indexWhere](navigator$._RouteEntry.isRoutePredicate(oldRoute));
      if (!(dart.notNull(index) >= 0)) dart.assertFailed("This Navigator does not contain the specified oldRoute.", I[23], 4900, 12, "index >= 0");
      if (!dart.test(this[S$._history][S$.$_get](index).isPresent)) dart.assertFailed("The specified oldRoute has already been removed from the Navigator.", I[23], 4901, 12, "_history[index].isPresent");
      let wasCurrent = oldRoute.isCurrent;
      this[S$._history][S$.$insert](dart.notNull(index) + 1, entry);
      this[S$._history][S$.$_get](index).remove({isReplaced: true});
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4906, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
      if (dart.test(wasCurrent)) this[S$0._afterNavigation](entry.route);
    }
    replaceRouteBelow(T, opts) {
      let anchorRoute = opts && 'anchorRoute' in opts ? opts.anchorRoute : null;
      if (anchorRoute == null) dart.nullFailed(I[23], 4926, 71, "anchorRoute");
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      if (newRoute == null) dart.nullFailed(I[23], 4926, 102, "newRoute");
      if (!(newRoute != null)) dart.assertFailed(null, I[23], 4927, 12, "newRoute != null");
      if (!(newRoute[S$._navigator] == null)) dart.assertFailed(null, I[23], 4928, 12, "newRoute._navigator == null");
      if (!(anchorRoute != null)) dart.assertFailed(null, I[23], 4929, 12, "anchorRoute != null");
      if (!dart.equals(anchorRoute[S$._navigator], this)) dart.assertFailed(null, I[23], 4930, 12, "anchorRoute._navigator == this");
      this[S$0._replaceEntryBelow](new navigator$._RouteEntry.new(newRoute, {initialState: navigator$._RouteLifecycle.replace}), anchorRoute);
    }
    restorableReplaceRouteBelow(T, opts) {
      let anchorRoute = opts && 'anchorRoute' in opts ? opts.anchorRoute : null;
      if (anchorRoute == null) dart.nullFailed(I[23], 4945, 83, "anchorRoute");
      let newRouteBuilder = opts && 'newRouteBuilder' in opts ? opts.newRouteBuilder : null;
      if (newRouteBuilder == null) dart.nullFailed(I[23], 4945, 131, "newRouteBuilder");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!(anchorRoute != null)) dart.assertFailed(null, I[23], 4946, 12, "anchorRoute != null");
      if (!dart.equals(anchorRoute[S$._navigator], this)) dart.assertFailed(null, I[23], 4947, 12, "anchorRoute._navigator == this");
      if (!(newRouteBuilder != null)) dart.assertFailed(null, I[23], 4948, 12, "newRouteBuilder != null");
      if (!dart.test(this[S$._debugIsStaticCallback](newRouteBuilder))) dart.assertFailed("The provided routeBuilder must be a static function.", I[23], 4949, 12, "_debugIsStaticCallback(newRouteBuilder)");
      if (!dart.test(restoration.debugIsSerializableForRestoration($arguments))) dart.assertFailed("The arguments object must be serializable via the StandardMessageCodec.", I[23], 4950, 12, "debugIsSerializableForRestoration(arguments)");
      if (!(anchorRoute != null)) dart.assertFailed(null, I[23], 4951, 12, "anchorRoute != null");
      let entry = new navigator$._AnonymousRestorationInformation.new({routeBuilder: newRouteBuilder, arguments: $arguments, restorationScopeId: this[S$._nextPagelessRestorationScopeId]}).toRouteEntry(this, {initialState: navigator$._RouteLifecycle.replace});
      this[S$0._replaceEntryBelow](entry, anchorRoute);
      return dart.nullCheck(entry.restorationId);
    }
    [S$0._replaceEntryBelow](entry, anchorRoute) {
      if (entry == null) dart.nullFailed(I[23], 4961, 39, "entry");
      if (anchorRoute == null) dart.nullFailed(I[23], 4961, 61, "anchorRoute");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 4962, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4963, 12, "() { _debugLocked = true; return true; }()");
      let anchorIndex = this[S$._history][S$0.$indexWhere](navigator$._RouteEntry.isRoutePredicate(anchorRoute));
      if (!(dart.notNull(anchorIndex) >= 0)) dart.assertFailed("This Navigator does not contain the specified anchorRoute.", I[23], 4965, 12, "anchorIndex >= 0");
      if (!dart.test(this[S$._history][S$.$_get](anchorIndex).isPresent)) dart.assertFailed("The specified anchorRoute has already been removed from the Navigator.", I[23], 4966, 12, "_history[anchorIndex].isPresent");
      let index = dart.notNull(anchorIndex) - 1;
      while (index >= 0) {
        if (dart.test(this[S$._history][S$.$_get](index).isPresent)) break;
        index = index - 1;
      }
      if (!(index >= 0)) dart.assertFailed("There are no routes below the specified anchorRoute.", I[23], 4973, 12, "index >= 0");
      this[S$._history][S$.$insert](index + 1, entry);
      this[S$._history][S$.$_get](index).remove({isReplaced: true});
      this[S$._flushHistoryUpdates]();
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 4977, 12, "() { _debugLocked = false; return true; }()");
    }
    canPop() {
      let iterator = this[S$._history][S$.$where](C[317] || CT.C317)[S$0.$iterator];
      if (!dart.test(iterator.moveNext())) return false;
      if (dart.test(iterator.current.route.willHandlePopInternally)) return true;
      if (!dart.test(iterator.moveNext())) return false;
      return true;
    }
    maybePop(T, result = null) {
      return async.async(core.bool, (function* maybePop() {
        let lastEntry = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
        if (lastEntry == null) return false;
        if (!dart.equals(lastEntry.route[S$._navigator], this)) dart.assertFailed(null, I[23], 5019, 12, "lastEntry.route._navigator == this");
        let disposition = (yield lastEntry.route.willPop());
        if (!(disposition != null)) dart.assertFailed(null, I[23], 5021, 12, "disposition != null");
        if (!dart.test(this.mounted)) return true;
        let newLastEntry = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
        if (!dart.equals(lastEntry, newLastEntry)) return true;
        switch (disposition) {
          case C[296] || CT.C296:
          {
            return false;
          }
          case C[294] || CT.C294:
          {
            this.pop(T, result);
            return true;
          }
          case C[295] || CT.C295:
          {
            return true;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }).bind(this));
    }
    pop(T, result = null) {
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 5067, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5068, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      let entry = this[S$._history][S$.$lastWhere](C[317] || CT.C317);
      if (dart.test(entry.hasPage)) {
        if (dart.test(dart.nullCheck(this.widget.onPopPage)(entry.route, result))) entry.currentState = navigator$._RouteLifecycle.pop;
      } else {
        entry.pop(T, result);
      }
      if (entry.currentState == navigator$._RouteLifecycle.pop) {
        this[S$._flushHistoryUpdates]({rearrangeOverlay: false});
        if (!dart.test(entry.route[S$._popCompleter].isCompleted)) dart.assertFailed(null, I[23], 5083, 14, "entry.route._popCompleter.isCompleted");
      }
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5085, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
      this[S$0._afterNavigation](entry.route);
    }
    popUntil(predicate) {
      if (predicate == null) dart.nullFailed(I[23], 5106, 32, "predicate");
      let candidate = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
      while (candidate != null) {
        if (dart.test(predicate(candidate.route))) return;
        this.pop(T$.ObjectN());
        candidate = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
      }
    }
    removeRoute(route) {
      let t30;
      if (route == null) dart.nullFailed(I[23], 5125, 35, "route");
      if (!(route != null)) dart.assertFailed(null, I[23], 5126, 12, "route != null");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 5127, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5128, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      if (!dart.equals(route[S$._navigator], this)) dart.assertFailed(null, I[23], 5132, 12, "route._navigator == this");
      let wasCurrent = route.isCurrent;
      let entry = this[S$._history][S$.$firstWhere](navigator$._RouteEntry.isRoutePredicate(route));
      if (!(entry != null)) dart.assertFailed(null, I[23], 5135, 12, "entry != null");
      entry.remove();
      this[S$._flushHistoryUpdates]({rearrangeOverlay: false});
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5138, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
      if (dart.test(wasCurrent)) this[S$0._afterNavigation]((t30 = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$lastWhere](dart.fn(e => e != null && dart.test(navigator$._RouteEntry.isPresentPredicate(e)), T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())}), t30 == null ? null : t30.route));
    }
    removeRouteBelow(anchorRoute) {
      if (anchorRoute == null) dart.nullFailed(I[23], 5155, 40, "anchorRoute");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 5156, 12, "!_debugLocked");
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5157, 12, "() {\r\n      _debugLocked = true;\r\n      return true;\r\n    }()");
      if (!(anchorRoute != null)) dart.assertFailed(null, I[23], 5161, 12, "anchorRoute != null");
      if (!dart.equals(anchorRoute[S$._navigator], this)) dart.assertFailed(null, I[23], 5162, 12, "anchorRoute._navigator == this");
      let anchorIndex = this[S$._history][S$0.$indexWhere](navigator$._RouteEntry.isRoutePredicate(anchorRoute));
      if (!(dart.notNull(anchorIndex) >= 0)) dart.assertFailed("This Navigator does not contain the specified anchorRoute.", I[23], 5164, 12, "anchorIndex >= 0");
      if (!dart.test(this[S$._history][S$.$_get](anchorIndex).isPresent)) dart.assertFailed("The specified anchorRoute has already been removed from the Navigator.", I[23], 5165, 12, "_history[anchorIndex].isPresent");
      let index = dart.notNull(anchorIndex) - 1;
      while (index >= 0) {
        if (dart.test(this[S$._history][S$.$_get](index).isPresent)) break;
        index = index - 1;
      }
      if (!(index >= 0)) dart.assertFailed("There are no routes below the specified anchorRoute.", I[23], 5172, 12, "index >= 0");
      this[S$._history][S$.$_get](index).remove();
      this[S$._flushHistoryUpdates]({rearrangeOverlay: false});
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5175, 12, "() {\r\n      _debugLocked = false;\r\n      return true;\r\n    }()");
    }
    finalizeRoute(route) {
      if (route == null) dart.nullFailed(I[23], 5192, 37, "route");
      let wasDebugLocked = null;
      if (!dart.test(dart.fn(() => {
        wasDebugLocked = this[S$._debugLocked];
        this[S$._debugLocked] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5197, 12, "() { wasDebugLocked = _debugLocked; _debugLocked = true; return true; }()");
      if (!(this[S$._history][S$.$where](navigator$._RouteEntry.isRoutePredicate(route))[S$.$length] === 1)) dart.assertFailed(null, I[23], 5198, 12, "_history.where(_RouteEntry.isRoutePredicate(route)).length == 1");
      let entry = this[S$._history][S$.$firstWhere](navigator$._RouteEntry.isRoutePredicate(route));
      if (dart.test(entry.doingPop)) {
        entry.currentState = navigator$._RouteLifecycle.pop;
        this[S$._flushHistoryUpdates]({rearrangeOverlay: false});
      }
      if (!(entry.currentState != navigator$._RouteLifecycle.pop)) dart.assertFailed(null, I[23], 5206, 12, "entry.currentState != _RouteLifecycle.pop");
      entry.finalize();
      this[S$._flushHistoryUpdates]({rearrangeOverlay: false});
      if (!dart.test(dart.fn(() => {
        this[S$._debugLocked] = dart.nullCheck(wasDebugLocked);
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[23], 5209, 12, "() { _debugLocked = wasDebugLocked!; return true; }()");
    }
    [S$0._getRouteById](T, id) {
      let t30;
      if (id == null) dart.nullFailed(I[23], 5213, 37, "id");
      if (!(id != null)) dart.assertFailed(null, I[23], 5214, 12, "id != null");
      return dart.nullable(navigator$.Route$(T)).as((t30 = this[S$._history][S$.$cast](T$._RouteEntryN())[S$.$firstWhere](dart.fn(entry => dart.nullCheck(entry).restorationId == id, T$._RouteEntryNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())}), t30 == null ? null : t30.route));
    }
    get [S$0._userGesturesInProgress]() {
      return this[S$._userGesturesInProgressCount];
    }
    set [S$0._userGesturesInProgress](value) {
      if (value == null) dart.nullFailed(I[23], 5223, 35, "value");
      this[S$._userGesturesInProgressCount] = value;
      this.userGestureInProgressNotifier.value = dart.notNull(this[S$0._userGesturesInProgress]) > 0;
    }
    get userGestureInProgress() {
      return this.userGestureInProgressNotifier.value;
    }
    didStartUserGesture() {
      this[S$0._userGesturesInProgress] = dart.notNull(this[S$0._userGesturesInProgress]) + 1;
      if (this[S$0._userGesturesInProgress] === 1) {
        let routeIndex = this[S$._getIndexBefore](dart.notNull(this[S$._history][S$.$length]) - 1, C[318] || CT.C318);
        if (!(routeIndex != null)) dart.assertFailed(null, I[23], 5252, 14, "routeIndex != null");
        let route = this[S$._history][S$.$_get](routeIndex).route;
        let previousRoute = null;
        if (!dart.test(route.willHandlePopInternally) && dart.notNull(routeIndex) > 0) {
          previousRoute = dart.nullCheck(this[S$._getRouteBefore](dart.notNull(routeIndex) - 1, C[318] || CT.C318)).route;
        }
        for (let observer of this[S$._effectiveObservers])
          observer.didStartUserGesture(route, previousRoute);
      }
    }
    didStopUserGesture() {
      if (!(dart.notNull(this[S$0._userGesturesInProgress]) > 0)) dart.assertFailed(null, I[23], 5271, 12, "_userGesturesInProgress > 0");
      this[S$0._userGesturesInProgress] = dart.notNull(this[S$0._userGesturesInProgress]) - 1;
      if (this[S$0._userGesturesInProgress] === 0) {
        for (let observer of this[S$._effectiveObservers])
          observer.didStopUserGesture();
      }
    }
    [S$0._handlePointerDown$1](event) {
      if (event == null) dart.nullFailed(I[23], 5281, 44, "event");
      this[S$._activePointers].add(event.pointer);
    }
    [S$0._handlePointerUpOrCancel](event) {
      if (event == null) dart.nullFailed(I[23], 5285, 46, "event");
      this[S$._activePointers].remove(event.pointer);
    }
    [S$0._cancelActivePointers]() {
      let t30;
      if (dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase == binding$.SchedulerPhase.idle) {
        let absorber = (t30 = this[S$._overlayKey].currentContext, t30 == null ? null : t30.findAncestorRenderObjectOfType(proxy_box.RenderAbsorbPointer));
        this.setState(dart.fn(() => {
          let t30;
          t30 = absorber;
          t30 == null ? null : t30.absorbing = true;
        }, T$.VoidTovoid()));
      }
      this[S$._activePointers][S$.$toList]()[S$.$forEach](dart.bind(dart.nullCheck(binding$5.WidgetsBinding.instance), 'cancelPointer'));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[23], 5306, 29, "context");
      if (!!dart.test(this[S$._debugLocked])) dart.assertFailed(null, I[23], 5307, 12, "!_debugLocked");
      if (!dart.test(this[S$._history][S$.$isNotEmpty])) dart.assertFailed(null, I[23], 5308, 12, "_history.isNotEmpty");
      return new navigator$.HeroControllerScope.none({child: new basic.Listener.new({onPointerDown: dart.bind(this, S$0._handlePointerDown$1), onPointerUp: dart.bind(this, S$0._handlePointerUpOrCancel), onPointerCancel: dart.bind(this, S$0._handlePointerUpOrCancel), child: new basic.AbsorbPointer.new({absorbing: false, child: new focus_scope.FocusScope.new({node: this.focusScopeNode, autofocus: true, child: new restoration$.UnmanagedRestorationScope.new({bucket: this.bucket, child: new overlay$.Overlay.new({key: this[S$._overlayKey], initialEntries: this.overlay == null ? this[S$._allRouteOverlayEntries][S$.$toList]({growable: false}) : C[133] || CT.C133, $creationLocationd_0dea112b090073317d4: C[320] || CT.C320}), $creationLocationd_0dea112b090073317d4: C[324] || CT.C324}), $creationLocationd_0dea112b090073317d4: C[328] || CT.C328}), $creationLocationd_0dea112b090073317d4: C[333] || CT.C333}), $creationLocationd_0dea112b090073317d4: C[337] || CT.C337}), $creationLocationd_0dea112b090073317d4: C[343] || CT.C343});
    }
  };
  (navigator$.NavigatorState.new = function() {
    this[S$.__NavigatorState__overlayKey] = null;
    this[S$.__NavigatorState__overlayKey_isSet] = false;
    this[S$._history] = T$.JSArrayOf_RouteEntry().of([]);
    this[S$._serializableHistory] = new navigator$._HistoryProperty.new();
    this[S$._observedRouteAdditions] = new (T$.ListQueueOf_NavigatorObservation()).new();
    this[S$._observedRouteDeletions] = new (T$.ListQueueOf_NavigatorObservation()).new();
    this[S$.focusScopeNode] = new focus_manager.FocusScopeNode.new({debugLabel: "Navigator Scope"});
    this[S$._debugLocked] = false;
    this[S$._heroControllerFromScope] = null;
    this[S$.__NavigatorState__effectiveObservers] = null;
    this[S$.__NavigatorState__effectiveObservers_isSet] = false;
    this[S$._rawNextPagelessRestorationScopeId] = new (T$.RestorableNumOfint()).new(0);
    this[S$._lastAnnouncedRouteName] = null;
    this[S$._debugUpdatingPage] = false;
    this[S$._userGesturesInProgressCount] = 0;
    this[S$.userGestureInProgressNotifier] = new (T$.ValueNotifierOfbool()).new(false);
    this[S$._activePointers] = T$.LinkedHashSetOfint().new();
    navigator$.NavigatorState.__proto__.new.call(this);
    ;
  }).prototype = navigator$.NavigatorState.prototype;
  dart.addTypeTests(navigator$.NavigatorState);
  dart.addTypeCaches(navigator$.NavigatorState);
  dart.setMethodSignature(navigator$.NavigatorState, () => ({
    __proto__: dart.getMethods(navigator$.NavigatorState.__proto__),
    restoreState: dart.fnType(dart.void, [dart.nullable(restoration.RestorationBucket), core.bool]),
    [S$._updateHeroController]: dart.fnType(dart.void, [dart.nullable(heroes.HeroController)]),
    [S$._updateEffectiveObservers]: dart.fnType(dart.void, []),
    [S$._debugCheckDuplicatedPageKeys]: dart.fnType(dart.void, []),
    [S$._updatePages]: dart.fnType(dart.void, []),
    [S$._flushHistoryUpdates]: dart.fnType(dart.void, [], {rearrangeOverlay: core.bool}, {}),
    [S$._flushObserverNotifications]: dart.fnType(dart.void, []),
    [S$._flushRouteAnnouncement]: dart.fnType(dart.void, []),
    [S$._getRouteBefore]: dart.fnType(dart.nullable(navigator$._RouteEntry), [core.int, dart.fnType(core.bool, [navigator$._RouteEntry])]),
    [S$._getIndexBefore]: dart.fnType(core.int, [core.int, dart.fnType(core.bool, [navigator$._RouteEntry])]),
    [S$._getRouteAfter]: dart.fnType(dart.nullable(navigator$._RouteEntry), [core.int, dart.fnType(core.bool, [navigator$._RouteEntry])]),
    [S$._routeNamed]: dart.gFnType(T => [dart.nullable(navigator$.Route$(T)), [core.String], {allowNull: core.bool}, {arguments: dart.nullable(core.Object)}], T => [dart.nullable(core.Object)]),
    pushNamed: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String], {arguments: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
    restorablePushNamed: dart.gFnType(T => [core.String, [core.String], {arguments: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
    pushReplacementNamed: dart.gFnType((T, TO) => [async.Future$(dart.nullable(T)), [core.String], {arguments: dart.nullable(core.Object), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    restorablePushReplacementNamed: dart.gFnType((T, TO) => [core.String, [core.String], {arguments: dart.nullable(core.Object), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    popAndPushNamed: dart.gFnType((T, TO) => [async.Future$(dart.nullable(T)), [core.String], {arguments: dart.nullable(core.Object), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    restorablePopAndPushNamed: dart.gFnType((T, TO) => [core.String, [core.String], {arguments: dart.nullable(core.Object), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    pushNamedAndRemoveUntil: dart.gFnType(T => [async.Future$(dart.nullable(T)), [core.String, dart.fnType(core.bool, [navigator$.Route])], {arguments: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
    restorablePushNamedAndRemoveUntil: dart.gFnType(T => [core.String, [core.String, dart.fnType(core.bool, [navigator$.Route])], {arguments: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
    push: dart.gFnType(T => [async.Future$(dart.nullable(T)), [navigator$.Route$(T)]], T => [dart.nullable(core.Object)]),
    [S$._debugCheckIsPagelessRoute]: dart.fnType(core.bool, [navigator$.Route]),
    [S$._debugIsStaticCallback]: dart.fnType(core.bool, [core.Function]),
    restorablePush: dart.gFnType(T => [core.String, [dart.fnType(navigator$.Route$(T), [framework.BuildContext, dart.nullable(core.Object)])], {arguments: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
    [S$._pushEntry]: dart.fnType(dart.void, [navigator$._RouteEntry]),
    [S$0._afterNavigation]: dart.fnType(dart.void, [dart.nullable(navigator$.Route)]),
    pushReplacement: dart.gFnType((T, TO) => [async.Future$(dart.nullable(T)), [navigator$.Route$(T)], {result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    restorablePushReplacement: dart.gFnType((T, TO) => [core.String, [dart.fnType(navigator$.Route$(T), [framework.BuildContext, dart.nullable(core.Object)])], {arguments: dart.nullable(core.Object), result: dart.nullable(TO)}, {}], (T, TO) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [S$._pushReplacementEntry]: dart.gFnType(TO => [dart.void, [navigator$._RouteEntry, dart.nullable(TO)]], TO => [dart.nullable(core.Object)]),
    pushAndRemoveUntil: dart.gFnType(T => [async.Future$(dart.nullable(T)), [navigator$.Route$(T), dart.fnType(core.bool, [navigator$.Route])]], T => [dart.nullable(core.Object)]),
    restorablePushAndRemoveUntil: dart.gFnType(T => [core.String, [dart.fnType(navigator$.Route$(T), [framework.BuildContext, dart.nullable(core.Object)]), dart.fnType(core.bool, [navigator$.Route])], {arguments: dart.nullable(core.Object)}, {}], T => [dart.nullable(core.Object)]),
    [S$._pushEntryAndRemoveUntil]: dart.fnType(dart.void, [navigator$._RouteEntry, dart.fnType(core.bool, [navigator$.Route])]),
    replace: dart.gFnType(T => [dart.void, [], {}, {newRoute: navigator$.Route$(T), oldRoute: navigator$.Route}], T => [dart.nullable(core.Object)]),
    restorableReplace: dart.gFnType(T => [core.String, [], {arguments: dart.nullable(core.Object)}, {newRouteBuilder: dart.fnType(navigator$.Route$(T), [framework.BuildContext, dart.nullable(core.Object)]), oldRoute: navigator$.Route}], T => [dart.nullable(core.Object)]),
    [S$0._replaceEntry]: dart.fnType(dart.void, [navigator$._RouteEntry, navigator$.Route]),
    replaceRouteBelow: dart.gFnType(T => [dart.void, [], {}, {anchorRoute: navigator$.Route, newRoute: navigator$.Route$(T)}], T => [dart.nullable(core.Object)]),
    restorableReplaceRouteBelow: dart.gFnType(T => [core.String, [], {arguments: dart.nullable(core.Object)}, {anchorRoute: navigator$.Route, newRouteBuilder: dart.fnType(navigator$.Route$(T), [framework.BuildContext, dart.nullable(core.Object)])}], T => [dart.nullable(core.Object)]),
    [S$0._replaceEntryBelow]: dart.fnType(dart.void, [navigator$._RouteEntry, navigator$.Route]),
    canPop: dart.fnType(core.bool, []),
    maybePop: dart.gFnType(T => [async.Future$(core.bool), [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    pop: dart.gFnType(T => [dart.void, [], [dart.nullable(T)]], T => [dart.nullable(core.Object)]),
    popUntil: dart.fnType(dart.void, [dart.fnType(core.bool, [navigator$.Route])]),
    removeRoute: dart.fnType(dart.void, [navigator$.Route]),
    removeRouteBelow: dart.fnType(dart.void, [navigator$.Route]),
    finalizeRoute: dart.fnType(dart.void, [navigator$.Route]),
    [S$0._getRouteById]: dart.gFnType(T => [dart.nullable(navigator$.Route$(T)), [core.String]], T => [dart.nullable(core.Object)]),
    didStartUserGesture: dart.fnType(dart.void, []),
    didStopUserGesture: dart.fnType(dart.void, []),
    [S$0._handlePointerDown$1]: dart.fnType(dart.void, [events.PointerDownEvent]),
    [S$0._handlePointerUpOrCancel]: dart.fnType(dart.void, [events.PointerEvent]),
    [S$0._cancelActivePointers]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(navigator$.NavigatorState, () => ({
    __proto__: dart.getGetters(navigator$.NavigatorState.__proto__),
    [S$._overlayKey]: framework.GlobalKey$(overlay$.OverlayState),
    [S$._effectiveObservers]: core.List$(navigator$.NavigatorObserver),
    [S$._nextPagelessRestorationScopeId]: core.int,
    restorationId: dart.nullable(core.String),
    overlay: dart.nullable(overlay$.OverlayState),
    [S$._allRouteOverlayEntries]: core.Iterable$(overlay$.OverlayEntry),
    [S$0._userGesturesInProgress]: core.int,
    userGestureInProgress: core.bool
  }));
  dart.setSetterSignature(navigator$.NavigatorState, () => ({
    __proto__: dart.getSetters(navigator$.NavigatorState.__proto__),
    [S$._overlayKey]: framework.GlobalKey$(overlay$.OverlayState),
    [S$._effectiveObservers]: core.List$(navigator$.NavigatorObserver),
    [S$0._userGesturesInProgress]: core.int
  }));
  dart.setLibraryUri(navigator$.NavigatorState, I[24]);
  dart.setFieldSignature(navigator$.NavigatorState, () => ({
    __proto__: dart.getFields(navigator$.NavigatorState.__proto__),
    [S$.__NavigatorState__overlayKey]: dart.fieldType(dart.nullable(framework.GlobalKey$(overlay$.OverlayState))),
    [S$.__NavigatorState__overlayKey_isSet]: dart.fieldType(core.bool),
    [S$._history]: dart.fieldType(core.List$(navigator$._RouteEntry)),
    [S$._serializableHistory]: dart.finalFieldType(navigator$._HistoryProperty),
    [S$._observedRouteAdditions]: dart.finalFieldType(collection.Queue$(navigator$._NavigatorObservation)),
    [S$._observedRouteDeletions]: dart.finalFieldType(collection.Queue$(navigator$._NavigatorObservation)),
    focusScopeNode: dart.finalFieldType(focus_manager.FocusScopeNode),
    [S$._debugLocked]: dart.fieldType(core.bool),
    [S$._heroControllerFromScope]: dart.fieldType(dart.nullable(heroes.HeroController)),
    [S$.__NavigatorState__effectiveObservers]: dart.fieldType(dart.nullable(core.List$(navigator$.NavigatorObserver))),
    [S$.__NavigatorState__effectiveObservers_isSet]: dart.fieldType(core.bool),
    [S$._rawNextPagelessRestorationScopeId]: dart.finalFieldType(restoration_properties.RestorableNum$(core.int)),
    [S$._lastAnnouncedRouteName]: dart.fieldType(dart.nullable(core.String)),
    [S$._debugUpdatingPage]: dart.fieldType(core.bool),
    [S$._userGesturesInProgressCount]: dart.fieldType(core.int),
    userGestureInProgressNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    [S$._activePointers]: dart.finalFieldType(core.Set$(core.int))
  }));
  navigator$._RouteRestorationType = class _RouteRestorationType extends core.Object {
    toString() {
      return this[S$._name$5];
    }
  };
  (navigator$._RouteRestorationType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[23], 5336, 6, "index");
    if (_name == null) dart.nullFailed(I[23], 5336, 6, "_name");
    this.index = index;
    this[S$._name$5] = _name;
    ;
  }).prototype = navigator$._RouteRestorationType.prototype;
  dart.addTypeTests(navigator$._RouteRestorationType);
  dart.addTypeCaches(navigator$._RouteRestorationType);
  dart.setLibraryUri(navigator$._RouteRestorationType, I[24]);
  dart.setFieldSignature(navigator$._RouteRestorationType, () => ({
    __proto__: dart.getFields(navigator$._RouteRestorationType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$._name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(navigator$._RouteRestorationType, ['toString']);
  navigator$._RouteRestorationType.named = C[346] || CT.C346;
  navigator$._RouteRestorationType.anonymous = C[347] || CT.C347;
  navigator$._RouteRestorationType.values = C[348] || CT.C348;
  navigator$._RestorationInformation = class _RestorationInformation extends core.Object {
    static fromSerializableData(data) {
      if (data == null) dart.nullFailed(I[23], 5354, 63, "data");
      if (!(data != null)) dart.assertFailed(null, I[23], 5355, 12, "data != null");
      let casted = T$.ListOfObjectN().as(data);
      if (!dart.test(casted[S$.$isNotEmpty])) dart.assertFailed(null, I[23], 5357, 12, "casted.isNotEmpty");
      let type = navigator$._RouteRestorationType.values[S$.$_get](core.int.as(dart.nullCheck(casted[S$.$_get](0))));
      if (!(type != null)) dart.assertFailed(null, I[23], 5359, 12, "type != null");
      switch (type) {
        case C[346] || CT.C346:
        {
          return navigator$._NamedRestorationInformation.fromSerializableData(casted[S$0.$sublist](1));
        }
        case C[347] || CT.C347:
        {
          return navigator$._AnonymousRestorationInformation.fromSerializableData(casted[S$0.$sublist](1));
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    get isRestorable() {
      return true;
    }
    getSerializableData() {
      this[S$0._serializableData] == null ? this[S$0._serializableData] = this.computeSerializableData() : null;
      return dart.nullCheck(this[S$0._serializableData]);
    }
    computeSerializableData() {
      return T$.JSArrayOfObject().of([this.type.index]);
    }
    toRouteEntry(navigator, opts) {
      if (navigator == null) dart.nullFailed(I[23], 5387, 43, "navigator");
      let initialState = opts && 'initialState' in opts ? opts.initialState : C[303] || CT.C303;
      if (initialState == null) dart.nullFailed(I[23], 5387, 71, "initialState");
      if (!(navigator != null)) dart.assertFailed(null, I[23], 5388, 12, "navigator != null");
      if (!(initialState != null)) dart.assertFailed(null, I[23], 5389, 12, "initialState != null");
      let route = this.createRoute(navigator);
      if (!(route != null)) dart.assertFailed(null, I[23], 5391, 12, "route != null");
      return new navigator$._RouteEntry.new(route, {initialState: initialState, restorationInformation: this});
    }
  };
  (navigator$._RestorationInformation.new = function(type) {
    if (type == null) dart.nullFailed(I[23], 5342, 32, "type");
    this[S$0._serializableData] = null;
    this.type = type;
    if (!(type != null)) dart.assertFailed(null, I[23], 5342, 47, "type != null");
    ;
  }).prototype = navigator$._RestorationInformation.prototype;
  dart.addTypeTests(navigator$._RestorationInformation);
  dart.addTypeCaches(navigator$._RestorationInformation);
  dart.setMethodSignature(navigator$._RestorationInformation, () => ({
    __proto__: dart.getMethods(navigator$._RestorationInformation.__proto__),
    getSerializableData: dart.fnType(core.Object, []),
    computeSerializableData: dart.fnType(core.List$(core.Object), []),
    toRouteEntry: dart.fnType(navigator$._RouteEntry, [navigator$.NavigatorState], {initialState: navigator$._RouteLifecycle}, {})
  }));
  dart.setGetterSignature(navigator$._RestorationInformation, () => ({
    __proto__: dart.getGetters(navigator$._RestorationInformation.__proto__),
    isRestorable: core.bool
  }));
  dart.setLibraryUri(navigator$._RestorationInformation, I[24]);
  dart.setFieldSignature(navigator$._RestorationInformation, () => ({
    __proto__: dart.getFields(navigator$._RestorationInformation.__proto__),
    type: dart.finalFieldType(navigator$._RouteRestorationType),
    [S$0._serializableData]: dart.fieldType(dart.nullable(core.Object))
  }));
  navigator$._NamedRestorationInformation = class _NamedRestorationInformation extends navigator$._RestorationInformation {
    get restorationScopeId() {
      return this[S$0.restorationScopeId$1];
    }
    set restorationScopeId(value) {
      super.restorationScopeId = value;
    }
    static fromSerializableData(data) {
      if (data == null) dart.nullFailed(I[23], 5407, 75, "data");
      if (!(dart.notNull(data[S$.$length]) >= 2)) dart.assertFailed(null, I[23], 5408, 12, "data.length >= 2");
      return new navigator$._NamedRestorationInformation.new({restorationScopeId: core.int.as(dart.nullCheck(data[S$.$_get](0))), name: core.String.as(dart.nullCheck(data[S$.$_get](1))), arguments: dart.notNull(data[S$.$length]) > 2 ? data[S$.$_get](2) : null});
    }
    computeSerializableData() {
      let t31;
      t31 = super.computeSerializableData();
      return (() => {
        t31[S$.$addAll]((() => {
          let t32 = T$.JSArrayOfObject().of([this.restorationScopeId, this.name]);
          if (this.arguments != null) t32[S$.$add](dart.nullCheck(this.arguments));
          return t32;
        })());
        return t31;
      })();
    }
    createRoute(navigator) {
      if (navigator == null) dart.nullFailed(I[23], 5432, 45, "navigator");
      let route = dart.nullCheck(navigator[S$._routeNamed](dart.dynamic, this.name, {arguments: this.arguments, allowNull: false}));
      if (!(route !== null)) dart.assertFailed(null, I[23], 5434, 12, "route != null");
      return route;
    }
  };
  (navigator$._NamedRestorationInformation.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[23], 5402, 19, "name");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
    if (restorationScopeId == null) dart.nullFailed(I[23], 5404, 19, "restorationScopeId");
    this.name = name;
    this.arguments = $arguments;
    this[S$0.restorationScopeId$1] = restorationScopeId;
    if (!(name != null)) dart.assertFailed(null, I[23], 5405, 15, "name != null");
    navigator$._NamedRestorationInformation.__proto__.new.call(this, navigator$._RouteRestorationType.named);
    ;
  }).prototype = navigator$._NamedRestorationInformation.prototype;
  dart.addTypeTests(navigator$._NamedRestorationInformation);
  dart.addTypeCaches(navigator$._NamedRestorationInformation);
  dart.setMethodSignature(navigator$._NamedRestorationInformation, () => ({
    __proto__: dart.getMethods(navigator$._NamedRestorationInformation.__proto__),
    createRoute: dart.fnType(navigator$.Route, [navigator$.NavigatorState])
  }));
  dart.setLibraryUri(navigator$._NamedRestorationInformation, I[24]);
  dart.setFieldSignature(navigator$._NamedRestorationInformation, () => ({
    __proto__: dart.getFields(navigator$._NamedRestorationInformation.__proto__),
    restorationScopeId: dart.finalFieldType(core.int),
    name: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.nullable(core.Object))
  }));
  navigator$._AnonymousRestorationInformation = class _AnonymousRestorationInformation extends navigator$._RestorationInformation {
    get restorationScopeId() {
      return this[S$0.restorationScopeId$2];
    }
    set restorationScopeId(value) {
      super.restorationScopeId = value;
    }
    static fromSerializableData(data) {
      if (data == null) dart.nullFailed(I[23], 5446, 79, "data");
      if (!(dart.notNull(data[S$.$length]) > 1)) dart.assertFailed(null, I[23], 5447, 12, "data.length > 1");
      let routeBuilder = T$.BuildContextAndObjectNToRoute().as(dart.nullCheck(ui.PluginUtilities.getCallbackFromHandle(new ui.CallbackHandle.fromRawHandle(core.int.as(dart.nullCheck(data[S$.$_get](1)))))));
      return new navigator$._AnonymousRestorationInformation.new({restorationScopeId: core.int.as(dart.nullCheck(data[S$.$_get](0))), routeBuilder: routeBuilder, arguments: dart.notNull(data[S$.$length]) > 2 ? data[S$.$_get](2) : null});
    }
    get isRestorable() {
      return !true;
    }
    computeSerializableData() {
      let t32;
      if (!dart.test(this.isRestorable)) dart.assertFailed(null, I[23], 5462, 12, "isRestorable");
      let handle = ui.PluginUtilities.getCallbackHandle(this.routeBuilder);
      if (!(handle != null)) dart.assertFailed(null, I[23], 5464, 12, "handle != null");
      t32 = super.computeSerializableData();
      return (() => {
        t32[S$.$addAll]((() => {
          let t33 = T$.JSArrayOfObject().of([this.restorationScopeId, dart.nullCheck(handle).toRawHandle()]);
          if (this.arguments != null) t33[S$.$add](dart.nullCheck(this.arguments));
          return t33;
        })());
        return t32;
      })();
    }
    createRoute(navigator) {
      let t34, t33;
      if (navigator == null) dart.nullFailed(I[23], 5479, 45, "navigator");
      let result = (t33 = navigator.context, t34 = this.arguments, this.routeBuilder(t33, t34));
      if (!(result != null)) dart.assertFailed(null, I[23], 5481, 12, "result != null");
      return result;
    }
  };
  (navigator$._AnonymousRestorationInformation.new = function(opts) {
    let routeBuilder = opts && 'routeBuilder' in opts ? opts.routeBuilder : null;
    if (routeBuilder == null) dart.nullFailed(I[23], 5441, 19, "routeBuilder");
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let restorationScopeId = opts && 'restorationScopeId' in opts ? opts.restorationScopeId : null;
    if (restorationScopeId == null) dart.nullFailed(I[23], 5443, 19, "restorationScopeId");
    this.routeBuilder = routeBuilder;
    this.arguments = $arguments;
    this[S$0.restorationScopeId$2] = restorationScopeId;
    if (!(routeBuilder != null)) dart.assertFailed(null, I[23], 5444, 15, "routeBuilder != null");
    navigator$._AnonymousRestorationInformation.__proto__.new.call(this, navigator$._RouteRestorationType.anonymous);
    ;
  }).prototype = navigator$._AnonymousRestorationInformation.prototype;
  dart.addTypeTests(navigator$._AnonymousRestorationInformation);
  dart.addTypeCaches(navigator$._AnonymousRestorationInformation);
  dart.setMethodSignature(navigator$._AnonymousRestorationInformation, () => ({
    __proto__: dart.getMethods(navigator$._AnonymousRestorationInformation.__proto__),
    createRoute: dart.fnType(navigator$.Route, [navigator$.NavigatorState])
  }));
  dart.setLibraryUri(navigator$._AnonymousRestorationInformation, I[24]);
  dart.setFieldSignature(navigator$._AnonymousRestorationInformation, () => ({
    __proto__: dart.getFields(navigator$._AnonymousRestorationInformation.__proto__),
    restorationScopeId: dart.finalFieldType(core.int),
    routeBuilder: dart.finalFieldType(dart.fnType(navigator$.Route, [framework.BuildContext, dart.nullable(core.Object)])),
    arguments: dart.finalFieldType(dart.nullable(core.Object))
  }));
  const _is_RestorableProperty_default = Symbol('_is_RestorableProperty_default');
  restoration$.RestorableProperty$ = dart.generic(T => {
    class RestorableProperty extends change_notifier.ChangeNotifier {
      get enabled() {
        return true;
      }
      dispose() {
        let t33;
        if (!dart.test(this[S$0._debugAssertNotDisposed]())) dart.assertFailed(null, I[34], 479, 12, "_debugAssertNotDisposed()");
        t33 = this[S$0._owner$1];
        t33 == null ? null : t33[S$0._unregister](this);
        super.dispose();
        this[S$0._disposed] = true;
      }
      [S$0._register](restorationId, owner) {
        if (restorationId == null) dart.nullFailed(I[34], 488, 25, "restorationId");
        if (owner == null) dart.nullFailed(I[34], 488, 57, "owner");
        if (!dart.test(this[S$0._debugAssertNotDisposed]())) dart.assertFailed(null, I[34], 489, 12, "_debugAssertNotDisposed()");
        if (!(restorationId != null)) dart.assertFailed(null, I[34], 490, 12, "restorationId != null");
        if (!(owner != null)) dart.assertFailed(null, I[34], 491, 12, "owner != null");
        this[S$0._restorationId] = restorationId;
        this[S$0._owner$1] = owner;
      }
      [S$0._unregister]() {
        if (!dart.test(this[S$0._debugAssertNotDisposed]())) dart.assertFailed(null, I[34], 496, 12, "_debugAssertNotDisposed()");
        if (!(this[S$0._restorationId] != null)) dart.assertFailed(null, I[34], 497, 12, "_restorationId != null");
        if (!(this[S$0._owner$1] != null)) dart.assertFailed(null, I[34], 498, 12, "_owner != null");
        this[S$0._restorationId] = null;
        this[S$0._owner$1] = null;
      }
      get state() {
        if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[34], 508, 12, "isRegistered");
        if (!dart.test(this[S$0._debugAssertNotDisposed]())) dart.assertFailed(null, I[34], 509, 12, "_debugAssertNotDisposed()");
        return dart.nullCheck(this[S$0._owner$1]);
      }
      get isRegistered() {
        if (!dart.test(this[S$0._debugAssertNotDisposed]())) dart.assertFailed(null, I[34], 516, 12, "_debugAssertNotDisposed()");
        return this[S$0._restorationId] != null;
      }
      [S$0._debugAssertNotDisposed]() {
        if (!dart.test(dart.fn(() => {
          if (dart.test(this[S$0._disposed])) {
            dart.throw(assertions.FlutterError.new("A " + dart.str(this[S$.$runtimeType]) + " was used after being disposed.\n" + "Once you have called dispose() on a " + dart.str(this[S$.$runtimeType]) + ", it can no longer be used."));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[34], 521, 12, "() {\r\n      if (_disposed) {\r\n        throw FlutterError(\r\n          'A $runtimeType was used after being disposed.\\n'\r\n          'Once you have called dispose() on a $runtimeType, it can no longer be used.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
        return true;
      }
    }
    (RestorableProperty.new = function() {
      this[S$0._disposed] = false;
      this[S$0._restorationId] = null;
      this[S$0._owner$1] = null;
      RestorableProperty.__proto__.new.call(this);
      ;
    }).prototype = RestorableProperty.prototype;
    dart.addTypeTests(RestorableProperty);
    RestorableProperty.prototype[_is_RestorableProperty_default] = true;
    dart.addTypeCaches(RestorableProperty);
    dart.setMethodSignature(RestorableProperty, () => ({
      __proto__: dart.getMethods(RestorableProperty.__proto__),
      [S$0._register]: dart.fnType(dart.void, [core.String, restoration$.RestorationMixin$(framework.StatefulWidget)]),
      [S$0._unregister]: dart.fnType(dart.void, []),
      [S$0._debugAssertNotDisposed]: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(RestorableProperty, () => ({
      __proto__: dart.getGetters(RestorableProperty.__proto__),
      enabled: core.bool,
      state: framework.State$(framework.StatefulWidget),
      isRegistered: core.bool
    }));
    dart.setLibraryUri(RestorableProperty, I[35]);
    dart.setFieldSignature(RestorableProperty, () => ({
      __proto__: dart.getFields(RestorableProperty.__proto__),
      [S$0._disposed]: dart.fieldType(core.bool),
      [S$0._restorationId]: dart.fieldType(dart.nullable(core.String)),
      [S$0._owner$1]: dart.fieldType(dart.nullable(restoration$.RestorationMixin$(framework.StatefulWidget)))
    }));
    return RestorableProperty;
  });
  restoration$.RestorableProperty = restoration$.RestorableProperty$();
  dart.addTypeTests(restoration$.RestorableProperty, _is_RestorableProperty_default);
  navigator$._HistoryProperty = class _HistoryProperty extends restoration$.RestorableProperty$(dart.nullable(core.Map$(dart.nullable(core.String), core.List$(core.Object)))) {
    update(history) {
      let t33, t33$, t33$0;
      if (history == null) dart.nullFailed(I[23], 5492, 33, "history");
      if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[23], 5493, 12, "isRegistered");
      let wasUninitialized = this[S$0._pageToPagelessRoutes] == null;
      let needsSerialization = wasUninitialized;
      this[S$0._pageToPagelessRoutes] == null ? this[S$0._pageToPagelessRoutes] = new (T$.IdentityMapOfString$ListOfObject()).new() : null;
      let currentPage = null;
      let newRoutesForCurrentPage = T$.JSArrayOfObject().of([]);
      let oldRoutesForCurrentPage = (t33 = dart.nullCheck(this[S$0._pageToPagelessRoutes])[S$.$_get](null), t33 == null ? C[349] || CT.C349 : t33);
      let restorationEnabled = true;
      let newMap = new (T$.IdentityMapOfStringN$ListOfObject()).new();
      let removedPages = dart.nullCheck(this[S$0._pageToPagelessRoutes])[S$.$keys][S$.$toSet]();
      for (let entry of history) {
        if (!dart.test(entry.isPresentForRestoration)) {
          entry.restorationEnabled = false;
          continue;
        }
        if (!dart.test(entry.isPresentForRestoration)) dart.assertFailed(null, I[23], 5511, 14, "entry.isPresentForRestoration");
        if (dart.test(entry.hasPage)) {
          needsSerialization = needsSerialization || newRoutesForCurrentPage[S$.$length] != oldRoutesForCurrentPage[S$.$length];
          this[S$0._finalizePage](newRoutesForCurrentPage, currentPage, newMap, removedPages);
          currentPage = entry;
          restorationEnabled = entry.restorationId != null;
          entry.restorationEnabled = restorationEnabled;
          if (restorationEnabled) {
            if (!(entry.restorationId != null)) dart.assertFailed(null, I[23], 5519, 18, "entry.restorationId != null");
            newRoutesForCurrentPage = T$.JSArrayOfObject().of([]);
            oldRoutesForCurrentPage = (t33$ = dart.nullCheck(this[S$0._pageToPagelessRoutes])[S$.$_get](entry.restorationId), t33$ == null ? C[349] || CT.C349 : t33$);
          } else {
            newRoutesForCurrentPage = C[349] || CT.C349;
            oldRoutesForCurrentPage = C[349] || CT.C349;
          }
          continue;
        }
        if (!!dart.test(entry.hasPage)) dart.assertFailed(null, I[23], 5529, 14, "!entry.hasPage");
        restorationEnabled = restorationEnabled && (t33$0 = entry.restorationInformation, t33$0 == null ? null : t33$0.isRestorable) === true;
        entry.restorationEnabled = restorationEnabled;
        if (restorationEnabled) {
          if (!(entry.restorationId != null)) dart.assertFailed(null, I[23], 5533, 16, "entry.restorationId != null");
          if (!(currentPage == null || currentPage.restorationId != null)) dart.assertFailed(null, I[23], 5534, 16, "currentPage == null || currentPage.restorationId != null");
          if (!(entry.restorationInformation != null)) dart.assertFailed(null, I[23], 5535, 16, "entry.restorationInformation != null");
          let serializedData = dart.nullCheck(entry.restorationInformation).getSerializableData();
          needsSerialization = needsSerialization || dart.notNull(oldRoutesForCurrentPage[S$.$length]) <= dart.notNull(newRoutesForCurrentPage[S$.$length]) || !dart.equals(oldRoutesForCurrentPage[S$.$_get](newRoutesForCurrentPage[S$.$length]), serializedData);
          newRoutesForCurrentPage[S$.$add](serializedData);
        }
      }
      needsSerialization = needsSerialization || newRoutesForCurrentPage[S$.$length] != oldRoutesForCurrentPage[S$.$length];
      this[S$0._finalizePage](newRoutesForCurrentPage, currentPage, newMap, removedPages);
      needsSerialization = needsSerialization || dart.test(removedPages[S$.$isNotEmpty]);
      if (!(wasUninitialized || this[S$0._debugMapsEqual](dart.nullCheck(this[S$0._pageToPagelessRoutes]), newMap) !== needsSerialization)) dart.assertFailed(null, I[23], 5548, 12, "wasUninitialized || _debugMapsEqual(_pageToPagelessRoutes!, newMap) != needsSerialization");
      if (needsSerialization) {
        this[S$0._pageToPagelessRoutes] = newMap;
        this.notifyListeners();
      }
    }
    [S$0._finalizePage](routes, page, pageToRoutes, pagesToRemove) {
      let t33, t33$;
      if (routes == null) dart.nullFailed(I[23], 5557, 18, "routes");
      if (pageToRoutes == null) dart.nullFailed(I[23], 5559, 32, "pageToRoutes");
      if (pagesToRemove == null) dart.nullFailed(I[23], 5560, 18, "pagesToRemove");
      if (!(page == null || dart.test(page.hasPage))) dart.assertFailed(null, I[23], 5562, 12, "page == null || page.hasPage");
      if (!(pageToRoutes != null)) dart.assertFailed(null, I[23], 5563, 12, "pageToRoutes != null");
      if (!!dart.test(pageToRoutes[S$.$containsKey]((t33 = page, t33 == null ? null : t33.restorationId)))) dart.assertFailed(null, I[23], 5564, 12, "!pageToRoutes.containsKey(page?.restorationId)");
      if (routes != null && dart.test(routes[S$.$isNotEmpty])) {
        if (!(page == null || page.restorationId != null)) dart.assertFailed(null, I[23], 5566, 14, "page == null || page.restorationId != null");
        let restorationId = (t33$ = page, t33$ == null ? null : t33$.restorationId);
        pageToRoutes[S$.$_set](restorationId, routes);
        pagesToRemove.remove(restorationId);
      }
    }
    [S$0._debugMapsEqual](a, b) {
      if (a == null) dart.nullFailed(I[23], 5573, 51, "a");
      if (b == null) dart.nullFailed(I[23], 5573, 81, "b");
      if (!dart.test(collections.setEquals(T$.StringN(), a[S$.$keys][S$.$toSet](), b[S$.$keys][S$.$toSet]()))) {
        return false;
      }
      for (let key of a[S$.$keys]) {
        if (!dart.test(collections.listEquals(core.Object, a[S$.$_get](key), b[S$.$_get](key)))) {
          return false;
        }
      }
      return true;
    }
    clear() {
      if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[23], 5586, 12, "isRegistered");
      if (this[S$0._pageToPagelessRoutes] == null) {
        return;
      }
      this[S$0._pageToPagelessRoutes] = null;
      this.notifyListeners();
    }
    get hasData() {
      return this[S$0._pageToPagelessRoutes] != null;
    }
    restoreEntriesForPage(page, navigator) {
      let t33;
      if (navigator == null) dart.nullFailed(I[23], 5598, 77, "navigator");
      if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[23], 5599, 12, "isRegistered");
      if (!(page == null || dart.test(page.hasPage))) dart.assertFailed(null, I[23], 5600, 12, "page == null || page.hasPage");
      let result = T$.JSArrayOf_RouteEntry().of([]);
      if (this[S$0._pageToPagelessRoutes] == null || page != null && page.restorationId == null) {
        return result;
      }
      let serializedData = dart.nullCheck(this[S$0._pageToPagelessRoutes])[S$.$_get]((t33 = page, t33 == null ? null : t33.restorationId));
      if (serializedData == null) {
        return result;
      }
      for (let data of serializedData) {
        result[S$.$add](navigator$._RestorationInformation.fromSerializableData(data).toRouteEntry(navigator));
      }
      return result;
    }
    createDefaultValue() {
      return null;
    }
    fromPrimitives(data) {
      let casted = core.Map.as(dart.nullCheck(data));
      return casted[S$.$map](T$.StringN(), T$.ListOfObject(), dart.fn((key, value) => new (T$.MapEntryOfStringN$ListOfObject()).__(T$.StringN().as(key), T$.ListOfObject().from(core.List.as(value), {growable: true})), T$.dynamicAnddynamicToMapEntryOfStringN$ListOfObject()));
    }
    initWithValue(value) {
      T$.MapNOfStringN$ListOfObject().as(value);
      this[S$0._pageToPagelessRoutes] = value;
    }
    toPrimitives() {
      return this[S$0._pageToPagelessRoutes];
    }
    get enabled() {
      return this.hasData;
    }
  };
  (navigator$._HistoryProperty.new = function() {
    this[S$0._pageToPagelessRoutes] = null;
    navigator$._HistoryProperty.__proto__.new.call(this);
    ;
  }).prototype = navigator$._HistoryProperty.prototype;
  dart.addTypeTests(navigator$._HistoryProperty);
  dart.addTypeCaches(navigator$._HistoryProperty);
  dart.setMethodSignature(navigator$._HistoryProperty, () => ({
    __proto__: dart.getMethods(navigator$._HistoryProperty.__proto__),
    update: dart.fnType(dart.void, [core.List$(navigator$._RouteEntry)]),
    [S$0._finalizePage]: dart.fnType(dart.void, [core.List$(core.Object), dart.nullable(navigator$._RouteEntry), core.Map$(dart.nullable(core.String), core.List$(core.Object)), core.Set$(dart.nullable(core.String))]),
    [S$0._debugMapsEqual]: dart.fnType(core.bool, [core.Map$(dart.nullable(core.String), core.List$(core.Object)), core.Map$(dart.nullable(core.String), core.List$(core.Object))]),
    clear: dart.fnType(dart.void, []),
    restoreEntriesForPage: dart.fnType(core.List$(navigator$._RouteEntry), [dart.nullable(navigator$._RouteEntry), navigator$.NavigatorState]),
    createDefaultValue: dart.fnType(dart.nullable(core.Map$(dart.nullable(core.String), core.List$(core.Object))), []),
    fromPrimitives: dart.fnType(dart.nullable(core.Map$(dart.nullable(core.String), core.List$(core.Object))), [dart.nullable(core.Object)]),
    initWithValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    toPrimitives: dart.fnType(dart.nullable(core.Object), [])
  }));
  dart.setGetterSignature(navigator$._HistoryProperty, () => ({
    __proto__: dart.getGetters(navigator$._HistoryProperty.__proto__),
    hasData: core.bool
  }));
  dart.setLibraryUri(navigator$._HistoryProperty, I[24]);
  dart.setFieldSignature(navigator$._HistoryProperty, () => ({
    __proto__: dart.getFields(navigator$._HistoryProperty.__proto__),
    [S$0._pageToPagelessRoutes]: dart.fieldType(dart.nullable(core.Map$(dart.nullable(core.String), core.List$(core.Object))))
  }));
  const _is_RestorableRouteFuture_default = Symbol('_is_RestorableRouteFuture_default');
  navigator$.RestorableRouteFuture$ = dart.generic(T => {
    class RestorableRouteFuture extends restoration$.RestorableProperty$(dart.nullable(core.String)) {
      get navigatorFinder() {
        return this[S$0.navigatorFinder];
      }
      set navigatorFinder(value) {
        super.navigatorFinder = value;
      }
      get onPresent() {
        return this[S$0.onPresent];
      }
      set onPresent(value) {
        super.onPresent = value;
      }
      get onComplete() {
        return this[S$0.onComplete];
      }
      set onComplete(value) {
        super.onComplete = value;
      }
      present($arguments = null) {
        let t34, t33;
        if (!!dart.test(this.isPresent)) dart.assertFailed(null, I[23], 5900, 12, "!isPresent");
        if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[23], 5901, 12, "isRegistered");
        let routeId = (t33 = this[S$._navigator], t34 = $arguments, this.onPresent(t33, t34));
        if (!(routeId != null)) dart.assertFailed(null, I[23], 5903, 12, "routeId != null");
        this[S$0._hookOntoRouteFuture](routeId);
        this.notifyListeners();
      }
      get isPresent() {
        return this.route != null;
      }
      get route() {
        return this[S$0._route];
      }
      createDefaultValue() {
        return null;
      }
      initWithValue(value) {
        T$.StringN().as(value);
        if (value != null) {
          this[S$0._hookOntoRouteFuture](value);
        }
      }
      toPrimitives() {
        let t33;
        if (!(this.route != null)) dart.assertFailed(null, I[23], 5931, 12, "route != null");
        if (!dart.test(this.enabled)) dart.assertFailed(null, I[23], 5932, 12, "enabled");
        t33 = this.route;
        return t33 == null ? null : t33.restorationScopeId.value;
      }
      fromPrimitives(data) {
        if (!(data != null)) dart.assertFailed(null, I[23], 5938, 12, "data != null");
        return core.String.as(dart.nullCheck(data));
      }
      dispose() {
        let t33;
        super.dispose();
        t33 = this[S$0._route];
        t33 == null ? null : t33.restorationScopeId.removeListener(dart.bind(this, 'notifyListeners'));
        this[S$0._disposed$1] = true;
      }
      get enabled() {
        let t33;
        return (t33 = this.route, t33 == null ? null : t33.restorationScopeId.value) != null;
      }
      get [S$._navigator]() {
        let t33;
        let navigator = (t33 = this.state.context, this.navigatorFinder(t33));
        if (!(navigator != null)) dart.assertFailed(null, I[23], 5956, 12, "navigator != null");
        return navigator;
      }
      [S$0._hookOntoRouteFuture](id) {
        if (id == null) dart.nullFailed(I[23], 5960, 36, "id");
        if (!(id != null)) dart.assertFailed(null, I[23], 5961, 12, "id != null");
        this[S$0._route] = this[S$._navigator][S$0._getRouteById](T, id);
        if (!(this[S$0._route] != null)) dart.assertFailed(null, I[23], 5963, 12, "_route != null");
        dart.nullCheck(this.route).restorationScopeId.addListener(dart.bind(this, 'notifyListeners'));
        dart.nullCheck(this.route).popped.then(core.Null, dart.fn(result => {
          let t33, t33$;
          if (dart.test(this[S$0._disposed$1])) {
            return;
          }
          t33 = this[S$0._route];
          t33 == null ? null : t33.restorationScopeId.removeListener(dart.bind(this, 'notifyListeners'));
          this[S$0._route] = null;
          this.notifyListeners();
          t33$ = this.onComplete;
          t33$ == null ? null : t33$(T.as(result));
        }, T$.dynamicToNull()));
      }
      static _defaultNavigatorFinder(context) {
        if (context == null) dart.nullFailed(I[23], 5976, 62, "context");
        return navigator$.Navigator.of(context);
      }
    }
    (RestorableRouteFuture.new = function(opts) {
      let navigatorFinder = opts && 'navigatorFinder' in opts ? opts.navigatorFinder : C[350] || CT.C350;
      if (navigatorFinder == null) dart.nullFailed(I[23], 5865, 10, "navigatorFinder");
      let onPresent = opts && 'onPresent' in opts ? opts.onPresent : null;
      if (onPresent == null) dart.nullFailed(I[23], 5866, 19, "onPresent");
      let onComplete = opts && 'onComplete' in opts ? opts.onComplete : null;
      this[S$0._route] = null;
      this[S$0._disposed$1] = false;
      this[S$0.navigatorFinder] = navigatorFinder;
      this[S$0.onPresent] = onPresent;
      this[S$0.onComplete] = onComplete;
      if (!(onPresent != null)) dart.assertFailed(null, I[23], 5868, 15, "onPresent != null");
      if (!(navigatorFinder != null)) dart.assertFailed(null, I[23], 5868, 42, "navigatorFinder != null");
      RestorableRouteFuture.__proto__.new.call(this);
      ;
    }).prototype = RestorableRouteFuture.prototype;
    dart.addTypeTests(RestorableRouteFuture);
    RestorableRouteFuture.prototype[_is_RestorableRouteFuture_default] = true;
    dart.addTypeCaches(RestorableRouteFuture);
    dart.setMethodSignature(RestorableRouteFuture, () => ({
      __proto__: dart.getMethods(RestorableRouteFuture.__proto__),
      present: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
      createDefaultValue: dart.fnType(dart.nullable(core.String), []),
      initWithValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      toPrimitives: dart.fnType(dart.nullable(core.Object), []),
      fromPrimitives: dart.fnType(core.String, [dart.nullable(core.Object)]),
      [S$0._hookOntoRouteFuture]: dart.fnType(dart.void, [core.String])
    }));
    dart.setGetterSignature(RestorableRouteFuture, () => ({
      __proto__: dart.getGetters(RestorableRouteFuture.__proto__),
      isPresent: core.bool,
      route: dart.nullable(navigator$.Route$(T)),
      [S$._navigator]: navigator$.NavigatorState
    }));
    dart.setLibraryUri(RestorableRouteFuture, I[24]);
    dart.setFieldSignature(RestorableRouteFuture, () => ({
      __proto__: dart.getFields(RestorableRouteFuture.__proto__),
      navigatorFinder: dart.finalFieldType(dart.fnType(navigator$.NavigatorState, [framework.BuildContext])),
      onPresent: dart.finalFieldType(dart.fnType(core.String, [navigator$.NavigatorState, dart.nullable(core.Object)])),
      onComplete: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [T]))),
      [S$0._route]: dart.fieldType(dart.nullable(navigator$.Route$(T))),
      [S$0._disposed$1]: dart.fieldType(core.bool)
    }));
    return RestorableRouteFuture;
  });
  navigator$.RestorableRouteFuture = navigator$.RestorableRouteFuture$();
  dart.addTypeTests(navigator$.RestorableRouteFuture, _is_RestorableRouteFuture_default);
  const _is_KeySet_default = Symbol('_is_KeySet_default');
  shortcuts$.KeySet$ = dart.generic(T => {
    var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    var HashSetOfT = () => (HashSetOfT = dart.constFn(collection.HashSet$(T)))();
    var KeySetOfT = () => (KeySetOfT = dart.constFn(shortcuts$.KeySet$(T)))();
    class KeySet extends core.Object {
      get keys() {
        return this[S$0._keys].toSet();
      }
      _equals(other) {
        if (other == null) return false;
        if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) {
          return false;
        }
        return KeySetOfT().is(other) && dart.test(collections.setEquals(T, other[S$0._keys], this[S$0._keys]));
      }
      get hashCode() {
        let t34;
        if (!dart.test(this[S$0.__KeySet_hashCode_isSet])) {
          let t33 = shortcuts$.KeySet._computeHashCode(T, this[S$0._keys]);
          if (dart.test(this[S$0.__KeySet_hashCode_isSet])) dart.throw(new _internal.LateError.fieldADI("hashCode"));
          this[S$0.__KeySet_hashCode] = t33;
          this[S$0.__KeySet_hashCode_isSet] = true;
        }
        t34 = this[S$0.__KeySet_hashCode];
        return t34;
      }
      static _computeHashCode(T, keys) {
        if (keys == null) dart.nullFailed(I[36], 102, 41, "keys");
        let length = keys[S$.$length];
        let iterator = keys.iterator;
        iterator.moveNext();
        let h1 = dart.hashCode(iterator.current);
        if (length === 1) {
          return h1;
        }
        iterator.moveNext();
        let h2 = dart.hashCode(iterator.current);
        if (length === 2) {
          return dart.notNull(h1) < dart.notNull(h2) ? ui.hashValues(h1, h2) : ui.hashValues(h2, h1);
        }
        let sortedHashes = length === 3 ? shortcuts$.KeySet._tempHashStore3 : shortcuts$.KeySet._tempHashStore4;
        sortedHashes[S$.$_set](0, h1);
        sortedHashes[S$.$_set](1, h2);
        iterator.moveNext();
        sortedHashes[S$.$_set](2, dart.hashCode(iterator.current));
        if (length === 4) {
          iterator.moveNext();
          sortedHashes[S$.$_set](3, dart.hashCode(iterator.current));
        }
        sortedHashes[S$.$sort]();
        return ui.hashList(sortedHashes);
      }
    }
    (KeySet.new = function(key1, key2 = null, key3 = null, key4 = null) {
      let t33;
      if (key1 == null) dart.nullFailed(I[36], 38, 7, "key1");
      this[S$0.__KeySet_hashCode] = null;
      this[S$0.__KeySet_hashCode_isSet] = false;
      if (!(key1 != null)) dart.assertFailed(null, I[36], 42, 16, "key1 != null");
      this[S$0._keys] = (t33 = new (_HashSetOfT()).new(), (() => {
        t33.add(key1);
        return t33;
      })());
      let count = 1;
      if (key2 != null) {
        this[S$0._keys].add(key2);
        if (!dart.test(dart.fn(() => {
          count = count + 1;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[36], 47, 14, "() {\r\n        count++;\r\n        return true;\r\n      }()");
      }
      if (key3 != null) {
        this[S$0._keys].add(key3);
        if (!dart.test(dart.fn(() => {
          count = count + 1;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[36], 54, 14, "() {\r\n        count++;\r\n        return true;\r\n      }()");
      }
      if (key4 != null) {
        this[S$0._keys].add(key4);
        if (!dart.test(dart.fn(() => {
          count = count + 1;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[36], 61, 14, "() {\r\n        count++;\r\n        return true;\r\n      }()");
      }
      if (!(this[S$0._keys][S$.$length] === count)) dart.assertFailed("Two or more provided keys are identical. Each key must appear only once.", I[36], 66, 12, "_keys.length == count");
    }).prototype = KeySet.prototype;
    (KeySet.fromSet = function(keys) {
      if (keys == null) dart.nullFailed(I[36], 74, 25, "keys");
      this[S$0.__KeySet_hashCode] = null;
      this[S$0.__KeySet_hashCode_isSet] = false;
      if (!(keys != null)) dart.assertFailed(null, I[36], 75, 16, "keys != null");
      if (!dart.test(keys[S$.$isNotEmpty])) dart.assertFailed(null, I[36], 76, 16, "keys.isNotEmpty");
      if (!!dart.test(keys.contains(null))) dart.assertFailed(null, I[36], 77, 16, "!keys.contains(null)");
      this[S$0._keys] = HashSetOfT().from(keys);
      ;
    }).prototype = KeySet.prototype;
    dart.addTypeTests(KeySet);
    KeySet.prototype[_is_KeySet_default] = true;
    dart.addTypeCaches(KeySet);
    dart.setGetterSignature(KeySet, () => ({
      __proto__: dart.getGetters(KeySet.__proto__),
      keys: core.Set$(T)
    }));
    dart.setLibraryUri(KeySet, I[37]);
    dart.setFieldSignature(KeySet, () => ({
      __proto__: dart.getFields(KeySet.__proto__),
      [S$0._keys]: dart.finalFieldType(collection.HashSet$(T)),
      [S$0.__KeySet_hashCode]: dart.fieldType(dart.nullable(core.int)),
      [S$0.__KeySet_hashCode_isSet]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(KeySet, ['_equals']);
    dart.defineExtensionAccessors(KeySet, ['hashCode']);
    return KeySet;
  });
  shortcuts$.KeySet = shortcuts$.KeySet$();
  dart.defineLazy(shortcuts$.KeySet, {
    /*shortcuts$.KeySet._tempHashStore3*/get _tempHashStore3() {
      return T$.JSArrayOfint().of([0, 0, 0]);
    },
    /*shortcuts$.KeySet._tempHashStore4*/get _tempHashStore4() {
      return T$.JSArrayOfint().of([0, 0, 0, 0]);
    }
  }, false);
  dart.addTypeTests(shortcuts$.KeySet, _is_KeySet_default);
  const KeySet_Diagnosticable$36 = class KeySet_Diagnosticable extends shortcuts$.KeySet$(keyboard_key.LogicalKeyboardKey) {};
  (KeySet_Diagnosticable$36.new = function(key1, key2, key3, key4) {
    KeySet_Diagnosticable$36.__proto__.new.call(this, key1, key2, key3, key4);
  }).prototype = KeySet_Diagnosticable$36.prototype;
  (KeySet_Diagnosticable$36.fromSet = function(keys) {
    KeySet_Diagnosticable$36.__proto__.fromSet.call(this, keys);
  }).prototype = KeySet_Diagnosticable$36.prototype;
  dart.applyMixin(KeySet_Diagnosticable$36, diagnostics$.Diagnosticable);
  shortcuts$.LogicalKeySet = class LogicalKeySet extends KeySet_Diagnosticable$36 {
    debugDescribeKeys() {
      let t34;
      let sortedKeys = (t34 = this.keys[S$.$toList](), (() => {
        t34[S$.$sort](dart.fn((a, b) => {
          if (a == null) dart.nullFailed(I[36], 187, 33, "a");
          if (b == null) dart.nullFailed(I[36], 187, 55, "b");
          let aIsModifier = dart.test(a.synonyms[S$.$isNotEmpty]) || dart.test(shortcuts$.LogicalKeySet._modifiers.contains(a));
          let bIsModifier = dart.test(b.synonyms[S$.$isNotEmpty]) || dart.test(shortcuts$.LogicalKeySet._modifiers.contains(b));
          if (aIsModifier && !bIsModifier) {
            return -1;
          } else if (bIsModifier && !aIsModifier) {
            return 1;
          }
          return dart.nullCheck(a.debugName)[S$.$compareTo](dart.nullCheck(b.debugName));
        }, T$.LogicalKeyboardKeyAndLogicalKeyboardKeyToint()));
        return t34;
      })());
      return sortedKeys[S$.$map](core.String, dart.fn(key => {
        if (key == null) dart.nullFailed(I[36], 200, 55, "key");
        return dart.toString(key.debugName);
      }, T$.LogicalKeyboardKeyToString()))[S$.$join](" + ");
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[36], 204, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfSetOfLogicalKeyboardKey()).new("keys", this[S$0._keys], {description: this.debugDescribeKeys()}));
    }
  };
  (shortcuts$.LogicalKeySet.new = function(key1, key2 = null, key3 = null, key4 = null) {
    if (key1 == null) dart.nullFailed(I[36], 162, 24, "key1");
    shortcuts$.LogicalKeySet.__proto__.new.call(this, key1, key2, key3, key4);
    ;
  }).prototype = shortcuts$.LogicalKeySet.prototype;
  (shortcuts$.LogicalKeySet.fromSet = function(keys) {
    if (keys == null) dart.nullFailed(I[36], 173, 49, "keys");
    shortcuts$.LogicalKeySet.__proto__.fromSet.call(this, keys);
    ;
  }).prototype = shortcuts$.LogicalKeySet.prototype;
  dart.addTypeTests(shortcuts$.LogicalKeySet);
  dart.addTypeCaches(shortcuts$.LogicalKeySet);
  dart.setMethodSignature(shortcuts$.LogicalKeySet, () => ({
    __proto__: dart.getMethods(shortcuts$.LogicalKeySet.__proto__),
    debugDescribeKeys: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(shortcuts$.LogicalKeySet, I[37]);
  dart.defineLazy(shortcuts$.LogicalKeySet, {
    /*shortcuts$.LogicalKeySet._modifiers*/get _modifiers() {
      return T$.LinkedHashSetOfLogicalKeyboardKey().from([keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift]);
    }
  }, false);
  shortcuts$.ShortcutMapProperty = class ShortcutMapProperty extends diagnostics$.DiagnosticsProperty$(core.Map$(shortcuts$.LogicalKeySet, actions$.Intent)) {
    get value() {
      return dart.nullCheck(super.value);
    }
    valueToString(opts) {
      let parentConfiguration = opts && 'parentConfiguration' in opts ? opts.parentConfiguration : null;
      return "{" + dart.str(this.value[S$.$keys][S$.$map](core.String, dart.fn(keySet => {
        if (keySet == null) dart.nullFailed(I[36], 241, 54, "keySet");
        return "{" + dart.str(keySet.debugDescribeKeys()) + "}: " + dart.str(this.value[S$.$_get](keySet));
      }, T$.LogicalKeySetToString()))[S$.$join](", ")) + "}";
    }
  };
  (shortcuts$.ShortcutMapProperty.new = function(name, value, opts) {
    if (name == null) dart.nullFailed(I[36], 219, 12, "name");
    if (value == null) dart.nullFailed(I[36], 220, 32, "value");
    let showName = opts && 'showName' in opts ? opts.showName : true;
    if (showName == null) dart.nullFailed(I[36], 221, 10, "showName");
    let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : C[351] || CT.C351;
    if (defaultValue == null) dart.nullFailed(I[36], 222, 12, "defaultValue");
    let level = opts && 'level' in opts ? opts.level : C[352] || CT.C352;
    if (level == null) dart.nullFailed(I[36], 223, 21, "level");
    let description = opts && 'description' in opts ? opts.description : null;
    if (!(showName != null)) dart.assertFailed(null, I[36], 225, 15, "showName != null");
    if (!(level != null)) dart.assertFailed(null, I[36], 226, 15, "level != null");
    shortcuts$.ShortcutMapProperty.__proto__.new.call(this, name, value, {showName: showName, defaultValue: defaultValue, level: level, description: description});
    ;
  }).prototype = shortcuts$.ShortcutMapProperty.prototype;
  dart.addTypeTests(shortcuts$.ShortcutMapProperty);
  dart.addTypeCaches(shortcuts$.ShortcutMapProperty);
  dart.setGetterSignature(shortcuts$.ShortcutMapProperty, () => ({
    __proto__: dart.getGetters(shortcuts$.ShortcutMapProperty.__proto__),
    value: core.Map$(shortcuts$.LogicalKeySet, actions$.Intent)
  }));
  dart.setLibraryUri(shortcuts$.ShortcutMapProperty, I[37]);
  const ChangeNotifier_Diagnosticable$36 = class ChangeNotifier_Diagnosticable extends change_notifier.ChangeNotifier {};
  (ChangeNotifier_Diagnosticable$36.new = function() {
    ChangeNotifier_Diagnosticable$36.__proto__.new.call(this);
  }).prototype = ChangeNotifier_Diagnosticable$36.prototype;
  dart.applyMixin(ChangeNotifier_Diagnosticable$36, diagnostics$.Diagnosticable);
  shortcuts$.ShortcutManager = class ShortcutManager extends ChangeNotifier_Diagnosticable$36 {
    get modal() {
      return this[S$0.modal];
    }
    set modal(value) {
      super.modal = value;
    }
    get shortcuts() {
      return this[S$0._shortcuts];
    }
    set shortcuts(value) {
      if (value == null) dart.nullFailed(I[36], 279, 44, "value");
      if (!(value != null)) dart.assertFailed(null, I[36], 280, 12, "value != null");
      if (!dart.test(collections.mapEquals(shortcuts$.LogicalKeySet, actions$.Intent, this[S$0._shortcuts], value))) {
        this[S$0._shortcuts] = value;
        this.notifyListeners();
      }
    }
    [S$0._find](opts) {
      let keysPressed = opts && 'keysPressed' in opts ? opts.keysPressed : null;
      if (keysPressed == null && dart.test(raw_keyboard.RawKeyboard.instance.keysPressed[S$.$isEmpty])) {
        return null;
      }
      keysPressed == null ? keysPressed = new shortcuts$.LogicalKeySet.fromSet(raw_keyboard.RawKeyboard.instance.keysPressed) : null;
      let matchedIntent = this[S$0._shortcuts][S$.$_get](keysPressed);
      if (matchedIntent == null) {
        let pseudoKeys = T$.LinkedHashSetOfLogicalKeyboardKey().new();
        for (let setKey of keysPressed.keys) {
          if (keyboard_key.LogicalKeyboardKey.is(setKey)) {
            let synonyms = setKey.synonyms;
            if (dart.test(synonyms[S$.$isNotEmpty])) {
              if (!(synonyms[S$.$length] === 1)) dart.assertFailed("Unexpectedly encountered a key synonym with more than one key.", I[36], 310, 20, "synonyms.length == 1");
              pseudoKeys.add(synonyms[S$.$first]);
            } else {
              pseudoKeys.add(setKey);
            }
          }
        }
        matchedIntent = this[S$0._shortcuts][S$.$_get](new shortcuts$.LogicalKeySet.fromSet(pseudoKeys));
      }
      return matchedIntent;
    }
    handleKeypress(context, event, opts) {
      if (context == null) dart.nullFailed(I[36], 342, 18, "context");
      if (event == null) dart.nullFailed(I[36], 343, 17, "event");
      let keysPressed = opts && 'keysPressed' in opts ? opts.keysPressed : null;
      if (!raw_keyboard.RawKeyDownEvent.is(event)) {
        return focus_manager.KeyEventResult.ignored;
      }
      if (!(context != null)) dart.assertFailed(null, I[36], 349, 12, "context != null");
      if (!(keysPressed != null || dart.test(raw_keyboard.RawKeyboard.instance.keysPressed[S$.$isNotEmpty]))) dart.assertFailed("Received a key down event when no keys are in keysPressed. " + "This state can occur if the key event being sent doesn't properly " + "set its modifier flags. This was the event: " + dart.str(event) + " and its data: " + dart.str(event.data), I[36], 351, 7, "keysPressed != null || RawKeyboard.instance.keysPressed.isNotEmpty");
      let matchedIntent = this[S$0._find]({keysPressed: keysPressed});
      if (matchedIntent != null) {
        let primaryContext = dart.nullCheck(dart.nullCheck(focus_manager.primaryFocus).context);
        if (!(primaryContext !== null)) dart.assertFailed(null, I[36], 360, 15, "primaryContext != null");
        let action = actions$.Actions.maybeFind(actions$.Intent, primaryContext, {intent: matchedIntent});
        if (action != null && dart.test(action.isEnabled(matchedIntent))) {
          actions$.Actions.of(primaryContext).invokeAction(action, matchedIntent, primaryContext);
          return dart.test(action.consumesKey(matchedIntent)) ? focus_manager.KeyEventResult.handled : focus_manager.KeyEventResult.skipRemainingHandlers;
        }
      }
      return dart.test(this.modal) ? focus_manager.KeyEventResult.skipRemainingHandlers : focus_manager.KeyEventResult.ignored;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[36], 376, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfMapOfLogicalKeySet$Intent()).new("shortcuts", this[S$0._shortcuts]));
      properties.add(new diagnostics$.FlagProperty.new("modal", {value: this.modal, ifTrue: "modal", defaultValue: false}));
    }
  };
  (shortcuts$.ShortcutManager.new = function(opts) {
    let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : C[353] || CT.C353;
    if (shortcuts == null) dart.nullFailed(I[36], 254, 32, "shortcuts");
    let modal = opts && 'modal' in opts ? opts.modal : false;
    if (modal == null) dart.nullFailed(I[36], 255, 10, "modal");
    this[S$0.modal] = modal;
    if (!(shortcuts != null)) dart.assertFailed(null, I[36], 256, 16, "shortcuts != null");
    this[S$0._shortcuts] = shortcuts;
    shortcuts$.ShortcutManager.__proto__.new.call(this);
    ;
  }).prototype = shortcuts$.ShortcutManager.prototype;
  dart.addTypeTests(shortcuts$.ShortcutManager);
  dart.addTypeCaches(shortcuts$.ShortcutManager);
  dart.setMethodSignature(shortcuts$.ShortcutManager, () => ({
    __proto__: dart.getMethods(shortcuts$.ShortcutManager.__proto__),
    [S$0._find]: dart.fnType(dart.nullable(actions$.Intent), [], {keysPressed: dart.nullable(shortcuts$.LogicalKeySet)}, {}),
    handleKeypress: dart.fnType(focus_manager.KeyEventResult, [framework.BuildContext, raw_keyboard.RawKeyEvent], {keysPressed: dart.nullable(shortcuts$.LogicalKeySet)}, {})
  }));
  dart.setGetterSignature(shortcuts$.ShortcutManager, () => ({
    __proto__: dart.getGetters(shortcuts$.ShortcutManager.__proto__),
    shortcuts: core.Map$(shortcuts$.LogicalKeySet, actions$.Intent)
  }));
  dart.setSetterSignature(shortcuts$.ShortcutManager, () => ({
    __proto__: dart.getSetters(shortcuts$.ShortcutManager.__proto__),
    shortcuts: core.Map$(shortcuts$.LogicalKeySet, actions$.Intent)
  }));
  dart.setLibraryUri(shortcuts$.ShortcutManager, I[37]);
  dart.setFieldSignature(shortcuts$.ShortcutManager, () => ({
    __proto__: dart.getFields(shortcuts$.ShortcutManager.__proto__),
    modal: dart.finalFieldType(core.bool),
    [S$0._shortcuts]: dart.fieldType(core.Map$(shortcuts$.LogicalKeySet, actions$.Intent))
  }));
  shortcuts$.Shortcuts = class Shortcuts extends framework.StatefulWidget {
    get manager() {
      return this[S$0.manager];
    }
    set manager(value) {
      super.manager = value;
    }
    get shortcuts() {
      return this[S$0.shortcuts];
    }
    set shortcuts(value) {
      super.shortcuts = value;
    }
    get child() {
      return this[S$0.child$9];
    }
    set child(value) {
      super.child = value;
    }
    get debugLabel() {
      return this[S$0.debugLabel];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    static of(context) {
      if (context == null) dart.nullFailed(I[36], 622, 42, "context");
      if (!(context != null)) dart.assertFailed(null, I[36], 623, 12, "context != null");
      let inherited = context.dependOnInheritedWidgetOfExactType(shortcuts$._ShortcutsMarker);
      if (!dart.test(dart.fn(() => {
        if (inherited == null) {
          dart.throw(assertions.FlutterError.new("Unable to find a " + dart.str(dart.wrapType(shortcuts$.Shortcuts)) + " widget in the context.\n" + dart.str(dart.wrapType(shortcuts$.Shortcuts)) + ".of() was called with a context that does not contain a " + dart.str(dart.wrapType(shortcuts$.Shortcuts)) + " widget.\n" + "No " + dart.str(dart.wrapType(shortcuts$.Shortcuts)) + " ancestor could be found starting from the context that was " + "passed to " + dart.str(dart.wrapType(shortcuts$.Shortcuts)) + ".of().\n" + "The context used was:\n" + "  " + dart.str(context)));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[36], 625, 12, "() {\r\n      if (inherited == null) {\r\n        throw FlutterError(\r\n          'Unable to find a $Shortcuts widget in the context.\\n'\r\n          '$Shortcuts.of() was called with a context that does not contain a '\r\n          '$Shortcuts widget.\\n'\r\n          'No $Shortcuts ancestor could be found starting from the context that was '\r\n          'passed to $Shortcuts.of().\\n'\r\n          'The context used was:\\n'\r\n          '  $context',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return dart.nullCheck(inherited).manager;
    }
    static maybeOf(context) {
      let t34;
      if (context == null) dart.nullFailed(I[36], 654, 48, "context");
      if (!(context != null)) dart.assertFailed(null, I[36], 655, 12, "context != null");
      let inherited = context.dependOnInheritedWidgetOfExactType(shortcuts$._ShortcutsMarker);
      t34 = inherited;
      return t34 == null ? null : t34.manager;
    }
    createState() {
      return new shortcuts$._ShortcutsState.new();
    }
    debugFillProperties(properties) {
      let t34, t34$;
      if (properties == null) dart.nullFailed(I[36], 664, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfShortcutManager()).new("manager", this.manager, {defaultValue: null}));
      properties.add(new shortcuts$.ShortcutMapProperty.new("shortcuts", this.shortcuts, {description: dart.test((t34$ = (t34 = this.debugLabel, t34 == null ? null : t34[S$.$isNotEmpty]), t34$ == null ? false : t34$)) ? this.debugLabel : null}));
    }
  };
  (shortcuts$.Shortcuts.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let manager = opts && 'manager' in opts ? opts.manager : null;
    let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
    if (shortcuts == null) dart.nullFailed(I[36], 571, 19, "shortcuts");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[36], 572, 19, "child");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.manager] = manager;
    this[S$0.shortcuts] = shortcuts;
    this[S$0.child$9] = child;
    this[S$0.debugLabel] = debugLabel;
    if (!(shortcuts != null)) dart.assertFailed(null, I[36], 574, 15, "shortcuts != null");
    if (!(child != null)) dart.assertFailed(null, I[36], 575, 15, "child != null");
    shortcuts$.Shortcuts.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = shortcuts$.Shortcuts.prototype;
  dart.addTypeTests(shortcuts$.Shortcuts);
  dart.addTypeCaches(shortcuts$.Shortcuts);
  dart.setMethodSignature(shortcuts$.Shortcuts, () => ({
    __proto__: dart.getMethods(shortcuts$.Shortcuts.__proto__),
    createState: dart.fnType(shortcuts$._ShortcutsState, [])
  }));
  dart.setLibraryUri(shortcuts$.Shortcuts, I[37]);
  dart.setFieldSignature(shortcuts$.Shortcuts, () => ({
    __proto__: dart.getFields(shortcuts$.Shortcuts.__proto__),
    manager: dart.finalFieldType(dart.nullable(shortcuts$.ShortcutManager)),
    shortcuts: dart.finalFieldType(core.Map$(shortcuts$.LogicalKeySet, actions$.Intent)),
    child: dart.finalFieldType(framework.Widget),
    debugLabel: dart.finalFieldType(dart.nullable(core.String))
  }));
  shortcuts$._ShortcutsState = class _ShortcutsState extends framework.State$(shortcuts$.Shortcuts) {
    get manager() {
      let t34;
      t34 = this.widget.manager;
      return t34 == null ? dart.nullCheck(this[S$0._internalManager]) : t34;
    }
    dispose() {
      let t34;
      t34 = this[S$0._internalManager];
      t34 == null ? null : t34.dispose();
      super.dispose();
    }
    initState() {
      super.initState();
      if (this.widget.manager == null) {
        this[S$0._internalManager] = new shortcuts$.ShortcutManager.new();
      }
      this.manager.shortcuts = this.widget.shortcuts;
    }
    didUpdateWidget(oldWidget) {
      let t34;
      shortcuts$.Shortcuts.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[36], 691, 34, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.manager, oldWidget.manager)) {
        if (this.widget.manager != null) {
          t34 = this[S$0._internalManager];
          t34 == null ? null : t34.dispose();
          this[S$0._internalManager] = null;
        } else {
          this[S$0._internalManager] == null ? this[S$0._internalManager] = new shortcuts$.ShortcutManager.new() : null;
        }
      }
      this.manager.shortcuts = this.widget.shortcuts;
    }
    [S$0._handleOnKey](node, event) {
      if (node == null) dart.nullFailed(I[36], 704, 41, "node");
      if (event == null) dart.nullFailed(I[36], 704, 59, "event");
      if (node.context == null) {
        return focus_manager.KeyEventResult.ignored;
      }
      return this.manager.handleKeypress(dart.nullCheck(node.context), event);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[36], 712, 29, "context");
      return new focus_scope.Focus.new({debugLabel: dart.str(dart.wrapType(shortcuts$.Shortcuts)), canRequestFocus: false, onKey: dart.bind(this, S$0._handleOnKey), child: new shortcuts$._ShortcutsMarker.new({manager: this.manager, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[354] || CT.C354}), $creationLocationd_0dea112b090073317d4: C[358] || CT.C358});
    }
  };
  (shortcuts$._ShortcutsState.new = function() {
    this[S$0._internalManager] = null;
    shortcuts$._ShortcutsState.__proto__.new.call(this);
    ;
  }).prototype = shortcuts$._ShortcutsState.prototype;
  dart.addTypeTests(shortcuts$._ShortcutsState);
  dart.addTypeCaches(shortcuts$._ShortcutsState);
  dart.setMethodSignature(shortcuts$._ShortcutsState, () => ({
    __proto__: dart.getMethods(shortcuts$._ShortcutsState.__proto__),
    [S$0._handleOnKey]: dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, raw_keyboard.RawKeyEvent]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(shortcuts$._ShortcutsState, () => ({
    __proto__: dart.getGetters(shortcuts$._ShortcutsState.__proto__),
    manager: shortcuts$.ShortcutManager
  }));
  dart.setLibraryUri(shortcuts$._ShortcutsState, I[37]);
  dart.setFieldSignature(shortcuts$._ShortcutsState, () => ({
    __proto__: dart.getFields(shortcuts$._ShortcutsState.__proto__),
    [S$0._internalManager]: dart.fieldType(dart.nullable(shortcuts$.ShortcutManager))
  }));
  const _is_InheritedNotifier_default = Symbol('_is_InheritedNotifier_default');
  inherited_notifier.InheritedNotifier$ = dart.generic(T => {
    var InheritedNotifierOfT = () => (InheritedNotifierOfT = dart.constFn(inherited_notifier.InheritedNotifier$(T)))();
    var _InheritedNotifierElementOfT = () => (_InheritedNotifierElementOfT = dart.constFn(inherited_notifier._InheritedNotifierElement$(T)))();
    class InheritedNotifier extends framework.InheritedWidget {
      get notifier() {
        return this[S$0.notifier];
      }
      set notifier(value) {
        super.notifier = value;
      }
      updateShouldNotify(oldWidget) {
        InheritedNotifierOfT().as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[38], 155, 48, "oldWidget");
        return !dart.equals(oldWidget.notifier, this.notifier);
      }
      createElement() {
        return new (_InheritedNotifierElementOfT()).new(this);
      }
    }
    (InheritedNotifier.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let notifier = opts && 'notifier' in opts ? opts.notifier : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[38], 136, 21, "child");
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      this[S$0.notifier] = notifier;
      if (!(child != null)) dart.assertFailed(null, I[38], 137, 15, "child != null");
      InheritedNotifier.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = InheritedNotifier.prototype;
    dart.addTypeTests(InheritedNotifier);
    InheritedNotifier.prototype[_is_InheritedNotifier_default] = true;
    dart.addTypeCaches(InheritedNotifier);
    dart.setMethodSignature(InheritedNotifier, () => ({
      __proto__: dart.getMethods(InheritedNotifier.__proto__),
      updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      createElement: dart.fnType(inherited_notifier._InheritedNotifierElement$(T), [])
    }));
    dart.setLibraryUri(InheritedNotifier, I[39]);
    dart.setFieldSignature(InheritedNotifier, () => ({
      __proto__: dart.getFields(InheritedNotifier.__proto__),
      notifier: dart.finalFieldType(dart.nullable(T))
    }));
    return InheritedNotifier;
  });
  inherited_notifier.InheritedNotifier = inherited_notifier.InheritedNotifier$();
  dart.addTypeTests(inherited_notifier.InheritedNotifier, _is_InheritedNotifier_default);
  shortcuts$._ShortcutsMarker = class _ShortcutsMarker extends inherited_notifier.InheritedNotifier$(shortcuts$.ShortcutManager) {
    get manager() {
      return dart.nullCheck(super.notifier);
    }
  };
  (shortcuts$._ShortcutsMarker.new = function(opts) {
    let manager = opts && 'manager' in opts ? opts.manager : null;
    if (manager == null) dart.nullFailed(I[36], 727, 30, "manager");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[36], 728, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    if (!(manager != null)) dart.assertFailed(null, I[36], 729, 16, "manager != null");
    if (!(child != null)) dart.assertFailed(null, I[36], 730, 16, "child != null");
    shortcuts$._ShortcutsMarker.__proto__.new.call(this, {notifier: manager, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = shortcuts$._ShortcutsMarker.prototype;
  dart.addTypeTests(shortcuts$._ShortcutsMarker);
  dart.addTypeCaches(shortcuts$._ShortcutsMarker);
  dart.setGetterSignature(shortcuts$._ShortcutsMarker, () => ({
    __proto__: dart.getGetters(shortcuts$._ShortcutsMarker.__proto__),
    manager: shortcuts$.ShortcutManager
  }));
  dart.setLibraryUri(shortcuts$._ShortcutsMarker, I[37]);
  default_text_editing_shortcuts.DefaultTextEditingShortcuts = class DefaultTextEditingShortcuts extends shortcuts$.Shortcuts {
    static get _shortcuts() {
      if (true) {
        return default_text_editing_shortcuts.DefaultTextEditingShortcuts._webShortcuts;
      }
      switch (platform.defaultTargetPlatform) {
        case C[84] || CT.C84:
        {
          return default_text_editing_shortcuts.DefaultTextEditingShortcuts._androidShortcuts;
        }
        case C[85] || CT.C85:
        {
          return default_text_editing_shortcuts.DefaultTextEditingShortcuts._fuchsiaShortcuts;
        }
        case C[88] || CT.C88:
        {
          return default_text_editing_shortcuts.DefaultTextEditingShortcuts._iOSShortcuts;
        }
        case C[86] || CT.C86:
        {
          return default_text_editing_shortcuts.DefaultTextEditingShortcuts._linuxShortcuts;
        }
        case C[89] || CT.C89:
        {
          return default_text_editing_shortcuts.DefaultTextEditingShortcuts._macShortcuts;
        }
        case C[87] || CT.C87:
        {
          return default_text_editing_shortcuts.DefaultTextEditingShortcuts._windowsShortcuts;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  (default_text_editing_shortcuts.DefaultTextEditingShortcuts.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[40], 155, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    default_text_editing_shortcuts.DefaultTextEditingShortcuts.__proto__.new.call(this, {key: key, debugLabel: "<Default Text Editing Shortcuts>", shortcuts: default_text_editing_shortcuts.DefaultTextEditingShortcuts._shortcuts, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = default_text_editing_shortcuts.DefaultTextEditingShortcuts.prototype;
  dart.addTypeTests(default_text_editing_shortcuts.DefaultTextEditingShortcuts);
  dart.addTypeCaches(default_text_editing_shortcuts.DefaultTextEditingShortcuts);
  dart.setLibraryUri(default_text_editing_shortcuts.DefaultTextEditingShortcuts, I[41]);
  dart.defineLazy(default_text_editing_shortcuts.DefaultTextEditingShortcuts, {
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._androidShortcuts*/get _androidShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[364] || CT.C364, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[367] || CT.C367, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[368] || CT.C368, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[369] || CT.C369, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[371] || CT.C371, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[372] || CT.C372, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[373] || CT.C373, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[374] || CT.C374, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[375] || CT.C375, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowLeft), C[376] || CT.C376, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowRight), C[377] || CT.C377, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[378] || CT.C378, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[379] || CT.C379, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[380] || CT.C380, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[381] || CT.C381, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[382] || CT.C382, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[383] || CT.C383]);
    },
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._fuchsiaShortcuts*/get _fuchsiaShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[364] || CT.C364, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[367] || CT.C367, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[368] || CT.C368, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[369] || CT.C369, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[371] || CT.C371, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[372] || CT.C372, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[373] || CT.C373, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[374] || CT.C374, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[375] || CT.C375, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowLeft), C[376] || CT.C376, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowRight), C[377] || CT.C377, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[378] || CT.C378, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[379] || CT.C379, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[380] || CT.C380, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[381] || CT.C381, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[382] || CT.C382, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[383] || CT.C383]);
    },
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._iOSShortcuts*/get _iOSShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[364] || CT.C364, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[367] || CT.C367, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[368] || CT.C368, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[369] || CT.C369, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[371] || CT.C371, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[372] || CT.C372, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[373] || CT.C373, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[374] || CT.C374, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[375] || CT.C375, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowRight), C[377] || CT.C377, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowLeft), C[376] || CT.C376, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[378] || CT.C378, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[379] || CT.C379, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[380] || CT.C380, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[381] || CT.C381, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[382] || CT.C382, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[383] || CT.C383]);
    },
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._linuxShortcuts*/get _linuxShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[364] || CT.C364, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[367] || CT.C367, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[368] || CT.C368, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[369] || CT.C369, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[371] || CT.C371, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[372] || CT.C372, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[373] || CT.C373, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[374] || CT.C374, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[375] || CT.C375, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowLeft), C[376] || CT.C376, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowRight), C[377] || CT.C377, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[378] || CT.C378, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[379] || CT.C379, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[380] || CT.C380, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[381] || CT.C381, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[382] || CT.C382, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[383] || CT.C383]);
    },
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._macShortcuts*/get _macShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[376] || CT.C376, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[377] || CT.C377, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[384] || CT.C384, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[385] || CT.C385, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[386] || CT.C386, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[387] || CT.C387, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[372] || CT.C372, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[373] || CT.C373, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[374] || CT.C374, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[375] || CT.C375, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowDown), C[364] || CT.C364, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowLeft), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowRight), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowUp), C[367] || CT.C367, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[368] || CT.C368, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[369] || CT.C369, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[371] || CT.C371, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[380] || CT.C380, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[381] || CT.C381, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[382] || CT.C382, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[383] || CT.C383]);
    },
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._windowsShortcuts*/get _windowsShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[364] || CT.C364, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[367] || CT.C367, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[368] || CT.C368, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[369] || CT.C369, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[371] || CT.C371, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[372] || CT.C372, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[373] || CT.C373, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[374] || CT.C374, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[375] || CT.C375, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowLeft), C[376] || CT.C376, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowRight), C[377] || CT.C377, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[378] || CT.C378, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[379] || CT.C379, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.end), C[366] || CT.C366, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.home), C[365] || CT.C365, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[380] || CT.C380, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[381] || CT.C381, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[382] || CT.C382, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[383] || CT.C383, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.end), C[370] || CT.C370, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.home), C[369] || CT.C369]);
    },
    /*default_text_editing_shortcuts.DefaultTextEditingShortcuts._webShortcuts*/get _webShortcuts() {
      return new (T$.LinkedMapOfLogicalKeySet$Intent()).from([new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowDown), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.arrowUp), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.alt, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowDown), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.arrowUp), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.control, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.end), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.home), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowDown), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.arrowUp), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.meta, keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowDown), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowLeft), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowRight), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.arrowUp), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.end), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.shift, keyboard_key.LogicalKeyboardKey.home), C[388] || CT.C388, new shortcuts$.LogicalKeySet.new(keyboard_key.LogicalKeyboardKey.space), C[388] || CT.C388]);
    }
  }, false);
  text_editing_intents.DoNothingAndStopPropagationTextIntent = class DoNothingAndStopPropagationTextIntent extends actions$.Intent {};
  (text_editing_intents.DoNothingAndStopPropagationTextIntent.new = function() {
    text_editing_intents.DoNothingAndStopPropagationTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.DoNothingAndStopPropagationTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.DoNothingAndStopPropagationTextIntent);
  dart.addTypeCaches(text_editing_intents.DoNothingAndStopPropagationTextIntent);
  dart.setLibraryUri(text_editing_intents.DoNothingAndStopPropagationTextIntent, I[42]);
  text_editing_intents.ExpandSelectionLeftByLineTextIntent = class ExpandSelectionLeftByLineTextIntent extends actions$.Intent {};
  (text_editing_intents.ExpandSelectionLeftByLineTextIntent.new = function() {
    text_editing_intents.ExpandSelectionLeftByLineTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExpandSelectionLeftByLineTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExpandSelectionLeftByLineTextIntent);
  dart.addTypeCaches(text_editing_intents.ExpandSelectionLeftByLineTextIntent);
  dart.setLibraryUri(text_editing_intents.ExpandSelectionLeftByLineTextIntent, I[42]);
  text_editing_intents.ExpandSelectionRightByLineTextIntent = class ExpandSelectionRightByLineTextIntent extends actions$.Intent {};
  (text_editing_intents.ExpandSelectionRightByLineTextIntent.new = function() {
    text_editing_intents.ExpandSelectionRightByLineTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExpandSelectionRightByLineTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExpandSelectionRightByLineTextIntent);
  dart.addTypeCaches(text_editing_intents.ExpandSelectionRightByLineTextIntent);
  dart.setLibraryUri(text_editing_intents.ExpandSelectionRightByLineTextIntent, I[42]);
  text_editing_intents.ExpandSelectionToEndTextIntent = class ExpandSelectionToEndTextIntent extends actions$.Intent {};
  (text_editing_intents.ExpandSelectionToEndTextIntent.new = function() {
    text_editing_intents.ExpandSelectionToEndTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExpandSelectionToEndTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExpandSelectionToEndTextIntent);
  dart.addTypeCaches(text_editing_intents.ExpandSelectionToEndTextIntent);
  dart.setLibraryUri(text_editing_intents.ExpandSelectionToEndTextIntent, I[42]);
  text_editing_intents.ExpandSelectionToStartTextIntent = class ExpandSelectionToStartTextIntent extends actions$.Intent {};
  (text_editing_intents.ExpandSelectionToStartTextIntent.new = function() {
    text_editing_intents.ExpandSelectionToStartTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExpandSelectionToStartTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExpandSelectionToStartTextIntent);
  dart.addTypeCaches(text_editing_intents.ExpandSelectionToStartTextIntent);
  dart.setLibraryUri(text_editing_intents.ExpandSelectionToStartTextIntent, I[42]);
  text_editing_intents.ExtendSelectionDownTextIntent = class ExtendSelectionDownTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionDownTextIntent.new = function() {
    text_editing_intents.ExtendSelectionDownTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionDownTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionDownTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionDownTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionDownTextIntent, I[42]);
  text_editing_intents.ExtendSelectionLeftByLineTextIntent = class ExtendSelectionLeftByLineTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionLeftByLineTextIntent.new = function() {
    text_editing_intents.ExtendSelectionLeftByLineTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionLeftByLineTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionLeftByLineTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionLeftByLineTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionLeftByLineTextIntent, I[42]);
  text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent = class ExtendSelectionLeftByWordAndStopAtReversalTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent.new = function() {
    text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent, I[42]);
  text_editing_intents.ExtendSelectionLeftByWordTextIntent = class ExtendSelectionLeftByWordTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionLeftByWordTextIntent.new = function() {
    text_editing_intents.ExtendSelectionLeftByWordTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionLeftByWordTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionLeftByWordTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionLeftByWordTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionLeftByWordTextIntent, I[42]);
  text_editing_intents.ExtendSelectionLeftTextIntent = class ExtendSelectionLeftTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionLeftTextIntent.new = function() {
    text_editing_intents.ExtendSelectionLeftTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionLeftTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionLeftTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionLeftTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionLeftTextIntent, I[42]);
  text_editing_intents.ExtendSelectionRightByLineTextIntent = class ExtendSelectionRightByLineTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionRightByLineTextIntent.new = function() {
    text_editing_intents.ExtendSelectionRightByLineTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionRightByLineTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionRightByLineTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionRightByLineTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionRightByLineTextIntent, I[42]);
  text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent = class ExtendSelectionRightByWordAndStopAtReversalTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent.new = function() {
    text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent, I[42]);
  text_editing_intents.ExtendSelectionRightByWordTextIntent = class ExtendSelectionRightByWordTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionRightByWordTextIntent.new = function() {
    text_editing_intents.ExtendSelectionRightByWordTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionRightByWordTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionRightByWordTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionRightByWordTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionRightByWordTextIntent, I[42]);
  text_editing_intents.ExtendSelectionRightTextIntent = class ExtendSelectionRightTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionRightTextIntent.new = function() {
    text_editing_intents.ExtendSelectionRightTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionRightTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionRightTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionRightTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionRightTextIntent, I[42]);
  text_editing_intents.ExtendSelectionUpTextIntent = class ExtendSelectionUpTextIntent extends actions$.Intent {};
  (text_editing_intents.ExtendSelectionUpTextIntent.new = function() {
    text_editing_intents.ExtendSelectionUpTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.ExtendSelectionUpTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.ExtendSelectionUpTextIntent);
  dart.addTypeCaches(text_editing_intents.ExtendSelectionUpTextIntent);
  dart.setLibraryUri(text_editing_intents.ExtendSelectionUpTextIntent, I[42]);
  text_editing_intents.MoveSelectionDownTextIntent = class MoveSelectionDownTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionDownTextIntent.new = function() {
    text_editing_intents.MoveSelectionDownTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionDownTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionDownTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionDownTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionDownTextIntent, I[42]);
  text_editing_intents.MoveSelectionLeftByLineTextIntent = class MoveSelectionLeftByLineTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionLeftByLineTextIntent.new = function() {
    text_editing_intents.MoveSelectionLeftByLineTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionLeftByLineTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionLeftByLineTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionLeftByLineTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionLeftByLineTextIntent, I[42]);
  text_editing_intents.MoveSelectionLeftByWordTextIntent = class MoveSelectionLeftByWordTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionLeftByWordTextIntent.new = function() {
    text_editing_intents.MoveSelectionLeftByWordTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionLeftByWordTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionLeftByWordTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionLeftByWordTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionLeftByWordTextIntent, I[42]);
  text_editing_intents.MoveSelectionLeftTextIntent = class MoveSelectionLeftTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionLeftTextIntent.new = function() {
    text_editing_intents.MoveSelectionLeftTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionLeftTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionLeftTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionLeftTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionLeftTextIntent, I[42]);
  text_editing_intents.MoveSelectionToStartTextIntent = class MoveSelectionToStartTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionToStartTextIntent.new = function() {
    text_editing_intents.MoveSelectionToStartTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionToStartTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionToStartTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionToStartTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionToStartTextIntent, I[42]);
  text_editing_intents.MoveSelectionRightByLineTextIntent = class MoveSelectionRightByLineTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionRightByLineTextIntent.new = function() {
    text_editing_intents.MoveSelectionRightByLineTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionRightByLineTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionRightByLineTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionRightByLineTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionRightByLineTextIntent, I[42]);
  text_editing_intents.MoveSelectionRightByWordTextIntent = class MoveSelectionRightByWordTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionRightByWordTextIntent.new = function() {
    text_editing_intents.MoveSelectionRightByWordTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionRightByWordTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionRightByWordTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionRightByWordTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionRightByWordTextIntent, I[42]);
  text_editing_intents.MoveSelectionRightTextIntent = class MoveSelectionRightTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionRightTextIntent.new = function() {
    text_editing_intents.MoveSelectionRightTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionRightTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionRightTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionRightTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionRightTextIntent, I[42]);
  text_editing_intents.MoveSelectionToEndTextIntent = class MoveSelectionToEndTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionToEndTextIntent.new = function() {
    text_editing_intents.MoveSelectionToEndTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionToEndTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionToEndTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionToEndTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionToEndTextIntent, I[42]);
  text_editing_intents.MoveSelectionUpTextIntent = class MoveSelectionUpTextIntent extends actions$.Intent {};
  (text_editing_intents.MoveSelectionUpTextIntent.new = function() {
    text_editing_intents.MoveSelectionUpTextIntent.__proto__.new.call(this);
    ;
  }).prototype = text_editing_intents.MoveSelectionUpTextIntent.prototype;
  dart.addTypeTests(text_editing_intents.MoveSelectionUpTextIntent);
  dart.addTypeCaches(text_editing_intents.MoveSelectionUpTextIntent);
  dart.setLibraryUri(text_editing_intents.MoveSelectionUpTextIntent, I[42]);
  actions$.Actions = class Actions extends framework.StatefulWidget {
    get dispatcher() {
      return this[S$0.dispatcher];
    }
    set dispatcher(value) {
      super.dispatcher = value;
    }
    get actions() {
      return this[S$0.actions];
    }
    set actions(value) {
      super.actions = value;
    }
    get child() {
      return this[S$0.child$10];
    }
    set child(value) {
      super.child = value;
    }
    static _visitActionsAncestors(context, visitor) {
      if (context == null) dart.nullFailed(I[26], 739, 51, "context");
      if (visitor == null) dart.nullFailed(I[26], 739, 100, "visitor");
      let actionsElement = context.getElementForInheritedWidgetOfExactType(actions$._ActionsMarker);
      while (actionsElement != null) {
        if (visitor(actionsElement) === true) {
          break;
        }
        let parent = actions$._getParent(actionsElement);
        actionsElement = parent.getElementForInheritedWidgetOfExactType(actions$._ActionsMarker);
      }
      return actionsElement != null;
    }
    static _findDispatcher(context) {
      let t34;
      if (context == null) dart.nullFailed(I[26], 756, 56, "context");
      let dispatcher = null;
      actions$.Actions._visitActionsAncestors(context, dart.fn(element => {
        if (element == null) dart.nullFailed(I[26], 758, 55, "element");
        let found = actions$._ActionsMarker.as(element.widget).dispatcher;
        if (found != null) {
          dispatcher = found;
          return true;
        }
        return false;
      }, T$.InheritedElementTobool()));
      t34 = dispatcher;
      return t34 == null ? C[389] || CT.C389 : t34;
    }
    static handler(T, context, intent) {
      if (context == null) dart.nullFailed(I[26], 780, 63, "context");
      if (intent == null) dart.nullFailed(I[26], 780, 74, "intent");
      let action = actions$.Actions.maybeFind(T, context);
      if (action != null && dart.test(action.isEnabled(intent))) {
        return dart.fn(() => {
          if (dart.test(action.isEnabled(intent))) {
            actions$.Actions.of(context).invokeAction(action, intent, context);
          }
        }, T$.VoidTovoid());
      }
      return null;
    }
    static find(T, context, opts) {
      if (context == null) dart.nullFailed(I[26], 811, 56, "context");
      let intent = opts && 'intent' in opts ? opts.intent : null;
      let action = actions$.Actions.maybeFind(T, context, {intent: intent});
      if (!dart.test(dart.fn(() => {
        let t34, t34$;
        if (action == null) {
          let type = (t34$ = (t34 = intent, t34 == null ? null : dart.runtimeType(t34)), t34$ == null ? dart.wrapType(T) : t34$);
          dart.throw(assertions.FlutterError.new("Unable to find an action for a " + dart.str(type) + " in an " + dart.str(dart.wrapType(actions$.Actions)) + " widget " + "in the given context.\n" + dart.str(dart.wrapType(actions$.Actions)) + ".find() was called on a context that doesn't contain an " + dart.str(dart.wrapType(actions$.Actions)) + " widget with a mapping for the given intent type.\n" + "The context used was:\n" + "  " + dart.str(context) + "\n" + "The intent type requested was:\n" + "  " + dart.str(type)));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[26], 814, 12, "() {\r\n      if (action == null) {\r\n        final Type type = intent?.runtimeType ?? T;\r\n        throw FlutterError(\r\n          'Unable to find an action for a $type in an $Actions widget '\r\n          'in the given context.\\n'\r\n          \"$Actions.find() was called on a context that doesn't contain an \"\r\n          '$Actions widget with a mapping for the given intent type.\\n'\r\n          'The context used was:\\n'\r\n          '  $context\\n'\r\n          'The intent type requested was:\\n'\r\n          '  $type',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return dart.nullCheck(action);
    }
    static maybeFind(T, context, opts) {
      let t34, t34$;
      if (context == null) dart.nullFailed(I[26], 850, 62, "context");
      let intent = opts && 'intent' in opts ? opts.intent : null;
      let action = null;
      let type = (t34$ = (t34 = intent, t34 == null ? null : dart.runtimeType(t34)), t34$ == null ? dart.wrapType(T) : t34$);
      if (!!dart.equals(type, dart.wrapType(actions$.Intent))) dart.assertFailed("The type passed to \"find\" resolved to \"Intent\": either a non-Intent " + "generic type argument or an example intent derived from Intent must be " + "specified. Intent may be used as the generic type as long as the optional " + "\"intent\" argument is passed.", I[26], 858, 7, "type != Intent");
      actions$.Actions._visitActionsAncestors(context, dart.fn(element => {
        if (element == null) dart.nullFailed(I[26], 865, 55, "element");
        let actions = actions$._ActionsMarker.as(element.widget);
        let result = dart.nullable(actions$.Action$(T)).as(actions.actions[S$.$_get](type));
        if (result != null) {
          context.dependOnInheritedElement(element);
          action = result;
          return true;
        }
        return false;
      }, T$.InheritedElementTobool()));
      return action;
    }
    static of(context) {
      let t34, t34$;
      if (context == null) dart.nullFailed(I[26], 884, 43, "context");
      if (!(context != null)) dart.assertFailed(null, I[26], 885, 12, "context != null");
      let marker = context.dependOnInheritedWidgetOfExactType(actions$._ActionsMarker);
      t34$ = (t34 = marker, t34 == null ? null : t34.dispatcher);
      return t34$ == null ? actions$.Actions._findDispatcher(context) : t34$;
    }
    static invoke(T, context, intent) {
      if (context == null) dart.nullFailed(I[26], 907, 18, "context");
      if (intent == null) dart.nullFailed(I[26], 908, 7, "intent");
      if (!(intent != null)) dart.assertFailed(null, I[26], 910, 12, "intent != null");
      if (!(context != null)) dart.assertFailed(null, I[26], 911, 12, "context != null");
      let action = null;
      let actionElement = null;
      actions$.Actions._visitActionsAncestors(context, dart.fn(element => {
        if (element == null) dart.nullFailed(I[26], 915, 55, "element");
        let actions = actions$._ActionsMarker.as(element.widget);
        let result = dart.nullable(actions$.Action$(T)).as(actions.actions[S$.$_get](dart.runtimeType(intent)));
        if (result != null) {
          actionElement = element;
          if (dart.test(result.isEnabled(intent))) {
            action = result;
            return true;
          }
        }
        return false;
      }, T$.InheritedElementTobool()));
      if (!dart.test(dart.fn(() => {
        if (actionElement == null) {
          dart.throw(assertions.FlutterError.new("Unable to find an action for an Intent with type " + dart.str(dart.runtimeType(intent)) + " in an " + dart.str(dart.wrapType(actions$.Actions)) + " widget in the given context.\n" + dart.str(dart.wrapType(actions$.Actions)) + ".invoke() was unable to find an " + dart.str(dart.wrapType(actions$.Actions)) + " widget that " + "contained a mapping for the given intent, or the intent type isn't the " + "same as the type argument to invoke (which is " + dart.str(dart.wrapType(T)) + " - try supplying a " + "type argument to invoke if one was not given)\n" + "The context used was:\n" + "  " + dart.str(context) + "\n" + "The intent type requested was:\n" + "  " + dart.str(dart.runtimeType(intent))));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[26], 928, 12, "() {\r\n      if (actionElement == null) {\r\n        throw FlutterError(\r\n          'Unable to find an action for an Intent with type '\r\n          '${intent.runtimeType} in an $Actions widget in the given context.\\n'\r\n          '$Actions.invoke() was unable to find an $Actions widget that '\r\n          \"contained a mapping for the given intent, or the intent type isn't the \"\r\n          'same as the type argument to invoke (which is $T - try supplying a '\r\n          'type argument to invoke if one was not given)\\n'\r\n          'The context used was:\\n'\r\n          '  $context\\n'\r\n          'The intent type requested was:\\n'\r\n          '  ${intent.runtimeType}',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      if (actionElement == null || action == null) {
        return null;
      }
      return actions$.Actions._findDispatcher(dart.nullCheck(actionElement)).invokeAction(dart.nullCheck(action), intent, context);
    }
    static maybeInvoke(T, context, intent) {
      if (context == null) dart.nullFailed(I[26], 968, 18, "context");
      if (intent == null) dart.nullFailed(I[26], 969, 7, "intent");
      if (!(intent != null)) dart.assertFailed(null, I[26], 971, 12, "intent != null");
      if (!(context != null)) dart.assertFailed(null, I[26], 972, 12, "context != null");
      let action = null;
      let actionElement = null;
      actions$.Actions._visitActionsAncestors(context, dart.fn(element => {
        if (element == null) dart.nullFailed(I[26], 976, 55, "element");
        let actions = actions$._ActionsMarker.as(element.widget);
        let result = dart.nullable(actions$.Action$(T)).as(actions.actions[S$.$_get](dart.runtimeType(intent)));
        if (result != null) {
          actionElement = element;
          if (dart.test(result.isEnabled(intent))) {
            action = result;
            return true;
          }
        }
        return false;
      }, T$.InheritedElementTobool()));
      if (actionElement == null || action == null) {
        return null;
      }
      return actions$.Actions._findDispatcher(dart.nullCheck(actionElement)).invokeAction(dart.nullCheck(action), intent, context);
    }
    createState() {
      return new actions$._ActionsState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[26], 1001, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfActionDispatcher()).new("dispatcher", this.dispatcher));
      properties.add(new (T$.DiagnosticsPropertyOfMapOfType$ActionOfIntent()).new("actions", this.actions));
    }
  };
  (actions$.Actions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let dispatcher = opts && 'dispatcher' in opts ? opts.dispatcher : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    if (actions == null) dart.nullFailed(I[26], 707, 19, "actions");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[26], 708, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.dispatcher] = dispatcher;
    this[S$0.actions] = actions;
    this[S$0.child$10] = child;
    if (!(actions != null)) dart.assertFailed(null, I[26], 709, 16, "actions != null");
    if (!(child != null)) dart.assertFailed(null, I[26], 710, 16, "child != null");
    actions$.Actions.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = actions$.Actions.prototype;
  dart.addTypeTests(actions$.Actions);
  dart.addTypeCaches(actions$.Actions);
  dart.setMethodSignature(actions$.Actions, () => ({
    __proto__: dart.getMethods(actions$.Actions.__proto__),
    createState: dart.fnType(framework.State$(actions$.Actions), [])
  }));
  dart.setLibraryUri(actions$.Actions, I[27]);
  dart.setFieldSignature(actions$.Actions, () => ({
    __proto__: dart.getFields(actions$.Actions.__proto__),
    dispatcher: dart.finalFieldType(dart.nullable(actions$.ActionDispatcher)),
    actions: dart.finalFieldType(core.Map$(core.Type, actions$.Action$(actions$.Intent))),
    child: dart.finalFieldType(framework.Widget)
  }));
  default_text_editing_actions.DefaultTextEditingActions = class DefaultTextEditingActions extends actions$.Actions {};
  (default_text_editing_actions.DefaultTextEditingActions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[43], 27, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    default_text_editing_actions.DefaultTextEditingActions.__proto__.new.call(this, {key: key, actions: default_text_editing_actions.DefaultTextEditingActions._shortcutsActions, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = default_text_editing_actions.DefaultTextEditingActions.prototype;
  dart.addTypeTests(default_text_editing_actions.DefaultTextEditingActions);
  dart.addTypeCaches(default_text_editing_actions.DefaultTextEditingActions);
  dart.setLibraryUri(default_text_editing_actions.DefaultTextEditingActions, I[44]);
  dart.defineLazy(default_text_editing_actions.DefaultTextEditingActions, {
    /*default_text_editing_actions.DefaultTextEditingActions._shortcutsActions*/get _shortcutsActions() {
      return new (T$.LinkedMapOfType$ActionOfIntent()).from([dart.wrapType(text_editing_intents.DoNothingAndStopPropagationTextIntent), new default_text_editing_actions._DoNothingAndStopPropagationTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionDownTextIntent), new default_text_editing_actions._ExtendSelectionDownTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionLeftByLineTextIntent), new default_text_editing_actions._ExtendSelectionLeftByLineTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionLeftByWordTextIntent), new default_text_editing_actions._ExtendSelectionLeftByWordTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent), new default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionLeftTextIntent), new default_text_editing_actions._ExtendSelectionLeftTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent), new default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionRightByWordTextIntent), new default_text_editing_actions._ExtendSelectionRightByWordTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionRightByLineTextIntent), new default_text_editing_actions._ExtendSelectionRightByLineTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionRightTextIntent), new default_text_editing_actions._ExtendSelectionRightTextAction.new(), dart.wrapType(text_editing_intents.ExtendSelectionUpTextIntent), new default_text_editing_actions._ExtendSelectionUpTextAction.new(), dart.wrapType(text_editing_intents.ExpandSelectionLeftByLineTextIntent), new default_text_editing_actions._ExpandSelectionLeftByLineTextAction.new(), dart.wrapType(text_editing_intents.ExpandSelectionRightByLineTextIntent), new default_text_editing_actions._ExpandSelectionRightByLineTextAction.new(), dart.wrapType(text_editing_intents.ExpandSelectionToEndTextIntent), new default_text_editing_actions._ExpandSelectionToEndTextAction.new(), dart.wrapType(text_editing_intents.ExpandSelectionToStartTextIntent), new default_text_editing_actions._ExpandSelectionToStartTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionDownTextIntent), new default_text_editing_actions._MoveSelectionDownTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionLeftByLineTextIntent), new default_text_editing_actions._MoveSelectionLeftByLineTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionLeftByWordTextIntent), new default_text_editing_actions._MoveSelectionLeftByWordTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionLeftTextIntent), new default_text_editing_actions._MoveSelectionLeftTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionRightByLineTextIntent), new default_text_editing_actions._MoveSelectionRightByLineTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionRightByWordTextIntent), new default_text_editing_actions._MoveSelectionRightByWordTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionRightTextIntent), new default_text_editing_actions._MoveSelectionRightTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionToEndTextIntent), new default_text_editing_actions._MoveSelectionToEndTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionToStartTextIntent), new default_text_editing_actions._MoveSelectionToStartTextAction.new(), dart.wrapType(text_editing_intents.MoveSelectionUpTextIntent), new default_text_editing_actions._MoveSelectionUpTextAction.new()]);
    }
  }, false);
  const _is_ContextAction_default = Symbol('_is_ContextAction_default');
  actions$.ContextAction$ = dart.generic(T => {
    class ContextAction extends actions$.Action$(T) {}
    (ContextAction.new = function() {
      ContextAction.__proto__.new.call(this);
      ;
    }).prototype = ContextAction.prototype;
    dart.addTypeTests(ContextAction);
    ContextAction.prototype[_is_ContextAction_default] = true;
    dart.addTypeCaches(ContextAction);
    dart.setLibraryUri(ContextAction, I[27]);
    return ContextAction;
  });
  actions$.ContextAction = actions$.ContextAction$();
  dart.addTypeTests(actions$.ContextAction, _is_ContextAction_default);
  const _is_TextEditingAction_default = Symbol('_is_TextEditingAction_default');
  text_editing_action.TextEditingAction$ = dart.generic(T => {
    class TextEditingAction extends actions$.ContextAction$(T) {
      get textEditingActionTarget() {
        let t34;
        if ((t34 = focus_manager.primaryFocus, t34 == null ? null : t34.context) == null || !framework.StatefulElement.is(dart.nullCheck(dart.nullCheck(focus_manager.primaryFocus).context)) || !text_editing_action.TextEditingActionTarget.is(framework.StatefulElement.as(dart.nullCheck(dart.nullCheck(focus_manager.primaryFocus).context)).state)) {
          return null;
        }
        return text_editing_action.TextEditingActionTarget.as(framework.StatefulElement.as(dart.nullCheck(dart.nullCheck(focus_manager.primaryFocus).context)).state);
      }
      isEnabled(intent) {
        T.as(intent);
        if (intent == null) dart.nullFailed(I[45], 63, 20, "intent");
        return this.textEditingActionTarget != null;
      }
    }
    (TextEditingAction.new = function() {
      TextEditingAction.__proto__.new.call(this);
      ;
    }).prototype = TextEditingAction.prototype;
    dart.addTypeTests(TextEditingAction);
    TextEditingAction.prototype[_is_TextEditingAction_default] = true;
    dart.addTypeCaches(TextEditingAction);
    dart.setGetterSignature(TextEditingAction, () => ({
      __proto__: dart.getGetters(TextEditingAction.__proto__),
      textEditingActionTarget: dart.nullable(text_editing_action.TextEditingActionTarget)
    }));
    dart.setLibraryUri(TextEditingAction, I[46]);
    return TextEditingAction;
  });
  text_editing_action.TextEditingAction = text_editing_action.TextEditingAction$();
  dart.addTypeTests(text_editing_action.TextEditingAction, _is_TextEditingAction_default);
  default_text_editing_actions._DoNothingAndStopPropagationTextAction = class _DoNothingAndStopPropagationTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.DoNothingAndStopPropagationTextIntent) {
    consumesKey(intent) {
      actions$.Intent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 73, 27, "intent");
      return false;
    }
    invoke(intent, context = null) {
      text_editing_intents.DoNothingAndStopPropagationTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 76, 53, "intent");
    }
  };
  (default_text_editing_actions._DoNothingAndStopPropagationTextAction.new = function() {
    default_text_editing_actions._DoNothingAndStopPropagationTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._DoNothingAndStopPropagationTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._DoNothingAndStopPropagationTextAction);
  dart.addTypeCaches(default_text_editing_actions._DoNothingAndStopPropagationTextAction);
  dart.setMethodSignature(default_text_editing_actions._DoNothingAndStopPropagationTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._DoNothingAndStopPropagationTextAction.__proto__),
    invoke: dart.fnType(dart.void, [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._DoNothingAndStopPropagationTextAction, I[44]);
  default_text_editing_actions._ExpandSelectionLeftByLineTextAction = class _ExpandSelectionLeftByLineTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExpandSelectionLeftByLineTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExpandSelectionLeftByLineTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 81, 54, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.expandSelectionLeftByLine(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExpandSelectionLeftByLineTextAction.new = function() {
    default_text_editing_actions._ExpandSelectionLeftByLineTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExpandSelectionLeftByLineTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExpandSelectionLeftByLineTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExpandSelectionLeftByLineTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExpandSelectionLeftByLineTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExpandSelectionLeftByLineTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExpandSelectionLeftByLineTextAction, I[44]);
  default_text_editing_actions._ExpandSelectionRightByLineTextAction = class _ExpandSelectionRightByLineTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExpandSelectionRightByLineTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExpandSelectionRightByLineTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 88, 55, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.expandSelectionRightByLine(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExpandSelectionRightByLineTextAction.new = function() {
    default_text_editing_actions._ExpandSelectionRightByLineTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExpandSelectionRightByLineTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExpandSelectionRightByLineTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExpandSelectionRightByLineTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExpandSelectionRightByLineTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExpandSelectionRightByLineTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExpandSelectionRightByLineTextAction, I[44]);
  default_text_editing_actions._ExpandSelectionToEndTextAction = class _ExpandSelectionToEndTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExpandSelectionToEndTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExpandSelectionToEndTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 95, 49, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.expandSelectionToEnd(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExpandSelectionToEndTextAction.new = function() {
    default_text_editing_actions._ExpandSelectionToEndTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExpandSelectionToEndTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExpandSelectionToEndTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExpandSelectionToEndTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExpandSelectionToEndTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExpandSelectionToEndTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExpandSelectionToEndTextAction, I[44]);
  default_text_editing_actions._ExpandSelectionToStartTextAction = class _ExpandSelectionToStartTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExpandSelectionToStartTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExpandSelectionToStartTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 102, 51, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.expandSelectionToStart(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExpandSelectionToStartTextAction.new = function() {
    default_text_editing_actions._ExpandSelectionToStartTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExpandSelectionToStartTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExpandSelectionToStartTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExpandSelectionToStartTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExpandSelectionToStartTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExpandSelectionToStartTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExpandSelectionToStartTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionDownTextAction = class _ExtendSelectionDownTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionDownTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionDownTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 109, 48, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionDown(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExtendSelectionDownTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionDownTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionDownTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionDownTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionDownTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionDownTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionDownTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionDownTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionLeftByLineTextAction = class _ExtendSelectionLeftByLineTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionLeftByLineTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionLeftByLineTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 116, 54, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionLeftByLine(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExtendSelectionLeftByLineTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionLeftByLineTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionLeftByLineTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionLeftByLineTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionLeftByLineTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionLeftByLineTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionLeftByLineTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionLeftByLineTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction = class _ExtendSelectionLeftByWordAndStopAtReversalTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionLeftByWordAndStopAtReversalTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 123, 71, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionLeftByWord(text_input.SelectionChangedCause.keyboard, false, true);
    }
  };
  (default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionLeftByWordAndStopAtReversalTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionLeftByWordTextAction = class _ExtendSelectionLeftByWordTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionLeftByWordTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionLeftByWordTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 130, 54, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionLeftByWord(text_input.SelectionChangedCause.keyboard, false);
    }
  };
  (default_text_editing_actions._ExtendSelectionLeftByWordTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionLeftByWordTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionLeftByWordTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionLeftByWordTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionLeftByWordTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionLeftByWordTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionLeftByWordTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionLeftByWordTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionLeftTextAction = class _ExtendSelectionLeftTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionLeftTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionLeftTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 137, 48, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionLeft(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExtendSelectionLeftTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionLeftTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionLeftTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionLeftTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionLeftTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionLeftTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionLeftTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionLeftTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionRightByLineTextAction = class _ExtendSelectionRightByLineTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionRightByLineTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionRightByLineTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 144, 55, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionRightByLine(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExtendSelectionRightByLineTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionRightByLineTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionRightByLineTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionRightByLineTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionRightByLineTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionRightByLineTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionRightByLineTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionRightByLineTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction = class _ExtendSelectionRightByWordAndStopAtReversalTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionRightByWordAndStopAtReversalTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 151, 72, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionRightByWord(text_input.SelectionChangedCause.keyboard, false, true);
    }
  };
  (default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionRightByWordAndStopAtReversalTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionRightByWordTextAction = class _ExtendSelectionRightByWordTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionRightByWordTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionRightByWordTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 158, 55, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionRightByWord(text_input.SelectionChangedCause.keyboard, false);
    }
  };
  (default_text_editing_actions._ExtendSelectionRightByWordTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionRightByWordTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionRightByWordTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionRightByWordTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionRightByWordTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionRightByWordTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionRightByWordTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionRightByWordTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionRightTextAction = class _ExtendSelectionRightTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionRightTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionRightTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 165, 49, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionRight(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExtendSelectionRightTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionRightTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionRightTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionRightTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionRightTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionRightTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionRightTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionRightTextAction, I[44]);
  default_text_editing_actions._ExtendSelectionUpTextAction = class _ExtendSelectionUpTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.ExtendSelectionUpTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.ExtendSelectionUpTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 172, 46, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.extendSelectionUp(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._ExtendSelectionUpTextAction.new = function() {
    default_text_editing_actions._ExtendSelectionUpTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._ExtendSelectionUpTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._ExtendSelectionUpTextAction);
  dart.addTypeCaches(default_text_editing_actions._ExtendSelectionUpTextAction);
  dart.setMethodSignature(default_text_editing_actions._ExtendSelectionUpTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._ExtendSelectionUpTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._ExtendSelectionUpTextAction, I[44]);
  default_text_editing_actions._MoveSelectionDownTextAction = class _MoveSelectionDownTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionDownTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionDownTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 179, 46, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionDown(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionDownTextAction.new = function() {
    default_text_editing_actions._MoveSelectionDownTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionDownTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionDownTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionDownTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionDownTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionDownTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionDownTextAction, I[44]);
  default_text_editing_actions._MoveSelectionLeftTextAction = class _MoveSelectionLeftTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionLeftTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionLeftTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 186, 46, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionLeft(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionLeftTextAction.new = function() {
    default_text_editing_actions._MoveSelectionLeftTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionLeftTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionLeftTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionLeftTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionLeftTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionLeftTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionLeftTextAction, I[44]);
  default_text_editing_actions._MoveSelectionRightTextAction = class _MoveSelectionRightTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionRightTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionRightTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 193, 47, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionRight(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionRightTextAction.new = function() {
    default_text_editing_actions._MoveSelectionRightTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionRightTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionRightTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionRightTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionRightTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionRightTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionRightTextAction, I[44]);
  default_text_editing_actions._MoveSelectionUpTextAction = class _MoveSelectionUpTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionUpTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionUpTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 200, 44, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionUp(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionUpTextAction.new = function() {
    default_text_editing_actions._MoveSelectionUpTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionUpTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionUpTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionUpTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionUpTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionUpTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionUpTextAction, I[44]);
  default_text_editing_actions._MoveSelectionLeftByLineTextAction = class _MoveSelectionLeftByLineTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionLeftByLineTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionLeftByLineTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 207, 52, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionLeftByLine(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionLeftByLineTextAction.new = function() {
    default_text_editing_actions._MoveSelectionLeftByLineTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionLeftByLineTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionLeftByLineTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionLeftByLineTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionLeftByLineTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionLeftByLineTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionLeftByLineTextAction, I[44]);
  default_text_editing_actions._MoveSelectionLeftByWordTextAction = class _MoveSelectionLeftByWordTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionLeftByWordTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionLeftByWordTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 214, 52, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionLeftByWord(text_input.SelectionChangedCause.keyboard, false);
    }
  };
  (default_text_editing_actions._MoveSelectionLeftByWordTextAction.new = function() {
    default_text_editing_actions._MoveSelectionLeftByWordTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionLeftByWordTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionLeftByWordTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionLeftByWordTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionLeftByWordTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionLeftByWordTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionLeftByWordTextAction, I[44]);
  default_text_editing_actions._MoveSelectionRightByLineTextAction = class _MoveSelectionRightByLineTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionRightByLineTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionRightByLineTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 221, 53, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionRightByLine(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionRightByLineTextAction.new = function() {
    default_text_editing_actions._MoveSelectionRightByLineTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionRightByLineTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionRightByLineTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionRightByLineTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionRightByLineTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionRightByLineTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionRightByLineTextAction, I[44]);
  default_text_editing_actions._MoveSelectionRightByWordTextAction = class _MoveSelectionRightByWordTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionRightByWordTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionRightByWordTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 228, 53, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionRightByWord(text_input.SelectionChangedCause.keyboard, false);
    }
  };
  (default_text_editing_actions._MoveSelectionRightByWordTextAction.new = function() {
    default_text_editing_actions._MoveSelectionRightByWordTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionRightByWordTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionRightByWordTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionRightByWordTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionRightByWordTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionRightByWordTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionRightByWordTextAction, I[44]);
  default_text_editing_actions._MoveSelectionToEndTextAction = class _MoveSelectionToEndTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionToEndTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionToEndTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 235, 47, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionToEnd(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionToEndTextAction.new = function() {
    default_text_editing_actions._MoveSelectionToEndTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionToEndTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionToEndTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionToEndTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionToEndTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionToEndTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionToEndTextAction, I[44]);
  default_text_editing_actions._MoveSelectionToStartTextAction = class _MoveSelectionToStartTextAction extends text_editing_action.TextEditingAction$(text_editing_intents.MoveSelectionToStartTextIntent) {
    invoke(intent, context = null) {
      text_editing_intents.MoveSelectionToStartTextIntent.as(intent);
      if (intent == null) dart.nullFailed(I[43], 242, 49, "intent");
      dart.nullCheck(this.textEditingActionTarget).renderEditable.moveSelectionToStart(text_input.SelectionChangedCause.keyboard);
    }
  };
  (default_text_editing_actions._MoveSelectionToStartTextAction.new = function() {
    default_text_editing_actions._MoveSelectionToStartTextAction.__proto__.new.call(this);
    ;
  }).prototype = default_text_editing_actions._MoveSelectionToStartTextAction.prototype;
  dart.addTypeTests(default_text_editing_actions._MoveSelectionToStartTextAction);
  dart.addTypeCaches(default_text_editing_actions._MoveSelectionToStartTextAction);
  dart.setMethodSignature(default_text_editing_actions._MoveSelectionToStartTextAction, () => ({
    __proto__: dart.getMethods(default_text_editing_actions._MoveSelectionToStartTextAction.__proto__),
    invoke: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)], [dart.nullable(framework.BuildContext)])
  }));
  dart.setLibraryUri(default_text_editing_actions._MoveSelectionToStartTextAction, I[44]);
  table$.TableRow = class TableRow extends core.Object {
    get key() {
      return this[S$0.key$2];
    }
    set key(value) {
      super.key = value;
    }
    get decoration() {
      return this[S$0.decoration];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get children() {
      return this[S$0.children];
    }
    set children(value) {
      super.children = value;
    }
    toString() {
      let result = new core.StringBuffer.new();
      result.write("TableRow(");
      if (this.key != null) result.write(dart.str(this.key) + ", ");
      if (this.decoration != null) result.write(dart.str(this.decoration) + ", ");
      if (this.children == null) {
        result.write("child list is null");
      } else if (dart.test(dart.nullCheck(this.children)[S$.$isEmpty])) {
        result.write("no children");
      } else {
        result.write(dart.str(this.children));
      }
      result.write(")");
      return result.toString();
    }
  };
  (table$.TableRow.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let children = opts && 'children' in opts ? opts.children : null;
    this[S$0.key$2] = key;
    this[S$0.decoration] = decoration;
    this[S$0.children] = children;
    ;
  }).prototype = table$.TableRow.prototype;
  dart.addTypeTests(table$.TableRow);
  dart.addTypeCaches(table$.TableRow);
  dart.setLibraryUri(table$.TableRow, I[47]);
  dart.setFieldSignature(table$.TableRow, () => ({
    __proto__: dart.getFields(table$.TableRow.__proto__),
    key: dart.finalFieldType(dart.nullable(key.LocalKey)),
    decoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    children: dart.finalFieldType(dart.nullable(core.List$(framework.Widget)))
  }));
  dart.defineExtensionMethods(table$.TableRow, ['toString']);
  table$._TableElementRow = class _TableElementRow extends core.Object {
    get key() {
      return this[S$0.key$3];
    }
    set key(value) {
      super.key = value;
    }
    get children() {
      return this[S$0.children$1];
    }
    set children(value) {
      super.children = value;
    }
  };
  (table$._TableElementRow.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : null;
    if (children == null) dart.nullFailed(I[48], 75, 52, "children");
    this[S$0.key$3] = key;
    this[S$0.children$1] = children;
    ;
  }).prototype = table$._TableElementRow.prototype;
  dart.addTypeTests(table$._TableElementRow);
  dart.addTypeCaches(table$._TableElementRow);
  dart.setLibraryUri(table$._TableElementRow, I[47]);
  dart.setFieldSignature(table$._TableElementRow, () => ({
    __proto__: dart.getFields(table$._TableElementRow.__proto__),
    key: dart.finalFieldType(dart.nullable(key.LocalKey)),
    children: dart.finalFieldType(core.List$(framework.Element))
  }));
  table$.Table = class Table extends framework.RenderObjectWidget {
    get children() {
      return this[S$0.children$2];
    }
    set children(value) {
      super.children = value;
    }
    get columnWidths() {
      return this[S$0.columnWidths];
    }
    set columnWidths(value) {
      super.columnWidths = value;
    }
    get defaultColumnWidth() {
      return this[S$0.defaultColumnWidth];
    }
    set defaultColumnWidth(value) {
      super.defaultColumnWidth = value;
    }
    get textDirection() {
      return this[S$0.textDirection$1];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get border() {
      return this[S$0.border];
    }
    set border(value) {
      super.border = value;
    }
    get defaultVerticalAlignment() {
      return this[S$0.defaultVerticalAlignment];
    }
    set defaultVerticalAlignment(value) {
      super.defaultVerticalAlignment = value;
    }
    get textBaseline() {
      return this[S$0.textBaseline];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    createElement() {
      return new table$._TableElement.new(this);
    }
    createRenderObject(context) {
      let t34;
      if (context == null) dart.nullFailed(I[48], 309, 47, "context");
      if (!dart.test(debug$0.debugCheckHasDirectionality(context))) dart.assertFailed(null, I[48], 310, 12, "debugCheckHasDirectionality(context)");
      return new table.RenderTable.new({columns: dart.test(this.children[S$.$isNotEmpty]) ? dart.nullCheck(this.children[S$.$_get](0).children)[S$.$length] : 0, rows: this.children[S$.$length], columnWidths: this.columnWidths, defaultColumnWidth: this.defaultColumnWidth, textDirection: (t34 = this.textDirection, t34 == null ? basic.Directionality.of(context) : t34), border: this.border, rowDecorations: this[S$0._rowDecorations], configuration: image$.createLocalImageConfiguration(context), defaultVerticalAlignment: this.defaultVerticalAlignment, textBaseline: this.textBaseline});
    }
    updateRenderObject(context, renderObject) {
      let t35, t34;
      if (context == null) dart.nullFailed(I[48], 326, 40, "context");
      table.RenderTable.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[48], 326, 61, "renderObject");
      if (!dart.test(debug$0.debugCheckHasDirectionality(context))) dart.assertFailed(null, I[48], 327, 12, "debugCheckHasDirectionality(context)");
      if (!(renderObject.columns == (dart.test(this.children[S$.$isNotEmpty]) ? dart.nullCheck(this.children[S$.$_get](0).children)[S$.$length] : 0))) dart.assertFailed(null, I[48], 328, 12, "renderObject.columns == (children.isNotEmpty ? children[0].children!.length : 0)");
      if (!(renderObject.rows == this.children[S$.$length])) dart.assertFailed(null, I[48], 329, 12, "renderObject.rows == children.length");
      t34 = renderObject;
      (() => {
        t34.columnWidths = this.columnWidths;
        t34.defaultColumnWidth = this.defaultColumnWidth;
        t34.textDirection = (t35 = this.textDirection, t35 == null ? basic.Directionality.of(context) : t35);
        t34.border = this.border;
        t34.rowDecorations = this[S$0._rowDecorations];
        t34.configuration = image$.createLocalImageConfiguration(context);
        t34.defaultVerticalAlignment = this.defaultVerticalAlignment;
        t34.textBaseline = this.textBaseline;
        return t34;
      })();
    }
  };
  (table$.Table.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : C[390] || CT.C390;
    if (children == null) dart.nullFailed(I[48], 177, 10, "children");
    let columnWidths = opts && 'columnWidths' in opts ? opts.columnWidths : null;
    let defaultColumnWidth = opts && 'defaultColumnWidth' in opts ? opts.defaultColumnWidth : C[391] || CT.C391;
    if (defaultColumnWidth == null) dart.nullFailed(I[48], 179, 10, "defaultColumnWidth");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let border = opts && 'border' in opts ? opts.border : null;
    let defaultVerticalAlignment = opts && 'defaultVerticalAlignment' in opts ? opts.defaultVerticalAlignment : C[392] || CT.C392;
    if (defaultVerticalAlignment == null) dart.nullFailed(I[48], 182, 10, "defaultVerticalAlignment");
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.children$2] = children;
    this[S$0.columnWidths] = columnWidths;
    this[S$0.defaultColumnWidth] = defaultColumnWidth;
    this[S$0.textDirection$1] = textDirection;
    this[S$0.border] = border;
    this[S$0.defaultVerticalAlignment] = defaultVerticalAlignment;
    this[S$0.textBaseline] = textBaseline;
    if (!(children != null)) dart.assertFailed(null, I[48], 184, 15, "children != null");
    if (!(defaultColumnWidth != null)) dart.assertFailed(null, I[48], 185, 15, "defaultColumnWidth != null");
    if (!(defaultVerticalAlignment != null)) dart.assertFailed(null, I[48], 186, 15, "defaultVerticalAlignment != null");
    if (!(defaultVerticalAlignment != table.TableCellVerticalAlignment.baseline || textBaseline != null)) dart.assertFailed("textBaseline is required if you specify the defaultVerticalAlignment with TableCellVerticalAlignment.baseline", I[48], 187, 15, "defaultVerticalAlignment != TableCellVerticalAlignment.baseline || textBaseline != null");
    if (!dart.test(dart.fn(() => {
      if (dart.test(children[S$0.$any](dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 189, 37, "row");
        return row.children == null;
      }, T$.TableRowTobool())))) {
        dart.throw(assertions.FlutterError.new("One of the rows of the table had null children.\n" + "The children property of TableRow must not be null."));
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[48], 188, 15, "() {\r\n         if (children.any((TableRow row) => row.children == null)) {\r\n           throw FlutterError(\r\n             'One of the rows of the table had null children.\\n'\r\n             'The children property of TableRow must not be null.',\r\n           );\r\n         }\r\n         return true;\r\n       }()");
    if (!dart.test(dart.fn(() => {
      if (dart.test(children[S$0.$any](dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 198, 37, "row");
        return dart.nullCheck(row.children)[S$0.$any](dart.fn(cell => {
          if (cell == null) dart.nullFailed(I[48], 198, 71, "cell");
          return cell == null;
        }, T$.WidgetTobool()));
      }, T$.TableRowTobool())))) {
        dart.throw(assertions.FlutterError.new("One of the children of one of the rows of the table was null.\n" + "The children of a TableRow must not be null."));
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[48], 197, 15, "() {\r\n         if (children.any((TableRow row) => row.children!.any((Widget cell) => cell == null))) {\r\n           throw FlutterError(\r\n             'One of the children of one of the rows of the table was null.\\n'\r\n             'The children of a TableRow must not be null.',\r\n           );\r\n         }\r\n         return true;\r\n       }()");
    if (!dart.test(dart.fn(() => {
      if (dart.test(children[S$0.$any](dart.fn(row1 => {
        if (row1 == null) dart.nullFailed(I[48], 207, 37, "row1");
        return row1.key != null && dart.test(children[S$0.$any](dart.fn(row2 => {
          if (row2 == null) dart.nullFailed(I[48], 207, 89, "row2");
          return !dart.equals(row1, row2) && dart.equals(row1.key, row2.key);
        }, T$.TableRowTobool())));
      }, T$.TableRowTobool())))) {
        dart.throw(assertions.FlutterError.new("Two or more TableRow children of this Table had the same key.\n" + "All the keyed TableRow children of a Table must have different Keys."));
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[48], 206, 15, "() {\r\n         if (children.any((TableRow row1) => row1.key != null && children.any((TableRow row2) => row1 != row2 && row1.key == row2.key))) {\r\n           throw FlutterError(\r\n             'Two or more TableRow children of this Table had the same key.\\n'\r\n             'All the keyed TableRow children of a Table must have different Keys.',\r\n           );\r\n         }\r\n         return true;\r\n       }()");
    if (!dart.test(dart.fn(() => {
      if (dart.test(children[S$.$isNotEmpty])) {
        let cellCount = dart.nullCheck(children[S$.$first].children)[S$.$length];
        if (dart.test(children[S$0.$any](dart.fn(row => {
          if (row == null) dart.nullFailed(I[48], 218, 39, "row");
          return dart.nullCheck(row.children)[S$.$length] != cellCount;
        }, T$.TableRowTobool())))) {
          dart.throw(assertions.FlutterError.new("Table contains irregular row lengths.\n" + "Every TableRow in a Table must have the same number of children, so that every cell is filled. " + "Otherwise, the table will contain holes."));
        }
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[48], 215, 15, "() {\r\n         if (children.isNotEmpty) {\r\n           final int cellCount = children.first.children!.length;\r\n           if (children.any((TableRow row) => row.children!.length != cellCount)) {\r\n             throw FlutterError(\r\n               'Table contains irregular row lengths.\\n'\r\n               'Every TableRow in a Table must have the same number of children, so that every cell is filled. '\r\n               'Otherwise, the table will contain holes.',\r\n             );\r\n           }\r\n         }\r\n         return true;\r\n       }()");
    this[S$0._rowDecorations] = dart.test(children[S$0.$any](dart.fn(row => {
      if (row == null) dart.nullFailed(I[48], 228, 49, "row");
      return row.decoration != null;
    }, T$.TableRowTobool()))) ? children[S$.$map](T$.DecorationN(), dart.fn(row => {
      if (row == null) dart.nullFailed(I[48], 229, 69, "row");
      return row.decoration;
    }, T$.TableRowToDecorationN()))[S$.$toList]({growable: false}) : null;
    table$.Table.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    if (!dart.test(dart.fn(() => {
      let flatChildren = this.children[S$0.$expand](framework.Widget, dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 233, 75, "row");
        return dart.nullCheck(row.children);
      }, T$.TableRowToListOfWidget()))[S$.$toList]({growable: false});
      if (dart.test(debug$0.debugChildrenHaveDuplicateKeys(this, flatChildren))) {
        dart.throw(assertions.FlutterError.new("Two or more cells in this Table contain widgets with the same key.\n" + "Every widget child of every TableRow in a Table must have different keys. The cells of a Table are " + "flattened out for processing, so separate cells cannot have duplicate keys even if they are in " + "different rows."));
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[48], 232, 12, "() {\r\n      final List<Widget> flatChildren = children.expand<Widget>((TableRow row) => row.children!).toList(growable: false);\r\n      if (debugChildrenHaveDuplicateKeys(this, flatChildren)) {\r\n        throw FlutterError(\r\n          'Two or more cells in this Table contain widgets with the same key.\\n'\r\n          'Every widget child of every TableRow in a Table must have different keys. The cells of a Table are '\r\n          'flattened out for processing, so separate cells cannot have duplicate keys even if they are in '\r\n          'different rows.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
  }).prototype = table$.Table.prototype;
  dart.addTypeTests(table$.Table);
  dart.addTypeCaches(table$.Table);
  dart.setMethodSignature(table$.Table, () => ({
    __proto__: dart.getMethods(table$.Table.__proto__),
    createElement: dart.fnType(table$._TableElement, []),
    createRenderObject: dart.fnType(table.RenderTable, [framework.BuildContext])
  }));
  dart.setLibraryUri(table$.Table, I[47]);
  dart.setFieldSignature(table$.Table, () => ({
    __proto__: dart.getFields(table$.Table.__proto__),
    children: dart.finalFieldType(core.List$(table$.TableRow)),
    columnWidths: dart.finalFieldType(dart.nullable(core.Map$(core.int, table.TableColumnWidth))),
    defaultColumnWidth: dart.finalFieldType(table.TableColumnWidth),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    border: dart.finalFieldType(dart.nullable(table_border.TableBorder)),
    defaultVerticalAlignment: dart.finalFieldType(table.TableCellVerticalAlignment),
    textBaseline: dart.finalFieldType(dart.nullable(ui.TextBaseline)),
    [S$0._rowDecorations]: dart.finalFieldType(dart.nullable(core.List$(dart.nullable(decoration.Decoration))))
  }));
  framework.Element = class Element extends diagnostics$.DiagnosticableTree {
    _equals(other) {
      if (other == null) return false;
      return this === other;
    }
    get hashCode() {
      return this[S$0._cachedHash];
    }
    get slot() {
      return this[S$0._slot];
    }
    get depth() {
      if (!dart.test(dart.fn(() => {
        if (this[S$0._lifecycleState] == framework._ElementLifecycle.initial) {
          dart.throw(assertions.FlutterError.new("Depth is only available when element has been mounted."));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3054, 12, "() {\r\n      if (_lifecycleState == _ElementLifecycle.initial) {\r\n        throw FlutterError('Depth is only available when element has been mounted.');\r\n      }\r\n      return true;\r\n    }()");
      return this[S$0._depth];
    }
    get [S$0._depth]() {
      let t38;
      return dart.test(this[S$0.__Element__depth_isSet]) ? (t38 = this[S$0.__Element__depth], t38) : dart.throw(new _internal.LateError.fieldNI("_depth"));
    }
    set [S$0._depth](t38) {
      if (t38 == null) dart.nullFailed(I[4], 3062, 12, "null");
      this[S$0.__Element__depth_isSet] = true;
      this[S$0.__Element__depth] = t38;
    }
    static _sort(a, b) {
      if (a == null) dart.nullFailed(I[4], 3064, 28, "a");
      if (b == null) dart.nullFailed(I[4], 3064, 39, "b");
      if (dart.notNull(a.depth) < dart.notNull(b.depth)) return -1;
      if (dart.notNull(b.depth) < dart.notNull(a.depth)) return 1;
      if (dart.test(b.dirty) && !dart.test(a.dirty)) return -1;
      if (dart.test(a.dirty) && !dart.test(b.dirty)) return 1;
      return 0;
    }
    static _debugConcreteSubtype(element) {
      if (element == null) dart.nullFailed(I[4], 3080, 44, "element");
      return framework.StatefulElement.is(element) ? 1 : framework.StatelessElement.is(element) ? 2 : 0;
    }
    get widget() {
      return this[S$._widget$1];
    }
    get owner() {
      return this[S$0._owner$2];
    }
    reassemble() {
      this.markNeedsBuild();
      this.visitChildren(dart.fn(child => {
        if (child == null) dart.nullFailed(I[4], 3127, 28, "child");
        child.reassemble();
      }, T$.ElementTovoid()));
    }
    [S$0._debugIsInScope](target) {
      if (target == null) dart.nullFailed(I[4], 3132, 32, "target");
      let current = this;
      while (current != null) {
        if (dart.equals(target, current)) return true;
        current = current[S$0._parent];
      }
      return false;
    }
    get renderObject() {
      let result = null;
      function visit(element) {
        if (element == null) dart.nullFailed(I[4], 3149, 24, "element");
        if (!(result == null)) dart.assertFailed(null, I[4], 3150, 14, "result == null");
        if (framework.RenderObjectElement.is(element))
          result = element.renderObject;
        else
          element.visitChildren(visit);
      }
      dart.fn(visit, T$.ElementTovoid());
      visit(this);
      return result;
    }
    describeMissingAncestor(opts) {
      let expectedAncestorType = opts && 'expectedAncestorType' in opts ? opts.expectedAncestorType : null;
      if (expectedAncestorType == null) dart.nullFailed(I[4], 3161, 65, "expectedAncestorType");
      let information = T$.JSArrayOfDiagnosticsNode().of([]);
      let ancestors = T$.JSArrayOfElement().of([]);
      this.visitAncestorElements(dart.fn(element => {
        if (element == null) dart.nullFailed(I[4], 3164, 36, "element");
        ancestors[S$.$add](element);
        return true;
      }, T$.ElementTobool()));
      information[S$.$add](new (T$.DiagnosticsPropertyOfElement()).new("The specific widget that could not find a " + dart.str(expectedAncestorType) + " ancestor was", this, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty}));
      if (dart.test(ancestors[S$.$isNotEmpty])) {
        information[S$.$add](framework.Element.describeElements("The ancestors of this widget were", ancestors));
      } else {
        information[S$.$add](new assertions.ErrorDescription.new("This widget is the root of the tree, so it has no " + "ancestors, let alone a \"" + dart.str(expectedAncestorType) + "\" ancestor."));
      }
      return information;
    }
    static describeElements(name, elements) {
      if (name == null) dart.nullFailed(I[4], 3187, 50, "name");
      if (elements == null) dart.nullFailed(I[4], 3187, 74, "elements");
      return new diagnostics$.DiagnosticsBlock.new({name: name, children: elements[S$.$map](diagnostics$.DiagnosticsNode, dart.fn(element => {
          if (element == null) dart.nullFailed(I[4], 3190, 56, "element");
          return new (T$.DiagnosticsPropertyOfElement()).new("", element);
        }, T$.ElementToDiagnosticsPropertyOfElement()))[S$.$toList](), allowTruncate: true});
    }
    describeElement(name, opts) {
      if (name == null) dart.nullFailed(I[4], 3196, 42, "name");
      let style = opts && 'style' in opts ? opts.style : C[396] || CT.C396;
      if (style == null) dart.nullFailed(I[4], 3196, 70, "style");
      return new (T$.DiagnosticsPropertyOfElement()).new(name, this, {style: style});
    }
    describeWidget(name, opts) {
      if (name == null) dart.nullFailed(I[4], 3201, 41, "name");
      let style = opts && 'style' in opts ? opts.style : C[396] || CT.C396;
      if (style == null) dart.nullFailed(I[4], 3201, 69, "style");
      return new (T$.DiagnosticsPropertyOfElement()).new(name, this, {style: style});
    }
    describeOwnershipChain(name) {
      if (name == null) dart.nullFailed(I[4], 3206, 49, "name");
      return new diagnostics$.StringProperty.new(name, this.debugGetCreatorChain(10));
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 3227, 37, "visitor");
    }
    debugVisitOnstageChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 3249, 49, "visitor");
      return this.visitChildren(visitor);
    }
    visitChildElements(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 3253, 42, "visitor");
      if (!dart.test(dart.fn(() => {
        if (this.owner == null || !dart.test(dart.nullCheck(this.owner)[S$0._debugStateLocked])) return true;
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("visitChildElements() called during build."), new assertions.ErrorDescription.new("The BuildContext.visitChildElements() method can't be called during " + "build because the child list is still being updated at that point, " + "so the children might not be constructed yet, or might be old children " + "that are going to be replaced.")])));
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3254, 12, "() {\r\n      if (owner == null || !owner!._debugStateLocked)\r\n        return true;\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('visitChildElements() called during build.'),\r\n        ErrorDescription(\r\n          \"The BuildContext.visitChildElements() method can't be called during \"\r\n          'build because the child list is still being updated at that point, '\r\n          'so the children might not be constructed yet, or might be old children '\r\n          'that are going to be replaced.',\r\n        ),\r\n      ]);\r\n    }()");
      this.visitChildren(visitor);
    }
    updateChild(child, newWidget, newSlot) {
      if (newWidget == null) {
        if (child != null) this.deactivateChild(child);
        return null;
      }
      let newChild = null;
      if (child != null) {
        let hasSameSuperclass = true;
        if (!dart.test(dart.fn(() => {
          let oldElementClass = framework.Element._debugConcreteSubtype(child);
          let newWidgetClass = framework.Widget._debugConcreteSubtype(newWidget);
          hasSameSuperclass = oldElementClass == newWidgetClass;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3337, 14, "() {\r\n        final int oldElementClass = Element._debugConcreteSubtype(child);\r\n        final int newWidgetClass = Widget._debugConcreteSubtype(newWidget);\r\n        hasSameSuperclass = oldElementClass == newWidgetClass;\r\n        return true;\r\n      }()");
        if (hasSameSuperclass && dart.equals(child.widget, newWidget)) {
          if (!dart.equals(child.slot, newSlot)) this.updateSlotForChild(child, newSlot);
          newChild = child;
        } else if (hasSameSuperclass && dart.test(framework.Widget.canUpdate(child.widget, newWidget))) {
          if (!dart.equals(child.slot, newSlot)) this.updateSlotForChild(child, newSlot);
          child.update(newWidget);
          if (!dart.equals(child.widget, newWidget)) dart.assertFailed(null, I[4], 3351, 16, "child.widget == newWidget");
          if (!dart.test(dart.fn(() => {
            dart.nullCheck(child.owner)[S$0._debugElementWasRebuilt](child);
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3352, 16, "() {\r\n          child.owner!._debugElementWasRebuilt(child);\r\n          return true;\r\n        }()");
          newChild = child;
        } else {
          this.deactivateChild(child);
          if (!(child[S$0._parent] == null)) dart.assertFailed(null, I[4], 3359, 16, "child._parent == null");
          newChild = this.inflateWidget(newWidget, newSlot);
        }
      } else {
        newChild = this.inflateWidget(newWidget, newSlot);
      }
      if (!dart.test(dart.fn(() => {
        if (child != null) this[S$0._debugRemoveGlobalKeyReservation](child);
        let key = newWidget.key;
        if (T$.GlobalKeyOfStateOfStatefulWidget().is(key)) {
          if (!(this.owner != null)) dart.assertFailed(null, I[4], 3371, 16, "owner != null");
          dart.nullCheck(this.owner)[S$0._debugReserveGlobalKeyFor](this, newChild, key);
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3366, 12, "() {\r\n      if (child != null)\r\n        _debugRemoveGlobalKeyReservation(child);\r\n      final Key? key = newWidget.key;\r\n      if (key is GlobalKey) {\r\n        assert(owner != null);\r\n        owner!._debugReserveGlobalKeyFor(this, newChild, key);\r\n      }\r\n      return true;\r\n    }()");
      return newChild;
    }
    mount(parent, newSlot) {
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.initial)) dart.assertFailed(null, I[4], 3399, 12, "_lifecycleState == _ElementLifecycle.initial");
      if (!(this.widget != null)) dart.assertFailed(null, I[4], 3400, 12, "widget != null");
      if (!(this[S$0._parent] == null)) dart.assertFailed(null, I[4], 3401, 12, "_parent == null");
      if (!(parent == null || parent[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3402, 12, "parent == null || parent._lifecycleState == _ElementLifecycle.active");
      if (!(this.slot == null)) dart.assertFailed(null, I[4], 3403, 12, "slot == null");
      this[S$0._parent] = parent;
      this[S$0._slot] = newSlot;
      this[S$0._lifecycleState] = framework._ElementLifecycle.active;
      this[S$0._depth] = this[S$0._parent] != null ? dart.notNull(dart.nullCheck(this[S$0._parent]).depth) + 1 : 1;
      if (parent != null) {
        this[S$0._owner$2] = parent.owner;
      }
      if (!(this.owner != null)) dart.assertFailed(null, I[4], 3414, 12, "owner != null");
      let key = this.widget.key;
      if (T$.GlobalKeyOfStateOfStatefulWidget().is(key)) {
        dart.nullCheck(this.owner)[S$0._registerGlobalKey](key, this);
      }
      this[S$0._updateInheritance]();
    }
    [S$0._debugRemoveGlobalKeyReservation](child) {
      if (child == null) dart.nullFailed(I[4], 3422, 49, "child");
      if (!(this.owner != null)) dart.assertFailed(null, I[4], 3423, 12, "owner != null");
      dart.nullCheck(this.owner)[S$0._debugRemoveGlobalKeyReservationFor](this, child);
    }
    update(newWidget) {
      framework.Widget.as(newWidget);
      if (newWidget == null) dart.nullFailed(I[4], 3435, 32, "newWidget");
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active && this.widget != null && newWidget != null && !dart.equals(newWidget, this.widget) && this.depth != null && dart.test(framework.Widget.canUpdate(this.widget, newWidget)))) dart.assertFailed(null, I[4], 3439, 7, "_lifecycleState == _ElementLifecycle.active\r\n        && widget != null\r\n        && newWidget != null\r\n        && newWidget != widget\r\n        && depth != null\r\n        && Widget.canUpdate(widget, newWidget)");
      if (!dart.test(dart.fn(() => {
        this[S$0._debugForgottenChildrenWithGlobalKey][S$.$forEach](dart.bind(this, S$0._debugRemoveGlobalKeyReservation));
        this[S$0._debugForgottenChildrenWithGlobalKey].clear();
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3451, 12, "() {\r\n      _debugForgottenChildrenWithGlobalKey.forEach(_debugRemoveGlobalKeyReservation);\r\n      _debugForgottenChildrenWithGlobalKey.clear();\r\n      return true;\r\n    }()");
      this[S$._widget$1] = newWidget;
    }
    updateSlotForChild(child, newSlot) {
      if (child == null) dart.nullFailed(I[4], 3465, 35, "child");
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3466, 12, "_lifecycleState == _ElementLifecycle.active");
      if (!(child != null)) dart.assertFailed(null, I[4], 3467, 12, "child != null");
      if (!dart.equals(child[S$0._parent], this)) dart.assertFailed(null, I[4], 3468, 12, "child._parent == this");
      function visit(element) {
        if (element == null) dart.nullFailed(I[4], 3469, 24, "element");
        element[S$0._updateSlot](newSlot);
        if (!framework.RenderObjectElement.is(element)) element.visitChildren(visit);
      }
      dart.fn(visit, T$.ElementTovoid());
      visit(child);
    }
    [S$0._updateSlot](newSlot) {
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3478, 12, "_lifecycleState == _ElementLifecycle.active");
      if (!(this.widget != null)) dart.assertFailed(null, I[4], 3479, 12, "widget != null");
      if (!(this[S$0._parent] != null)) dart.assertFailed(null, I[4], 3480, 12, "_parent != null");
      if (!(dart.nullCheck(this[S$0._parent])[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3481, 12, "_parent!._lifecycleState == _ElementLifecycle.active");
      if (!(this.depth != null)) dart.assertFailed(null, I[4], 3482, 12, "depth != null");
      this[S$0._slot] = newSlot;
    }
    [S$0._updateDepth](parentDepth) {
      if (parentDepth == null) dart.nullFailed(I[4], 3486, 25, "parentDepth");
      let expectedDepth = dart.notNull(parentDepth) + 1;
      if (dart.notNull(this[S$0._depth]) < expectedDepth) {
        this[S$0._depth] = expectedDepth;
        this.visitChildren(dart.fn(child => {
          if (child == null) dart.nullFailed(I[4], 3490, 30, "child");
          child[S$0._updateDepth](expectedDepth);
        }, T$.ElementTovoid()));
      }
    }
    detachRenderObject() {
      this.visitChildren(dart.fn(child => {
        if (child == null) dart.nullFailed(I[4], 3505, 28, "child");
        child.detachRenderObject();
      }, T$.ElementTovoid()));
      this[S$0._slot] = null;
    }
    attachRenderObject(newSlot) {
      if (!(this[S$0._slot] == null)) dart.assertFailed(null, I[4], 3520, 12, "_slot == null");
      this.visitChildren(dart.fn(child => {
        if (child == null) dart.nullFailed(I[4], 3521, 28, "child");
        child.attachRenderObject(newSlot);
      }, T$.ElementTovoid()));
      this[S$0._slot] = newSlot;
    }
    [S$0._retakeInactiveElement](key, newWidget) {
      if (key == null) dart.nullFailed(I[4], 3527, 45, "key");
      if (newWidget == null) dart.nullFailed(I[4], 3527, 57, "newWidget");
      let element = key[S$0._currentElement$1];
      if (element == null) return null;
      if (!dart.test(framework.Widget.canUpdate(element.widget, newWidget))) return null;
      if (!dart.test(dart.fn(() => {
        let t39;
        if (dart.test(debug$0.debugPrintGlobalKeyedWidgetLifecycle)) print.debugPrint("Attempting to take " + dart.str(element) + " from " + dart.str((t39 = element[S$0._parent], t39 == null ? "inactive elements list" : t39)) + " to put in " + dart.str(this) + ".");
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3539, 12, "() {\r\n      if (debugPrintGlobalKeyedWidgetLifecycle)\r\n        debugPrint('Attempting to take $element from ${element._parent ?? \"inactive elements list\"} to put in $this.');\r\n      return true;\r\n    }()");
      let parent = element[S$0._parent];
      if (parent != null) {
        if (!dart.test(dart.fn(() => {
          if (dart.equals(parent, this)) {
            dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("A GlobalKey was used multiple times inside one widget's child list."), new (T$.DiagnosticsPropertyOfGlobalKeyOfStateOfStatefulWidget()).new("The offending GlobalKey was", key), parent.describeElement("The parent of the widgets with that key was"), element.describeElement("The first child to get instantiated with that key became"), new (T$.DiagnosticsPropertyOfWidget()).new("The second child that was to be instantiated with that key was", this.widget, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty}), new assertions.ErrorDescription.new("A GlobalKey can only be specified on one widget at a time in the widget tree.")])));
          }
          dart.nullCheck(parent.owner)[S$0._debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans](parent, key);
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3546, 14, "() {\r\n        if (parent == this) {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary(\"A GlobalKey was used multiple times inside one widget's child list.\"),\r\n            DiagnosticsProperty<GlobalKey>('The offending GlobalKey was', key),\r\n            parent.describeElement('The parent of the widgets with that key was'),\r\n            element.describeElement('The first child to get instantiated with that key became'),\r\n            DiagnosticsProperty<Widget>('The second child that was to be instantiated with that key was', widget, style: DiagnosticsTreeStyle.errorProperty),\r\n            ErrorDescription('A GlobalKey can only be specified on one widget at a time in the widget tree.'),\r\n          ]);\r\n        }\r\n        parent.owner!._debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans(\r\n          parent,\r\n          key,\r\n        );\r\n        return true;\r\n      }()");
        parent.forgetChild(element);
        parent.deactivateChild(element);
      }
      if (!(element[S$0._parent] == null)) dart.assertFailed(null, I[4], 3566, 12, "element._parent == null");
      dart.nullCheck(this.owner)[S$0._inactiveElements].remove(element);
      return element;
    }
    inflateWidget(newWidget, newSlot) {
      if (newWidget == null) dart.nullFailed(I[4], 3589, 32, "newWidget");
      if (!(newWidget != null)) dart.assertFailed(null, I[4], 3590, 12, "newWidget != null");
      let key = newWidget.key;
      if (T$.GlobalKeyOfStateOfStatefulWidget().is(key)) {
        let newChild = this[S$0._retakeInactiveElement](key, newWidget);
        if (newChild != null) {
          if (!(newChild[S$0._parent] == null)) dart.assertFailed(null, I[4], 3595, 16, "newChild._parent == null");
          if (!dart.test(dart.fn(() => {
            this[S$0._debugCheckForCycles](newChild);
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3596, 16, "() {\r\n          _debugCheckForCycles(newChild);\r\n          return true;\r\n        }()");
          newChild[S$0._activateWithParent](this, newSlot);
          let updatedChild = this.updateChild(newChild, newWidget, newSlot);
          if (!dart.equals(newChild, updatedChild)) dart.assertFailed(null, I[4], 3602, 16, "newChild == updatedChild");
          return dart.nullCheck(updatedChild);
        }
      }
      let newChild = newWidget.createElement();
      if (!dart.test(dart.fn(() => {
        this[S$0._debugCheckForCycles](newChild);
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3607, 12, "() {\r\n      _debugCheckForCycles(newChild);\r\n      return true;\r\n    }()");
      newChild.mount(this, newSlot);
      if (!(newChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3612, 12, "newChild._lifecycleState == _ElementLifecycle.active");
      return newChild;
    }
    [S$0._debugCheckForCycles](newChild) {
      if (newChild == null) dart.nullFailed(I[4], 3616, 37, "newChild");
      if (!(newChild[S$0._parent] == null)) dart.assertFailed(null, I[4], 3617, 12, "newChild._parent == null");
      if (!dart.test(dart.fn(() => {
        let node = this;
        while (node[S$0._parent] != null)
          node = dart.nullCheck(node[S$0._parent]);
        if (!!node._equals(newChild)) dart.assertFailed(null, I[4], 3622, 14, "node != newChild");
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3618, 12, "() {\r\n      Element node = this;\r\n      while (node._parent != null)\r\n        node = node._parent!;\r\n      assert(node != newChild); // indicates we are about to create a cycle\r\n      return true;\r\n    }()");
    }
    deactivateChild(child) {
      if (child == null) dart.nullFailed(I[4], 3642, 32, "child");
      if (!(child != null)) dart.assertFailed(null, I[4], 3643, 12, "child != null");
      if (!dart.equals(child[S$0._parent], this)) dart.assertFailed(null, I[4], 3644, 12, "child._parent == this");
      child[S$0._parent] = null;
      child.detachRenderObject();
      dart.nullCheck(this.owner)[S$0._inactiveElements].add(child);
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$0.debugPrintGlobalKeyedWidgetLifecycle)) {
          if (T$.GlobalKeyOfStateOfStatefulWidget().is(child.widget.key)) print.debugPrint("Deactivated " + dart.str(child) + " (keyed child of " + dart.str(this) + ")");
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3648, 12, "() {\r\n      if (debugPrintGlobalKeyedWidgetLifecycle) {\r\n        if (child.widget.key is GlobalKey)\r\n          debugPrint('Deactivated $child (keyed child of $this)');\r\n      }\r\n      return true;\r\n    }()");
    }
    forgetChild(child) {
      if (child == null) dart.nullFailed(I[4], 3676, 28, "child");
      if (!dart.test(dart.fn(() => {
        if (T$.GlobalKeyOfStateOfStatefulWidget().is(child.widget.key)) this[S$0._debugForgottenChildrenWithGlobalKey].add(child);
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3683, 12, "() {\r\n      if (child.widget.key is GlobalKey)\r\n        _debugForgottenChildrenWithGlobalKey.add(child);\r\n      return true;\r\n    }()");
    }
    [S$0._activateWithParent](parent, newSlot) {
      if (parent == null) dart.nullFailed(I[4], 3690, 36, "parent");
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.inactive)) dart.assertFailed(null, I[4], 3691, 12, "_lifecycleState == _ElementLifecycle.inactive");
      this[S$0._parent] = parent;
      if (!dart.test(dart.fn(() => {
        if (dart.test(debug$0.debugPrintGlobalKeyedWidgetLifecycle)) print.debugPrint("Reactivating " + dart.str(this) + " (now child of " + dart.str(this[S$0._parent]) + ").");
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3693, 12, "() {\r\n      if (debugPrintGlobalKeyedWidgetLifecycle)\r\n        debugPrint('Reactivating $this (now child of $_parent).');\r\n      return true;\r\n    }()");
      this[S$0._updateDepth](dart.nullCheck(this[S$0._parent]).depth);
      framework.Element._activateRecursively(this);
      this.attachRenderObject(newSlot);
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3701, 12, "_lifecycleState == _ElementLifecycle.active");
    }
    static _activateRecursively(element) {
      if (element == null) dart.nullFailed(I[4], 3704, 44, "element");
      if (!(element[S$0._lifecycleState] == framework._ElementLifecycle.inactive)) dart.assertFailed(null, I[4], 3705, 12, "element._lifecycleState == _ElementLifecycle.inactive");
      element.activate();
      if (!(element[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3707, 12, "element._lifecycleState == _ElementLifecycle.active");
      element.visitChildren(C[397] || CT.C397);
    }
    activate() {
      let t39;
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.inactive)) dart.assertFailed(null, I[4], 3724, 12, "_lifecycleState == _ElementLifecycle.inactive");
      if (!(this.widget != null)) dart.assertFailed(null, I[4], 3725, 12, "widget != null");
      if (!(this.owner != null)) dart.assertFailed(null, I[4], 3726, 12, "owner != null");
      if (!(this.depth != null)) dart.assertFailed(null, I[4], 3727, 12, "depth != null");
      let hadDependencies = this[S$0._dependencies] != null && dart.test(dart.nullCheck(this[S$0._dependencies])[S$.$isNotEmpty]) || dart.test(this[S$0._hadUnsatisfiedDependencies]);
      this[S$0._lifecycleState] = framework._ElementLifecycle.active;
      t39 = this[S$0._dependencies];
      t39 == null ? null : t39.clear();
      this[S$0._hadUnsatisfiedDependencies] = false;
      this[S$0._updateInheritance]();
      if (dart.test(this[S$0._dirty])) dart.nullCheck(this.owner).scheduleBuildFor(this);
      if (hadDependencies) this.didChangeDependencies();
    }
    deactivate() {
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3758, 12, "_lifecycleState == _ElementLifecycle.active");
      if (!(this[S$._widget$1] != null)) dart.assertFailed(null, I[4], 3759, 12, "_widget != null");
      if (!(this.depth != null)) dart.assertFailed(null, I[4], 3760, 12, "depth != null");
      if (this[S$0._dependencies] != null && dart.test(dart.nullCheck(this[S$0._dependencies])[S$.$isNotEmpty])) {
        for (let dependency of dart.nullCheck(this[S$0._dependencies]))
          dependency[S$0._dependents][S$.$remove](this);
      }
      this[S$0._inheritedWidgets] = null;
      this[S$0._lifecycleState] = framework._ElementLifecycle.inactive;
    }
    debugDeactivated() {
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.inactive)) dart.assertFailed(null, I[4], 3780, 12, "_lifecycleState == _ElementLifecycle.inactive");
    }
    unmount() {
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.inactive)) dart.assertFailed(null, I[4], 3799, 12, "_lifecycleState == _ElementLifecycle.inactive");
      if (!(this[S$._widget$1] != null)) dart.assertFailed(null, I[4], 3800, 12, "_widget != null");
      if (!(this.depth != null)) dart.assertFailed(null, I[4], 3801, 12, "depth != null");
      if (!(this.owner != null)) dart.assertFailed(null, I[4], 3802, 12, "owner != null");
      let key = this[S$._widget$1].key;
      if (T$.GlobalKeyOfStateOfStatefulWidget().is(key)) {
        dart.nullCheck(this.owner)[S$0._unregisterGlobalKey](key, this);
      }
      this[S$0._lifecycleState] = framework._ElementLifecycle.defunct;
    }
    findRenderObject() {
      return this.renderObject;
    }
    get size() {
      if (!dart.test(dart.fn(() => {
        if (this[S$0._lifecycleState] != framework._ElementLifecycle.active) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size of inactive element."), new assertions.ErrorDescription.new("In order for an element to have a valid size, the element must be " + "active, which means it is part of the tree.\n" + "Instead, this element is in the " + dart.str(this[S$0._lifecycleState]) + " state."), this.describeElement("The size getter was called for the following element")])));
        }
        if (dart.test(dart.nullCheck(this.owner)[S$0._debugBuilding])) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size during build."), new assertions.ErrorDescription.new("The size of this render object has not yet been determined because " + "the framework is still in the process of building widgets, which " + "means the render tree for this frame has not yet been determined. " + "The size getter should only be called from paint callbacks or " + "interaction event handlers (e.g. gesture callbacks)."), new assertions.ErrorSpacer.new(), new assertions.ErrorHint.new("If you need some sizing information during build to decide which " + "widgets to build, consider using a LayoutBuilder widget, which can " + "tell you the layout constraints at a given location in the tree. See " + "<https://api.flutter.dev/flutter/widgets/LayoutBuilder-class.html> " + "for more details."), new assertions.ErrorSpacer.new(), this.describeElement("The size getter was called for the following element")])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3816, 12, "() {\r\n      if (_lifecycleState != _ElementLifecycle.active) {\r\n        // TODO(jacobr): is this a good separation into contract and violation?\r\n        // I have added a line of white space.\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size of inactive element.'),\r\n          ErrorDescription(\r\n            'In order for an element to have a valid size, the element must be '\r\n            'active, which means it is part of the tree.\\n'\r\n            'Instead, this element is in the $_lifecycleState state.',\r\n          ),\r\n          describeElement('The size getter was called for the following element'),\r\n        ]);\r\n      }\r\n      if (owner!._debugBuilding) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size during build.'),\r\n          ErrorDescription(\r\n            'The size of this render object has not yet been determined because '\r\n            'the framework is still in the process of building widgets, which '\r\n            'means the render tree for this frame has not yet been determined. '\r\n            'The size getter should only be called from paint callbacks or '\r\n            'interaction event handlers (e.g. gesture callbacks).',\r\n          ),\r\n          ErrorSpacer(),\r\n          ErrorHint(\r\n            'If you need some sizing information during build to decide which '\r\n            'widgets to build, consider using a LayoutBuilder widget, which can '\r\n            'tell you the layout constraints at a given location in the tree. See '\r\n            '<https://api.flutter.dev/flutter/widgets/LayoutBuilder-class.html> '\r\n            'for more details.',\r\n          ),\r\n          ErrorSpacer(),\r\n          describeElement('The size getter was called for the following element'),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      let renderObject = this.findRenderObject();
      if (!dart.test(dart.fn(() => {
        if (renderObject == null) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size without a render object."), new assertions.ErrorHint.new("In order for an element to have a valid size, the element must have " + "an associated render object. This element does not have an associated " + "render object, which typically means that the size getter was called " + "too early in the pipeline (e.g., during the build phase) before the " + "framework has created the render tree."), this.describeElement("The size getter was called for the following element")])));
        }
        if (sliver.RenderSliver.is(renderObject)) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size from a RenderSliver."), new assertions.ErrorHint.new("The render object associated with this element is a " + dart.str(dart.runtimeType(renderObject)) + ", which is a subtype of RenderSliver. " + "Slivers do not have a size per se. They have a more elaborate " + "geometry description, which can be accessed by calling " + "findRenderObject and then using the \"geometry\" getter on the " + "resulting object."), this.describeElement("The size getter was called for the following element"), renderObject.describeForError("The associated render sliver was")])));
        }
        if (!box$.RenderBox.is(renderObject)) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size from a render object that is not a RenderBox."), new assertions.ErrorHint.new("Instead of being a subtype of RenderBox, the render object associated " + "with this element is a " + dart.str(dart.runtimeType(renderObject)) + ". If this type of " + "render object does have a size, consider calling findRenderObject " + "and extracting its size manually."), this.describeElement("The size getter was called for the following element"), renderObject.describeForError("The associated render object was")])));
        }
        let box = renderObject;
        if (!dart.test(box.hasSize)) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size from a render object that has not been through layout."), new assertions.ErrorHint.new("The size of this render object has not yet been determined because " + "this render object has not yet been through layout, which typically " + "means that the size getter was called too early in the pipeline " + "(e.g., during the build phase) before the framework has determined " + "the size and position of the render objects during layout."), this.describeElement("The size getter was called for the following element"), box.describeForError("The render object from which the size was to be obtained was")])));
        }
        if (dart.test(box.debugNeedsLayout)) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Cannot get size from a render object that has been marked dirty for layout."), new assertions.ErrorHint.new("The size of this render object is ambiguous because this render object has " + "been modified since it was last laid out, which typically means that the size " + "getter was called too early in the pipeline (e.g., during the build phase) " + "before the framework has determined the size and position of the render " + "objects during layout."), this.describeElement("The size getter was called for the following element"), box.describeForError("The render object from which the size was to be obtained was"), new assertions.ErrorHint.new("Consider using debugPrintMarkNeedsLayoutStacks to determine why the render " + "object in question is dirty, if you did not expect this.")])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3855, 12, "() {\r\n      if (renderObject == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size without a render object.'),\r\n          ErrorHint(\r\n            'In order for an element to have a valid size, the element must have '\r\n            'an associated render object. This element does not have an associated '\r\n            'render object, which typically means that the size getter was called '\r\n            'too early in the pipeline (e.g., during the build phase) before the '\r\n            'framework has created the render tree.',\r\n          ),\r\n          describeElement('The size getter was called for the following element'),\r\n        ]);\r\n      }\r\n      if (renderObject is RenderSliver) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size from a RenderSliver.'),\r\n          ErrorHint(\r\n            'The render object associated with this element is a '\r\n            '${renderObject.runtimeType}, which is a subtype of RenderSliver. '\r\n            'Slivers do not have a size per se. They have a more elaborate '\r\n            'geometry description, which can be accessed by calling '\r\n            'findRenderObject and then using the \"geometry\" getter on the '\r\n            'resulting object.',\r\n          ),\r\n          describeElement('The size getter was called for the following element'),\r\n          renderObject.describeForError('The associated render sliver was'),\r\n        ]);\r\n      }\r\n      if (renderObject is! RenderBox) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size from a render object that is not a RenderBox.'),\r\n          ErrorHint(\r\n            'Instead of being a subtype of RenderBox, the render object associated '\r\n            'with this element is a ${renderObject.runtimeType}. If this type of '\r\n            'render object does have a size, consider calling findRenderObject '\r\n            'and extracting its size manually.',\r\n          ),\r\n          describeElement('The size getter was called for the following element'),\r\n          renderObject.describeForError('The associated render object was'),\r\n        ]);\r\n      }\r\n      final RenderBox box = renderObject;\r\n      if (!box.hasSize) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size from a render object that has not been through layout.'),\r\n          ErrorHint(\r\n            'The size of this render object has not yet been determined because '\r\n            'this render object has not yet been through layout, which typically '\r\n            'means that the size getter was called too early in the pipeline '\r\n            '(e.g., during the build phase) before the framework has determined '\r\n           'the size and position of the render objects during layout.',\r\n          ),\r\n          describeElement('The size getter was called for the following element'),\r\n          box.describeForError('The render object from which the size was to be obtained was'),\r\n        ]);\r\n      }\r\n      if (box.debugNeedsLayout) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Cannot get size from a render object that has been marked dirty for layout.'),\r\n          ErrorHint(\r\n            'The size of this render object is ambiguous because this render object has '\r\n            'been modified since it was last laid out, which typically means that the size '\r\n            'getter was called too early in the pipeline (e.g., during the build phase) '\r\n            'before the framework has determined the size and position of the render '\r\n            'objects during layout.',\r\n          ),\r\n          describeElement('The size getter was called for the following element'),\r\n          box.describeForError('The render object from which the size was to be obtained was'),\r\n          ErrorHint(\r\n            'Consider using debugPrintMarkNeedsLayoutStacks to determine why the render '\r\n            'object in question is dirty, if you did not expect this.',\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (box$.RenderBox.is(renderObject)) return renderObject.size;
      return null;
    }
    [S$0._debugCheckStateIsActiveForAncestorLookup]() {
      if (!dart.test(dart.fn(() => {
        if (this[S$0._lifecycleState] != framework._ElementLifecycle.active) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Looking up a deactivated widget's ancestor is unsafe."), new assertions.ErrorDescription.new("At this point the state of the widget's element tree is no longer " + "stable."), new assertions.ErrorHint.new("To safely refer to a widget's ancestor in its dispose() method, " + "save a reference to the ancestor by calling dependOnInheritedWidgetOfExactType() " + "in the widget's didChangeDependencies() method.")])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 3942, 12, "() {\r\n      if (_lifecycleState != _ElementLifecycle.active) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\"Looking up a deactivated widget's ancestor is unsafe.\"),\r\n          ErrorDescription(\r\n            \"At this point the state of the widget's element tree is no longer \"\r\n            'stable.',\r\n          ),\r\n          ErrorHint(\r\n            \"To safely refer to a widget's ancestor in its dispose() method, \"\r\n            'save a reference to the ancestor by calling dependOnInheritedWidgetOfExactType() '\r\n            \"in the widget's didChangeDependencies() method.\",\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    dependOnInheritedElement(ancestor, opts) {
      if (ancestor == null) dart.nullFailed(I[4], 3963, 61, "ancestor");
      let aspect = opts && 'aspect' in opts ? opts.aspect : null;
      if (!(ancestor != null)) dart.assertFailed(null, I[4], 3964, 12, "ancestor != null");
      this[S$0._dependencies] == null ? this[S$0._dependencies] = new (T$._HashSetOfInheritedElement()).new() : null;
      dart.nullCheck(this[S$0._dependencies]).add(ancestor);
      ancestor.updateDependencies(this, aspect);
      return ancestor.widget;
    }
    dependOnInheritedWidgetOfExactType(T, opts) {
      let aspect = opts && 'aspect' in opts ? opts.aspect : null;
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 3973, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._inheritedWidgets] == null ? null : dart.nullCheck(this[S$0._inheritedWidgets])[S$.$_get](dart.wrapType(T));
      if (ancestor != null) {
        return T.as(this.dependOnInheritedElement(ancestor, {aspect: aspect}));
      }
      this[S$0._hadUnsatisfiedDependencies] = true;
      return null;
    }
    getElementForInheritedWidgetOfExactType(T) {
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 3984, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._inheritedWidgets] == null ? null : dart.nullCheck(this[S$0._inheritedWidgets])[S$.$_get](dart.wrapType(T));
      return ancestor;
    }
    [S$0._updateInheritance]() {
      let t39;
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 3990, 12, "_lifecycleState == _ElementLifecycle.active");
      this[S$0._inheritedWidgets] = (t39 = this[S$0._parent], t39 == null ? null : t39[S$0._inheritedWidgets]);
    }
    findAncestorWidgetOfExactType(T) {
      let t39;
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 3996, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._parent];
      while (ancestor != null && !dart.equals(dart.runtimeType(ancestor.widget), dart.wrapType(T)))
        ancestor = ancestor[S$0._parent];
      return dart.nullable(T).as((t39 = ancestor, t39 == null ? null : t39.widget));
    }
    findAncestorStateOfType(T) {
      let t39;
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 4005, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._parent];
      while (ancestor != null) {
        if (framework.StatefulElement.is(ancestor) && T.is(ancestor.state)) break;
        ancestor = ancestor[S$0._parent];
      }
      let statefulAncestor = T$.StatefulElementN().as(ancestor);
      return dart.nullable(T).as((t39 = statefulAncestor, t39 == null ? null : t39.state));
    }
    findRootAncestorStateOfType(T) {
      let t39;
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 4018, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._parent];
      let statefulAncestor = null;
      while (ancestor != null) {
        if (framework.StatefulElement.is(ancestor) && T.is(ancestor.state)) statefulAncestor = ancestor;
        ancestor = ancestor[S$0._parent];
      }
      return dart.nullable(T).as((t39 = statefulAncestor, t39 == null ? null : t39.state));
    }
    findAncestorRenderObjectOfType(T) {
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 4031, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._parent];
      while (ancestor != null) {
        if (framework.RenderObjectElement.is(ancestor) && T.is(ancestor.renderObject)) return T.as(ancestor.renderObject);
        ancestor = ancestor[S$0._parent];
      }
      return null;
    }
    visitAncestorElements(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 4042, 61, "visitor");
      if (!dart.test(this[S$0._debugCheckStateIsActiveForAncestorLookup]())) dart.assertFailed(null, I[4], 4043, 12, "_debugCheckStateIsActiveForAncestorLookup()");
      let ancestor = this[S$0._parent];
      while (ancestor != null && dart.test(visitor(ancestor)))
        ancestor = ancestor[S$0._parent];
    }
    didChangeDependencies() {
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 4059, 12, "_lifecycleState == _ElementLifecycle.active");
      if (!dart.test(this[S$0._debugCheckOwnerBuildTargetExists]("didChangeDependencies"))) dart.assertFailed(null, I[4], 4060, 12, "_debugCheckOwnerBuildTargetExists('didChangeDependencies')");
      this.markNeedsBuild();
    }
    [S$0._debugCheckOwnerBuildTargetExists](methodName) {
      if (methodName == null) dart.nullFailed(I[4], 4064, 49, "methodName");
      if (!dart.test(dart.fn(() => {
        if (dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget] == null) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(methodName) + " for " + dart.str(dart.runtimeType(this.widget)) + " was called at an " + "inappropriate time."), new assertions.ErrorDescription.new("It may only be called while the widgets are being built."), new assertions.ErrorHint.new("A possible cause of this error is when " + dart.str(methodName) + " is called during " + "one of:\n" + " * network I/O event\n" + " * file I/O event\n" + " * timer\n" + " * microtask (caused by Future.then, async/await, scheduleMicrotask)")])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4065, 12, "() {\r\n      if (owner!._debugCurrentBuildTarget == null) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary(\r\n            '$methodName for ${widget.runtimeType} was called at an '\r\n            'inappropriate time.',\r\n          ),\r\n          ErrorDescription('It may only be called while the widgets are being built.'),\r\n          ErrorHint(\r\n            'A possible cause of this error is when $methodName is called during '\r\n            'one of:\\n'\r\n            ' * network I/O event\\n'\r\n            ' * file I/O event\\n'\r\n            ' * timer\\n'\r\n            ' * microtask (caused by Future.then, async/await, scheduleMicrotask)',\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    debugGetCreatorChain(limit) {
      if (limit == null) dart.nullFailed(I[4], 4091, 35, "limit");
      let chain = T$.JSArrayOfString().of([]);
      let node = this;
      while (dart.notNull(chain[S$.$length]) < dart.notNull(limit) && node != null) {
        chain[S$.$add](node.toStringShort());
        node = node[S$0._parent];
      }
      if (node != null) chain[S$.$add]("⋯");
      return chain[S$.$join](" ← ");
    }
    debugGetDiagnosticChain() {
      let chain = T$.JSArrayOfElement().of([this]);
      let node = this[S$0._parent];
      while (node != null) {
        chain[S$.$add](node);
        node = node[S$0._parent];
      }
      return chain;
    }
    toStringShort() {
      return this.widget.toStringShort();
    }
    toDiagnosticsNode(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let style = opts && 'style' in opts ? opts.style : null;
      return new framework._ElementDiagnosticableTreeNode.new({name: name, value: this, style: style});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 4131, 56, "properties");
      super.debugFillProperties(properties);
      properties.defaultDiagnosticsTreeStyle = diagnostics$.DiagnosticsTreeStyle.dense;
      if (this[S$0._lifecycleState] != framework._ElementLifecycle.initial) {
        properties.add(new (T$.ObjectFlagPropertyOfint()).new("depth", this.depth, {ifNull: "no depth"}));
      }
      properties.add(new (T$.ObjectFlagPropertyOfWidget()).new("widget", this.widget, {ifNull: "no widget"}));
      properties.add(new (T$.DiagnosticsPropertyOfKey()).new("key", this.widget.key, {showName: false, defaultValue: null, level: diagnostics$.DiagnosticLevel.hidden}));
      this.widget.debugFillProperties(properties);
      properties.add(new diagnostics$.FlagProperty.new("dirty", {value: this.dirty, ifTrue: "dirty"}));
      if (this[S$0._dependencies] != null && dart.test(dart.nullCheck(this[S$0._dependencies])[S$.$isNotEmpty])) {
        let diagnosticsDependencies = dart.nullCheck(this[S$0._dependencies])[S$.$map](diagnostics$.DiagnosticsNode, dart.fn(element => {
          if (element == null) dart.nullFailed(I[4], 4143, 32, "element");
          return element.widget.toDiagnosticsNode({style: diagnostics$.DiagnosticsTreeStyle.sparse});
        }, T$.InheritedElementToDiagnosticsNode()))[S$.$toList]();
        properties.add(new (T$.DiagnosticsPropertyOfListOfDiagnosticsNode()).new("dependencies", diagnosticsDependencies));
      }
    }
    debugDescribeChildren() {
      let children = T$.JSArrayOfDiagnosticsNode().of([]);
      this.visitChildren(dart.fn(child => {
        if (child == null) dart.nullFailed(I[4], 4152, 28, "child");
        children[S$.$add](child.toDiagnosticsNode());
      }, T$.ElementTovoid()));
      return children;
    }
    get dirty() {
      return this[S$0._dirty];
    }
    [S$0._debugSetAllowIgnoredCallsToMarkNeedsBuild](value) {
      if (value == null) dart.nullFailed(I[4], 4174, 56, "value");
      if (!(this[S$0._debugAllowIgnoredCallsToMarkNeedsBuild] === !dart.test(value))) dart.assertFailed(null, I[4], 4175, 12, "_debugAllowIgnoredCallsToMarkNeedsBuild == !value");
      this[S$0._debugAllowIgnoredCallsToMarkNeedsBuild] = value;
      return true;
    }
    markNeedsBuild() {
      if (!(this[S$0._lifecycleState] != framework._ElementLifecycle.defunct)) dart.assertFailed(null, I[4], 4188, 12, "_lifecycleState != _ElementLifecycle.defunct");
      if (this[S$0._lifecycleState] != framework._ElementLifecycle.active) return;
      if (!(this.owner != null)) dart.assertFailed(null, I[4], 4191, 12, "owner != null");
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 4192, 12, "_lifecycleState == _ElementLifecycle.active");
      if (!dart.test(dart.fn(() => {
        if (dart.test(dart.nullCheck(this.owner)[S$0._debugBuilding])) {
          if (!(dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget] != null)) dart.assertFailed(null, I[4], 4195, 16, "owner!._debugCurrentBuildTarget != null");
          if (!dart.test(dart.nullCheck(this.owner)[S$0._debugStateLocked])) dart.assertFailed(null, I[4], 4196, 16, "owner!._debugStateLocked");
          if (dart.test(this[S$0._debugIsInScope](dart.nullCheck(dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget])))) return true;
          if (!dart.test(this[S$0._debugAllowIgnoredCallsToMarkNeedsBuild])) {
            let information = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("setState() or markNeedsBuild() called during build."), new assertions.ErrorDescription.new("This " + dart.str(dart.runtimeType(this.widget)) + " widget cannot be marked as needing to build because the framework " + "is already in the process of building widgets.  A widget can be marked as " + "needing to be built during the build phase only if one of its ancestors " + "is currently building. This exception is allowed because the framework " + "builds parent widgets before children, which means a dirty descendant " + "will always be built. Otherwise, the framework might not visit this " + "widget during this build phase."), this.describeElement("The widget on which setState() or markNeedsBuild() was called was")]);
            if (dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget] != null) information[S$.$add](dart.nullCheck(dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget]).describeWidget("The widget which was currently being built when the offending call was made was"));
            dart.throw(new assertions.FlutterError.fromParts(information));
          }
          if (!dart.test(this.dirty)) dart.assertFailed(null, I[4], 4219, 16, "dirty");
        } else if (dart.test(dart.nullCheck(this.owner)[S$0._debugStateLocked])) {
          if (!!dart.test(this[S$0._debugAllowIgnoredCallsToMarkNeedsBuild])) dart.assertFailed(null, I[4], 4221, 16, "!_debugAllowIgnoredCallsToMarkNeedsBuild");
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("setState() or markNeedsBuild() called when widget tree was locked."), new assertions.ErrorDescription.new("This " + dart.str(dart.runtimeType(this.widget)) + " widget cannot be marked as needing to build " + "because the framework is locked."), this.describeElement("The widget on which setState() or markNeedsBuild() was called was")])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4193, 12, "() {\r\n      if (owner!._debugBuilding) {\r\n        assert(owner!._debugCurrentBuildTarget != null);\r\n        assert(owner!._debugStateLocked);\r\n        if (_debugIsInScope(owner!._debugCurrentBuildTarget!))\r\n          return true;\r\n        if (!_debugAllowIgnoredCallsToMarkNeedsBuild) {\r\n          final List<DiagnosticsNode> information = <DiagnosticsNode>[\r\n            ErrorSummary('setState() or markNeedsBuild() called during build.'),\r\n            ErrorDescription(\r\n              'This ${widget.runtimeType} widget cannot be marked as needing to build because the framework '\r\n              'is already in the process of building widgets.  A widget can be marked as '\r\n              'needing to be built during the build phase only if one of its ancestors '\r\n              'is currently building. This exception is allowed because the framework '\r\n              'builds parent widgets before children, which means a dirty descendant '\r\n              'will always be built. Otherwise, the framework might not visit this '\r\n              'widget during this build phase.',\r\n            ),\r\n            describeElement(\r\n              'The widget on which setState() or markNeedsBuild() was called was',\r\n            ),\r\n          ];\r\n          if (owner!._debugCurrentBuildTarget != null)\r\n            information.add(owner!._debugCurrentBuildTarget!.describeWidget('The widget which was currently being built when the offending call was made was'));\r\n          throw FlutterError.fromParts(information);\r\n        }\r\n        assert(dirty); // can only get here if we're not in scope, but ignored calls are allowed, and our call would somehow be ignored (since we're already dirty)\r\n      } else if (owner!._debugStateLocked) {\r\n        assert(!_debugAllowIgnoredCallsToMarkNeedsBuild);\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('setState() or markNeedsBuild() called when widget tree was locked.'),\r\n          ErrorDescription(\r\n            'This ${widget.runtimeType} widget cannot be marked as needing to build '\r\n            'because the framework is locked.',\r\n          ),\r\n          describeElement('The widget on which setState() or markNeedsBuild() was called was'),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (dart.test(this.dirty)) return;
      this[S$0._dirty] = true;
      dart.nullCheck(this.owner).scheduleBuildFor(this);
    }
    rebuild() {
      if (!(this[S$0._lifecycleState] != framework._ElementLifecycle.initial)) dart.assertFailed(null, I[4], 4244, 12, "_lifecycleState != _ElementLifecycle.initial");
      if (this[S$0._lifecycleState] != framework._ElementLifecycle.active || !dart.test(this[S$0._dirty])) return;
      if (!dart.test(dart.fn(() => {
        let t39;
        t39 = debug$0.debugOnRebuildDirtyWidget;
        t39 == null ? null : t39(this, this[S$0._debugBuiltOnce]);
        if (dart.test(debug$0.debugPrintRebuildDirtyWidgets)) {
          if (!dart.test(this[S$0._debugBuiltOnce])) {
            print.debugPrint("Building " + dart.str(this));
            this[S$0._debugBuiltOnce] = true;
          } else {
            print.debugPrint("Rebuilding " + dart.str(this));
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4247, 12, "() {\r\n      debugOnRebuildDirtyWidget?.call(this, _debugBuiltOnce);\r\n      if (debugPrintRebuildDirtyWidgets) {\r\n        if (!_debugBuiltOnce) {\r\n          debugPrint('Building $this');\r\n          _debugBuiltOnce = true;\r\n        } else {\r\n          debugPrint('Rebuilding $this');\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 4259, 12, "_lifecycleState == _ElementLifecycle.active");
      if (!dart.test(dart.nullCheck(this.owner)[S$0._debugStateLocked])) dart.assertFailed(null, I[4], 4260, 12, "owner!._debugStateLocked");
      let debugPreviousBuildTarget = null;
      if (!dart.test(dart.fn(() => {
        debugPreviousBuildTarget = dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget];
        dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget] = this;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4262, 12, "() {\r\n      debugPreviousBuildTarget = owner!._debugCurrentBuildTarget;\r\n      owner!._debugCurrentBuildTarget = this;\r\n      return true;\r\n    }()");
      this.performRebuild();
      if (!dart.test(dart.fn(() => {
        if (!dart.equals(dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget], this)) dart.assertFailed(null, I[4], 4269, 14, "owner!._debugCurrentBuildTarget == this");
        dart.nullCheck(this.owner)[S$0._debugCurrentBuildTarget] = debugPreviousBuildTarget;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4268, 12, "() {\r\n      assert(owner!._debugCurrentBuildTarget == this);\r\n      owner!._debugCurrentBuildTarget = debugPreviousBuildTarget;\r\n      return true;\r\n    }()");
      if (!!dart.test(this[S$0._dirty])) dart.assertFailed(null, I[4], 4273, 12, "!_dirty");
    }
  };
  (framework.Element.new = function(widget) {
    if (widget == null) dart.nullFailed(I[4], 3008, 18, "widget");
    this[S$0._parent] = null;
    this[S$0._cachedHash] = framework.Element._nextHashCode = (dart.notNull(framework.Element._nextHashCode) + 1)[S$.$modulo](16777215);
    this[S$0._slot] = null;
    this[S$0.__Element__depth] = null;
    this[S$0.__Element__depth_isSet] = false;
    this[S$0._owner$2] = null;
    this[S$0._lifecycleState] = framework._ElementLifecycle.initial;
    this[S$0._debugForgottenChildrenWithGlobalKey] = new (T$._HashSetOfElement()).new();
    this[S$0._inheritedWidgets] = null;
    this[S$0._dependencies] = null;
    this[S$0._hadUnsatisfiedDependencies] = false;
    this[S$0._dirty] = true;
    this[S$0._inDirtyList] = false;
    this[S$0._debugBuiltOnce] = false;
    this[S$0._debugAllowIgnoredCallsToMarkNeedsBuild] = false;
    if (!(widget != null)) dart.assertFailed(null, I[4], 3009, 14, "widget != null");
    this[S$._widget$1] = widget;
    framework.Element.__proto__.new.call(this);
    ;
  }).prototype = framework.Element.prototype;
  dart.addTypeTests(framework.Element);
  dart.addTypeCaches(framework.Element);
  framework.Element[dart.implements] = () => [framework.BuildContext];
  dart.setMethodSignature(framework.Element, () => ({
    __proto__: dart.getMethods(framework.Element.__proto__),
    reassemble: dart.fnType(dart.void, []),
    [S$0._debugIsInScope]: dart.fnType(core.bool, [framework.Element]),
    describeMissingAncestor: dart.fnType(core.List$(diagnostics$.DiagnosticsNode), [], {}, {expectedAncestorType: core.Type}),
    describeElement: dart.fnType(diagnostics$.DiagnosticsNode, [core.String], {style: diagnostics$.DiagnosticsTreeStyle}, {}),
    describeWidget: dart.fnType(diagnostics$.DiagnosticsNode, [core.String], {style: diagnostics$.DiagnosticsTreeStyle}, {}),
    describeOwnershipChain: dart.fnType(diagnostics$.DiagnosticsNode, [core.String]),
    visitChildren: dart.fnType(dart.void, [dart.fnType(dart.void, [framework.Element])]),
    debugVisitOnstageChildren: dart.fnType(dart.void, [dart.fnType(dart.void, [framework.Element])]),
    visitChildElements: dart.fnType(dart.void, [dart.fnType(dart.void, [framework.Element])]),
    updateChild: dart.fnType(dart.nullable(framework.Element), [dart.nullable(framework.Element), dart.nullable(framework.Widget), dart.nullable(core.Object)]),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.nullable(core.Object)]),
    [S$0._debugRemoveGlobalKeyReservation]: dart.fnType(dart.void, [framework.Element]),
    update: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    updateSlotForChild: dart.fnType(dart.void, [framework.Element, dart.nullable(core.Object)]),
    [S$0._updateSlot]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [S$0._updateDepth]: dart.fnType(dart.void, [core.int]),
    detachRenderObject: dart.fnType(dart.void, []),
    attachRenderObject: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [S$0._retakeInactiveElement]: dart.fnType(dart.nullable(framework.Element), [framework.GlobalKey$(framework.State$(framework.StatefulWidget)), framework.Widget]),
    inflateWidget: dart.fnType(framework.Element, [framework.Widget, dart.nullable(core.Object)]),
    [S$0._debugCheckForCycles]: dart.fnType(dart.void, [framework.Element]),
    deactivateChild: dart.fnType(dart.void, [framework.Element]),
    forgetChild: dart.fnType(dart.void, [framework.Element]),
    [S$0._activateWithParent]: dart.fnType(dart.void, [framework.Element, dart.nullable(core.Object)]),
    activate: dart.fnType(dart.void, []),
    deactivate: dart.fnType(dart.void, []),
    debugDeactivated: dart.fnType(dart.void, []),
    unmount: dart.fnType(dart.void, []),
    findRenderObject: dart.fnType(dart.nullable(object$.RenderObject), []),
    [S$0._debugCheckStateIsActiveForAncestorLookup]: dart.fnType(core.bool, []),
    dependOnInheritedElement: dart.fnType(framework.InheritedWidget, [framework.InheritedElement], {aspect: dart.nullable(core.Object)}, {}),
    dependOnInheritedWidgetOfExactType: dart.gFnType(T => [dart.nullable(T), [], {aspect: dart.nullable(core.Object)}, {}], T => [framework.InheritedWidget]),
    getElementForInheritedWidgetOfExactType: dart.gFnType(T => [dart.nullable(framework.InheritedElement), []], T => [framework.InheritedWidget]),
    [S$0._updateInheritance]: dart.fnType(dart.void, []),
    findAncestorWidgetOfExactType: dart.gFnType(T => [dart.nullable(T), []], T => [framework.Widget]),
    findAncestorStateOfType: dart.gFnType(T => [dart.nullable(T), []], T => [framework.State$(framework.StatefulWidget)]),
    findRootAncestorStateOfType: dart.gFnType(T => [dart.nullable(T), []], T => [framework.State$(framework.StatefulWidget)]),
    findAncestorRenderObjectOfType: dart.gFnType(T => [dart.nullable(T), []], T => [object$.RenderObject]),
    visitAncestorElements: dart.fnType(dart.void, [dart.fnType(core.bool, [framework.Element])]),
    didChangeDependencies: dart.fnType(dart.void, []),
    [S$0._debugCheckOwnerBuildTargetExists]: dart.fnType(core.bool, [core.String]),
    debugGetCreatorChain: dart.fnType(core.String, [core.int]),
    debugGetDiagnosticChain: dart.fnType(core.List$(framework.Element), []),
    [S$0._debugSetAllowIgnoredCallsToMarkNeedsBuild]: dart.fnType(core.bool, [core.bool]),
    markNeedsBuild: dart.fnType(dart.void, []),
    rebuild: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(framework.Element, () => ({
    __proto__: dart.getGetters(framework.Element.__proto__),
    slot: dart.nullable(core.Object),
    depth: core.int,
    [S$0._depth]: core.int,
    widget: framework.Widget,
    owner: dart.nullable(framework.BuildOwner),
    renderObject: dart.nullable(object$.RenderObject),
    size: dart.nullable(ui.Size),
    dirty: core.bool
  }));
  dart.setSetterSignature(framework.Element, () => ({
    __proto__: dart.getSetters(framework.Element.__proto__),
    [S$0._depth]: core.int
  }));
  dart.setLibraryUri(framework.Element, I[5]);
  dart.setFieldSignature(framework.Element, () => ({
    __proto__: dart.getFields(framework.Element.__proto__),
    [S$0._parent]: dart.fieldType(dart.nullable(framework.Element)),
    [S$0._cachedHash]: dart.finalFieldType(core.int),
    [S$0._slot]: dart.fieldType(dart.nullable(core.Object)),
    [S$0.__Element__depth]: dart.fieldType(dart.nullable(core.int)),
    [S$0.__Element__depth_isSet]: dart.fieldType(core.bool),
    [S$._widget$1]: dart.fieldType(framework.Widget),
    [S$0._owner$2]: dart.fieldType(dart.nullable(framework.BuildOwner)),
    [S$0._lifecycleState]: dart.fieldType(framework._ElementLifecycle),
    [S$0._debugForgottenChildrenWithGlobalKey]: dart.finalFieldType(core.Set$(framework.Element)),
    [S$0._inheritedWidgets]: dart.fieldType(dart.nullable(core.Map$(core.Type, framework.InheritedElement))),
    [S$0._dependencies]: dart.fieldType(dart.nullable(core.Set$(framework.InheritedElement))),
    [S$0._hadUnsatisfiedDependencies]: dart.fieldType(core.bool),
    [S$0._dirty]: dart.fieldType(core.bool),
    [S$0._inDirtyList]: dart.fieldType(core.bool),
    [S$0._debugBuiltOnce]: dart.fieldType(core.bool),
    [S$0._debugAllowIgnoredCallsToMarkNeedsBuild]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(framework.Element, ['_equals']);
  dart.defineExtensionAccessors(framework.Element, ['hashCode']);
  dart.defineLazy(framework.Element, {
    /*framework.Element._nextHashCode*/get _nextHashCode() {
      return 1;
    },
    set _nextHashCode(_) {}
  }, false);
  framework.RenderObjectElement = class RenderObjectElement extends framework.Element {
    get widget() {
      return framework.RenderObjectWidget.as(super.widget);
    }
    get renderObject() {
      return dart.nullCheck(this[S$0._renderObject]);
    }
    get debugDoingBuild() {
      return this[S$0._debugDoingBuild];
    }
    [S$0._findAncestorRenderObjectElement]() {
      let ancestor = this[S$0._parent];
      while (ancestor != null && !framework.RenderObjectElement.is(ancestor))
        ancestor = ancestor[S$0._parent];
      return T$.RenderObjectElementN().as(ancestor);
    }
    [S$0._findAncestorParentDataElement]() {
      let ancestor = this[S$0._parent];
      let result = null;
      while (ancestor != null && !framework.RenderObjectElement.is(ancestor)) {
        if (T$.ParentDataElementOfParentData().is(ancestor)) {
          result = ancestor;
          break;
        }
        ancestor = ancestor[S$0._parent];
      }
      if (!dart.test(dart.fn(() => {
        if (result == null || ancestor == null) {
          return true;
        }
        let badAncestors = T$.JSArrayOfParentDataElementOfParentData().of([]);
        ancestor = dart.nullCheck(ancestor)[S$0._parent];
        while (ancestor != null && !framework.RenderObjectElement.is(ancestor)) {
          if (T$.ParentDataElementOfParentData().is(ancestor)) {
            badAncestors[S$.$add](T$.ParentDataElementOfParentData().as(dart.nullCheck(ancestor)));
          }
          ancestor = dart.nullCheck(ancestor)[S$0._parent];
        }
        if (dart.test(badAncestors[S$.$isNotEmpty])) {
          badAncestors[S$.$insert](0, result);
          try {
            dart.throw(new assertions.FlutterError.fromParts((() => {
              let t34 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Incorrect use of ParentDataWidget."), new assertions.ErrorDescription.new("The following ParentDataWidgets are providing parent data to the same RenderObject:")]);
              for (let ancestor of badAncestors)
                t34[S$.$add](new assertions.ErrorDescription.new("- " + dart.str(ancestor.widget) + " (typically placed directly inside a " + dart.str(ancestor.widget.debugTypicalAncestorWidgetClass) + " widget)"));
              t34[S$.$add](new assertions.ErrorDescription.new("However, a RenderObject can only receive parent data from at most one ParentDataWidget."));
              t34[S$.$add](new assertions.ErrorHint.new("Usually, this indicates that at least one of the offending ParentDataWidgets listed above is not placed directly inside a compatible ancestor widget."));
              t34[S$.$add](new assertions.ErrorDescription.new("The ownership chain for the RenderObject that received the parent data was:\n  " + dart.str(this.debugGetCreatorChain(10))));
              return t34;
            })()));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (assertions.FlutterError.is(e)) {
              framework._debugReportException(new assertions.ErrorSummary.new("while looking for parent data."), e, e[S$0.$stackTrace]);
            } else
              throw e$;
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5389, 12, "() {\r\n      if (result == null || ancestor == null) {\r\n        return true;\r\n      }\r\n      // Check that no other ParentDataWidgets want to provide parent data.\r\n      final List<ParentDataElement<ParentData>> badAncestors = <ParentDataElement<ParentData>>[];\r\n      ancestor = ancestor!._parent;\r\n      while (ancestor != null && ancestor is! RenderObjectElement) {\r\n        if (ancestor is ParentDataElement<ParentData>) {\r\n          badAncestors.add(ancestor! as ParentDataElement<ParentData>);\r\n        }\r\n        ancestor = ancestor!._parent;\r\n      }\r\n      if (badAncestors.isNotEmpty) {\r\n        badAncestors.insert(0, result);\r\n        try {\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Incorrect use of ParentDataWidget.'),\r\n            ErrorDescription('The following ParentDataWidgets are providing parent data to the same RenderObject:'),\r\n            for (final ParentDataElement<ParentData> ancestor in badAncestors)\r\n              ErrorDescription('- ${ancestor.widget} (typically placed directly inside a ${ancestor.widget.debugTypicalAncestorWidgetClass} widget)'),\r\n            ErrorDescription('However, a RenderObject can only receive parent data from at most one ParentDataWidget.'),\r\n            ErrorHint('Usually, this indicates that at least one of the offending ParentDataWidgets listed above is not placed directly inside a compatible ancestor widget.'),\r\n            ErrorDescription('The ownership chain for the RenderObject that received the parent data was:\\n  ${debugGetCreatorChain(10)}'),\r\n          ]);\r\n        } on FlutterError catch (e) {\r\n          _debugReportException(ErrorSummary('while looking for parent data.'), e, e.stackTrace);\r\n        }\r\n      }\r\n      return true;\r\n    }()");
      return result;
    }
    mount(parent, newSlot) {
      super.mount(parent, newSlot);
      if (!dart.test(dart.fn(() => {
        this[S$0._debugDoingBuild] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5426, 12, "() {\r\n      _debugDoingBuild = true;\r\n      return true;\r\n    }()");
      this[S$0._renderObject] = this.widget.createRenderObject(this);
      if (!dart.test(dart.fn(() => {
        this[S$0._debugDoingBuild] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5431, 12, "() {\r\n      _debugDoingBuild = false;\r\n      return true;\r\n    }()");
      if (!dart.test(dart.fn(() => {
        this[S$0._debugUpdateRenderObjectOwner]();
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5435, 12, "() {\r\n      _debugUpdateRenderObjectOwner();\r\n      return true;\r\n    }()");
      if (!dart.equals(this[S$0._slot], newSlot)) dart.assertFailed(null, I[4], 5439, 12, "_slot == newSlot");
      this.attachRenderObject(newSlot);
      this[S$0._dirty] = false;
    }
    update(newWidget) {
      framework.RenderObjectWidget.as(newWidget);
      if (newWidget == null) dart.nullFailed(I[4], 5445, 44, "newWidget");
      super.update(newWidget);
      if (!dart.equals(this.widget, newWidget)) dart.assertFailed(null, I[4], 5447, 12, "widget == newWidget");
      if (!dart.test(dart.fn(() => {
        this[S$0._debugUpdateRenderObjectOwner]();
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5448, 12, "() {\r\n      _debugUpdateRenderObjectOwner();\r\n      return true;\r\n    }()");
      if (!dart.test(dart.fn(() => {
        this[S$0._debugDoingBuild] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5452, 12, "() {\r\n      _debugDoingBuild = true;\r\n      return true;\r\n    }()");
      this.widget.updateRenderObject(this, this.renderObject);
      if (!dart.test(dart.fn(() => {
        this[S$0._debugDoingBuild] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5457, 12, "() {\r\n      _debugDoingBuild = false;\r\n      return true;\r\n    }()");
      this[S$0._dirty] = false;
    }
    [S$0._debugUpdateRenderObjectOwner]() {
      if (!dart.test(dart.fn(() => {
        this.renderObject.debugCreator = new framework.DebugCreator.new(this);
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5465, 12, "() {\r\n      renderObject.debugCreator = DebugCreator(this);\r\n      return true;\r\n    }()");
    }
    performRebuild() {
      if (!dart.test(dart.fn(() => {
        this[S$0._debugDoingBuild] = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5473, 12, "() {\r\n      _debugDoingBuild = true;\r\n      return true;\r\n    }()");
      this.widget.updateRenderObject(this, this.renderObject);
      if (!dart.test(dart.fn(() => {
        this[S$0._debugDoingBuild] = false;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5478, 12, "() {\r\n      _debugDoingBuild = false;\r\n      return true;\r\n    }()");
      this[S$0._dirty] = false;
    }
    updateChildren(oldChildren, newWidgets, opts) {
      if (oldChildren == null) dart.nullFailed(I[4], 5533, 46, "oldChildren");
      if (newWidgets == null) dart.nullFailed(I[4], 5533, 72, "newWidgets");
      let forgottenChildren = opts && 'forgottenChildren' in opts ? opts.forgottenChildren : null;
      let slots = opts && 'slots' in opts ? opts.slots : null;
      if (!(oldChildren != null)) dart.assertFailed(null, I[4], 5534, 12, "oldChildren != null");
      if (!(newWidgets != null)) dart.assertFailed(null, I[4], 5535, 12, "newWidgets != null");
      if (!(slots == null || newWidgets[S$.$length] == slots[S$.$length])) dart.assertFailed(null, I[4], 5536, 12, "slots == null || newWidgets.length == slots.length");
      function replaceWithNullIfForgotten(child) {
        if (child == null) dart.nullFailed(I[4], 5538, 49, "child");
        return forgottenChildren != null && dart.test(forgottenChildren.contains(child)) ? null : child;
      }
      dart.fn(replaceWithNullIfForgotten, T$.ElementToElementN());
      function slotFor(newChildIndex, previousChild) {
        if (newChildIndex == null) dart.nullFailed(I[4], 5542, 25, "newChildIndex");
        return slots != null ? slots[S$.$_get](newChildIndex) : new (T$.IndexedSlotOfElementN()).new(newChildIndex, previousChild);
      }
      dart.fn(slotFor, T$.intAndElementNToObjectN());
      let newChildrenTop = 0;
      let oldChildrenTop = 0;
      let newChildrenBottom = dart.notNull(newWidgets[S$.$length]) - 1;
      let oldChildrenBottom = dart.notNull(oldChildren[S$.$length]) - 1;
      let newChildren = oldChildren[S$.$length] == newWidgets[S$.$length] ? oldChildren : T$.ListOfElement().filled(newWidgets[S$.$length], framework._NullElement.instance, {growable: false});
      let previousChild = null;
      while (oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom) {
        let oldChild = replaceWithNullIfForgotten(oldChildren[S$.$_get](oldChildrenTop));
        let newWidget = newWidgets[S$.$_get](newChildrenTop);
        if (!(oldChild == null || oldChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5593, 14, "oldChild == null || oldChild._lifecycleState == _ElementLifecycle.active");
        if (oldChild == null || !dart.test(framework.Widget.canUpdate(oldChild.widget, newWidget))) break;
        let newChild = dart.nullCheck(this.updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild)));
        if (!(newChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5597, 14, "newChild._lifecycleState == _ElementLifecycle.active");
        newChildren[S$.$_set](newChildrenTop, newChild);
        previousChild = newChild;
        newChildrenTop = newChildrenTop + 1;
        oldChildrenTop = oldChildrenTop + 1;
      }
      while (oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom) {
        let oldChild = replaceWithNullIfForgotten(oldChildren[S$.$_get](oldChildrenBottom));
        let newWidget = newWidgets[S$.$_get](newChildrenBottom);
        if (!(oldChild == null || oldChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5608, 14, "oldChild == null || oldChild._lifecycleState == _ElementLifecycle.active");
        if (oldChild == null || !dart.test(framework.Widget.canUpdate(oldChild.widget, newWidget))) break;
        oldChildrenBottom = oldChildrenBottom - 1;
        newChildrenBottom = newChildrenBottom - 1;
      }
      let haveOldChildren = oldChildrenTop <= oldChildrenBottom;
      let oldKeyedChildren = null;
      if (haveOldChildren) {
        oldKeyedChildren = new (T$.LinkedMapOfKey$Element()).new();
        while (oldChildrenTop <= oldChildrenBottom) {
          let oldChild = replaceWithNullIfForgotten(oldChildren[S$.$_get](oldChildrenTop));
          if (!(oldChild == null || oldChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5622, 16, "oldChild == null || oldChild._lifecycleState == _ElementLifecycle.active");
          if (oldChild != null) {
            if (oldChild.widget.key != null)
              oldKeyedChildren[S$.$_set](dart.nullCheck(oldChild.widget.key), oldChild);
            else
              this.deactivateChild(oldChild);
          }
          oldChildrenTop = oldChildrenTop + 1;
        }
      }
      while (newChildrenTop <= newChildrenBottom) {
        let oldChild = null;
        let newWidget = newWidgets[S$.$_get](newChildrenTop);
        if (haveOldChildren) {
          let key = newWidget.key;
          if (key != null) {
            oldChild = dart.nullCheck(oldKeyedChildren)[S$.$_get](key);
            if (oldChild != null) {
              if (dart.test(framework.Widget.canUpdate(oldChild.widget, newWidget))) {
                oldKeyedChildren[S$.$remove](key);
              } else {
                oldChild = null;
              }
            }
          }
        }
        if (!(oldChild == null || dart.test(framework.Widget.canUpdate(oldChild.widget, newWidget)))) dart.assertFailed(null, I[4], 5653, 14, "oldChild == null || Widget.canUpdate(oldChild.widget, newWidget)");
        let newChild = dart.nullCheck(this.updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild)));
        if (!(newChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5655, 14, "newChild._lifecycleState == _ElementLifecycle.active");
        if (!(dart.equals(oldChild, newChild) || oldChild == null || oldChild[S$0._lifecycleState] != framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5656, 14, "oldChild == newChild || oldChild == null || oldChild._lifecycleState != _ElementLifecycle.active");
        newChildren[S$.$_set](newChildrenTop, newChild);
        previousChild = newChild;
        newChildrenTop = newChildrenTop + 1;
      }
      if (!(oldChildrenTop === oldChildrenBottom + 1)) dart.assertFailed(null, I[4], 5663, 12, "oldChildrenTop == oldChildrenBottom + 1");
      if (!(newChildrenTop === newChildrenBottom + 1)) dart.assertFailed(null, I[4], 5664, 12, "newChildrenTop == newChildrenBottom + 1");
      if (!(dart.notNull(newWidgets[S$.$length]) - newChildrenTop === dart.notNull(oldChildren[S$.$length]) - oldChildrenTop)) dart.assertFailed(null, I[4], 5665, 12, "newWidgets.length - newChildrenTop == oldChildren.length - oldChildrenTop");
      newChildrenBottom = dart.notNull(newWidgets[S$.$length]) - 1;
      oldChildrenBottom = dart.notNull(oldChildren[S$.$length]) - 1;
      while (oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom) {
        let oldChild = oldChildren[S$.$_get](oldChildrenTop);
        if (!(replaceWithNullIfForgotten(oldChild) != null)) dart.assertFailed(null, I[4], 5672, 14, "replaceWithNullIfForgotten(oldChild) != null");
        if (!(oldChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5673, 14, "oldChild._lifecycleState == _ElementLifecycle.active");
        let newWidget = newWidgets[S$.$_get](newChildrenTop);
        if (!dart.test(framework.Widget.canUpdate(oldChild.widget, newWidget))) dart.assertFailed(null, I[4], 5675, 14, "Widget.canUpdate(oldChild.widget, newWidget)");
        let newChild = dart.nullCheck(this.updateChild(oldChild, newWidget, slotFor(newChildrenTop, previousChild)));
        if (!(newChild[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5677, 14, "newChild._lifecycleState == _ElementLifecycle.active");
        if (!(dart.equals(oldChild, newChild) || oldChild == null || oldChild[S$0._lifecycleState] != framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5678, 14, "oldChild == newChild || oldChild == null || oldChild._lifecycleState != _ElementLifecycle.active");
        newChildren[S$.$_set](newChildrenTop, newChild);
        previousChild = newChild;
        newChildrenTop = newChildrenTop + 1;
        oldChildrenTop = oldChildrenTop + 1;
      }
      if (haveOldChildren && dart.test(dart.nullCheck(oldKeyedChildren)[S$.$isNotEmpty])) {
        for (let oldChild of oldKeyedChildren[S$.$values]) {
          if (forgottenChildren == null || !dart.test(forgottenChildren.contains(oldChild))) this.deactivateChild(oldChild);
        }
      }
      if (!dart.test(newChildren[S$.$every](dart.fn(element => {
        if (element == null) dart.nullFailed(I[4], 5692, 39, "element");
        return !framework._NullElement.is(element);
      }, T$.ElementTobool())))) dart.assertFailed(null, I[4], 5692, 12, "newChildren.every((Element element) => element is! _NullElement)");
      return newChildren;
    }
    deactivate() {
      super.deactivate();
      if (!!dart.test(this.renderObject.attached)) dart.assertFailed("A RenderObject was still attached when attempting to deactivate its " + "RenderObjectElement: " + dart.str(this.renderObject), I[4], 5700, 7, "!renderObject.attached");
    }
    unmount() {
      super.unmount();
      if (!!dart.test(this.renderObject.attached)) dart.assertFailed("A RenderObject was still attached when attempting to unmount its " + "RenderObjectElement: " + dart.str(this.renderObject), I[4], 5710, 7, "!renderObject.attached");
      this.widget.didUnmountRenderObject(this.renderObject);
    }
    [S$0._updateParentData](parentDataWidget) {
      if (parentDataWidget == null) dart.nullFailed(I[4], 5717, 55, "parentDataWidget");
      let applyParentData = true;
      if (!dart.test(dart.fn(() => {
        try {
          if (!dart.test(parentDataWidget.debugIsValidRenderObject(this.renderObject))) {
            applyParentData = false;
            dart.throw(new assertions.FlutterError.fromParts((() => {
              let t36 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Incorrect use of ParentDataWidget.")]);
              t36[S$.$addAll](parentDataWidget[S$0._debugDescribeIncorrectParentDataType]({parentData: this.renderObject.parentData, parentDataCreator: dart.nullCheck(this[S$0._ancestorRenderObjectElement]).widget, ownershipChain: new assertions.ErrorDescription.new(this.debugGetCreatorChain(10))}));
              return t36;
            })()));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (assertions.FlutterError.is(e)) {
            framework._debugReportException(new assertions.ErrorSummary.new("while applying parent data."), e, e[S$0.$stackTrace]);
          } else
            throw e$;
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5719, 12, "() {\r\n      try {\r\n        if (!parentDataWidget.debugIsValidRenderObject(renderObject)) {\r\n          applyParentData = false;\r\n          throw FlutterError.fromParts(<DiagnosticsNode>[\r\n            ErrorSummary('Incorrect use of ParentDataWidget.'),\r\n            ...parentDataWidget._debugDescribeIncorrectParentDataType(\r\n              parentData: renderObject.parentData,\r\n              parentDataCreator: _ancestorRenderObjectElement!.widget,\r\n              ownershipChain: ErrorDescription(debugGetCreatorChain(10)),\r\n            ),\r\n          ]);\r\n        }\r\n      } on FlutterError catch (e) {\r\n        // Catching the exception directly to avoid activating the ErrorWidget.\r\n        // Since the tree is in a broken state, adding the ErrorWidget would\r\n        // cause more exceptions.\r\n        _debugReportException(ErrorSummary('while applying parent data.'), e, e.stackTrace);\r\n      }\r\n      return true;\r\n    }()");
      if (applyParentData) parentDataWidget.applyParentData(this.renderObject);
    }
    [S$0._updateSlot](newSlot) {
      let oldSlot = this.slot;
      if (!!dart.equals(oldSlot, newSlot)) dart.assertFailed(null, I[4], 5747, 12, "oldSlot != newSlot");
      super[S$0._updateSlot](newSlot);
      if (!dart.equals(this.slot, newSlot)) dart.assertFailed(null, I[4], 5749, 12, "slot == newSlot");
      dart.nullCheck(this[S$0._ancestorRenderObjectElement]).moveRenderObjectChild(this.renderObject, oldSlot, this.slot);
    }
    attachRenderObject(newSlot) {
      let t38;
      if (!(this[S$0._ancestorRenderObjectElement] == null)) dart.assertFailed(null, I[4], 5755, 12, "_ancestorRenderObjectElement == null");
      this[S$0._slot] = newSlot;
      this[S$0._ancestorRenderObjectElement] = this[S$0._findAncestorRenderObjectElement]();
      t38 = this[S$0._ancestorRenderObjectElement];
      t38 == null ? null : t38.insertRenderObjectChild(this.renderObject, newSlot);
      let parentDataElement = this[S$0._findAncestorParentDataElement]();
      if (parentDataElement != null) this[S$0._updateParentData](parentDataElement.widget);
    }
    detachRenderObject() {
      if (this[S$0._ancestorRenderObjectElement] != null) {
        dart.nullCheck(this[S$0._ancestorRenderObjectElement]).removeRenderObjectChild(this.renderObject, this.slot);
        this[S$0._ancestorRenderObjectElement] = null;
      }
      this[S$0._slot] = null;
    }
    insertChildRenderObject(child, slot) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 5799, 55, "child");
      if (!dart.dtest((dart.fn(() => {
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("RenderObjectElement.insertChildRenderObject() is deprecated."), this.toDiagnosticsNode({name: "insertChildRenderObject() was called on this Element", style: diagnostics$.DiagnosticsTreeStyle.shallow}), new assertions.ErrorDescription.new("insertChildRenderObject() has been deprecated in favor of " + "insertRenderObjectChild(). See https://github.com/flutter/flutter/issues/63269 " + "for details."), new assertions.ErrorHint.new("Rather than overriding insertChildRenderObject() in your " + "RenderObjectElement subclass, override insertRenderObjectChild() instead, " + "and DON'T call super.insertRenderObjectChild(). If you're implementing a " + "new RenderObjectElement, you should override/implement " + "insertRenderObjectChild(), moveRenderObjectChild(), and " + "removeRenderObjectChild().")])));
      }, T$.VoidToNever())(), dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."))))) dart.assertFailed(null, I[4], 5800, 12, "() {\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('RenderObjectElement.insertChildRenderObject() is deprecated.'),\r\n        toDiagnosticsNode(\r\n          name: 'insertChildRenderObject() was called on this Element',\r\n          style: DiagnosticsTreeStyle.shallow,\r\n        ),\r\n        ErrorDescription(\r\n          'insertChildRenderObject() has been deprecated in favor of '\r\n          'insertRenderObjectChild(). See https://github.com/flutter/flutter/issues/63269 '\r\n          'for details.',\r\n        ),\r\n        ErrorHint(\r\n          'Rather than overriding insertChildRenderObject() in your '\r\n          'RenderObjectElement subclass, override insertRenderObjectChild() instead, '\r\n          \"and DON'T call super.insertRenderObjectChild(). If you're implementing a \"\r\n          'new RenderObjectElement, you should override/implement '\r\n          'insertRenderObjectChild(), moveRenderObjectChild(), and '\r\n          'removeRenderObjectChild().',\r\n        ),\r\n      ]);\r\n    }()");
    }
    insertRenderObjectChild(child, slot) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 5833, 55, "child");
      this.insertChildRenderObject(child, slot);
    }
    moveChildRenderObject(child, slot) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 5876, 53, "child");
      if (!dart.dtest((dart.fn(() => {
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("RenderObjectElement.moveChildRenderObject() is deprecated."), this.toDiagnosticsNode({name: "super.moveChildRenderObject() was called on this Element", style: diagnostics$.DiagnosticsTreeStyle.shallow}), new assertions.ErrorDescription.new("moveChildRenderObject() has been deprecated in favor of " + "moveRenderObjectChild(). See https://github.com/flutter/flutter/issues/63269 " + "for details."), new assertions.ErrorHint.new("Rather than overriding moveChildRenderObject() in your " + "RenderObjectElement subclass, override moveRenderObjectChild() instead, " + "and DON'T call super.moveRenderObjectChild(). If you're implementing a " + "new RenderObjectElement, you should override/implement " + "insertRenderObjectChild(), moveRenderObjectChild(), and " + "removeRenderObjectChild().")])));
      }, T$.VoidToNever())(), dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."))))) dart.assertFailed(null, I[4], 5877, 12, "() {\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('RenderObjectElement.moveChildRenderObject() is deprecated.'),\r\n        toDiagnosticsNode(\r\n          name: 'super.moveChildRenderObject() was called on this Element',\r\n          style: DiagnosticsTreeStyle.shallow,\r\n        ),\r\n        ErrorDescription(\r\n          'moveChildRenderObject() has been deprecated in favor of '\r\n          'moveRenderObjectChild(). See https://github.com/flutter/flutter/issues/63269 '\r\n          'for details.',\r\n        ),\r\n        ErrorHint(\r\n          'Rather than overriding moveChildRenderObject() in your '\r\n          'RenderObjectElement subclass, override moveRenderObjectChild() instead, '\r\n          \"and DON'T call super.moveRenderObjectChild(). If you're implementing a \"\r\n          'new RenderObjectElement, you should override/implement '\r\n          'insertRenderObjectChild(), moveRenderObjectChild(), and '\r\n          'removeRenderObjectChild().',\r\n        ),\r\n      ]);\r\n    }()");
    }
    moveRenderObjectChild(child, oldSlot, newSlot) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 5916, 53, "child");
      this.moveChildRenderObject(child, newSlot);
    }
    removeChildRenderObject(child) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 5947, 55, "child");
      if (!dart.dtest((dart.fn(() => {
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("RenderObjectElement.removeChildRenderObject() is deprecated."), this.toDiagnosticsNode({name: "super.removeChildRenderObject() was called on this Element", style: diagnostics$.DiagnosticsTreeStyle.shallow}), new assertions.ErrorDescription.new("removeChildRenderObject() has been deprecated in favor of " + "removeRenderObjectChild(). See https://github.com/flutter/flutter/issues/63269 " + "for details."), new assertions.ErrorHint.new("Rather than overriding removeChildRenderObject() in your " + "RenderObjectElement subclass, override removeRenderObjectChild() instead, " + "and DON'T call super.removeRenderObjectChild(). If you're implementing a " + "new RenderObjectElement, you should override/implement " + "insertRenderObjectChild(), moveRenderObjectChild(), and " + "removeRenderObjectChild().")])));
      }, T$.VoidToNever())(), dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."))))) dart.assertFailed(null, I[4], 5948, 12, "() {\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('RenderObjectElement.removeChildRenderObject() is deprecated.'),\r\n        toDiagnosticsNode(\r\n          name: 'super.removeChildRenderObject() was called on this Element',\r\n          style: DiagnosticsTreeStyle.shallow,\r\n        ),\r\n        ErrorDescription(\r\n          'removeChildRenderObject() has been deprecated in favor of '\r\n          'removeRenderObjectChild(). See https://github.com/flutter/flutter/issues/63269 '\r\n          'for details.',\r\n        ),\r\n        ErrorHint(\r\n          'Rather than overriding removeChildRenderObject() in your '\r\n          'RenderObjectElement subclass, override removeRenderObjectChild() instead, '\r\n          \"and DON'T call super.removeRenderObjectChild(). If you're implementing a \"\r\n          'new RenderObjectElement, you should override/implement '\r\n          'insertRenderObjectChild(), moveRenderObjectChild(), and '\r\n          'removeRenderObjectChild().',\r\n        ),\r\n      ]);\r\n    }()");
    }
    removeRenderObjectChild(child, slot) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 5977, 55, "child");
      this.removeChildRenderObject(child);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 5982, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfRenderObject()).new("renderObject", this[S$0._renderObject], {defaultValue: null}));
    }
  };
  (framework.RenderObjectElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[4], 5356, 42, "widget");
    this[S$0._renderObject] = null;
    this[S$0._debugDoingBuild] = false;
    this[S$0._ancestorRenderObjectElement] = null;
    framework.RenderObjectElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework.RenderObjectElement.prototype;
  dart.addTypeTests(framework.RenderObjectElement);
  dart.addTypeCaches(framework.RenderObjectElement);
  dart.setMethodSignature(framework.RenderObjectElement, () => ({
    __proto__: dart.getMethods(framework.RenderObjectElement.__proto__),
    [S$0._findAncestorRenderObjectElement]: dart.fnType(dart.nullable(framework.RenderObjectElement), []),
    [S$0._findAncestorParentDataElement]: dart.fnType(dart.nullable(framework.ParentDataElement$(object$.ParentData)), []),
    [S$0._debugUpdateRenderObjectOwner]: dart.fnType(dart.void, []),
    performRebuild: dart.fnType(dart.void, []),
    updateChildren: dart.fnType(core.List$(framework.Element), [core.List$(framework.Element), core.List$(framework.Widget)], {forgottenChildren: dart.nullable(core.Set$(framework.Element)), slots: dart.nullable(core.List$(dart.nullable(core.Object)))}, {}),
    [S$0._updateParentData]: dart.fnType(dart.void, [framework.ParentDataWidget$(object$.ParentData)]),
    insertChildRenderObject: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    insertRenderObjectChild: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    moveChildRenderObject: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    moveRenderObjectChild: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    removeChildRenderObject: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    removeRenderObjectChild: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(framework.RenderObjectElement, () => ({
    __proto__: dart.getGetters(framework.RenderObjectElement.__proto__),
    widget: framework.RenderObjectWidget,
    renderObject: object$.RenderObject,
    debugDoingBuild: core.bool
  }));
  dart.setLibraryUri(framework.RenderObjectElement, I[5]);
  dart.setFieldSignature(framework.RenderObjectElement, () => ({
    __proto__: dart.getFields(framework.RenderObjectElement.__proto__),
    [S$0._renderObject]: dart.fieldType(dart.nullable(object$.RenderObject)),
    [S$0._debugDoingBuild]: dart.fieldType(core.bool),
    [S$0._ancestorRenderObjectElement]: dart.fieldType(dart.nullable(framework.RenderObjectElement))
  }));
  table$._TableElement = class _TableElement extends framework.RenderObjectElement {
    get widget() {
      return table$.Table.as(super.widget);
    }
    get renderObject() {
      return table.RenderTable.as(super.renderObject);
    }
    mount(parent, newSlot) {
      if (!!dart.test(this[S$0._doingMountOrUpdate])) dart.assertFailed(null, I[48], 357, 12, "!_doingMountOrUpdate");
      this[S$0._doingMountOrUpdate] = true;
      super.mount(parent, newSlot);
      let rowIndex = -1;
      this[S$0._children$1] = this.widget.children[S$.$map](table$._TableElementRow, dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 361, 65, "row");
        let columnIndex = 0;
        rowIndex = rowIndex + 1;
        return new table$._TableElementRow.new({key: row.key, children: dart.nullCheck(row.children)[S$.$map](framework.Element, dart.fn(child => {
            let t34;
            if (child == null) dart.nullFailed(I[48], 366, 54, "child");
            if (!(child != null)) dart.assertFailed(null, I[48], 367, 18, "child != null");
            return this.inflateWidget(child, new table$._TableSlot.new((t34 = columnIndex, columnIndex = t34 + 1, t34), rowIndex));
          }, T$.WidgetToElement()))[S$.$toList]({growable: false})});
      }, T$.TableRowTo_TableElementRow()))[S$.$toList]({growable: false});
      this[S$0._updateRenderObjectChildren]();
      if (!dart.test(this[S$0._doingMountOrUpdate])) dart.assertFailed(null, I[48], 373, 12, "_doingMountOrUpdate");
      this[S$0._doingMountOrUpdate] = false;
    }
    insertRenderObjectChild(child, slot) {
      box$.RenderBox.as(child);
      if (child == null) dart.nullFailed(I[48], 378, 42, "child");
      table$._TableSlot.as(slot);
      if (slot == null) dart.nullFailed(I[48], 378, 60, "slot");
      this.renderObject.setupParentData(child);
      if (!dart.test(this[S$0._doingMountOrUpdate])) {
        this.renderObject.setChild(slot.column, slot.row, child);
      }
    }
    moveRenderObjectChild(child, oldSlot, newSlot) {
      box$.RenderBox.as(child);
      if (child == null) dart.nullFailed(I[48], 388, 40, "child");
      table$._TableSlot.as(oldSlot);
      if (oldSlot == null) dart.nullFailed(I[48], 388, 58, "oldSlot");
      table$._TableSlot.as(newSlot);
      if (newSlot == null) dart.nullFailed(I[48], 388, 78, "newSlot");
      if (!dart.test(this[S$0._doingMountOrUpdate])) dart.assertFailed(null, I[48], 389, 12, "_doingMountOrUpdate");
    }
    removeRenderObjectChild(child, slot) {
      box$.RenderBox.as(child);
      if (child == null) dart.nullFailed(I[48], 394, 42, "child");
      table$._TableSlot.as(slot);
      if (slot == null) dart.nullFailed(I[48], 394, 60, "slot");
      let childParentData = table.TableCellParentData.as(dart.nullCheck(child.parentData));
      this.renderObject.setChild(dart.nullCheck(childParentData.x), dart.nullCheck(childParentData.y), null);
    }
    update(newWidget) {
      table$.Table.as(newWidget);
      if (newWidget == null) dart.nullFailed(I[48], 402, 21, "newWidget");
      if (!!dart.test(this[S$0._doingMountOrUpdate])) dart.assertFailed(null, I[48], 403, 12, "!_doingMountOrUpdate");
      this[S$0._doingMountOrUpdate] = true;
      let oldKeyedRows = new (T$.LinkedMapOfLocalKey$ListOfElement()).new();
      for (let row of this[S$0._children$1]) {
        if (row.key != null) {
          oldKeyedRows[S$.$_set](dart.nullCheck(row.key), row.children);
        }
      }
      let oldUnkeyedRows = this[S$0._children$1][S$.$where](dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 411, 89, "row");
        return row.key == null;
      }, T$._TableElementRowTobool()))[S$0.$iterator];
      let newChildren = T$.JSArrayOf_TableElementRow().of([]);
      let taken = T$.LinkedHashSetOfListOfElement().new();
      for (let rowIndex = 0; rowIndex < dart.notNull(newWidget.children[S$.$length]); rowIndex = rowIndex + 1) {
        let row = newWidget.children[S$.$_get](rowIndex);
        let oldChildren = null;
        if (row.key != null && dart.test(oldKeyedRows[S$.$containsKey](row.key))) {
          oldChildren = dart.nullCheck(oldKeyedRows[S$.$_get](row.key));
          taken.add(oldChildren);
        } else if (row.key == null && dart.test(oldUnkeyedRows.moveNext())) {
          oldChildren = oldUnkeyedRows.current.children;
        } else {
          oldChildren = C[394] || CT.C394;
        }
        let slots = T$.ListOf_TableSlot().generate(dart.nullCheck(row.children)[S$.$length], dart.fn(columnIndex => {
          if (columnIndex == null) dart.nullFailed(I[48], 427, 14, "columnIndex");
          return new table$._TableSlot.new(columnIndex, rowIndex);
        }, T$.intTo_TableSlot()));
        newChildren[S$.$add](new table$._TableElementRow.new({key: row.key, children: this.updateChildren(oldChildren, dart.nullCheck(row.children), {forgottenChildren: this[S$0._forgottenChildren], slots: slots})}));
      }
      while (dart.test(oldUnkeyedRows.moveNext()))
        this.updateChildren(oldUnkeyedRows.current.children, C[395] || CT.C395, {forgottenChildren: this[S$0._forgottenChildren]});
      for (let oldChildren of oldKeyedRows[S$.$values][S$.$where](dart.fn(list => {
        if (list == null) dart.nullFailed(I[48], 436, 86, "list");
        return !dart.test(taken.contains(list));
      }, T$.ListOfElementTobool())))
        this.updateChildren(oldChildren, C[395] || CT.C395, {forgottenChildren: this[S$0._forgottenChildren]});
      this[S$0._children$1] = newChildren;
      this[S$0._updateRenderObjectChildren]();
      this[S$0._forgottenChildren].clear();
      super.update(newWidget);
      if (!dart.equals(this.widget, newWidget)) dart.assertFailed(null, I[48], 443, 12, "widget == newWidget");
      if (!dart.test(this[S$0._doingMountOrUpdate])) dart.assertFailed(null, I[48], 444, 12, "_doingMountOrUpdate");
      this[S$0._doingMountOrUpdate] = false;
    }
    [S$0._updateRenderObjectChildren]() {
      if (!(this.renderObject != null)) dart.assertFailed(null, I[48], 449, 12, "renderObject != null");
      this.renderObject.setFlatChildren(dart.test(this[S$0._children$1][S$.$isNotEmpty]) ? this[S$0._children$1][S$.$_get](0).children[S$.$length] : 0, this[S$0._children$1][S$0.$expand](box$.RenderBox, dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 452, 53, "row");
        return row.children[S$.$map](box$.RenderBox, dart.fn(child => {
          if (child == null) dart.nullFailed(I[48], 453, 53, "child");
          let box = box$.RenderBox.as(dart.nullCheck(child.renderObject));
          return box;
        }, T$.ElementToRenderBox()));
      }, T$._TableElementRowToIterableOfRenderBox()))[S$.$toList]());
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[48], 462, 37, "visitor");
      for (let child of this[S$0._children$1][S$0.$expand](framework.Element, dart.fn(row => {
        if (row == null) dart.nullFailed(I[48], 463, 77, "row");
        return row.children;
      }, T$._TableElementRowToListOfElement()))) {
        if (!dart.test(this[S$0._forgottenChildren].contains(child))) visitor(child);
      }
    }
    forgetChild(child) {
      if (child == null) dart.nullFailed(I[48], 470, 28, "child");
      this[S$0._forgottenChildren].add(child);
      super.forgetChild(child);
      return true;
    }
  };
  (table$._TableElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[48], 343, 23, "widget");
    this[S$0._children$1] = C[393] || CT.C393;
    this[S$0._doingMountOrUpdate] = false;
    this[S$0._forgottenChildren] = new (T$._HashSetOfElement()).new();
    table$._TableElement.__proto__.new.call(this, widget);
    ;
  }).prototype = table$._TableElement.prototype;
  dart.addTypeTests(table$._TableElement);
  dart.addTypeCaches(table$._TableElement);
  dart.setMethodSignature(table$._TableElement, () => ({
    __proto__: dart.getMethods(table$._TableElement.__proto__),
    [S$0._updateRenderObjectChildren]: dart.fnType(dart.void, []),
    forgetChild: dart.fnType(core.bool, [framework.Element])
  }));
  dart.setGetterSignature(table$._TableElement, () => ({
    __proto__: dart.getGetters(table$._TableElement.__proto__),
    widget: table$.Table,
    renderObject: table.RenderTable
  }));
  dart.setLibraryUri(table$._TableElement, I[47]);
  dart.setFieldSignature(table$._TableElement, () => ({
    __proto__: dart.getFields(table$._TableElement.__proto__),
    [S$0._children$1]: dart.fieldType(core.List$(table$._TableElementRow)),
    [S$0._doingMountOrUpdate]: dart.fieldType(core.bool),
    [S$0._forgottenChildren]: dart.finalFieldType(core.Set$(framework.Element))
  }));
  const _is_ParentDataWidget_default = Symbol('_is_ParentDataWidget_default');
  framework.ParentDataWidget$ = dart.generic(T => {
    var ParentDataElementOfT = () => (ParentDataElementOfT = dart.constFn(framework.ParentDataElement$(T)))();
    class ParentDataWidget extends framework.ProxyWidget {
      createElement() {
        return new (ParentDataElementOfT()).new(this);
      }
      debugIsValidRenderObject(renderObject) {
        if (renderObject == null) dart.nullFailed(I[4], 1405, 46, "renderObject");
        if (!!dart.wrapType(T)._equals(dart.wrapType(dart.dynamic))) dart.assertFailed(null, I[4], 1406, 12, "T != dynamic");
        if (!!dart.wrapType(T)._equals(dart.wrapType(object$.ParentData))) dart.assertFailed(null, I[4], 1407, 12, "T != ParentData");
        return T.is(renderObject.parentData);
      }
      [S$0._debugDescribeIncorrectParentDataType](opts) {
        let parentData = opts && 'parentData' in opts ? opts.parentData : null;
        let parentDataCreator = opts && 'parentDataCreator' in opts ? opts.parentDataCreator : null;
        let ownershipChain = opts && 'ownershipChain' in opts ? opts.ownershipChain : null;
        return new (T$.SyncIterableOfDiagnosticsNode()).new((function* _debugDescribeIncorrectParentDataType() {
          if (!!dart.wrapType(T)._equals(dart.wrapType(dart.dynamic))) dart.assertFailed(null, I[4], 1423, 12, "T != dynamic");
          if (!!dart.wrapType(T)._equals(dart.wrapType(object$.ParentData))) dart.assertFailed(null, I[4], 1424, 12, "T != ParentData");
          if (!(this.debugTypicalAncestorWidgetClass != null)) dart.assertFailed(null, I[4], 1425, 12, "debugTypicalAncestorWidgetClass != null");
          let description = "The ParentDataWidget " + dart.str(this) + " wants to apply ParentData of type " + dart.str(dart.wrapType(T)) + " to a RenderObject";
          if (parentData == null) {
            yield new assertions.ErrorDescription.new(description + ", which has not been set up to receive any ParentData.");
          } else {
            yield new assertions.ErrorDescription.new(description + ", which has been set up to accept ParentData of incompatible type " + dart.str(dart.runtimeType(parentData)) + ".");
          }
          yield new assertions.ErrorHint.new("Usually, this means that the " + dart.str(this[S$.$runtimeType]) + " widget has the wrong ancestor RenderObjectWidget. " + "Typically, " + dart.str(this[S$.$runtimeType]) + " widgets are placed directly inside " + dart.str(this.debugTypicalAncestorWidgetClass) + " widgets.");
          if (parentDataCreator != null) {
            yield new assertions.ErrorHint.new("The offending " + dart.str(this[S$.$runtimeType]) + " is currently placed inside a " + dart.str(dart.runtimeType(parentDataCreator)) + " widget.");
          }
          if (ownershipChain != null) {
            yield new assertions.ErrorDescription.new("The ownership chain for the RenderObject that received the incompatible parent data was:\n  " + dart.str(ownershipChain));
          }
        }).bind(this));
      }
      debugCanApplyOutOfTurn() {
        return false;
      }
    }
    (ParentDataWidget.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[4], 1390, 54, "child");
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      ParentDataWidget.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = ParentDataWidget.prototype;
    dart.addTypeTests(ParentDataWidget);
    ParentDataWidget.prototype[_is_ParentDataWidget_default] = true;
    dart.addTypeCaches(ParentDataWidget);
    dart.setMethodSignature(ParentDataWidget, () => ({
      __proto__: dart.getMethods(ParentDataWidget.__proto__),
      createElement: dart.fnType(framework.ParentDataElement$(T), []),
      debugIsValidRenderObject: dart.fnType(core.bool, [object$.RenderObject]),
      [S$0._debugDescribeIncorrectParentDataType]: dart.fnType(core.Iterable$(diagnostics$.DiagnosticsNode), [], {ownershipChain: dart.nullable(diagnostics$.DiagnosticsNode), parentDataCreator: dart.nullable(framework.RenderObjectWidget)}, {parentData: dart.nullable(object$.ParentData)}),
      debugCanApplyOutOfTurn: dart.fnType(core.bool, [])
    }));
    dart.setLibraryUri(ParentDataWidget, I[5]);
    return ParentDataWidget;
  });
  framework.ParentDataWidget = framework.ParentDataWidget$();
  dart.addTypeTests(framework.ParentDataWidget, _is_ParentDataWidget_default);
  table$.TableCell = class TableCell extends framework.ParentDataWidget$(table.TableCellParentData) {
    get verticalAlignment() {
      return this[S$0.verticalAlignment];
    }
    set verticalAlignment(value) {
      super.verticalAlignment = value;
    }
    applyParentData(renderObject) {
      if (renderObject == null) dart.nullFailed(I[48], 495, 37, "renderObject");
      let parentData = table.TableCellParentData.as(dart.nullCheck(renderObject.parentData));
      if (parentData.verticalAlignment != this.verticalAlignment) {
        parentData.verticalAlignment = this.verticalAlignment;
        let targetParent = renderObject.parent;
        if (object$.RenderObject.is(targetParent)) targetParent.markNeedsLayout();
      }
    }
    get debugTypicalAncestorWidgetClass() {
      return dart.wrapType(table$.Table);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[48], 509, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfTableCellVerticalAlignment()).new("verticalAlignment", this.verticalAlignment));
    }
  };
  (table$.TableCell.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let verticalAlignment = opts && 'verticalAlignment' in opts ? opts.verticalAlignment : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[48], 488, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.verticalAlignment] = verticalAlignment;
    table$.TableCell.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = table$.TableCell.prototype;
  dart.addTypeTests(table$.TableCell);
  dart.addTypeCaches(table$.TableCell);
  dart.setMethodSignature(table$.TableCell, () => ({
    __proto__: dart.getMethods(table$.TableCell.__proto__),
    applyParentData: dart.fnType(dart.void, [object$.RenderObject])
  }));
  dart.setGetterSignature(table$.TableCell, () => ({
    __proto__: dart.getGetters(table$.TableCell.__proto__),
    debugTypicalAncestorWidgetClass: core.Type
  }));
  dart.setLibraryUri(table$.TableCell, I[47]);
  dart.setFieldSignature(table$.TableCell, () => ({
    __proto__: dart.getFields(table$.TableCell.__proto__),
    verticalAlignment: dart.finalFieldType(dart.nullable(table.TableCellVerticalAlignment))
  }));
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics$.Diagnosticable);
  table$._TableSlot = class _TableSlot extends Object_Diagnosticable$36$ {
    get column() {
      return this[S$0.column$1];
    }
    set column(value) {
      super.column = value;
    }
    get row() {
      return this[S$0.row];
    }
    set row(value) {
      super.row = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) return false;
      return table$._TableSlot.is(other) && this.column == other.column && this.row == other.row;
    }
    get hashCode() {
      return ui.hashValues(this.column, this.row);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[48], 535, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.IntProperty.new("x", this.column));
      properties.add(new diagnostics$.IntProperty.new("y", this.row));
    }
  };
  (table$._TableSlot.new = function(column, row) {
    if (column == null) dart.nullFailed(I[48], 517, 25, "column");
    if (row == null) dart.nullFailed(I[48], 517, 38, "row");
    this[S$0.column$1] = column;
    this[S$0.row] = row;
    ;
  }).prototype = table$._TableSlot.prototype;
  dart.addTypeTests(table$._TableSlot);
  dart.addTypeCaches(table$._TableSlot);
  dart.setLibraryUri(table$._TableSlot, I[47]);
  dart.setFieldSignature(table$._TableSlot, () => ({
    __proto__: dart.getFields(table$._TableSlot.__proto__),
    column: dart.finalFieldType(core.int),
    row: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(table$._TableSlot, ['_equals']);
  dart.defineExtensionAccessors(table$._TableSlot, ['hashCode']);
  const _is_InheritedModel_default = Symbol('_is_InheritedModel_default');
  inherited_model.InheritedModel$ = dart.generic(T => {
    var InheritedModelElementOfT = () => (InheritedModelElementOfT = dart.constFn(inherited_model.InheritedModelElement$(T)))();
    class InheritedModel extends framework.InheritedWidget {
      createElement() {
        return new (InheritedModelElementOfT()).new(this);
      }
      isSupportedAspect(aspect) {
        if (aspect == null) dart.nullFailed(I[49], 116, 33, "aspect");
        return true;
      }
      static _findModels(T, context, aspect, results) {
        if (context == null) dart.nullFailed(I[49], 120, 74, "context");
        if (aspect == null) dart.nullFailed(I[49], 120, 90, "aspect");
        if (results == null) dart.nullFailed(I[49], 120, 121, "results");
        let model = context.getElementForInheritedWidgetOfExactType(T);
        if (model == null) return;
        results[S$.$add](model);
        if (!T.is(model.widget)) dart.assertFailed(null, I[49], 127, 12, "model.widget is T");
        let modelWidget = T.as(model.widget);
        if (dart.test(modelWidget.isSupportedAspect(aspect))) return;
        let modelParent = null;
        model.visitAncestorElements(dart.fn(ancestor => {
          if (ancestor == null) dart.nullFailed(I[49], 133, 42, "ancestor");
          modelParent = ancestor;
          return false;
        }, T$.ElementTobool()));
        if (modelParent == null) return;
        inherited_model.InheritedModel._findModels(T, dart.nullCheck(modelParent), aspect, results);
      }
      static inheritFrom(T, context, opts) {
        if (context == null) dart.nullFailed(I[49], 158, 72, "context");
        let aspect = opts && 'aspect' in opts ? opts.aspect : null;
        if (aspect == null) return context.dependOnInheritedWidgetOfExactType(T);
        let models = T$.JSArrayOfInheritedElement().of([]);
        inherited_model.InheritedModel._findModels(T, context, aspect, models);
        if (dart.test(models[S$.$isEmpty])) {
          return null;
        }
        let lastModel = models[S$.$last];
        for (let model of models) {
          let value = T.as(context.dependOnInheritedElement(model, {aspect: aspect}));
          if (dart.equals(model, lastModel)) return value;
        }
        if (!false) dart.assertFailed(null, I[49], 177, 12, "false");
        return null;
      }
    }
    (InheritedModel.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[49], 98, 52, "child");
      let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
      InheritedModel.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
      ;
    }).prototype = InheritedModel.prototype;
    dart.addTypeTests(InheritedModel);
    InheritedModel.prototype[_is_InheritedModel_default] = true;
    dart.addTypeCaches(InheritedModel);
    dart.setMethodSignature(InheritedModel, () => ({
      __proto__: dart.getMethods(InheritedModel.__proto__),
      createElement: dart.fnType(inherited_model.InheritedModelElement$(T), []),
      isSupportedAspect: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(InheritedModel, I[50]);
    return InheritedModel;
  });
  inherited_model.InheritedModel = inherited_model.InheritedModel$();
  dart.addTypeTests(inherited_model.InheritedModel, _is_InheritedModel_default);
  framework.ComponentElement = class ComponentElement extends framework.Element {
    get debugDoingBuild() {
      return this[S$0._debugDoingBuild];
    }
    mount(parent, newSlot) {
      super.mount(parent, newSlot);
      if (!(this[S$0._child] == null)) dart.assertFailed(null, I[4], 4546, 12, "_child == null");
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 4547, 12, "_lifecycleState == _ElementLifecycle.active");
      this[S$0._firstBuild]();
      if (!(this[S$0._child] != null)) dart.assertFailed(null, I[4], 4549, 12, "_child != null");
    }
    [S$0._firstBuild]() {
      this.rebuild();
    }
    performRebuild() {
      if (!false && dart.test(debug$0.debugProfileBuildsEnabled)) developer.Timeline.startSync(dart.str(dart.runtimeType(this.widget)), {arguments: debug$.timelineArgumentsIndicatingLandmarkEvent});
      if (!dart.test(this[S$0._debugSetAllowIgnoredCallsToMarkNeedsBuild](true))) dart.assertFailed(null, I[4], 4567, 12, "_debugSetAllowIgnoredCallsToMarkNeedsBuild(true)");
      let built = null;
      try {
        if (!dart.test(dart.fn(() => {
          this[S$0._debugDoingBuild] = true;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4570, 14, "() {\r\n        _debugDoingBuild = true;\r\n        return true;\r\n      }()");
        built = this.build();
        if (!dart.test(dart.fn(() => {
          this[S$0._debugDoingBuild] = false;
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 4575, 14, "() {\r\n        _debugDoingBuild = false;\r\n        return true;\r\n      }()");
        debug$0.debugWidgetBuilderValue(this.widget, built);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stack = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[S$0._debugDoingBuild] = false;
          built = framework.ErrorWidget.builder(framework._debugReportException(new assertions.ErrorDescription.new("building " + dart.str(this)), e, stack, {informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNode()).new((function*() {
              yield new object$.DiagnosticsDebugCreator.new(new framework.DebugCreator.new(this));
            }).bind(this)), T$.VoidToIterableOfDiagnosticsNode())}));
        } else
          throw e$;
      } finally {
        this[S$0._dirty] = false;
        if (!dart.test(this[S$0._debugSetAllowIgnoredCallsToMarkNeedsBuild](false))) dart.assertFailed(null, I[4], 4596, 14, "_debugSetAllowIgnoredCallsToMarkNeedsBuild(false)");
      }
      try {
        this[S$0._child] = this.updateChild(this[S$0._child], built, this.slot);
        if (!(this[S$0._child] != null)) dart.assertFailed(null, I[4], 4600, 14, "_child != null");
      } catch (e$0) {
        let e = dart.getThrown(e$0);
        let stack = dart.stackTrace(e$0);
        if (core.Object.is(e)) {
          built = framework.ErrorWidget.builder(framework._debugReportException(new assertions.ErrorDescription.new("building " + dart.str(this)), e, stack, {informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNode()).new((function*() {
              yield new object$.DiagnosticsDebugCreator.new(new framework.DebugCreator.new(this));
            }).bind(this)), T$.VoidToIterableOfDiagnosticsNode())}));
          this[S$0._child] = this.updateChild(null, built, this.slot);
        } else
          throw e$0;
      }
      if (!false && dart.test(debug$0.debugProfileBuildsEnabled)) developer.Timeline.finishSync();
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 4626, 37, "visitor");
      if (this[S$0._child] != null) visitor(dart.nullCheck(this[S$0._child]));
    }
    forgetChild(child) {
      if (child == null) dart.nullFailed(I[4], 4632, 28, "child");
      if (!dart.equals(child, this[S$0._child])) dart.assertFailed(null, I[4], 4633, 12, "child == _child");
      this[S$0._child] = null;
      super.forgetChild(child);
    }
  };
  (framework.ComponentElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[4], 4535, 27, "widget");
    this[S$0._child] = null;
    this[S$0._debugDoingBuild] = false;
    framework.ComponentElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework.ComponentElement.prototype;
  dart.addTypeTests(framework.ComponentElement);
  dart.addTypeCaches(framework.ComponentElement);
  dart.setMethodSignature(framework.ComponentElement, () => ({
    __proto__: dart.getMethods(framework.ComponentElement.__proto__),
    [S$0._firstBuild]: dart.fnType(dart.void, []),
    performRebuild: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(framework.ComponentElement, () => ({
    __proto__: dart.getGetters(framework.ComponentElement.__proto__),
    debugDoingBuild: core.bool
  }));
  dart.setLibraryUri(framework.ComponentElement, I[5]);
  dart.setFieldSignature(framework.ComponentElement, () => ({
    __proto__: dart.getFields(framework.ComponentElement.__proto__),
    [S$0._child]: dart.fieldType(dart.nullable(framework.Element)),
    [S$0._debugDoingBuild]: dart.fieldType(core.bool)
  }));
  framework.ProxyElement = class ProxyElement extends framework.ComponentElement {
    get widget() {
      return framework.ProxyWidget.as(super.widget);
    }
    build() {
      return this.widget.child;
    }
    update(newWidget) {
      framework.ProxyWidget.as(newWidget);
      if (newWidget == null) dart.nullFailed(I[4], 4914, 27, "newWidget");
      let oldWidget = this.widget;
      if (!(this.widget != null)) dart.assertFailed(null, I[4], 4916, 12, "widget != null");
      if (!!dart.equals(this.widget, newWidget)) dart.assertFailed(null, I[4], 4917, 12, "widget != newWidget");
      super.update(newWidget);
      if (!dart.equals(this.widget, newWidget)) dart.assertFailed(null, I[4], 4919, 12, "widget == newWidget");
      this.updated(oldWidget);
      this[S$0._dirty] = true;
      this.rebuild();
    }
    updated(oldWidget) {
      framework.ProxyWidget.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 4931, 38, "oldWidget");
      this.notifyClients(oldWidget);
    }
  };
  (framework.ProxyElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[4], 4905, 28, "widget");
    framework.ProxyElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework.ProxyElement.prototype;
  dart.addTypeTests(framework.ProxyElement);
  dart.addTypeCaches(framework.ProxyElement);
  dart.setMethodSignature(framework.ProxyElement, () => ({
    __proto__: dart.getMethods(framework.ProxyElement.__proto__),
    build: dart.fnType(framework.Widget, []),
    updated: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(framework.ProxyElement, () => ({
    __proto__: dart.getGetters(framework.ProxyElement.__proto__),
    widget: framework.ProxyWidget
  }));
  dart.setLibraryUri(framework.ProxyElement, I[5]);
  framework.InheritedElement = class InheritedElement extends framework.ProxyElement {
    get widget() {
      return framework.InheritedWidget.as(super.widget);
    }
    [S$0._updateInheritance]() {
      let t39;
      if (!(this[S$0._lifecycleState] == framework._ElementLifecycle.active)) dart.assertFailed(null, I[4], 5021, 12, "_lifecycleState == _ElementLifecycle.active");
      let incomingWidgets = (t39 = this[S$0._parent], t39 == null ? null : t39[S$0._inheritedWidgets]);
      if (incomingWidgets != null)
        this[S$0._inheritedWidgets] = T$.HashMapOfType$InheritedElement().from(incomingWidgets);
      else
        this[S$0._inheritedWidgets] = new (T$.LinkedMapOfType$InheritedElement()).new();
      dart.nullCheck(this[S$0._inheritedWidgets])[S$.$_set](dart.runtimeType(this.widget), this);
    }
    debugDeactivated() {
      if (!dart.test(dart.fn(() => {
        if (!dart.test(this[S$0._dependents][S$.$isEmpty])) dart.assertFailed(null, I[4], 5033, 14, "_dependents.isEmpty");
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5032, 12, "() {\r\n      assert(_dependents.isEmpty);\r\n      return true;\r\n    }()");
      super.debugDeactivated();
    }
    getDependencies(dependent) {
      if (dependent == null) dart.nullFailed(I[4], 5064, 35, "dependent");
      return this[S$0._dependents][S$.$_get](dependent);
    }
    setDependencies(dependent, value) {
      if (dependent == null) dart.nullFailed(I[4], 5091, 32, "dependent");
      this[S$0._dependents][S$.$_set](dependent, value);
    }
    updateDependencies(dependent, aspect) {
      if (dependent == null) dart.nullFailed(I[4], 5118, 35, "dependent");
      this.setDependencies(dependent, null);
    }
    notifyDependent(oldWidget, dependent) {
      framework.InheritedWidget.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 5139, 50, "oldWidget");
      if (dependent == null) dart.nullFailed(I[4], 5139, 69, "dependent");
      dependent.didChangeDependencies();
    }
    updated(oldWidget) {
      framework.InheritedWidget.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 5150, 32, "oldWidget");
      if (dart.test(this.widget.updateShouldNotify(oldWidget))) super.updated(oldWidget);
    }
    notifyClients(oldWidget) {
      framework.InheritedWidget.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[4], 5167, 38, "oldWidget");
      if (!dart.test(this[S$0._debugCheckOwnerBuildTargetExists]("notifyClients"))) dart.assertFailed(null, I[4], 5168, 12, "_debugCheckOwnerBuildTargetExists('notifyClients')");
      for (let dependent of this[S$0._dependents][S$.$keys]) {
        if (!dart.test(dart.fn(() => {
          let ancestor = dependent[S$0._parent];
          while (!dart.equals(ancestor, this) && ancestor != null)
            ancestor = ancestor[S$0._parent];
          return dart.equals(ancestor, this);
        }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 5170, 14, "() {\r\n        // check that it really is our descendant\r\n        Element? ancestor = dependent._parent;\r\n        while (ancestor != this && ancestor != null)\r\n          ancestor = ancestor._parent;\r\n        return ancestor == this;\r\n      }()");
        if (!dart.test(dart.nullCheck(dependent[S$0._dependencies]).contains(this))) dart.assertFailed(null, I[4], 5178, 14, "dependent._dependencies!.contains(this)");
        this.notifyDependent(oldWidget, dependent);
      }
    }
  };
  (framework.InheritedElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[4], 5012, 36, "widget");
    this[S$0._dependents] = new (T$.LinkedMapOfElement$ObjectN()).new();
    framework.InheritedElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework.InheritedElement.prototype;
  dart.addTypeTests(framework.InheritedElement);
  dart.addTypeCaches(framework.InheritedElement);
  dart.setMethodSignature(framework.InheritedElement, () => ({
    __proto__: dart.getMethods(framework.InheritedElement.__proto__),
    getDependencies: dart.fnType(dart.nullable(core.Object), [framework.Element]),
    setDependencies: dart.fnType(dart.void, [framework.Element, dart.nullable(core.Object)]),
    updateDependencies: dart.fnType(dart.void, [framework.Element, dart.nullable(core.Object)]),
    notifyDependent: dart.fnType(dart.void, [dart.nullable(core.Object), framework.Element]),
    notifyClients: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(framework.InheritedElement, () => ({
    __proto__: dart.getGetters(framework.InheritedElement.__proto__),
    widget: framework.InheritedWidget
  }));
  dart.setLibraryUri(framework.InheritedElement, I[5]);
  dart.setFieldSignature(framework.InheritedElement, () => ({
    __proto__: dart.getFields(framework.InheritedElement.__proto__),
    [S$0._dependents]: dart.finalFieldType(core.Map$(framework.Element, dart.nullable(core.Object)))
  }));
  const _is_InheritedModelElement_default = Symbol('_is_InheritedModelElement_default');
  inherited_model.InheritedModelElement$ = dart.generic(T => {
    var InheritedModelOfT = () => (InheritedModelOfT = dart.constFn(inherited_model.InheritedModel$(T)))();
    var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
    var SetNOfT = () => (SetNOfT = dart.constFn(dart.nullable(SetOfT())))();
    var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    class InheritedModelElement extends framework.InheritedElement {
      get widget() {
        return InheritedModelOfT().as(super.widget);
      }
      updateDependencies(dependent, aspect) {
        let t39, t39$;
        if (dependent == null) dart.nullFailed(I[49], 191, 35, "dependent");
        let dependencies = SetNOfT().as(this.getDependencies(dependent));
        if (dependencies != null && dart.test(dependencies[S$.$isEmpty])) return;
        if (aspect == null) {
          this.setDependencies(dependent, new (_HashSetOfT()).new());
        } else {
          if (!T.is(aspect)) dart.assertFailed(null, I[49], 199, 14, "aspect is T");
          this.setDependencies(dependent, (t39$ = (t39 = dependencies, t39 == null ? new (_HashSetOfT()).new() : t39), (() => {
            t39$.add(T.as(aspect));
            return t39$;
          })()));
        }
      }
      notifyDependent(oldWidget, dependent) {
        InheritedModelOfT().as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[49], 205, 42, "oldWidget");
        if (dependent == null) dart.nullFailed(I[49], 205, 61, "dependent");
        let dependencies = SetNOfT().as(this.getDependencies(dependent));
        if (dependencies == null) return;
        if (dart.test(dependencies[S$.$isEmpty]) || dart.test(this.widget.updateShouldNotifyDependent(oldWidget, dependencies))) dependent.didChangeDependencies();
      }
    }
    (InheritedModelElement.new = function(widget) {
      if (widget == null) dart.nullFailed(I[49], 185, 43, "widget");
      InheritedModelElement.__proto__.new.call(this, widget);
      ;
    }).prototype = InheritedModelElement.prototype;
    dart.addTypeTests(InheritedModelElement);
    InheritedModelElement.prototype[_is_InheritedModelElement_default] = true;
    dart.addTypeCaches(InheritedModelElement);
    dart.setGetterSignature(InheritedModelElement, () => ({
      __proto__: dart.getGetters(InheritedModelElement.__proto__),
      widget: inherited_model.InheritedModel$(T)
    }));
    dart.setLibraryUri(InheritedModelElement, I[50]);
    return InheritedModelElement;
  });
  inherited_model.InheritedModelElement = inherited_model.InheritedModelElement$();
  dart.addTypeTests(inherited_model.InheritedModelElement, _is_InheritedModelElement_default);
  visibility.Visibility = class Visibility extends framework.StatelessWidget {
    get child() {
      return this[S$0.child$11];
    }
    set child(value) {
      super.child = value;
    }
    get replacement() {
      return this[S$0.replacement];
    }
    set replacement(value) {
      super.replacement = value;
    }
    get visible() {
      return this[S$0.visible];
    }
    set visible(value) {
      super.visible = value;
    }
    get maintainState() {
      return this[S$0.maintainState$1];
    }
    set maintainState(value) {
      super.maintainState = value;
    }
    get maintainAnimation() {
      return this[S$0.maintainAnimation];
    }
    set maintainAnimation(value) {
      super.maintainAnimation = value;
    }
    get maintainSize() {
      return this[S$0.maintainSize];
    }
    set maintainSize(value) {
      super.maintainSize = value;
    }
    get maintainSemantics() {
      return this[S$0.maintainSemantics];
    }
    set maintainSemantics(value) {
      super.maintainSemantics = value;
    }
    get maintainInteractivity() {
      return this[S$0.maintainInteractivity];
    }
    set maintainInteractivity(value) {
      super.maintainInteractivity = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[51], 216, 29, "context");
      if (dart.test(this.maintainSize)) {
        let result = this.child;
        if (!dart.test(this.maintainInteractivity)) {
          result = new basic.IgnorePointer.new({child: this.child, ignoring: !dart.test(this.visible), ignoringSemantics: !dart.test(this.visible) && !dart.test(this.maintainSemantics), $creationLocationd_0dea112b090073317d4: C[400] || CT.C400});
        }
        return new basic.Opacity.new({opacity: dart.test(this.visible) ? 1.0 : 0.0, alwaysIncludeSemantics: this.maintainSemantics, child: result, $creationLocationd_0dea112b090073317d4: C[405] || CT.C405});
      }
      if (!!dart.test(this.maintainInteractivity)) dart.assertFailed(null, I[51], 232, 12, "!maintainInteractivity");
      if (!!dart.test(this.maintainSemantics)) dart.assertFailed(null, I[51], 233, 12, "!maintainSemantics");
      if (!!dart.test(this.maintainSize)) dart.assertFailed(null, I[51], 234, 12, "!maintainSize");
      if (dart.test(this.maintainState)) {
        let result = this.child;
        if (!dart.test(this.maintainAnimation)) result = new ticker_provider.TickerMode.new({child: this.child, enabled: this.visible, $creationLocationd_0dea112b090073317d4: C[410] || CT.C410});
        return new basic.Offstage.new({child: result, offstage: !dart.test(this.visible), $creationLocationd_0dea112b090073317d4: C[414] || CT.C414});
      }
      if (!!dart.test(this.maintainAnimation)) dart.assertFailed(null, I[51], 244, 12, "!maintainAnimation");
      if (!!dart.test(this.maintainState)) dart.assertFailed(null, I[51], 245, 12, "!maintainState");
      return dart.test(this.visible) ? this.child : this.replacement;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[51], 250, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.FlagProperty.new("visible", {value: this.visible, ifFalse: "hidden", ifTrue: "visible"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainState", {value: this.maintainState, ifFalse: "maintainState"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainAnimation", {value: this.maintainAnimation, ifFalse: "maintainAnimation"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainSize", {value: this.maintainSize, ifFalse: "maintainSize"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainSemantics", {value: this.maintainSemantics, ifFalse: "maintainSemantics"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainInteractivity", {value: this.maintainInteractivity, ifFalse: "maintainInteractivity"}));
    }
  };
  (visibility.Visibility.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[51], 57, 19, "child");
    let replacement = opts && 'replacement' in opts ? opts.replacement : C[398] || CT.C398;
    if (replacement == null) dart.nullFailed(I[51], 58, 10, "replacement");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[51], 59, 10, "visible");
    let maintainState = opts && 'maintainState' in opts ? opts.maintainState : false;
    if (maintainState == null) dart.nullFailed(I[51], 60, 10, "maintainState");
    let maintainAnimation = opts && 'maintainAnimation' in opts ? opts.maintainAnimation : false;
    if (maintainAnimation == null) dart.nullFailed(I[51], 61, 10, "maintainAnimation");
    let maintainSize = opts && 'maintainSize' in opts ? opts.maintainSize : false;
    if (maintainSize == null) dart.nullFailed(I[51], 62, 10, "maintainSize");
    let maintainSemantics = opts && 'maintainSemantics' in opts ? opts.maintainSemantics : false;
    if (maintainSemantics == null) dart.nullFailed(I[51], 63, 10, "maintainSemantics");
    let maintainInteractivity = opts && 'maintainInteractivity' in opts ? opts.maintainInteractivity : false;
    if (maintainInteractivity == null) dart.nullFailed(I[51], 64, 10, "maintainInteractivity");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.child$11] = child;
    this[S$0.replacement] = replacement;
    this[S$0.visible] = visible;
    this[S$0.maintainState$1] = maintainState;
    this[S$0.maintainAnimation] = maintainAnimation;
    this[S$0.maintainSize] = maintainSize;
    this[S$0.maintainSemantics] = maintainSemantics;
    this[S$0.maintainInteractivity] = maintainInteractivity;
    if (!(child != null)) dart.assertFailed(null, I[51], 65, 15, "child != null");
    if (!(replacement != null)) dart.assertFailed(null, I[51], 66, 15, "replacement != null");
    if (!(visible != null)) dart.assertFailed(null, I[51], 67, 15, "visible != null");
    if (!(maintainState != null)) dart.assertFailed(null, I[51], 68, 15, "maintainState != null");
    if (!(maintainAnimation != null)) dart.assertFailed(null, I[51], 69, 15, "maintainAnimation != null");
    if (!(maintainSize != null)) dart.assertFailed(null, I[51], 70, 15, "maintainSize != null");
    if (!(maintainState === true || maintainAnimation === false)) dart.assertFailed("Cannot maintain animations if the state is not also maintained.", I[51], 72, 10, "maintainState == true || maintainAnimation == false");
    if (!(maintainAnimation === true || maintainSize === false)) dart.assertFailed("Cannot maintain size if animations are not maintained.", I[51], 76, 10, "maintainAnimation == true || maintainSize == false");
    if (!(maintainSize === true || maintainSemantics === false)) dart.assertFailed("Cannot maintain semantics if size is not maintained.", I[51], 80, 10, "maintainSize == true || maintainSemantics == false");
    if (!(maintainSize === true || maintainInteractivity === false)) dart.assertFailed("Cannot maintain interactivity if size is not maintained.", I[51], 84, 10, "maintainSize == true || maintainInteractivity == false");
    visibility.Visibility.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = visibility.Visibility.prototype;
  dart.addTypeTests(visibility.Visibility);
  dart.addTypeCaches(visibility.Visibility);
  dart.setMethodSignature(visibility.Visibility, () => ({
    __proto__: dart.getMethods(visibility.Visibility.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(visibility.Visibility, I[52]);
  dart.setFieldSignature(visibility.Visibility, () => ({
    __proto__: dart.getFields(visibility.Visibility.__proto__),
    child: dart.finalFieldType(framework.Widget),
    replacement: dart.finalFieldType(framework.Widget),
    visible: dart.finalFieldType(core.bool),
    maintainState: dart.finalFieldType(core.bool),
    maintainAnimation: dart.finalFieldType(core.bool),
    maintainSize: dart.finalFieldType(core.bool),
    maintainSemantics: dart.finalFieldType(core.bool),
    maintainInteractivity: dart.finalFieldType(core.bool)
  }));
  visibility.SliverVisibility = class SliverVisibility extends framework.StatelessWidget {
    get sliver() {
      return this[S$0.sliver];
    }
    set sliver(value) {
      super.sliver = value;
    }
    get replacementSliver() {
      return this[S$0.replacementSliver];
    }
    set replacementSliver(value) {
      super.replacementSliver = value;
    }
    get visible() {
      return this[S$0.visible$1];
    }
    set visible(value) {
      super.visible = value;
    }
    get maintainState() {
      return this[S$0.maintainState$2];
    }
    set maintainState(value) {
      super.maintainState = value;
    }
    get maintainAnimation() {
      return this[S$0.maintainAnimation$1];
    }
    set maintainAnimation(value) {
      super.maintainAnimation = value;
    }
    get maintainSize() {
      return this[S$0.maintainSize$1];
    }
    set maintainSize(value) {
      super.maintainSize = value;
    }
    get maintainSemantics() {
      return this[S$0.maintainSemantics$1];
    }
    set maintainSemantics(value) {
      super.maintainSemantics = value;
    }
    get maintainInteractivity() {
      return this[S$0.maintainInteractivity$1];
    }
    set maintainInteractivity(value) {
      super.maintainInteractivity = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[51], 454, 29, "context");
      if (dart.test(this.maintainSize)) {
        let result = this.sliver;
        if (!dart.test(this.maintainInteractivity)) {
          result = new sliver$.SliverIgnorePointer.new({sliver: this.sliver, ignoring: !dart.test(this.visible), ignoringSemantics: !dart.test(this.visible) && !dart.test(this.maintainSemantics), $creationLocationd_0dea112b090073317d4: C[420] || CT.C420});
        }
        return new sliver$.SliverOpacity.new({opacity: dart.test(this.visible) ? 1.0 : 0.0, alwaysIncludeSemantics: this.maintainSemantics, sliver: result, $creationLocationd_0dea112b090073317d4: C[425] || CT.C425});
      }
      if (!!dart.test(this.maintainInteractivity)) dart.assertFailed(null, I[51], 470, 12, "!maintainInteractivity");
      if (!!dart.test(this.maintainSemantics)) dart.assertFailed(null, I[51], 471, 12, "!maintainSemantics");
      if (!!dart.test(this.maintainSize)) dart.assertFailed(null, I[51], 472, 12, "!maintainSize");
      if (dart.test(this.maintainState)) {
        let result = this.sliver;
        if (!dart.test(this.maintainAnimation)) result = new ticker_provider.TickerMode.new({child: this.sliver, enabled: this.visible, $creationLocationd_0dea112b090073317d4: C[430] || CT.C430});
        return new sliver$.SliverOffstage.new({sliver: result, offstage: !dart.test(this.visible), $creationLocationd_0dea112b090073317d4: C[434] || CT.C434});
      }
      if (!!dart.test(this.maintainAnimation)) dart.assertFailed(null, I[51], 482, 12, "!maintainAnimation");
      if (!!dart.test(this.maintainState)) dart.assertFailed(null, I[51], 483, 12, "!maintainState");
      return dart.test(this.visible) ? this.sliver : this.replacementSliver;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[51], 488, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.FlagProperty.new("visible", {value: this.visible, ifFalse: "hidden", ifTrue: "visible"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainState", {value: this.maintainState, ifFalse: "maintainState"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainAnimation", {value: this.maintainAnimation, ifFalse: "maintainAnimation"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainSize", {value: this.maintainSize, ifFalse: "maintainSize"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainSemantics", {value: this.maintainSemantics, ifFalse: "maintainSemantics"}));
      properties.add(new diagnostics$.FlagProperty.new("maintainInteractivity", {value: this.maintainInteractivity, ifFalse: "maintainInteractivity"}));
    }
  };
  (visibility.SliverVisibility.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let sliver = opts && 'sliver' in opts ? opts.sliver : null;
    if (sliver == null) dart.nullFailed(I[51], 302, 19, "sliver");
    let replacementSliver = opts && 'replacementSliver' in opts ? opts.replacementSliver : C[418] || CT.C418;
    if (replacementSliver == null) dart.nullFailed(I[51], 303, 10, "replacementSliver");
    let visible = opts && 'visible' in opts ? opts.visible : true;
    if (visible == null) dart.nullFailed(I[51], 304, 10, "visible");
    let maintainState = opts && 'maintainState' in opts ? opts.maintainState : false;
    if (maintainState == null) dart.nullFailed(I[51], 305, 10, "maintainState");
    let maintainAnimation = opts && 'maintainAnimation' in opts ? opts.maintainAnimation : false;
    if (maintainAnimation == null) dart.nullFailed(I[51], 306, 10, "maintainAnimation");
    let maintainSize = opts && 'maintainSize' in opts ? opts.maintainSize : false;
    if (maintainSize == null) dart.nullFailed(I[51], 307, 10, "maintainSize");
    let maintainSemantics = opts && 'maintainSemantics' in opts ? opts.maintainSemantics : false;
    if (maintainSemantics == null) dart.nullFailed(I[51], 308, 10, "maintainSemantics");
    let maintainInteractivity = opts && 'maintainInteractivity' in opts ? opts.maintainInteractivity : false;
    if (maintainInteractivity == null) dart.nullFailed(I[51], 309, 10, "maintainInteractivity");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.sliver] = sliver;
    this[S$0.replacementSliver] = replacementSliver;
    this[S$0.visible$1] = visible;
    this[S$0.maintainState$2] = maintainState;
    this[S$0.maintainAnimation$1] = maintainAnimation;
    this[S$0.maintainSize$1] = maintainSize;
    this[S$0.maintainSemantics$1] = maintainSemantics;
    this[S$0.maintainInteractivity$1] = maintainInteractivity;
    if (!(sliver != null)) dart.assertFailed(null, I[51], 310, 15, "sliver != null");
    if (!(replacementSliver != null)) dart.assertFailed(null, I[51], 311, 15, "replacementSliver != null");
    if (!(visible != null)) dart.assertFailed(null, I[51], 312, 15, "visible != null");
    if (!(maintainState != null)) dart.assertFailed(null, I[51], 313, 15, "maintainState != null");
    if (!(maintainAnimation != null)) dart.assertFailed(null, I[51], 314, 15, "maintainAnimation != null");
    if (!(maintainSize != null)) dart.assertFailed(null, I[51], 315, 15, "maintainSize != null");
    if (!(maintainSemantics != null)) dart.assertFailed(null, I[51], 316, 15, "maintainSemantics != null");
    if (!(maintainInteractivity != null)) dart.assertFailed(null, I[51], 317, 15, "maintainInteractivity != null");
    if (!(maintainState === true || maintainAnimation === false)) dart.assertFailed("Cannot maintain animations if the state is not also maintained.", I[51], 319, 10, "maintainState == true || maintainAnimation == false");
    if (!(maintainAnimation === true || maintainSize === false)) dart.assertFailed("Cannot maintain size if animations are not maintained.", I[51], 323, 10, "maintainAnimation == true || maintainSize == false");
    if (!(maintainSize === true || maintainSemantics === false)) dart.assertFailed("Cannot maintain semantics if size is not maintained.", I[51], 327, 10, "maintainSize == true || maintainSemantics == false");
    if (!(maintainSize === true || maintainInteractivity === false)) dart.assertFailed("Cannot maintain interactivity if size is not maintained.", I[51], 331, 10, "maintainSize == true || maintainInteractivity == false");
    visibility.SliverVisibility.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = visibility.SliverVisibility.prototype;
  dart.addTypeTests(visibility.SliverVisibility);
  dart.addTypeCaches(visibility.SliverVisibility);
  dart.setMethodSignature(visibility.SliverVisibility, () => ({
    __proto__: dart.getMethods(visibility.SliverVisibility.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(visibility.SliverVisibility, I[52]);
  dart.setFieldSignature(visibility.SliverVisibility, () => ({
    __proto__: dart.getFields(visibility.SliverVisibility.__proto__),
    sliver: dart.finalFieldType(framework.Widget),
    replacementSliver: dart.finalFieldType(framework.Widget),
    visible: dart.finalFieldType(core.bool),
    maintainState: dart.finalFieldType(core.bool),
    maintainAnimation: dart.finalFieldType(core.bool),
    maintainSize: dart.finalFieldType(core.bool),
    maintainSemantics: dart.finalFieldType(core.bool),
    maintainInteractivity: dart.finalFieldType(core.bool)
  }));
  transitions._AnimatedState = class _AnimatedState extends framework.State$(transitions.AnimatedWidget) {
    initState() {
      super.initState();
      this.widget.listenable.addListener(dart.bind(this, S$0._handleChange));
    }
    didUpdateWidget(oldWidget) {
      transitions.AnimatedWidget.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[18], 153, 39, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.listenable, oldWidget.listenable)) {
        oldWidget.listenable.removeListener(dart.bind(this, S$0._handleChange));
        this.widget.listenable.addListener(dart.bind(this, S$0._handleChange));
      }
    }
    dispose() {
      this.widget.listenable.removeListener(dart.bind(this, S$0._handleChange));
      super.dispose();
    }
    [S$0._handleChange]() {
      this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 174, 29, "context");
      return this.widget.build(context);
    }
  };
  (transitions._AnimatedState.new = function() {
    transitions._AnimatedState.__proto__.new.call(this);
    ;
  }).prototype = transitions._AnimatedState.prototype;
  dart.addTypeTests(transitions._AnimatedState);
  dart.addTypeCaches(transitions._AnimatedState);
  dart.setMethodSignature(transitions._AnimatedState, () => ({
    __proto__: dart.getMethods(transitions._AnimatedState.__proto__),
    [S$0._handleChange]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(transitions._AnimatedState, I[19]);
  transitions.SlideTransition = class SlideTransition extends transitions.AnimatedWidget {
    get textDirection() {
      return this[S$0.textDirection$2];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get transformHitTests() {
      return this[S$0.transformHitTests];
    }
    set transformHitTests(value) {
      super.transformHitTests = value;
    }
    get child() {
      return this[S$0.child$12];
    }
    set child(value) {
      super.child = value;
    }
    get position() {
      return T$.AnimationOfOffset().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 286, 29, "context");
      let offset = this.position.value;
      if (this.textDirection == ui.TextDirection.rtl) offset = new ui.Offset.new(-dart.notNull(offset.dx), offset.dy);
      return new basic.FractionalTranslation.new({translation: offset, transformHitTests: this.transformHitTests, child: this.child, $creationLocationd_0dea112b090073317d4: C[438] || CT.C438});
    }
  };
  (transitions.SlideTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let position = opts && 'position' in opts ? opts.position : null;
    if (position == null) dart.nullFailed(I[18], 245, 32, "position");
    let transformHitTests = opts && 'transformHitTests' in opts ? opts.transformHitTests : true;
    if (transformHitTests == null) dart.nullFailed(I[18], 246, 10, "transformHitTests");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.transformHitTests] = transformHitTests;
    this[S$0.textDirection$2] = textDirection;
    this[S$0.child$12] = child;
    if (!(position != null)) dart.assertFailed(null, I[18], 249, 15, "position != null");
    transitions.SlideTransition.__proto__.new.call(this, {key: key, listenable: position, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.SlideTransition.prototype;
  dart.addTypeTests(transitions.SlideTransition);
  dart.addTypeCaches(transitions.SlideTransition);
  dart.setMethodSignature(transitions.SlideTransition, () => ({
    __proto__: dart.getMethods(transitions.SlideTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.SlideTransition, () => ({
    __proto__: dart.getGetters(transitions.SlideTransition.__proto__),
    position: animation.Animation$(ui.Offset)
  }));
  dart.setLibraryUri(transitions.SlideTransition, I[19]);
  dart.setFieldSignature(transitions.SlideTransition, () => ({
    __proto__: dart.getFields(transitions.SlideTransition.__proto__),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    transformHitTests: dart.finalFieldType(core.bool),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  transitions.ScaleTransition = class ScaleTransition extends transitions.AnimatedWidget {
    get alignment() {
      return this[S$0.alignment];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get child() {
      return this[S$0.child$13];
    }
    set child(value) {
      super.child = value;
    }
    get scale() {
      return T$.AnimationOfdouble().as(this.listenable);
    }
    build(context) {
      let t41;
      if (context == null) dart.nullFailed(I[18], 382, 29, "context");
      let scaleValue = this.scale.value;
      let transform = (t41 = vector_math_64.Matrix4.identity(), (() => {
        t41.scale(scaleValue, scaleValue, 1.0);
        return t41;
      })());
      return new basic.Transform.new({transform: transform, alignment: this.alignment, child: this.child, $creationLocationd_0dea112b090073317d4: C[444] || CT.C444});
    }
  };
  (transitions.ScaleTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scale = opts && 'scale' in opts ? opts.scale : null;
    if (scale == null) dart.nullFailed(I[18], 357, 32, "scale");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[443] || CT.C443;
    if (alignment == null) dart.nullFailed(I[18], 358, 10, "alignment");
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.alignment] = alignment;
    this[S$0.child$13] = child;
    if (!(scale != null)) dart.assertFailed(null, I[18], 360, 15, "scale != null");
    transitions.ScaleTransition.__proto__.new.call(this, {key: key, listenable: scale, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.ScaleTransition.prototype;
  dart.addTypeTests(transitions.ScaleTransition);
  dart.addTypeCaches(transitions.ScaleTransition);
  dart.setMethodSignature(transitions.ScaleTransition, () => ({
    __proto__: dart.getMethods(transitions.ScaleTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.ScaleTransition, () => ({
    __proto__: dart.getGetters(transitions.ScaleTransition.__proto__),
    scale: animation.Animation$(core.double)
  }));
  dart.setLibraryUri(transitions.ScaleTransition, I[19]);
  dart.setFieldSignature(transitions.ScaleTransition, () => ({
    __proto__: dart.getFields(transitions.ScaleTransition.__proto__),
    alignment: dart.finalFieldType(alignment$.Alignment),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  transitions.RotationTransition = class RotationTransition extends transitions.AnimatedWidget {
    get alignment() {
      return this[S$0.alignment$1];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get child() {
      return this[S$0.child$14];
    }
    set child(value) {
      super.child = value;
    }
    get turns() {
      return T$.AnimationOfdouble().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 475, 29, "context");
      let turnsValue = this.turns.value;
      let transform = vector_math_64.Matrix4.rotationZ(dart.notNull(turnsValue) * 3.141592653589793 * 2.0);
      return new basic.Transform.new({transform: transform, alignment: this.alignment, child: this.child, $creationLocationd_0dea112b090073317d4: C[449] || CT.C449});
    }
  };
  (transitions.RotationTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let turns = opts && 'turns' in opts ? opts.turns : null;
    if (turns == null) dart.nullFailed(I[18], 450, 32, "turns");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[443] || CT.C443;
    if (alignment == null) dart.nullFailed(I[18], 451, 10, "alignment");
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.alignment$1] = alignment;
    this[S$0.child$14] = child;
    if (!(turns != null)) dart.assertFailed(null, I[18], 453, 15, "turns != null");
    transitions.RotationTransition.__proto__.new.call(this, {key: key, listenable: turns, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.RotationTransition.prototype;
  dart.addTypeTests(transitions.RotationTransition);
  dart.addTypeCaches(transitions.RotationTransition);
  dart.setMethodSignature(transitions.RotationTransition, () => ({
    __proto__: dart.getMethods(transitions.RotationTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.RotationTransition, () => ({
    __proto__: dart.getGetters(transitions.RotationTransition.__proto__),
    turns: animation.Animation$(core.double)
  }));
  dart.setLibraryUri(transitions.RotationTransition, I[19]);
  dart.setFieldSignature(transitions.RotationTransition, () => ({
    __proto__: dart.getFields(transitions.RotationTransition.__proto__),
    alignment: dart.finalFieldType(alignment$.Alignment),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  transitions.SizeTransition = class SizeTransition extends transitions.AnimatedWidget {
    get axis() {
      return this[S$0.axis];
    }
    set axis(value) {
      super.axis = value;
    }
    get axisAlignment() {
      return this[S$0.axisAlignment];
    }
    set axisAlignment(value) {
      super.axisAlignment = value;
    }
    get child() {
      return this[S$0.child$15];
    }
    set child(value) {
      super.child = value;
    }
    get sizeFactor() {
      return T$.AnimationOfdouble().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 601, 29, "context");
      let alignment = null;
      if (this.axis == basic_types.Axis.vertical)
        alignment = new alignment$.AlignmentDirectional.new(-1.0, this.axisAlignment);
      else
        alignment = new alignment$.AlignmentDirectional.new(this.axisAlignment, -1.0);
      return new basic.ClipRect.new({child: new basic.Align.new({alignment: alignment, heightFactor: this.axis == basic_types.Axis.vertical ? math.max(core.double, this.sizeFactor.value, 0.0) : null, widthFactor: this.axis == basic_types.Axis.horizontal ? math.max(core.double, this.sizeFactor.value, 0.0) : null, child: this.child, $creationLocationd_0dea112b090073317d4: C[455] || CT.C455}), $creationLocationd_0dea112b090073317d4: C[461] || CT.C461});
    }
  };
  (transitions.SizeTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let axis = opts && 'axis' in opts ? opts.axis : C[454] || CT.C454;
    if (axis == null) dart.nullFailed(I[18], 559, 10, "axis");
    let sizeFactor = opts && 'sizeFactor' in opts ? opts.sizeFactor : null;
    if (sizeFactor == null) dart.nullFailed(I[18], 560, 32, "sizeFactor");
    let axisAlignment = opts && 'axisAlignment' in opts ? opts.axisAlignment : 0;
    if (axisAlignment == null) dart.nullFailed(I[18], 561, 10, "axisAlignment");
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.axis] = axis;
    this[S$0.axisAlignment] = axisAlignment;
    this[S$0.child$15] = child;
    if (!(axis != null)) dart.assertFailed(null, I[18], 563, 15, "axis != null");
    if (!(sizeFactor != null)) dart.assertFailed(null, I[18], 564, 15, "sizeFactor != null");
    if (!(axisAlignment != null)) dart.assertFailed(null, I[18], 565, 15, "axisAlignment != null");
    transitions.SizeTransition.__proto__.new.call(this, {key: key, listenable: sizeFactor, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.SizeTransition.prototype;
  dart.addTypeTests(transitions.SizeTransition);
  dart.addTypeCaches(transitions.SizeTransition);
  dart.setMethodSignature(transitions.SizeTransition, () => ({
    __proto__: dart.getMethods(transitions.SizeTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.SizeTransition, () => ({
    __proto__: dart.getGetters(transitions.SizeTransition.__proto__),
    sizeFactor: animation.Animation$(core.double)
  }));
  dart.setLibraryUri(transitions.SizeTransition, I[19]);
  dart.setFieldSignature(transitions.SizeTransition, () => ({
    __proto__: dart.getFields(transitions.SizeTransition.__proto__),
    axis: dart.finalFieldType(basic_types.Axis),
    axisAlignment: dart.finalFieldType(core.double),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  framework.SingleChildRenderObjectWidget = class SingleChildRenderObjectWidget extends framework.RenderObjectWidget {
    get child() {
      return this[S$0.child$16];
    }
    set child(value) {
      super.child = value;
    }
    createElement() {
      return new framework.SingleChildRenderObjectElement.new(this);
    }
  };
  (framework.SingleChildRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.child$16] = child;
    framework.SingleChildRenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = framework.SingleChildRenderObjectWidget.prototype;
  dart.addTypeTests(framework.SingleChildRenderObjectWidget);
  dart.addTypeCaches(framework.SingleChildRenderObjectWidget);
  dart.setMethodSignature(framework.SingleChildRenderObjectWidget, () => ({
    __proto__: dart.getMethods(framework.SingleChildRenderObjectWidget.__proto__),
    createElement: dart.fnType(framework.SingleChildRenderObjectElement, [])
  }));
  dart.setLibraryUri(framework.SingleChildRenderObjectWidget, I[5]);
  dart.setFieldSignature(framework.SingleChildRenderObjectWidget, () => ({
    __proto__: dart.getFields(framework.SingleChildRenderObjectWidget.__proto__),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  transitions.FadeTransition = class FadeTransition extends framework.SingleChildRenderObjectWidget {
    get opacity() {
      return this[S$0.opacity];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get alwaysIncludeSemantics() {
      return this[S$0.alwaysIncludeSemantics];
    }
    set alwaysIncludeSemantics(value) {
      super.alwaysIncludeSemantics = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[18], 701, 57, "context");
      return new proxy_box.RenderAnimatedOpacity.new({opacity: this.opacity, alwaysIncludeSemantics: this.alwaysIncludeSemantics});
    }
    updateRenderObject(context, renderObject) {
      let t41;
      if (context == null) dart.nullFailed(I[18], 709, 40, "context");
      proxy_box.RenderAnimatedOpacity.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[18], 709, 71, "renderObject");
      t41 = renderObject;
      (() => {
        t41.opacity = this.opacity;
        t41.alwaysIncludeSemantics = this.alwaysIncludeSemantics;
        return t41;
      })();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[18], 716, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfAnimationOfdouble()).new("opacity", this.opacity));
      properties.add(new diagnostics$.FlagProperty.new("alwaysIncludeSemantics", {value: this.alwaysIncludeSemantics, ifTrue: "alwaysIncludeSemantics"}));
    }
  };
  (transitions.FadeTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    if (opacity == null) dart.nullFailed(I[18], 676, 19, "opacity");
    let alwaysIncludeSemantics = opts && 'alwaysIncludeSemantics' in opts ? opts.alwaysIncludeSemantics : false;
    if (alwaysIncludeSemantics == null) dart.nullFailed(I[18], 677, 10, "alwaysIncludeSemantics");
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.opacity] = opacity;
    this[S$0.alwaysIncludeSemantics] = alwaysIncludeSemantics;
    if (!(opacity != null)) dart.assertFailed(null, I[18], 679, 15, "opacity != null");
    transitions.FadeTransition.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.FadeTransition.prototype;
  dart.addTypeTests(transitions.FadeTransition);
  dart.addTypeCaches(transitions.FadeTransition);
  dart.setMethodSignature(transitions.FadeTransition, () => ({
    __proto__: dart.getMethods(transitions.FadeTransition.__proto__),
    createRenderObject: dart.fnType(proxy_box.RenderAnimatedOpacity, [framework.BuildContext])
  }));
  dart.setLibraryUri(transitions.FadeTransition, I[19]);
  dart.setFieldSignature(transitions.FadeTransition, () => ({
    __proto__: dart.getFields(transitions.FadeTransition.__proto__),
    opacity: dart.finalFieldType(animation.Animation$(core.double)),
    alwaysIncludeSemantics: dart.finalFieldType(core.bool)
  }));
  transitions.SliverFadeTransition = class SliverFadeTransition extends framework.SingleChildRenderObjectWidget {
    get opacity() {
      return this[S$0.opacity$1];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get alwaysIncludeSemantics() {
      return this[S$0.alwaysIncludeSemantics$1];
    }
    set alwaysIncludeSemantics(value) {
      super.alwaysIncludeSemantics = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[18], 820, 63, "context");
      return new proxy_sliver.RenderSliverAnimatedOpacity.new({opacity: this.opacity, alwaysIncludeSemantics: this.alwaysIncludeSemantics});
    }
    updateRenderObject(context, renderObject) {
      let t41;
      if (context == null) dart.nullFailed(I[18], 828, 40, "context");
      proxy_sliver.RenderSliverAnimatedOpacity.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[18], 828, 77, "renderObject");
      t41 = renderObject;
      (() => {
        t41.opacity = this.opacity;
        t41.alwaysIncludeSemantics = this.alwaysIncludeSemantics;
        return t41;
      })();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[18], 835, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfAnimationOfdouble()).new("opacity", this.opacity));
      properties.add(new diagnostics$.FlagProperty.new("alwaysIncludeSemantics", {value: this.alwaysIncludeSemantics, ifTrue: "alwaysIncludeSemantics"}));
    }
  };
  (transitions.SliverFadeTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    if (opacity == null) dart.nullFailed(I[18], 795, 19, "opacity");
    let alwaysIncludeSemantics = opts && 'alwaysIncludeSemantics' in opts ? opts.alwaysIncludeSemantics : false;
    if (alwaysIncludeSemantics == null) dart.nullFailed(I[18], 796, 10, "alwaysIncludeSemantics");
    let sliver = opts && 'sliver' in opts ? opts.sliver : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.opacity$1] = opacity;
    this[S$0.alwaysIncludeSemantics$1] = alwaysIncludeSemantics;
    if (!(opacity != null)) dart.assertFailed(null, I[18], 798, 15, "opacity != null");
    transitions.SliverFadeTransition.__proto__.new.call(this, {key: key, child: sliver, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.SliverFadeTransition.prototype;
  dart.addTypeTests(transitions.SliverFadeTransition);
  dart.addTypeCaches(transitions.SliverFadeTransition);
  dart.setMethodSignature(transitions.SliverFadeTransition, () => ({
    __proto__: dart.getMethods(transitions.SliverFadeTransition.__proto__),
    createRenderObject: dart.fnType(proxy_sliver.RenderSliverAnimatedOpacity, [framework.BuildContext])
  }));
  dart.setLibraryUri(transitions.SliverFadeTransition, I[19]);
  dart.setFieldSignature(transitions.SliverFadeTransition, () => ({
    __proto__: dart.getFields(transitions.SliverFadeTransition.__proto__),
    opacity: dart.finalFieldType(animation.Animation$(core.double)),
    alwaysIncludeSemantics: dart.finalFieldType(core.bool)
  }));
  transitions.RelativeRectTween = class RelativeRectTween extends tween.Tween$(stack.RelativeRect) {
    lerp(t) {
      if (t == null) dart.nullFailed(I[18], 858, 28, "t");
      return dart.nullCheck(stack.RelativeRect.lerp(this.begin, this.end, t));
    }
  };
  (transitions.RelativeRectTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    transitions.RelativeRectTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = transitions.RelativeRectTween.prototype;
  dart.addTypeTests(transitions.RelativeRectTween);
  dart.addTypeCaches(transitions.RelativeRectTween);
  dart.setLibraryUri(transitions.RelativeRectTween, I[19]);
  transitions.PositionedTransition = class PositionedTransition extends transitions.AnimatedWidget {
    get child() {
      return this[S$0.child$17];
    }
    set child(value) {
      super.child = value;
    }
    get rect() {
      return T$.AnimationOfRelativeRect().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 953, 29, "context");
      return new basic.Positioned.fromRelativeRect({rect: this.rect.value, child: this.child, $creationLocationd_0dea112b090073317d4: C[464] || CT.C464});
    }
  };
  (transitions.PositionedTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[18], 939, 38, "rect");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[18], 940, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.child$17] = child;
    if (!(rect != null)) dart.assertFailed(null, I[18], 941, 15, "rect != null");
    transitions.PositionedTransition.__proto__.new.call(this, {key: key, listenable: rect, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.PositionedTransition.prototype;
  dart.addTypeTests(transitions.PositionedTransition);
  dart.addTypeCaches(transitions.PositionedTransition);
  dart.setMethodSignature(transitions.PositionedTransition, () => ({
    __proto__: dart.getMethods(transitions.PositionedTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.PositionedTransition, () => ({
    __proto__: dart.getGetters(transitions.PositionedTransition.__proto__),
    rect: animation.Animation$(stack.RelativeRect)
  }));
  dart.setLibraryUri(transitions.PositionedTransition, I[19]);
  dart.setFieldSignature(transitions.PositionedTransition, () => ({
    __proto__: dart.getFields(transitions.PositionedTransition.__proto__),
    child: dart.finalFieldType(framework.Widget)
  }));
  transitions.RelativePositionedTransition = class RelativePositionedTransition extends transitions.AnimatedWidget {
    get size() {
      return this[S$0.size];
    }
    set size(value) {
      super.size = value;
    }
    get child() {
      return this[S$0.child$18];
    }
    set child(value) {
      super.child = value;
    }
    get rect() {
      return T$.AnimationOfRect().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 1066, 29, "context");
      let offsets = stack.RelativeRect.fromSize(this.rect.value, this.size);
      return new basic.Positioned.new({top: offsets.top, right: offsets.right, bottom: offsets.bottom, left: offsets.left, child: this.child, $creationLocationd_0dea112b090073317d4: C[468] || CT.C468});
    }
  };
  (transitions.RelativePositionedTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    if (rect == null) dart.nullFailed(I[18], 1040, 30, "rect");
    let size = opts && 'size' in opts ? opts.size : null;
    if (size == null) dart.nullFailed(I[18], 1041, 19, "size");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[18], 1042, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.size] = size;
    this[S$0.child$18] = child;
    if (!(rect != null)) dart.assertFailed(null, I[18], 1043, 15, "rect != null");
    if (!(size != null)) dart.assertFailed(null, I[18], 1044, 15, "size != null");
    if (!(child != null)) dart.assertFailed(null, I[18], 1045, 15, "child != null");
    transitions.RelativePositionedTransition.__proto__.new.call(this, {key: key, listenable: rect, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.RelativePositionedTransition.prototype;
  dart.addTypeTests(transitions.RelativePositionedTransition);
  dart.addTypeCaches(transitions.RelativePositionedTransition);
  dart.setMethodSignature(transitions.RelativePositionedTransition, () => ({
    __proto__: dart.getMethods(transitions.RelativePositionedTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.RelativePositionedTransition, () => ({
    __proto__: dart.getGetters(transitions.RelativePositionedTransition.__proto__),
    rect: animation.Animation$(ui.Rect)
  }));
  dart.setLibraryUri(transitions.RelativePositionedTransition, I[19]);
  dart.setFieldSignature(transitions.RelativePositionedTransition, () => ({
    __proto__: dart.getFields(transitions.RelativePositionedTransition.__proto__),
    size: dart.finalFieldType(ui.Size),
    child: dart.finalFieldType(framework.Widget)
  }));
  transitions.DecoratedBoxTransition = class DecoratedBoxTransition extends transitions.AnimatedWidget {
    get decoration() {
      return this[S$0.decoration$1];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get position() {
      return this[S$0.position];
    }
    set position(value) {
      super.position = value;
    }
    get child() {
      return this[S$0.child$19];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 1185, 29, "context");
      return new container.DecoratedBox.new({decoration: this.decoration.value, position: this.position, child: this.child, $creationLocationd_0dea112b090073317d4: C[476] || CT.C476});
    }
  };
  (transitions.DecoratedBoxTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    if (decoration == null) dart.nullFailed(I[18], 1163, 19, "decoration");
    let position = opts && 'position' in opts ? opts.position : C[475] || CT.C475;
    if (position == null) dart.nullFailed(I[18], 1164, 10, "position");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[18], 1165, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.decoration$1] = decoration;
    this[S$0.position] = position;
    this[S$0.child$19] = child;
    if (!(decoration != null)) dart.assertFailed(null, I[18], 1166, 15, "decoration != null");
    if (!(child != null)) dart.assertFailed(null, I[18], 1167, 15, "child != null");
    transitions.DecoratedBoxTransition.__proto__.new.call(this, {key: key, listenable: decoration, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.DecoratedBoxTransition.prototype;
  dart.addTypeTests(transitions.DecoratedBoxTransition);
  dart.addTypeCaches(transitions.DecoratedBoxTransition);
  dart.setMethodSignature(transitions.DecoratedBoxTransition, () => ({
    __proto__: dart.getMethods(transitions.DecoratedBoxTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(transitions.DecoratedBoxTransition, I[19]);
  dart.setFieldSignature(transitions.DecoratedBoxTransition, () => ({
    __proto__: dart.getFields(transitions.DecoratedBoxTransition.__proto__),
    decoration: dart.finalFieldType(animation.Animation$(decoration.Decoration)),
    position: dart.finalFieldType(proxy_box.DecorationPosition),
    child: dart.finalFieldType(framework.Widget)
  }));
  transitions.AlignTransition = class AlignTransition extends transitions.AnimatedWidget {
    get widthFactor() {
      return this[S$0.widthFactor];
    }
    set widthFactor(value) {
      super.widthFactor = value;
    }
    get heightFactor() {
      return this[S$0.heightFactor];
    }
    set heightFactor(value) {
      super.heightFactor = value;
    }
    get child() {
      return this[S$0.child$20];
    }
    set child(value) {
      super.child = value;
    }
    get alignment() {
      return T$.AnimationOfAlignmentGeometry().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 1246, 29, "context");
      return new basic.Align.new({alignment: this.alignment.value, widthFactor: this.widthFactor, heightFactor: this.heightFactor, child: this.child, $creationLocationd_0dea112b090073317d4: C[481] || CT.C481});
    }
  };
  (transitions.AlignTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    if (alignment == null) dart.nullFailed(I[18], 1223, 43, "alignment");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[18], 1224, 19, "child");
    let widthFactor = opts && 'widthFactor' in opts ? opts.widthFactor : null;
    let heightFactor = opts && 'heightFactor' in opts ? opts.heightFactor : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.child$20] = child;
    this[S$0.widthFactor] = widthFactor;
    this[S$0.heightFactor] = heightFactor;
    if (!(alignment != null)) dart.assertFailed(null, I[18], 1227, 15, "alignment != null");
    if (!(child != null)) dart.assertFailed(null, I[18], 1228, 15, "child != null");
    transitions.AlignTransition.__proto__.new.call(this, {key: key, listenable: alignment, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.AlignTransition.prototype;
  dart.addTypeTests(transitions.AlignTransition);
  dart.addTypeCaches(transitions.AlignTransition);
  dart.setMethodSignature(transitions.AlignTransition, () => ({
    __proto__: dart.getMethods(transitions.AlignTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.AlignTransition, () => ({
    __proto__: dart.getGetters(transitions.AlignTransition.__proto__),
    alignment: animation.Animation$(alignment$.AlignmentGeometry)
  }));
  dart.setLibraryUri(transitions.AlignTransition, I[19]);
  dart.setFieldSignature(transitions.AlignTransition, () => ({
    __proto__: dart.getFields(transitions.AlignTransition.__proto__),
    widthFactor: dart.finalFieldType(dart.nullable(core.double)),
    heightFactor: dart.finalFieldType(dart.nullable(core.double)),
    child: dart.finalFieldType(framework.Widget)
  }));
  transitions.DefaultTextStyleTransition = class DefaultTextStyleTransition extends transitions.AnimatedWidget {
    get textAlign() {
      return this[S$0.textAlign];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[S$0.softWrap];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get overflow() {
      return this[S$0.overflow];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get maxLines() {
      return this[S$0.maxLines];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get child() {
      return this[S$0.child$21];
    }
    set child(value) {
      super.child = value;
    }
    get style() {
      return T$.AnimationOfTextStyle().as(this.listenable);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[18], 1351, 29, "context");
      return new text.DefaultTextStyle.new({style: this.style.value, textAlign: this.textAlign, softWrap: this.softWrap, overflow: this.overflow, maxLines: this.maxLines, child: this.child, $creationLocationd_0dea112b090073317d4: C[488] || CT.C488});
    }
  };
  (transitions.DefaultTextStyleTransition.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let style = opts && 'style' in opts ? opts.style : null;
    if (style == null) dart.nullFailed(I[18], 1315, 35, "style");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[18], 1316, 19, "child");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    if (softWrap == null) dart.nullFailed(I[18], 1318, 10, "softWrap");
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[487] || CT.C487;
    if (overflow == null) dart.nullFailed(I[18], 1319, 10, "overflow");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.child$21] = child;
    this[S$0.textAlign] = textAlign;
    this[S$0.softWrap] = softWrap;
    this[S$0.overflow] = overflow;
    this[S$0.maxLines] = maxLines;
    if (!(style != null)) dart.assertFailed(null, I[18], 1321, 15, "style != null");
    if (!(child != null)) dart.assertFailed(null, I[18], 1322, 15, "child != null");
    transitions.DefaultTextStyleTransition.__proto__.new.call(this, {key: key, listenable: style, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.DefaultTextStyleTransition.prototype;
  dart.addTypeTests(transitions.DefaultTextStyleTransition);
  dart.addTypeCaches(transitions.DefaultTextStyleTransition);
  dart.setMethodSignature(transitions.DefaultTextStyleTransition, () => ({
    __proto__: dart.getMethods(transitions.DefaultTextStyleTransition.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(transitions.DefaultTextStyleTransition, () => ({
    __proto__: dart.getGetters(transitions.DefaultTextStyleTransition.__proto__),
    style: animation.Animation$(text_style.TextStyle)
  }));
  dart.setLibraryUri(transitions.DefaultTextStyleTransition, I[19]);
  dart.setFieldSignature(transitions.DefaultTextStyleTransition, () => ({
    __proto__: dart.getFields(transitions.DefaultTextStyleTransition.__proto__),
    textAlign: dart.finalFieldType(dart.nullable(ui.TextAlign)),
    softWrap: dart.finalFieldType(core.bool),
    overflow: dart.finalFieldType(paragraph.TextOverflow),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    child: dart.finalFieldType(framework.Widget)
  }));
  transitions.AnimatedBuilder = class AnimatedBuilder extends transitions.AnimatedWidget {
    get builder() {
      return this[S$0.builder];
    }
    set builder(value) {
      super.builder = value;
    }
    get child() {
      return this[S$0.child$22];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      let t42, t41;
      if (context == null) dart.nullFailed(I[18], 1467, 29, "context");
      t41 = context;
      t42 = this.child;
      return this.builder(t41, t42);
    }
  };
  (transitions.AnimatedBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let animation = opts && 'animation' in opts ? opts.animation : null;
    if (animation == null) dart.nullFailed(I[18], 1442, 25, "animation");
    let builder = opts && 'builder' in opts ? opts.builder : null;
    if (builder == null) dart.nullFailed(I[18], 1443, 19, "builder");
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.builder] = builder;
    this[S$0.child$22] = child;
    if (!(animation != null)) dart.assertFailed(null, I[18], 1445, 15, "animation != null");
    if (!(builder != null)) dart.assertFailed(null, I[18], 1446, 15, "builder != null");
    transitions.AnimatedBuilder.__proto__.new.call(this, {key: key, listenable: animation, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = transitions.AnimatedBuilder.prototype;
  dart.addTypeTests(transitions.AnimatedBuilder);
  dart.addTypeCaches(transitions.AnimatedBuilder);
  dart.setMethodSignature(transitions.AnimatedBuilder, () => ({
    __proto__: dart.getMethods(transitions.AnimatedBuilder.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(transitions.AnimatedBuilder, I[19]);
  dart.setFieldSignature(transitions.AnimatedBuilder, () => ({
    __proto__: dart.getFields(transitions.AnimatedBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)])),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  overlay$.OverlayEntry = class OverlayEntry extends change_notifier.ChangeNotifier {
    get builder() {
      return this[S$0.builder$1];
    }
    set builder(value) {
      super.builder = value;
    }
    get opaque() {
      return this[S$0._opaque];
    }
    set opaque(value) {
      let t41;
      if (value == null) dart.nullFailed(I[53], 88, 19, "value");
      if (this[S$0._opaque] == value) return;
      this[S$0._opaque] = value;
      t41 = this[S$0._overlay];
      t41 == null ? null : t41[S$0._didChangeEntryOpacity]();
    }
    get maintainState() {
      return this[S$0._maintainState];
    }
    set maintainState(value) {
      if (value == null) dart.nullFailed(I[53], 111, 26, "value");
      if (!(this[S$0._maintainState] != null)) dart.assertFailed(null, I[53], 112, 12, "_maintainState != null");
      if (this[S$0._maintainState] == value) return;
      this[S$0._maintainState] = value;
      if (!(this[S$0._overlay] != null)) dart.assertFailed(null, I[53], 116, 12, "_overlay != null");
      dart.nullCheck(this[S$0._overlay])[S$0._didChangeEntryOpacity]();
    }
    get mounted() {
      return this[S$0._mounted];
    }
    [S$0._updateMounted](value) {
      if (value == null) dart.nullFailed(I[53], 125, 28, "value");
      if (value == this[S$0._mounted]) {
        return;
      }
      this[S$0._mounted] = value;
      this.notifyListeners();
    }
    remove() {
      if (!(this[S$0._overlay] != null)) dart.assertFailed(null, I[53], 147, 12, "_overlay != null");
      let overlay = dart.nullCheck(this[S$0._overlay]);
      this[S$0._overlay] = null;
      if (!dart.test(overlay.mounted)) return;
      overlay[S$0._entries][S$.$remove](this);
      if (dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase == binding$.SchedulerPhase.persistentCallbacks) {
        dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.fn(duration => {
          if (duration == null) dart.nullFailed(I[53], 155, 65, "duration");
          overlay[S$0._markDirty]();
        }, T$.DurationTovoid()));
      } else {
        overlay[S$0._markDirty]();
      }
    }
    markNeedsBuild() {
      let t41;
      t41 = this[S$0._key$1].currentState;
      t41 == null ? null : t41[S$0._markNeedsBuild]();
    }
    toString() {
      return dart.str(diagnostics$.describeIdentity(this)) + "(opaque: " + dart.str(this.opaque) + "; maintainState: " + dart.str(this.maintainState) + ")";
    }
  };
  (overlay$.OverlayEntry.new = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    if (builder == null) dart.nullFailed(I[53], 65, 19, "builder");
    let opaque = opts && 'opaque' in opts ? opts.opaque : false;
    if (opaque == null) dart.nullFailed(I[53], 66, 10, "opaque");
    let maintainState = opts && 'maintainState' in opts ? opts.maintainState : false;
    if (maintainState == null) dart.nullFailed(I[53], 67, 10, "maintainState");
    this[S$0._mounted] = false;
    this[S$0._overlay] = null;
    this[S$0._key$1] = T$.GlobalKeyOf_OverlayEntryWidgetState().new();
    this[S$0.builder$1] = builder;
    if (!(builder != null)) dart.assertFailed(null, I[53], 68, 15, "builder != null");
    if (!(opaque != null)) dart.assertFailed(null, I[53], 69, 15, "opaque != null");
    if (!(maintainState != null)) dart.assertFailed(null, I[53], 70, 15, "maintainState != null");
    this[S$0._opaque] = opaque;
    this[S$0._maintainState] = maintainState;
    overlay$.OverlayEntry.__proto__.new.call(this);
    ;
  }).prototype = overlay$.OverlayEntry.prototype;
  dart.addTypeTests(overlay$.OverlayEntry);
  dart.addTypeCaches(overlay$.OverlayEntry);
  dart.setMethodSignature(overlay$.OverlayEntry, () => ({
    __proto__: dart.getMethods(overlay$.OverlayEntry.__proto__),
    [S$0._updateMounted]: dart.fnType(dart.void, [core.bool]),
    remove: dart.fnType(dart.void, []),
    markNeedsBuild: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(overlay$.OverlayEntry, () => ({
    __proto__: dart.getGetters(overlay$.OverlayEntry.__proto__),
    opaque: core.bool,
    maintainState: core.bool,
    mounted: core.bool
  }));
  dart.setSetterSignature(overlay$.OverlayEntry, () => ({
    __proto__: dart.getSetters(overlay$.OverlayEntry.__proto__),
    opaque: core.bool,
    maintainState: core.bool
  }));
  dart.setLibraryUri(overlay$.OverlayEntry, I[54]);
  dart.setFieldSignature(overlay$.OverlayEntry, () => ({
    __proto__: dart.getFields(overlay$.OverlayEntry.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext])),
    [S$0._opaque]: dart.fieldType(core.bool),
    [S$0._maintainState]: dart.fieldType(core.bool),
    [S$0._mounted]: dart.fieldType(core.bool),
    [S$0._overlay]: dart.fieldType(dart.nullable(overlay$.OverlayState)),
    [S$0._key$1]: dart.finalFieldType(framework.GlobalKey$(overlay$._OverlayEntryWidgetState))
  }));
  dart.defineExtensionMethods(overlay$.OverlayEntry, ['toString']);
  overlay$._OverlayEntryWidget = class _OverlayEntryWidget extends framework.StatefulWidget {
    get entry() {
      return this[S$0.entry];
    }
    set entry(value) {
      super.entry = value;
    }
    get tickerEnabled() {
      return this[S$0.tickerEnabled];
    }
    set tickerEnabled(value) {
      super.tickerEnabled = value;
    }
    createState() {
      return new overlay$._OverlayEntryWidgetState.new();
    }
  };
  (overlay$._OverlayEntryWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    if (key == null) dart.nullFailed(I[53], 176, 18, "key");
    let entry = opts && 'entry' in opts ? opts.entry : null;
    if (entry == null) dart.nullFailed(I[53], 177, 19, "entry");
    let tickerEnabled = opts && 'tickerEnabled' in opts ? opts.tickerEnabled : true;
    if (tickerEnabled == null) dart.nullFailed(I[53], 178, 10, "tickerEnabled");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.entry] = entry;
    this[S$0.tickerEnabled] = tickerEnabled;
    if (!(key != null)) dart.assertFailed(null, I[53], 179, 15, "key != null");
    if (!(entry != null)) dart.assertFailed(null, I[53], 180, 15, "entry != null");
    if (!(tickerEnabled != null)) dart.assertFailed(null, I[53], 181, 15, "tickerEnabled != null");
    overlay$._OverlayEntryWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay$._OverlayEntryWidget.prototype;
  dart.addTypeTests(overlay$._OverlayEntryWidget);
  dart.addTypeCaches(overlay$._OverlayEntryWidget);
  dart.setMethodSignature(overlay$._OverlayEntryWidget, () => ({
    __proto__: dart.getMethods(overlay$._OverlayEntryWidget.__proto__),
    createState: dart.fnType(overlay$._OverlayEntryWidgetState, [])
  }));
  dart.setLibraryUri(overlay$._OverlayEntryWidget, I[54]);
  dart.setFieldSignature(overlay$._OverlayEntryWidget, () => ({
    __proto__: dart.getFields(overlay$._OverlayEntryWidget.__proto__),
    entry: dart.finalFieldType(overlay$.OverlayEntry),
    tickerEnabled: dart.finalFieldType(core.bool)
  }));
  overlay$._OverlayEntryWidgetState = class _OverlayEntryWidgetState extends framework.State$(overlay$._OverlayEntryWidget) {
    initState() {
      super.initState();
      this.widget.entry[S$0._updateMounted](true);
    }
    dispose() {
      this.widget.entry[S$0._updateMounted](false);
      super.dispose();
    }
    build(context) {
      let t42, t41;
      if (context == null) dart.nullFailed(I[53], 205, 29, "context");
      return new ticker_provider.TickerMode.new({enabled: this.widget.tickerEnabled, child: (t41 = this.widget.entry, t42 = context, t41.builder(t42)), $creationLocationd_0dea112b090073317d4: C[496] || CT.C496});
    }
    [S$0._markNeedsBuild]() {
      this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
  };
  (overlay$._OverlayEntryWidgetState.new = function() {
    overlay$._OverlayEntryWidgetState.__proto__.new.call(this);
    ;
  }).prototype = overlay$._OverlayEntryWidgetState.prototype;
  dart.addTypeTests(overlay$._OverlayEntryWidgetState);
  dart.addTypeCaches(overlay$._OverlayEntryWidgetState);
  dart.setMethodSignature(overlay$._OverlayEntryWidgetState, () => ({
    __proto__: dart.getMethods(overlay$._OverlayEntryWidgetState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [S$0._markNeedsBuild]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(overlay$._OverlayEntryWidgetState, I[54]);
  overlay$.Overlay = class Overlay extends framework.StatefulWidget {
    get initialEntries() {
      return this[S$0.initialEntries];
    }
    set initialEntries(value) {
      super.initialEntries = value;
    }
    get clipBehavior() {
      return this[S$0.clipBehavior];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    static of(context, opts) {
      if (context == null) dart.nullFailed(I[53], 288, 18, "context");
      let rootOverlay = opts && 'rootOverlay' in opts ? opts.rootOverlay : false;
      if (rootOverlay == null) dart.nullFailed(I[53], 289, 10, "rootOverlay");
      let debugRequiredFor = opts && 'debugRequiredFor' in opts ? opts.debugRequiredFor : null;
      let result = dart.test(rootOverlay) ? context.findRootAncestorStateOfType(overlay$.OverlayState) : context.findAncestorStateOfType(overlay$.OverlayState);
      if (!dart.test(dart.fn(() => {
        if (debugRequiredFor != null && result == null) {
          let information = (() => {
            let t41 = T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("No Overlay widget found."), new assertions.ErrorDescription.new(dart.str(dart.runtimeType(debugRequiredFor)) + " widgets require an Overlay widget ancestor for correct operation."), new assertions.ErrorHint.new("The most common way to add an Overlay to an application is to include a MaterialApp or Navigator widget in the runApp() call."), new (T$.DiagnosticsPropertyOfWidget()).new("The specific widget that failed to find an overlay was", debugRequiredFor, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty})]);
            if (!dart.equals(context.widget, debugRequiredFor)) t41[S$.$add](context.describeElement("The context from which that widget was searching for an overlay was"));
            return t41;
          })();
          dart.throw(new assertions.FlutterError.fromParts(information));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[53], 295, 12, "() {\r\n      if (debugRequiredFor != null && result == null) {\r\n        final List<DiagnosticsNode> information = <DiagnosticsNode>[\r\n          ErrorSummary('No Overlay widget found.'),\r\n          ErrorDescription('${debugRequiredFor.runtimeType} widgets require an Overlay widget ancestor for correct operation.'),\r\n          ErrorHint('The most common way to add an Overlay to an application is to include a MaterialApp or Navigator widget in the runApp() call.'),\r\n          DiagnosticsProperty<Widget>('The specific widget that failed to find an overlay was', debugRequiredFor, style: DiagnosticsTreeStyle.errorProperty),\r\n          if (context.widget != debugRequiredFor)\r\n            context.describeElement('The context from which that widget was searching for an overlay was'),\r\n        ];\r\n\r\n        throw FlutterError.fromParts(information);\r\n      }\r\n      return true;\r\n    }()");
      return result;
    }
    createState() {
      return new overlay$.OverlayState.new();
    }
  };
  (overlay$.Overlay.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let initialEntries = opts && 'initialEntries' in opts ? opts.initialEntries : C[133] || CT.C133;
    if (initialEntries == null) dart.nullFailed(I[53], 244, 10, "initialEntries");
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[500] || CT.C500;
    if (clipBehavior == null) dart.nullFailed(I[53], 245, 10, "clipBehavior");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.initialEntries] = initialEntries;
    this[S$0.clipBehavior] = clipBehavior;
    if (!(initialEntries != null)) dart.assertFailed(null, I[53], 246, 15, "initialEntries != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[53], 247, 15, "clipBehavior != null");
    overlay$.Overlay.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay$.Overlay.prototype;
  dart.addTypeTests(overlay$.Overlay);
  dart.addTypeCaches(overlay$.Overlay);
  dart.setMethodSignature(overlay$.Overlay, () => ({
    __proto__: dart.getMethods(overlay$.Overlay.__proto__),
    createState: dart.fnType(overlay$.OverlayState, [])
  }));
  dart.setLibraryUri(overlay$.Overlay, I[54]);
  dart.setFieldSignature(overlay$.Overlay, () => ({
    __proto__: dart.getFields(overlay$.Overlay.__proto__),
    initialEntries: dart.finalFieldType(core.List$(overlay$.OverlayEntry)),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  const State_TickerProviderStateMixin$36$ = class State_TickerProviderStateMixin extends framework.State$(overlay$.Overlay) {};
  (State_TickerProviderStateMixin$36$.new = function() {
    ticker_provider.TickerProviderStateMixin$(overlay$.Overlay)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$, ticker_provider.TickerProviderStateMixin$(overlay$.Overlay));
  overlay$.OverlayState = class OverlayState extends State_TickerProviderStateMixin$36$ {
    initState() {
      super.initState();
      this.insertAll(this.widget.initialEntries);
    }
    [S$0._insertionIndex](below, above) {
      if (!(above == null || below == null)) dart.assertFailed(null, I[53], 331, 12, "above == null || below == null");
      if (below != null) return this[S$0._entries][S$.$indexOf](below);
      if (above != null) return dart.notNull(this[S$0._entries][S$.$indexOf](above)) + 1;
      return this[S$0._entries][S$.$length];
    }
    insert(entry, opts) {
      if (entry == null) dart.nullFailed(I[53], 346, 28, "entry");
      let below = opts && 'below' in opts ? opts.below : null;
      let above = opts && 'above' in opts ? opts.above : null;
      if (!dart.test(this[S$0._debugVerifyInsertPosition](above, below))) dart.assertFailed(null, I[53], 347, 12, "_debugVerifyInsertPosition(above, below)");
      if (!!dart.test(this[S$0._entries][S$.$contains](entry))) dart.assertFailed("The specified entry is already present in the Overlay.", I[53], 348, 12, "!_entries.contains(entry)");
      if (!(entry[S$0._overlay] == null)) dart.assertFailed("The specified entry is already present in another Overlay.", I[53], 349, 12, "entry._overlay == null");
      entry[S$0._overlay] = this;
      this.setState(dart.fn(() => {
        this[S$0._entries][S$.$insert](this[S$0._insertionIndex](below, above), entry);
      }, T$.VoidTovoid()));
    }
    insertAll(entries, opts) {
      if (entries == null) dart.nullFailed(I[53], 363, 41, "entries");
      let below = opts && 'below' in opts ? opts.below : null;
      let above = opts && 'above' in opts ? opts.above : null;
      if (!dart.test(this[S$0._debugVerifyInsertPosition](above, below))) dart.assertFailed(null, I[53], 364, 12, "_debugVerifyInsertPosition(above, below)");
      if (!dart.test(entries[S$.$every](dart.fn(entry => {
        if (entry == null) dart.nullFailed(I[53], 366, 35, "entry");
        return !dart.test(this[S$0._entries][S$.$contains](entry));
      }, T$.OverlayEntryTobool())))) dart.assertFailed("One or more of the specified entries are already present in the Overlay.", I[53], 366, 7, "entries.every((OverlayEntry entry) => !_entries.contains(entry))");
      if (!dart.test(entries[S$.$every](dart.fn(entry => {
        if (entry == null) dart.nullFailed(I[53], 370, 35, "entry");
        return entry[S$0._overlay] == null;
      }, T$.OverlayEntryTobool())))) dart.assertFailed("One or more of the specified entries are already present in another Overlay.", I[53], 370, 7, "entries.every((OverlayEntry entry) => entry._overlay == null)");
      if (dart.test(entries[S$.$isEmpty])) return;
      for (let entry of entries) {
        if (!(entry[S$0._overlay] == null)) dart.assertFailed(null, I[53], 376, 14, "entry._overlay == null");
        entry[S$0._overlay] = this;
      }
      this.setState(dart.fn(() => {
        this[S$0._entries][S$0.$insertAll](this[S$0._insertionIndex](below, above), entries);
      }, T$.VoidTovoid()));
    }
    [S$0._debugVerifyInsertPosition](above, below, opts) {
      let t42, t42$, t42$0, t42$1;
      let newEntries = opts && 'newEntries' in opts ? opts.newEntries : null;
      if (!(above == null || below == null)) dart.assertFailed("Only one of `above` and `below` may be specified.", I[53], 386, 7, "above == null || below == null");
      if (!(above == null || dart.equals(above[S$0._overlay], this) && dart.test(this[S$0._entries][S$.$contains](above)) && dart.test((t42$ = (t42 = newEntries, t42 == null ? null : t42[S$.$contains](above)), t42$ == null ? true : t42$)))) dart.assertFailed("The provided entry used for `above` must be present in the Overlay" + (newEntries != null ? " and in the `newEntriesList`" : "") + ".", I[53], 390, 7, "above == null || (above._overlay == this && _entries.contains(above) && (newEntries?.contains(above) ?? true))");
      if (!(below == null || dart.equals(below[S$0._overlay], this) && dart.test(this[S$0._entries][S$.$contains](below)) && dart.test((t42$1 = (t42$0 = newEntries, t42$0 == null ? null : t42$0[S$.$contains](below)), t42$1 == null ? true : t42$1)))) dart.assertFailed("The provided entry used for `below` must be present in the Overlay" + (newEntries != null ? " and in the `newEntriesList`" : "") + ".", I[53], 394, 7, "below == null || (below._overlay == this && _entries.contains(below) && (newEntries?.contains(below) ?? true))");
      return true;
    }
    rearrange(newEntries, opts) {
      let t42;
      if (newEntries == null) dart.nullFailed(I[53], 417, 41, "newEntries");
      let below = opts && 'below' in opts ? opts.below : null;
      let above = opts && 'above' in opts ? opts.above : null;
      let newEntriesList = T$.ListOfOverlayEntry().is(newEntries) ? newEntries : newEntries[S$.$toList]({growable: false});
      if (!dart.test(this[S$0._debugVerifyInsertPosition](above, below, {newEntries: newEntriesList}))) dart.assertFailed(null, I[53], 419, 12, "_debugVerifyInsertPosition(above, below, newEntries: newEntriesList)");
      if (!dart.test(newEntriesList[S$.$every](dart.fn(entry => {
        if (entry == null) dart.nullFailed(I[53], 421, 42, "entry");
        return entry[S$0._overlay] == null || dart.equals(entry[S$0._overlay], this);
      }, T$.OverlayEntryTobool())))) dart.assertFailed("One or more of the specified entries are already present in another Overlay.", I[53], 421, 7, "newEntriesList.every((OverlayEntry entry) => entry._overlay == null || entry._overlay == this)");
      if (!dart.test(newEntriesList[S$.$every](dart.fn(entry => {
        if (entry == null) dart.nullFailed(I[53], 425, 42, "entry");
        return this[S$0._entries][S$.$indexOf](entry) == this[S$0._entries][S$0.$lastIndexOf](entry);
      }, T$.OverlayEntryTobool())))) dart.assertFailed("One or more of the specified entries are specified multiple times.", I[53], 425, 7, "newEntriesList.every((OverlayEntry entry) => _entries.indexOf(entry) == _entries.lastIndexOf(entry))");
      if (dart.test(newEntriesList[S$.$isEmpty])) return;
      if (dart.test(collections.listEquals(overlay$.OverlayEntry, this[S$0._entries], newEntriesList))) return;
      let old = T$.LinkedHashSetOfOverlayEntry().from(this[S$0._entries]);
      for (let entry of newEntriesList) {
        t42 = entry;
        t42[S$0._overlay] == null ? t42[S$0._overlay] = this : null;
      }
      this.setState(dart.fn(() => {
        this[S$0._entries][S$.$clear]();
        this[S$0._entries][S$.$addAll](newEntriesList);
        old.removeAll(newEntriesList);
        this[S$0._entries][S$0.$insertAll](this[S$0._insertionIndex](below, above), old);
      }, T$.VoidTovoid()));
    }
    [S$0._markDirty]() {
      if (dart.test(this.mounted)) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    debugIsVisible(entry) {
      if (entry == null) dart.nullFailed(I[53], 456, 36, "entry");
      let result = false;
      if (!dart.test(this[S$0._entries][S$.$contains](entry))) dart.assertFailed(null, I[53], 458, 12, "_entries.contains(entry)");
      if (!dart.test(dart.fn(() => {
        for (let i = dart.notNull(this[S$0._entries][S$.$length]) - 1; i > 0; i = i - 1) {
          let candidate = this[S$0._entries][S$.$_get](i);
          if (dart.equals(candidate, entry)) {
            result = true;
            break;
          }
          if (dart.test(candidate.opaque)) break;
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[53], 459, 12, "() {\r\n      for (int i = _entries.length - 1; i > 0; i -= 1) {\r\n        final OverlayEntry candidate = _entries[i];\r\n        if (candidate == entry) {\r\n          result = true;\r\n          break;\r\n        }\r\n        if (candidate.opaque)\r\n          break;\r\n      }\r\n      return true;\r\n    }()");
      return result;
    }
    [S$0._didChangeEntryOpacity]() {
      this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[53], 482, 29, "context");
      let children = T$.JSArrayOfWidget().of([]);
      let onstage = true;
      let onstageCount = 0;
      for (let i = dart.notNull(this[S$0._entries][S$.$length]) - 1; i >= 0; i = i - 1) {
        let entry = this[S$0._entries][S$.$_get](i);
        if (onstage) {
          onstageCount = onstageCount + 1;
          children[S$.$add](new overlay$._OverlayEntryWidget.new({key: entry[S$0._key$1], entry: entry, $creationLocationd_0dea112b090073317d4: C[501] || CT.C501}));
          if (dart.test(entry.opaque)) onstage = false;
        } else if (dart.test(entry.maintainState)) {
          children[S$.$add](new overlay$._OverlayEntryWidget.new({key: entry[S$0._key$1], entry: entry, tickerEnabled: false, $creationLocationd_0dea112b090073317d4: C[505] || CT.C505}));
        }
      }
      return new overlay$._Theatre.new({skipCount: dart.notNull(children[S$.$length]) - onstageCount, children: children[S$.$reversed][S$.$toList]({growable: false}), clipBehavior: this.widget.clipBehavior, $creationLocationd_0dea112b090073317d4: C[510] || CT.C510});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[53], 514, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfListOfOverlayEntry()).new("entries", this[S$0._entries]));
    }
  };
  (overlay$.OverlayState.new = function() {
    this[S$0._entries] = T$.JSArrayOfOverlayEntry().of([]);
    overlay$.OverlayState.__proto__.new.call(this);
    ;
  }).prototype = overlay$.OverlayState.prototype;
  dart.addTypeTests(overlay$.OverlayState);
  dart.addTypeCaches(overlay$.OverlayState);
  dart.setMethodSignature(overlay$.OverlayState, () => ({
    __proto__: dart.getMethods(overlay$.OverlayState.__proto__),
    [S$0._insertionIndex]: dart.fnType(core.int, [dart.nullable(overlay$.OverlayEntry), dart.nullable(overlay$.OverlayEntry)]),
    insert: dart.fnType(dart.void, [overlay$.OverlayEntry], {above: dart.nullable(overlay$.OverlayEntry), below: dart.nullable(overlay$.OverlayEntry)}, {}),
    insertAll: dart.fnType(dart.void, [core.Iterable$(overlay$.OverlayEntry)], {above: dart.nullable(overlay$.OverlayEntry), below: dart.nullable(overlay$.OverlayEntry)}, {}),
    [S$0._debugVerifyInsertPosition]: dart.fnType(core.bool, [dart.nullable(overlay$.OverlayEntry), dart.nullable(overlay$.OverlayEntry)], {newEntries: dart.nullable(core.Iterable$(overlay$.OverlayEntry))}, {}),
    rearrange: dart.fnType(dart.void, [core.Iterable$(overlay$.OverlayEntry)], {above: dart.nullable(overlay$.OverlayEntry), below: dart.nullable(overlay$.OverlayEntry)}, {}),
    [S$0._markDirty]: dart.fnType(dart.void, []),
    debugIsVisible: dart.fnType(core.bool, [overlay$.OverlayEntry]),
    [S$0._didChangeEntryOpacity]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(overlay$.OverlayState, I[54]);
  dart.setFieldSignature(overlay$.OverlayState, () => ({
    __proto__: dart.getFields(overlay$.OverlayState.__proto__),
    [S$0._entries]: dart.finalFieldType(core.List$(overlay$.OverlayEntry))
  }));
  framework.MultiChildRenderObjectWidget = class MultiChildRenderObjectWidget extends framework.RenderObjectWidget {
    get children() {
      return this[S$0.children$3];
    }
    set children(value) {
      super.children = value;
    }
    createElement() {
      return new framework.MultiChildRenderObjectElement.new(this);
    }
  };
  (framework.MultiChildRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let children = opts && 'children' in opts ? opts.children : C[395] || CT.C395;
    if (children == null) dart.nullFailed(I[4], 1740, 49, "children");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.children$3] = children;
    if (!(children != null)) dart.assertFailed(null, I[4], 1741, 14, "children != null");
    framework.MultiChildRenderObjectWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    if (!dart.test(dart.fn(() => {
      for (let index = 0; index < dart.notNull(this.children[S$.$length]); index = index + 1) {
        if (this.children[S$.$_get](index) == null) {
          dart.throw(assertions.FlutterError.new(dart.str(this[S$.$runtimeType]) + "'s children must not contain any null values, " + "but a null value was found at index " + dart.str(index)));
        }
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 1743, 12, "() {\r\n      for (int index = 0; index < children.length; index++) {\r\n        // TODO(a14n): remove this check to have a lot more const widget\r\n        if (children[index] == null) {\r\n          throw FlutterError(\r\n              \"$runtimeType's children must not contain any null values, \"\r\n                  'but a null value was found at index $index',\r\n          );\r\n        }\r\n      }\r\n      return true;\r\n    }()");
  }).prototype = framework.MultiChildRenderObjectWidget.prototype;
  dart.addTypeTests(framework.MultiChildRenderObjectWidget);
  dart.addTypeCaches(framework.MultiChildRenderObjectWidget);
  dart.setMethodSignature(framework.MultiChildRenderObjectWidget, () => ({
    __proto__: dart.getMethods(framework.MultiChildRenderObjectWidget.__proto__),
    createElement: dart.fnType(framework.MultiChildRenderObjectElement, [])
  }));
  dart.setLibraryUri(framework.MultiChildRenderObjectWidget, I[5]);
  dart.setFieldSignature(framework.MultiChildRenderObjectWidget, () => ({
    __proto__: dart.getFields(framework.MultiChildRenderObjectWidget.__proto__),
    children: dart.finalFieldType(core.List$(framework.Widget))
  }));
  overlay$._Theatre = class _Theatre extends framework.MultiChildRenderObjectWidget {
    createElement() {
      return new overlay$._TheatreElement.new(this);
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[53], 547, 50, "context");
      return new overlay$._RenderTheatre.new({skipCount: this.skipCount, textDirection: basic.Directionality.of(context), clipBehavior: this.clipBehavior});
    }
    updateRenderObject(context, renderObject) {
      let t42;
      if (context == null) dart.nullFailed(I[53], 556, 40, "context");
      overlay$._RenderTheatre.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[53], 556, 64, "renderObject");
      t42 = renderObject;
      (() => {
        t42.skipCount = this.skipCount;
        t42.textDirection = basic.Directionality.of(context);
        t42.clipBehavior = this.clipBehavior;
        return t42;
      })();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[53], 564, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.IntProperty.new("skipCount", this.skipCount));
    }
  };
  (overlay$._Theatre.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let skipCount = opts && 'skipCount' in opts ? opts.skipCount : 0;
    if (skipCount == null) dart.nullFailed(I[53], 529, 10, "skipCount");
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[500] || CT.C500;
    if (clipBehavior == null) dart.nullFailed(I[53], 530, 10, "clipBehavior");
    let children = opts && 'children' in opts ? opts.children : C[395] || CT.C395;
    if (children == null) dart.nullFailed(I[53], 531, 18, "children");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.skipCount = skipCount;
    this.clipBehavior = clipBehavior;
    if (!(skipCount != null)) dart.assertFailed(null, I[53], 532, 15, "skipCount != null");
    if (!(dart.notNull(skipCount) >= 0)) dart.assertFailed(null, I[53], 533, 15, "skipCount >= 0");
    if (!(children != null)) dart.assertFailed(null, I[53], 534, 15, "children != null");
    if (!(dart.notNull(children[S$.$length]) >= dart.notNull(skipCount))) dart.assertFailed(null, I[53], 535, 15, "children.length >= skipCount");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[53], 536, 15, "clipBehavior != null");
    overlay$._Theatre.__proto__.new.call(this, {key: key, children: children, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay$._Theatre.prototype;
  dart.addTypeTests(overlay$._Theatre);
  dart.addTypeCaches(overlay$._Theatre);
  dart.setMethodSignature(overlay$._Theatre, () => ({
    __proto__: dart.getMethods(overlay$._Theatre.__proto__),
    createElement: dart.fnType(overlay$._TheatreElement, []),
    createRenderObject: dart.fnType(overlay$._RenderTheatre, [framework.BuildContext])
  }));
  dart.setLibraryUri(overlay$._Theatre, I[54]);
  dart.setFieldSignature(overlay$._Theatre, () => ({
    __proto__: dart.getFields(overlay$._Theatre.__proto__),
    skipCount: dart.finalFieldType(core.int),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  framework.MultiChildRenderObjectElement = class MultiChildRenderObjectElement extends framework.RenderObjectElement {
    get widget() {
      return framework.MultiChildRenderObjectWidget.as(super.widget);
    }
    get renderObject() {
      return T$.ContainerRenderObjectMixinOfRenderObject$ContainerParentDataMixinOfRenderObject().as(super.renderObject);
    }
    get children() {
      return this[S$0._children$2][S$.$where](dart.fn(child => {
        if (child == null) dart.nullFailed(I[4], 6150, 62, "child");
        return !dart.test(this[S$0._forgottenChildren$1].contains(child));
      }, T$.ElementTobool()));
    }
    get [S$0._children$2]() {
      let t42;
      return dart.test(this[S$0.__MultiChildRenderObjectElement__children_isSet]) ? (t42 = this[S$0.__MultiChildRenderObjectElement__children], t42) : dart.throw(new _internal.LateError.fieldNI("_children"));
    }
    set [S$0._children$2](t42) {
      if (t42 == null) dart.nullFailed(I[4], 6152, 22, "null");
      this[S$0.__MultiChildRenderObjectElement__children_isSet] = true;
      this[S$0.__MultiChildRenderObjectElement__children] = t42;
    }
    insertRenderObjectChild(child, slot) {
      let t43;
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 6158, 45, "child");
      T$.IndexedSlotOfElementN().as(slot);
      if (slot == null) dart.nullFailed(I[4], 6158, 74, "slot");
      let renderObject = this.renderObject;
      if (!dart.test(renderObject.debugValidateChild(child))) dart.assertFailed(null, I[4], 6160, 12, "renderObject.debugValidateChild(child)");
      renderObject.insert(child, {after: (t43 = slot.value, t43 == null ? null : t43.renderObject)});
      if (!dart.equals(renderObject, this.renderObject)) dart.assertFailed(null, I[4], 6162, 12, "renderObject == this.renderObject");
    }
    moveRenderObjectChild(child, oldSlot, newSlot) {
      let t43;
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 6166, 43, "child");
      T$.IndexedSlotOfElementN().as(oldSlot);
      if (oldSlot == null) dart.nullFailed(I[4], 6166, 72, "oldSlot");
      T$.IndexedSlotOfElementN().as(newSlot);
      if (newSlot == null) dart.nullFailed(I[4], 6166, 103, "newSlot");
      let renderObject = this.renderObject;
      if (!dart.equals(child.parent, renderObject)) dart.assertFailed(null, I[4], 6168, 12, "child.parent == renderObject");
      renderObject.move(child, {after: (t43 = newSlot.value, t43 == null ? null : t43.renderObject)});
      if (!dart.equals(renderObject, this.renderObject)) dart.assertFailed(null, I[4], 6170, 12, "renderObject == this.renderObject");
    }
    removeRenderObjectChild(child, slot) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[4], 6174, 45, "child");
      let renderObject = this.renderObject;
      if (!dart.equals(child.parent, renderObject)) dart.assertFailed(null, I[4], 6176, 12, "child.parent == renderObject");
      renderObject.remove(child);
      if (!dart.equals(renderObject, this.renderObject)) dart.assertFailed(null, I[4], 6178, 12, "renderObject == this.renderObject");
    }
    visitChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[4], 6182, 37, "visitor");
      for (let child of this[S$0._children$2]) {
        if (!dart.test(this[S$0._forgottenChildren$1].contains(child))) visitor(child);
      }
    }
    forgetChild(child) {
      if (child == null) dart.nullFailed(I[4], 6190, 28, "child");
      if (!dart.test(this[S$0._children$2][S$.$contains](child))) dart.assertFailed(null, I[4], 6191, 12, "_children.contains(child)");
      if (!!dart.test(this[S$0._forgottenChildren$1].contains(child))) dart.assertFailed(null, I[4], 6192, 12, "!_forgottenChildren.contains(child)");
      this[S$0._forgottenChildren$1].add(child);
      super.forgetChild(child);
    }
    [S$0._debugCheckHasAssociatedRenderObject](newChild) {
      if (newChild == null) dart.nullFailed(I[4], 6197, 53, "newChild");
      if (!dart.test(dart.fn(() => {
        if (newChild.renderObject == null) {
          assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The children of `MultiChildRenderObjectElement` must each has an associated render object."), new assertions.ErrorHint.new("This typically means that the `" + dart.str(newChild.widget) + "` or its children\n" + "are not a subtype of `RenderObjectWidget`."), newChild.describeElement("The following element does not have an associated render object"), new object$.DiagnosticsDebugCreator.new(new framework.DebugCreator.new(newChild))]))}));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[4], 6198, 12, "() {\r\n      if (newChild.renderObject == null) {\r\n        FlutterError.reportError(\r\n          FlutterErrorDetails(\r\n            exception: FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary('The children of `MultiChildRenderObjectElement` must each has an associated render object.'),\r\n              ErrorHint(\r\n                'This typically means that the `${newChild.widget}` or its children\\n'\r\n                'are not a subtype of `RenderObjectWidget`.',\r\n              ),\r\n              newChild.describeElement('The following element does not have an associated render object'),\r\n              DiagnosticsDebugCreator(DebugCreator(newChild)),\r\n            ]),\r\n          ),\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return true;
    }
    inflateWidget(newWidget, newSlot) {
      if (newWidget == null) dart.nullFailed(I[4], 6220, 32, "newWidget");
      let newChild = super.inflateWidget(newWidget, newSlot);
      if (!dart.test(this[S$0._debugCheckHasAssociatedRenderObject](newChild))) dart.assertFailed(null, I[4], 6222, 12, "_debugCheckHasAssociatedRenderObject(newChild)");
      return newChild;
    }
    mount(parent, newSlot) {
      super.mount(parent, newSlot);
      let children = T$.ListOfElement().filled(this.widget.children[S$.$length], framework._NullElement.instance, {growable: false});
      let previousChild = null;
      for (let i = 0; i < dart.notNull(children[S$.$length]); i = i + 1) {
        let newChild = this.inflateWidget(this.widget.children[S$.$_get](i), new (T$.IndexedSlotOfElementN()).new(i, previousChild));
        children[S$.$_set](i, newChild);
        previousChild = newChild;
      }
      this[S$0._children$2] = children;
    }
    update(newWidget) {
      framework.MultiChildRenderObjectWidget.as(newWidget);
      if (newWidget == null) dart.nullFailed(I[4], 6240, 44, "newWidget");
      super.update(newWidget);
      if (!dart.equals(this.widget, newWidget)) dart.assertFailed(null, I[4], 6242, 12, "widget == newWidget");
      this[S$0._children$2] = this.updateChildren(this[S$0._children$2], this.widget.children, {forgottenChildren: this[S$0._forgottenChildren$1]});
      this[S$0._forgottenChildren$1].clear();
    }
  };
  (framework.MultiChildRenderObjectElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[4], 6132, 62, "widget");
    this[S$0.__MultiChildRenderObjectElement__children] = null;
    this[S$0.__MultiChildRenderObjectElement__children_isSet] = false;
    this[S$0._forgottenChildren$1] = new (T$._HashSetOfElement()).new();
    if (!!dart.test(debug$0.debugChildrenHaveDuplicateKeys(widget, widget.children))) dart.assertFailed(null, I[4], 6133, 14, "!debugChildrenHaveDuplicateKeys(widget, widget.children)");
    framework.MultiChildRenderObjectElement.__proto__.new.call(this, widget);
    ;
  }).prototype = framework.MultiChildRenderObjectElement.prototype;
  dart.addTypeTests(framework.MultiChildRenderObjectElement);
  dart.addTypeCaches(framework.MultiChildRenderObjectElement);
  dart.setMethodSignature(framework.MultiChildRenderObjectElement, () => ({
    __proto__: dart.getMethods(framework.MultiChildRenderObjectElement.__proto__),
    [S$0._debugCheckHasAssociatedRenderObject]: dart.fnType(core.bool, [framework.Element])
  }));
  dart.setGetterSignature(framework.MultiChildRenderObjectElement, () => ({
    __proto__: dart.getGetters(framework.MultiChildRenderObjectElement.__proto__),
    widget: framework.MultiChildRenderObjectWidget,
    renderObject: object$.ContainerRenderObjectMixin$(object$.RenderObject, object$.ContainerParentDataMixin$(object$.RenderObject)),
    children: core.Iterable$(framework.Element),
    [S$0._children$2]: core.List$(framework.Element)
  }));
  dart.setSetterSignature(framework.MultiChildRenderObjectElement, () => ({
    __proto__: dart.getSetters(framework.MultiChildRenderObjectElement.__proto__),
    [S$0._children$2]: core.List$(framework.Element)
  }));
  dart.setLibraryUri(framework.MultiChildRenderObjectElement, I[5]);
  dart.setFieldSignature(framework.MultiChildRenderObjectElement, () => ({
    __proto__: dart.getFields(framework.MultiChildRenderObjectElement.__proto__),
    [S$0.__MultiChildRenderObjectElement__children]: dart.fieldType(dart.nullable(core.List$(framework.Element))),
    [S$0.__MultiChildRenderObjectElement__children_isSet]: dart.fieldType(core.bool),
    [S$0._forgottenChildren$1]: dart.finalFieldType(core.Set$(framework.Element))
  }));
  overlay$._TheatreElement = class _TheatreElement extends framework.MultiChildRenderObjectElement {
    get widget() {
      return overlay$._Theatre.as(super.widget);
    }
    get renderObject() {
      return overlay$._RenderTheatre.as(super.renderObject);
    }
    debugVisitOnstageChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[53], 580, 49, "visitor");
      if (!(dart.notNull(this.children[S$.$length]) >= dart.notNull(this.widget.skipCount))) dart.assertFailed(null, I[53], 581, 12, "children.length >= widget.skipCount");
      this.children[S$0.$skip](this.widget.skipCount)[S$.$forEach](visitor);
    }
  };
  (overlay$._TheatreElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[53], 571, 28, "widget");
    overlay$._TheatreElement.__proto__.new.call(this, widget);
    ;
  }).prototype = overlay$._TheatreElement.prototype;
  dart.addTypeTests(overlay$._TheatreElement);
  dart.addTypeCaches(overlay$._TheatreElement);
  dart.setGetterSignature(overlay$._TheatreElement, () => ({
    __proto__: dart.getGetters(overlay$._TheatreElement.__proto__),
    widget: overlay$._Theatre,
    renderObject: overlay$._RenderTheatre
  }));
  dart.setLibraryUri(overlay$._TheatreElement, I[54]);
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box$.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object$.ContainerRenderObjectMixin$(box$.RenderBox, stack.StackParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object$.ContainerRenderObjectMixin$(box$.RenderBox, stack.StackParentData));
  overlay$._RenderTheatre = class _RenderTheatre extends RenderBox_ContainerRenderObjectMixin$36 {
    setupParentData(child) {
      box$.RenderBox.as(child);
      if (child == null) dart.nullFailed(I[53], 605, 34, "child");
      if (!stack.StackParentData.is(child.parentData)) child.parentData = new stack.StackParentData.new();
    }
    [S$0._resolve]() {
      if (this[S$0._resolvedAlignment] != null) return;
      this[S$0._resolvedAlignment] = alignment$.AlignmentDirectional.topStart.resolve(this.textDirection);
    }
    [S$0._markNeedResolution]() {
      this[S$0._resolvedAlignment] = null;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[S$0._textDirection];
    }
    set textDirection(value) {
      if (value == null) dart.nullFailed(I[53], 625, 35, "value");
      if (this[S$0._textDirection] == value) return;
      this[S$0._textDirection] = value;
      this[S$0._markNeedResolution]();
    }
    get skipCount() {
      return this[S$0._skipCount];
    }
    set skipCount(value) {
      if (value == null) dart.nullFailed(I[53], 634, 21, "value");
      if (!(value != null)) dart.assertFailed(null, I[53], 635, 12, "value != null");
      if (this[S$0._skipCount] != value) {
        this[S$0._skipCount] = value;
        this.markNeedsLayout();
      }
    }
    get clipBehavior() {
      return this[S$0._clipBehavior];
    }
    set clipBehavior(value) {
      if (value == null) dart.nullFailed(I[53], 647, 25, "value");
      if (!(value != null)) dart.assertFailed(null, I[53], 648, 12, "value != null");
      if (value != this[S$0._clipBehavior]) {
        this[S$0._clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    get [S$0._firstOnstageChild]() {
      if (this.skipCount == super.childCount) {
        return null;
      }
      let child = super.firstChild;
      for (let toSkip = this.skipCount; dart.notNull(toSkip) > 0; toSkip = dart.notNull(toSkip) - 1) {
        let childParentData = stack.StackParentData.as(dart.nullCheck(dart.nullCheck(child).parentData));
        child = childParentData.nextSibling;
        if (!(child != null)) dart.assertFailed(null, I[53], 664, 14, "child != null");
      }
      return child;
    }
    get [S$0._lastOnstageChild]() {
      return this.skipCount == super.childCount ? null : this.lastChild;
    }
    get [S$0._onstageChildCount]() {
      return dart.notNull(this.childCount) - dart.notNull(this.skipCount);
    }
    computeMinIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[53], 674, 42, "height");
      return stack.RenderStack.getIntrinsicDimension(this[S$0._firstOnstageChild], dart.fn(child => {
        if (child == null) dart.nullFailed(I[53], 675, 77, "child");
        return child.getMinIntrinsicWidth(height);
      }, T$.RenderBoxTodouble()));
    }
    computeMaxIntrinsicWidth(height) {
      if (height == null) dart.nullFailed(I[53], 679, 42, "height");
      return stack.RenderStack.getIntrinsicDimension(this[S$0._firstOnstageChild], dart.fn(child => {
        if (child == null) dart.nullFailed(I[53], 680, 77, "child");
        return child.getMaxIntrinsicWidth(height);
      }, T$.RenderBoxTodouble()));
    }
    computeMinIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[53], 684, 43, "width");
      return stack.RenderStack.getIntrinsicDimension(this[S$0._firstOnstageChild], dart.fn(child => {
        if (child == null) dart.nullFailed(I[53], 685, 77, "child");
        return child.getMinIntrinsicHeight(width);
      }, T$.RenderBoxTodouble()));
    }
    computeMaxIntrinsicHeight(width) {
      if (width == null) dart.nullFailed(I[53], 689, 43, "width");
      return stack.RenderStack.getIntrinsicDimension(this[S$0._firstOnstageChild], dart.fn(child => {
        if (child == null) dart.nullFailed(I[53], 690, 77, "child");
        return child.getMaxIntrinsicHeight(width);
      }, T$.RenderBoxTodouble()));
    }
    computeDistanceToActualBaseline(baseline) {
      if (baseline == null) dart.nullFailed(I[53], 694, 56, "baseline");
      if (!!dart.test(this.debugNeedsLayout)) dart.assertFailed(null, I[53], 695, 12, "!debugNeedsLayout");
      let result = null;
      let child = this[S$0._firstOnstageChild];
      while (child != null) {
        if (!!dart.test(child.debugNeedsLayout)) dart.assertFailed(null, I[53], 699, 14, "!child.debugNeedsLayout");
        let childParentData = stack.StackParentData.as(dart.nullCheck(child.parentData));
        let candidate = child.getDistanceToActualBaseline(baseline);
        if (candidate != null) {
          candidate = dart.notNull(candidate) + dart.notNull(childParentData.offset.dy);
          if (result != null) {
            result = math.min(core.double, result, candidate);
          } else {
            result = candidate;
          }
        }
        child = childParentData.nextSibling;
      }
      return result;
    }
    get sizedByParent() {
      return true;
    }
    computeDryLayout(constraints) {
      if (constraints == null) dart.nullFailed(I[53], 719, 40, "constraints");
      if (!dart.test(constraints.biggest.isFinite)) dart.assertFailed(null, I[53], 720, 12, "constraints.biggest.isFinite");
      return constraints.biggest;
    }
    performLayout() {
      this[S$0._hasVisualOverflow] = false;
      if (this[S$0._onstageChildCount] === 0) {
        return;
      }
      this[S$0._resolve]();
      if (!(this[S$0._resolvedAlignment] != null)) dart.assertFailed(null, I[53], 733, 12, "_resolvedAlignment != null");
      let nonPositionedConstraints = new box$.BoxConstraints.tight(this.constraints.biggest);
      let child = this[S$0._firstOnstageChild];
      while (child != null) {
        let childParentData = stack.StackParentData.as(dart.nullCheck(child.parentData));
        if (!dart.test(childParentData.isPositioned)) {
          child.layout(nonPositionedConstraints, {parentUsesSize: true});
          childParentData.offset = dart.nullCheck(this[S$0._resolvedAlignment]).alongOffset(ui.Offset.as(this.size['-'](child.size)));
        } else {
          this[S$0._hasVisualOverflow] = dart.test(stack.RenderStack.layoutPositionedChild(child, childParentData, this.size, dart.nullCheck(this[S$0._resolvedAlignment]))) || dart.test(this[S$0._hasVisualOverflow]);
        }
        if (!dart.equals(child.parentData, childParentData)) dart.assertFailed(null, I[53], 749, 14, "child.parentData == childParentData");
        child = childParentData.nextSibling;
      }
    }
    hitTestChildren(result, opts) {
      if (result == null) dart.nullFailed(I[53], 755, 41, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[53], 755, 67, "position");
      let child = this[S$0._lastOnstageChild];
      for (let i = 0; i < dart.notNull(this[S$0._onstageChildCount]); i = i + 1) {
        if (!(child != null)) dart.assertFailed(null, I[53], 758, 14, "child != null");
        let childParentData = stack.StackParentData.as(dart.nullCheck(dart.nullCheck(child).parentData));
        let isHit = result.addWithPaintOffset({offset: childParentData.offset, position: position, hitTest: dart.fn((result, transformed) => {
            if (result == null) dart.nullFailed(I[53], 763, 36, "result");
            if (!dart.equals(transformed, position['-'](childParentData.offset))) dart.assertFailed(null, I[53], 764, 18, "transformed == position - childParentData.offset");
            return dart.nullCheck(child).hitTest(result, {position: dart.nullCheck(transformed)});
          }, T$.BoxHitTestResultAndOffsetNTobool())});
        if (dart.test(isHit)) return true;
        child = childParentData.previousSibling;
      }
      return false;
    }
    paintStack(context, offset) {
      if (context == null) dart.nullFailed(I[53], 776, 35, "context");
      if (offset == null) dart.nullFailed(I[53], 776, 51, "offset");
      let child = this[S$0._firstOnstageChild];
      while (child != null) {
        let childParentData = stack.StackParentData.as(dart.nullCheck(child.parentData));
        context.paintChild(child, childParentData.offset['+'](offset));
        child = childParentData.nextSibling;
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[53], 786, 30, "context");
      if (offset == null) dart.nullFailed(I[53], 786, 46, "offset");
      if (dart.test(this[S$0._hasVisualOverflow]) && this.clipBehavior != ui.Clip.none) {
        this[S$0._clipRectLayer] = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, 'paintStack'), {clipBehavior: this.clipBehavior, oldLayer: this[S$0._clipRectLayer]});
      } else {
        this[S$0._clipRectLayer] = null;
        this.paintStack(context, offset);
      }
    }
    visitChildrenForSemantics(visitor) {
      if (visitor == null) dart.nullFailed(I[53], 805, 54, "visitor");
      let child = this[S$0._firstOnstageChild];
      while (child != null) {
        visitor(child);
        let childParentData = stack.StackParentData.as(dart.nullCheck(child.parentData));
        child = childParentData.nextSibling;
      }
    }
    describeApproximatePaintClip(child) {
      object$.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[53], 815, 51, "child");
      return dart.test(this[S$0._hasVisualOverflow]) ? ui.Offset.zero['&'](this.size) : null;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[53], 818, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.IntProperty.new("skipCount", this.skipCount));
      properties.add(new (T$.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection));
    }
    debugDescribeChildren() {
      let offstageChildren = T$.JSArrayOfDiagnosticsNode().of([]);
      let onstageChildren = T$.JSArrayOfDiagnosticsNode().of([]);
      let count = 1;
      let onstage = false;
      let child = this.firstChild;
      let firstOnstageChild = this[S$0._firstOnstageChild];
      while (child != null) {
        if (dart.equals(child, firstOnstageChild)) {
          onstage = true;
          count = 1;
        }
        if (onstage) {
          onstageChildren[S$.$add](child.toDiagnosticsNode({name: "onstage " + dart.str(count)}));
        } else {
          offstageChildren[S$.$add](child.toDiagnosticsNode({name: "offstage " + dart.str(count), style: diagnostics$.DiagnosticsTreeStyle.offstage}));
        }
        let childParentData = stack.StackParentData.as(dart.nullCheck(child.parentData));
        child = childParentData.nextSibling;
        count = count + 1;
      }
      return (() => {
        let t43 = T$.ListOfDiagnosticsNode().of(onstageChildren);
        if (dart.test(offstageChildren[S$.$isNotEmpty]))
          t43[S$.$addAll](offstageChildren);
        else
          t43[S$.$add](diagnostics$.DiagnosticsNode.message("no offstage children", {style: diagnostics$.DiagnosticsTreeStyle.offstage}));
        return t43;
      })();
    }
  };
  (overlay$._RenderTheatre.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[53], 589, 28, "textDirection");
    let skipCount = opts && 'skipCount' in opts ? opts.skipCount : 0;
    if (skipCount == null) dart.nullFailed(I[53], 590, 9, "skipCount");
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[500] || CT.C500;
    if (clipBehavior == null) dart.nullFailed(I[53], 591, 10, "clipBehavior");
    this[S$0._hasVisualOverflow] = false;
    this[S$0._resolvedAlignment] = null;
    this[S$0._clipBehavior] = ui.Clip.hardEdge;
    this[S$0._clipRectLayer] = null;
    if (!(skipCount != null)) dart.assertFailed(null, I[53], 592, 15, "skipCount != null");
    if (!(dart.notNull(skipCount) >= 0)) dart.assertFailed(null, I[53], 593, 15, "skipCount >= 0");
    if (!(textDirection != null)) dart.assertFailed(null, I[53], 594, 15, "textDirection != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[53], 595, 15, "clipBehavior != null");
    this[S$0._textDirection] = textDirection;
    this[S$0._skipCount] = skipCount;
    this[S$0._clipBehavior] = clipBehavior;
    overlay$._RenderTheatre.__proto__.new.call(this);
    this.addAll(children);
  }).prototype = overlay$._RenderTheatre.prototype;
  dart.addTypeTests(overlay$._RenderTheatre);
  dart.addTypeCaches(overlay$._RenderTheatre);
  dart.setMethodSignature(overlay$._RenderTheatre, () => ({
    __proto__: dart.getMethods(overlay$._RenderTheatre.__proto__),
    [S$0._resolve]: dart.fnType(dart.void, []),
    [S$0._markNeedResolution]: dart.fnType(dart.void, []),
    paintStack: dart.fnType(dart.void, [object$.PaintingContext, ui.Offset])
  }));
  dart.setGetterSignature(overlay$._RenderTheatre, () => ({
    __proto__: dart.getGetters(overlay$._RenderTheatre.__proto__),
    textDirection: ui.TextDirection,
    skipCount: core.int,
    clipBehavior: ui.Clip,
    [S$0._firstOnstageChild]: dart.nullable(box$.RenderBox),
    [S$0._lastOnstageChild]: dart.nullable(box$.RenderBox),
    [S$0._onstageChildCount]: core.int
  }));
  dart.setSetterSignature(overlay$._RenderTheatre, () => ({
    __proto__: dart.getSetters(overlay$._RenderTheatre.__proto__),
    textDirection: ui.TextDirection,
    skipCount: core.int,
    clipBehavior: ui.Clip
  }));
  dart.setLibraryUri(overlay$._RenderTheatre, I[54]);
  dart.setFieldSignature(overlay$._RenderTheatre, () => ({
    __proto__: dart.getFields(overlay$._RenderTheatre.__proto__),
    [S$0._hasVisualOverflow]: dart.fieldType(core.bool),
    [S$0._resolvedAlignment]: dart.fieldType(dart.nullable(alignment$.Alignment)),
    [S$0._textDirection]: dart.fieldType(ui.TextDirection),
    [S$0._skipCount]: dart.fieldType(core.int),
    [S$0._clipBehavior]: dart.fieldType(ui.Clip),
    [S$0._clipRectLayer]: dart.fieldType(dart.nullable(layer.ClipRectLayer))
  }));
  text_selection.TextSelectionHandleType = class TextSelectionHandleType extends core.Object {
    toString() {
      return this[S$0._name$11];
    }
  };
  (text_selection.TextSelectionHandleType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[55], 53, 6, "index");
    if (_name == null) dart.nullFailed(I[55], 53, 6, "_name");
    this.index = index;
    this[S$0._name$11] = _name;
    ;
  }).prototype = text_selection.TextSelectionHandleType.prototype;
  dart.addTypeTests(text_selection.TextSelectionHandleType);
  dart.addTypeCaches(text_selection.TextSelectionHandleType);
  dart.setLibraryUri(text_selection.TextSelectionHandleType, I[56]);
  dart.setFieldSignature(text_selection.TextSelectionHandleType, () => ({
    __proto__: dart.getFields(text_selection.TextSelectionHandleType.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_selection.TextSelectionHandleType, ['toString']);
  text_selection.TextSelectionHandleType.left = C[515] || CT.C515;
  text_selection.TextSelectionHandleType.right = C[516] || CT.C516;
  text_selection.TextSelectionHandleType.collapsed = C[517] || CT.C517;
  text_selection.TextSelectionHandleType.values = C[518] || CT.C518;
  text_selection._TextSelectionHandlePosition = class _TextSelectionHandlePosition extends core.Object {
    toString() {
      return this[S$0._name$11];
    }
  };
  (text_selection._TextSelectionHandlePosition.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[55], 66, 6, "index");
    if (_name == null) dart.nullFailed(I[55], 66, 6, "_name");
    this.index = index;
    this[S$0._name$11] = _name;
    ;
  }).prototype = text_selection._TextSelectionHandlePosition.prototype;
  dart.addTypeTests(text_selection._TextSelectionHandlePosition);
  dart.addTypeCaches(text_selection._TextSelectionHandlePosition);
  dart.setLibraryUri(text_selection._TextSelectionHandlePosition, I[56]);
  dart.setFieldSignature(text_selection._TextSelectionHandlePosition, () => ({
    __proto__: dart.getFields(text_selection._TextSelectionHandlePosition.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_selection._TextSelectionHandlePosition, ['toString']);
  text_selection._TextSelectionHandlePosition.start = C[519] || CT.C519;
  text_selection._TextSelectionHandlePosition.end = C[520] || CT.C520;
  text_selection._TextSelectionHandlePosition.values = C[521] || CT.C521;
  text_selection.ToolbarItemsParentData = class ToolbarItemsParentData extends box$.ContainerBoxParentData$(box$.RenderBox) {
    get shouldPaint() {
      return this[S$0.shouldPaint];
    }
    set shouldPaint(value) {
      this[S$0.shouldPaint] = value;
    }
    toString() {
      return dart.str(super.toString()) + "; shouldPaint=" + dart.str(this.shouldPaint);
    }
  };
  (text_selection.ToolbarItemsParentData.new = function() {
    this[S$0.shouldPaint] = false;
    text_selection.ToolbarItemsParentData.__proto__.new.call(this);
    ;
  }).prototype = text_selection.ToolbarItemsParentData.prototype;
  dart.addTypeTests(text_selection.ToolbarItemsParentData);
  dart.addTypeCaches(text_selection.ToolbarItemsParentData);
  dart.setLibraryUri(text_selection.ToolbarItemsParentData, I[56]);
  dart.setFieldSignature(text_selection.ToolbarItemsParentData, () => ({
    __proto__: dart.getFields(text_selection.ToolbarItemsParentData.__proto__),
    shouldPaint: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(text_selection.ToolbarItemsParentData, ['toString']);
  text_selection.TextSelectionControls = class TextSelectionControls extends core.Object {
    canCut(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 159, 37, "delegate");
      return dart.test(delegate.cutEnabled) && !dart.test(delegate.textEditingValue.selection.isCollapsed);
    }
    canCopy(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 170, 38, "delegate");
      return dart.test(delegate.copyEnabled) && !dart.test(delegate.textEditingValue.selection.isCollapsed);
    }
    canPaste(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 183, 39, "delegate");
      return delegate.pasteEnabled;
    }
    canSelectAll(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 193, 43, "delegate");
      return dart.test(delegate.selectAllEnabled) && delegate.textEditingValue.text[S$.$isNotEmpty] && dart.test(delegate.textEditingValue.selection.isCollapsed);
    }
    handleCut(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 206, 40, "delegate");
      let value = delegate.textEditingValue;
      clipboard.Clipboard.setData(new clipboard.ClipboardData.new({text: value.selection.textInside(value.text)}));
      delegate.userUpdateTextEditingValue(new text_input.TextEditingValue.new({text: dart.notNull(value.selection.textBefore(value.text)) + dart.notNull(value.selection.textAfter(value.text)), selection: new text_editing.TextSelection.collapsed({offset: value.selection.start})}), text_input.SelectionChangedCause.toolBar);
      delegate.bringIntoView(delegate.textEditingValue.selection.extent);
      delegate.hideToolbar();
    }
    handleCopy(delegate, clipboardStatus) {
      let t44;
      if (delegate == null) dart.nullFailed(I[55], 231, 41, "delegate");
      let value = delegate.textEditingValue;
      clipboard.Clipboard.setData(new clipboard.ClipboardData.new({text: value.selection.textInside(value.text)}));
      t44 = clipboardStatus;
      t44 == null ? null : t44.update();
      delegate.bringIntoView(delegate.textEditingValue.selection.extent);
      switch (platform.defaultTargetPlatform) {
        case C[88] || CT.C88:
        {
          delegate.hideToolbar(false);
          return;
        }
        case C[89] || CT.C89:
        case C[84] || CT.C84:
        case C[85] || CT.C85:
        case C[86] || CT.C86:
        case C[87] || CT.C87:
        {
          delegate.userUpdateTextEditingValue(new text_input.TextEditingValue.new({text: value.text, selection: new text_editing.TextSelection.collapsed({offset: value.selection.end})}), text_input.SelectionChangedCause.toolBar);
          delegate.hideToolbar();
          return;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    handlePaste(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 273, 50, "delegate");
      return async.async(dart.void, function* handlePaste() {
        let value = delegate.textEditingValue;
        let data = (yield clipboard.Clipboard.getData("text/plain"));
        if (data != null) {
          delegate.userUpdateTextEditingValue(new text_input.TextEditingValue.new({text: dart.notNull(value.selection.textBefore(value.text)) + dart.nullCheck(data.text) + dart.notNull(value.selection.textAfter(value.text)), selection: new text_editing.TextSelection.collapsed({offset: dart.notNull(value.selection.start) + dart.nullCheck(data.text).length})}), text_input.SelectionChangedCause.toolBar);
        }
        delegate.bringIntoView(delegate.textEditingValue.selection.extent);
        delegate.hideToolbar();
      });
    }
    handleSelectAll(delegate) {
      if (delegate == null) dart.nullFailed(I[55], 300, 46, "delegate");
      delegate.userUpdateTextEditingValue(new text_input.TextEditingValue.new({text: delegate.textEditingValue.text, selection: new text_editing.TextSelection.new({baseOffset: 0, extentOffset: delegate.textEditingValue.text.length})}), text_input.SelectionChangedCause.toolBar);
      delegate.bringIntoView(delegate.textEditingValue.selection.extent);
    }
  };
  (text_selection.TextSelectionControls.new = function() {
    ;
  }).prototype = text_selection.TextSelectionControls.prototype;
  dart.addTypeTests(text_selection.TextSelectionControls);
  dart.addTypeCaches(text_selection.TextSelectionControls);
  dart.setMethodSignature(text_selection.TextSelectionControls, () => ({
    __proto__: dart.getMethods(text_selection.TextSelectionControls.__proto__),
    canCut: dart.fnType(core.bool, [text_input.TextSelectionDelegate]),
    canCopy: dart.fnType(core.bool, [text_input.TextSelectionDelegate]),
    canPaste: dart.fnType(core.bool, [text_input.TextSelectionDelegate]),
    canSelectAll: dart.fnType(core.bool, [text_input.TextSelectionDelegate]),
    handleCut: dart.fnType(dart.void, [text_input.TextSelectionDelegate]),
    handleCopy: dart.fnType(dart.void, [text_input.TextSelectionDelegate, dart.nullable(text_selection.ClipboardStatusNotifier)]),
    handlePaste: dart.fnType(async.Future$(dart.void), [text_input.TextSelectionDelegate]),
    handleSelectAll: dart.fnType(dart.void, [text_input.TextSelectionDelegate])
  }));
  dart.setLibraryUri(text_selection.TextSelectionControls, I[56]);
  text_selection.TextSelectionOverlay = class TextSelectionOverlay extends core.Object {
    get context() {
      return this[S$0.context];
    }
    set context(value) {
      super.context = value;
    }
    get debugRequiredFor() {
      return this[S$0.debugRequiredFor];
    }
    set debugRequiredFor(value) {
      super.debugRequiredFor = value;
    }
    get toolbarLayerLink() {
      return this[S$0.toolbarLayerLink];
    }
    set toolbarLayerLink(value) {
      super.toolbarLayerLink = value;
    }
    get startHandleLayerLink() {
      return this[S$0.startHandleLayerLink];
    }
    set startHandleLayerLink(value) {
      super.startHandleLayerLink = value;
    }
    get endHandleLayerLink() {
      return this[S$0.endHandleLayerLink];
    }
    set endHandleLayerLink(value) {
      super.endHandleLayerLink = value;
    }
    get renderObject() {
      return this[S$0.renderObject];
    }
    set renderObject(value) {
      super.renderObject = value;
    }
    get selectionControls() {
      return this[S$0.selectionControls];
    }
    set selectionControls(value) {
      super.selectionControls = value;
    }
    get selectionDelegate() {
      return this[S$0.selectionDelegate];
    }
    set selectionDelegate(value) {
      super.selectionDelegate = value;
    }
    get dragStartBehavior() {
      return this[S$0.dragStartBehavior];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get onSelectionHandleTapped() {
      return this[S$0.onSelectionHandleTapped];
    }
    set onSelectionHandleTapped(value) {
      super.onSelectionHandleTapped = value;
    }
    get clipboardStatus() {
      return this[S$0.clipboardStatus];
    }
    set clipboardStatus(value) {
      super.clipboardStatus = value;
    }
    get [S$0._toolbarController]() {
      let t44;
      return dart.test(this[S$0.__TextSelectionOverlay__toolbarController_isSet]) ? (t44 = this[S$0.__TextSelectionOverlay__toolbarController], t44) : dart.throw(new _internal.LateError.fieldNI("_toolbarController"));
    }
    set [S$0._toolbarController](t44) {
      if (t44 == null) dart.nullFailed(I[55], 420, 28, "null");
      this[S$0.__TextSelectionOverlay__toolbarController_isSet] = true;
      this[S$0.__TextSelectionOverlay__toolbarController] = t44;
    }
    get [S$0._toolbarOpacity]() {
      return this[S$0._toolbarController].view;
    }
    get value() {
      return this[S$0._value$1];
    }
    get [S$0._selection$1]() {
      return this[S$0._value$1].selection;
    }
    get handlesVisible() {
      return this[S$0._handlesVisible];
    }
    set handlesVisible(visible) {
      if (visible == null) dart.nullFailed(I[55], 454, 27, "visible");
      if (!(visible != null)) dart.assertFailed(null, I[55], 455, 12, "visible != null");
      if (this[S$0._handlesVisible] == visible) return;
      this[S$0._handlesVisible] = visible;
      if (dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase == binding$.SchedulerPhase.persistentCallbacks) {
        dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.bind(this, S$0._markNeedsBuild$1));
      } else {
        this[S$0._markNeedsBuild$1]();
      }
    }
    showHandles() {
      if (this[S$0._handles] != null) return;
      this[S$0._handles] = T$.JSArrayOfOverlayEntry().of([new overlay$.OverlayEntry.new({builder: dart.fn(context => {
            if (context == null) dart.nullFailed(I[55], 474, 43, "context");
            return this[S$0._buildHandle](context, text_selection._TextSelectionHandlePosition.start);
          }, T$.BuildContextToWidget())}), new overlay$.OverlayEntry.new({builder: dart.fn(context => {
            if (context == null) dart.nullFailed(I[55], 475, 43, "context");
            return this[S$0._buildHandle](context, text_selection._TextSelectionHandlePosition.end);
          }, T$.BuildContextToWidget())})]);
      dart.nullCheck(overlay$.Overlay.of(this.context, {rootOverlay: true, debugRequiredFor: this.debugRequiredFor})).insertAll(dart.nullCheck(this[S$0._handles]));
    }
    hideHandles() {
      if (this[S$0._handles] != null) {
        dart.nullCheck(this[S$0._handles])[S$.$_get](0).remove();
        dart.nullCheck(this[S$0._handles])[S$.$_get](1).remove();
        this[S$0._handles] = null;
      }
    }
    showToolbar() {
      if (!(this[S$0._toolbar] == null)) dart.assertFailed(null, I[55], 493, 12, "_toolbar == null");
      this[S$0._toolbar] = new overlay$.OverlayEntry.new({builder: dart.bind(this, S$0._buildToolbar)});
      dart.nullCheck(overlay$.Overlay.of(this.context, {rootOverlay: true, debugRequiredFor: this.debugRequiredFor})).insert(dart.nullCheck(this[S$0._toolbar]));
      this[S$0._toolbarController].forward({from: 0.0});
    }
    update(newValue) {
      if (newValue == null) dart.nullFailed(I[55], 508, 32, "newValue");
      if (dart.equals(this[S$0._value$1], newValue)) return;
      this[S$0._value$1] = newValue;
      if (dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase == binding$.SchedulerPhase.persistentCallbacks) {
        dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.bind(this, S$0._markNeedsBuild$1));
      } else {
        this[S$0._markNeedsBuild$1]();
      }
    }
    updateForScroll() {
      this[S$0._markNeedsBuild$1]();
    }
    [S$0._markNeedsBuild$1](duration = null) {
      let t45;
      if (this[S$0._handles] != null) {
        dart.nullCheck(this[S$0._handles])[S$.$_get](0).markNeedsBuild();
        dart.nullCheck(this[S$0._handles])[S$.$_get](1).markNeedsBuild();
      }
      t45 = this[S$0._toolbar];
      t45 == null ? null : t45.markNeedsBuild();
    }
    get handlesAreVisible() {
      return this[S$0._handles] != null && dart.test(this.handlesVisible);
    }
    get toolbarIsVisible() {
      return this[S$0._toolbar] != null;
    }
    hide() {
      if (this[S$0._handles] != null) {
        dart.nullCheck(this[S$0._handles])[S$.$_get](0).remove();
        dart.nullCheck(this[S$0._handles])[S$.$_get](1).remove();
        this[S$0._handles] = null;
      }
      if (this[S$0._toolbar] != null) {
        this.hideToolbar();
      }
    }
    hideToolbar() {
      if (!(this[S$0._toolbar] != null)) dart.assertFailed(null, I[55], 557, 12, "_toolbar != null");
      this[S$0._toolbarController].stop();
      dart.nullCheck(this[S$0._toolbar]).remove();
      this[S$0._toolbar] = null;
    }
    dispose() {
      this.hide();
      this[S$0._toolbarController].dispose();
    }
    [S$0._buildHandle](context, position) {
      if (context == null) dart.nullFailed(I[55], 569, 36, "context");
      if (position == null) dart.nullFailed(I[55], 569, 74, "position");
      let handle = null;
      if (dart.test(this[S$0._selection$1].isCollapsed) && position == text_selection._TextSelectionHandlePosition.end || this.selectionControls == null)
        handle = new container.Container.new({$creationLocationd_0dea112b090073317d4: C[523] || CT.C523});
      else {
        handle = new visibility.Visibility.new({visible: this.handlesVisible, child: new text_selection._TextSelectionHandleOverlay.new({onSelectionHandleChanged: dart.fn(newSelection => {
              if (newSelection == null) dart.nullFailed(I[55], 578, 52, "newSelection");
              this[S$0._handleSelectionHandleChanged](newSelection, position);
            }, T$.TextSelectionTovoid()), onSelectionHandleTapped: this.onSelectionHandleTapped, startHandleLayerLink: this.startHandleLayerLink, endHandleLayerLink: this.endHandleLayerLink, renderObject: this.renderObject, selection: this[S$0._selection$1], selectionControls: this.selectionControls, position: position, dragStartBehavior: this.dragStartBehavior, $creationLocationd_0dea112b090073317d4: C[524] || CT.C524}), $creationLocationd_0dea112b090073317d4: C[535] || CT.C535});
      }
      return new basic.ExcludeSemantics.new({child: handle, $creationLocationd_0dea112b090073317d4: C[539] || CT.C539});
    }
    [S$0._buildToolbar](context) {
      if (context == null) dart.nullFailed(I[55], 597, 37, "context");
      if (this.selectionControls == null) return new container.Container.new({$creationLocationd_0dea112b090073317d4: C[542] || CT.C542});
      let endpoints = this.renderObject.getEndpointsForSelection(this[S$0._selection$1]);
      let editingRegion = new ui.Rect.fromPoints(this.renderObject.localToGlobal(ui.Offset.zero), this.renderObject.localToGlobal(this.renderObject.size.bottomRight(ui.Offset.zero)));
      let isMultiline = dart.notNull(endpoints[S$.$last].point.dy) - dart.notNull(endpoints[S$.$first].point.dy) > dart.notNull(this.renderObject.preferredLineHeight) / 2;
      let midX = isMultiline ? dart.notNull(editingRegion.width) / 2 : (dart.notNull(endpoints[S$.$first].point.dx) + dart.notNull(endpoints[S$.$last].point.dx)) / 2;
      let midpoint = new ui.Offset.new(midX, dart.notNull(endpoints[S$.$_get](0).point.dy) - dart.notNull(this.renderObject.preferredLineHeight));
      return new basic.Directionality.new({textDirection: basic.Directionality.of(this.context), child: new transitions.FadeTransition.new({opacity: this[S$0._toolbarOpacity], child: new basic.CompositedTransformFollower.new({link: this.toolbarLayerLink, showWhenUnlinked: false, offset: editingRegion.topLeft._negate(), child: new basic.Builder.new({builder: dart.fn(context => {
                if (context == null) dart.nullFailed(I[55], 634, 36, "context");
                return dart.nullCheck(this.selectionControls).buildToolbar(context, editingRegion, this.renderObject.preferredLineHeight, midpoint, endpoints, dart.nullCheck(this.selectionDelegate), dart.nullCheck(this.clipboardStatus), this.renderObject.lastSecondaryTapDownPosition);
              }, T$.BuildContextToWidget()), $creationLocationd_0dea112b090073317d4: C[543] || CT.C543}), $creationLocationd_0dea112b090073317d4: C[546] || CT.C546}), $creationLocationd_0dea112b090073317d4: C[552] || CT.C552}), $creationLocationd_0dea112b090073317d4: C[556] || CT.C556});
    }
    [S$0._handleSelectionHandleChanged](newSelection, position) {
      if (newSelection == null) dart.nullFailed(I[55], 652, 52, "newSelection");
      if (position == null) dart.nullFailed(I[55], 652, 95, "position");
      let textPosition = null;
      switch (position) {
        case C[519] || CT.C519:
        {
          textPosition = newSelection.base;
          break;
        }
        case C[520] || CT.C520:
        {
          textPosition = newSelection.extent;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      dart.nullCheck(this.selectionDelegate).userUpdateTextEditingValue(this[S$0._value$1].copyWith({selection: newSelection, composing: ui.TextRange.empty}), text_input.SelectionChangedCause.drag);
      dart.nullCheck(this.selectionDelegate).bringIntoView(textPosition);
    }
  };
  (text_selection.TextSelectionOverlay.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    if (value == null) dart.nullFailed(I[55], 324, 31, "value");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[55], 325, 19, "context");
    let debugRequiredFor = opts && 'debugRequiredFor' in opts ? opts.debugRequiredFor : null;
    let toolbarLayerLink = opts && 'toolbarLayerLink' in opts ? opts.toolbarLayerLink : null;
    if (toolbarLayerLink == null) dart.nullFailed(I[55], 327, 19, "toolbarLayerLink");
    let startHandleLayerLink = opts && 'startHandleLayerLink' in opts ? opts.startHandleLayerLink : null;
    if (startHandleLayerLink == null) dart.nullFailed(I[55], 328, 19, "startHandleLayerLink");
    let endHandleLayerLink = opts && 'endHandleLayerLink' in opts ? opts.endHandleLayerLink : null;
    if (endHandleLayerLink == null) dart.nullFailed(I[55], 329, 19, "endHandleLayerLink");
    let renderObject = opts && 'renderObject' in opts ? opts.renderObject : null;
    if (renderObject == null) dart.nullFailed(I[55], 330, 19, "renderObject");
    let selectionControls = opts && 'selectionControls' in opts ? opts.selectionControls : null;
    let handlesVisible = opts && 'handlesVisible' in opts ? opts.handlesVisible : false;
    if (handlesVisible == null) dart.nullFailed(I[55], 332, 10, "handlesVisible");
    let selectionDelegate = opts && 'selectionDelegate' in opts ? opts.selectionDelegate : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[522] || CT.C522;
    if (dragStartBehavior == null) dart.nullFailed(I[55], 334, 10, "dragStartBehavior");
    let onSelectionHandleTapped = opts && 'onSelectionHandleTapped' in opts ? opts.onSelectionHandleTapped : null;
    let clipboardStatus = opts && 'clipboardStatus' in opts ? opts.clipboardStatus : null;
    this[S$0.__TextSelectionOverlay__toolbarController] = null;
    this[S$0.__TextSelectionOverlay__toolbarController_isSet] = false;
    this[S$0._handles] = null;
    this[S$0._toolbar] = null;
    this[S$0._handlesVisible] = false;
    this[S$0.context] = context;
    this[S$0.debugRequiredFor] = debugRequiredFor;
    this[S$0.toolbarLayerLink] = toolbarLayerLink;
    this[S$0.startHandleLayerLink] = startHandleLayerLink;
    this[S$0.endHandleLayerLink] = endHandleLayerLink;
    this[S$0.renderObject] = renderObject;
    this[S$0.selectionControls] = selectionControls;
    this[S$0.selectionDelegate] = selectionDelegate;
    this[S$0.dragStartBehavior] = dragStartBehavior;
    this[S$0.onSelectionHandleTapped] = onSelectionHandleTapped;
    this[S$0.clipboardStatus] = clipboardStatus;
    if (!(value != null)) dart.assertFailed(null, I[55], 337, 15, "value != null");
    if (!(context != null)) dart.assertFailed(null, I[55], 338, 15, "context != null");
    if (!(handlesVisible != null)) dart.assertFailed(null, I[55], 339, 15, "handlesVisible != null");
    this[S$0._handlesVisible] = handlesVisible;
    this[S$0._value$1] = value;
    let overlay = overlay$.Overlay.of(this.context, {rootOverlay: true});
    if (!(overlay != null)) dart.assertFailed("No Overlay widget exists above " + dart.str(this.context) + ".\n" + "Usually the Navigator created by WidgetsApp provides the overlay. Perhaps your " + "app content was created above the Navigator with the WidgetsApp builder parameter.", I[55], 344, 7, "overlay != null");
    this[S$0._toolbarController] = new animation_controller.AnimationController.new({duration: text_selection.TextSelectionOverlay.fadeDuration, vsync: dart.nullCheck(overlay)});
  }).prototype = text_selection.TextSelectionOverlay.prototype;
  dart.addTypeTests(text_selection.TextSelectionOverlay);
  dart.addTypeCaches(text_selection.TextSelectionOverlay);
  dart.setMethodSignature(text_selection.TextSelectionOverlay, () => ({
    __proto__: dart.getMethods(text_selection.TextSelectionOverlay.__proto__),
    showHandles: dart.fnType(dart.void, []),
    hideHandles: dart.fnType(dart.void, []),
    showToolbar: dart.fnType(dart.void, []),
    update: dart.fnType(dart.void, [text_input.TextEditingValue]),
    updateForScroll: dart.fnType(dart.void, []),
    [S$0._markNeedsBuild$1]: dart.fnType(dart.void, [], [dart.nullable(core.Duration)]),
    hide: dart.fnType(dart.void, []),
    hideToolbar: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    [S$0._buildHandle]: dart.fnType(framework.Widget, [framework.BuildContext, text_selection._TextSelectionHandlePosition]),
    [S$0._buildToolbar]: dart.fnType(framework.Widget, [framework.BuildContext]),
    [S$0._handleSelectionHandleChanged]: dart.fnType(dart.void, [text_editing.TextSelection, text_selection._TextSelectionHandlePosition])
  }));
  dart.setGetterSignature(text_selection.TextSelectionOverlay, () => ({
    __proto__: dart.getGetters(text_selection.TextSelectionOverlay.__proto__),
    [S$0._toolbarController]: animation_controller.AnimationController,
    [S$0._toolbarOpacity]: animation.Animation$(core.double),
    value: text_input.TextEditingValue,
    [S$0._selection$1]: text_editing.TextSelection,
    handlesVisible: core.bool,
    handlesAreVisible: core.bool,
    toolbarIsVisible: core.bool
  }));
  dart.setSetterSignature(text_selection.TextSelectionOverlay, () => ({
    __proto__: dart.getSetters(text_selection.TextSelectionOverlay.__proto__),
    [S$0._toolbarController]: animation_controller.AnimationController,
    handlesVisible: core.bool
  }));
  dart.setLibraryUri(text_selection.TextSelectionOverlay, I[56]);
  dart.setFieldSignature(text_selection.TextSelectionOverlay, () => ({
    __proto__: dart.getFields(text_selection.TextSelectionOverlay.__proto__),
    context: dart.finalFieldType(framework.BuildContext),
    debugRequiredFor: dart.finalFieldType(dart.nullable(framework.Widget)),
    toolbarLayerLink: dart.finalFieldType(layer.LayerLink),
    startHandleLayerLink: dart.finalFieldType(layer.LayerLink),
    endHandleLayerLink: dart.finalFieldType(layer.LayerLink),
    renderObject: dart.finalFieldType(editable.RenderEditable),
    selectionControls: dart.finalFieldType(dart.nullable(text_selection.TextSelectionControls)),
    selectionDelegate: dart.finalFieldType(dart.nullable(text_input.TextSelectionDelegate)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    onSelectionHandleTapped: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    clipboardStatus: dart.finalFieldType(dart.nullable(text_selection.ClipboardStatusNotifier)),
    [S$0.__TextSelectionOverlay__toolbarController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S$0.__TextSelectionOverlay__toolbarController_isSet]: dart.fieldType(core.bool),
    [S$0._value$1]: dart.fieldType(text_input.TextEditingValue),
    [S$0._handles]: dart.fieldType(dart.nullable(core.List$(overlay$.OverlayEntry))),
    [S$0._toolbar]: dart.fieldType(dart.nullable(overlay$.OverlayEntry)),
    [S$0._handlesVisible]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(text_selection.TextSelectionOverlay, {
    /*text_selection.TextSelectionOverlay.fadeDuration*/get fadeDuration() {
      return C[560] || CT.C560;
    }
  }, false);
  text_selection._TextSelectionHandleOverlay = class _TextSelectionHandleOverlay extends framework.StatefulWidget {
    get selection() {
      return this[S$0.selection$2];
    }
    set selection(value) {
      super.selection = value;
    }
    get position() {
      return this[S$0.position$1];
    }
    set position(value) {
      super.position = value;
    }
    get startHandleLayerLink() {
      return this[S$0.startHandleLayerLink$1];
    }
    set startHandleLayerLink(value) {
      super.startHandleLayerLink = value;
    }
    get endHandleLayerLink() {
      return this[S$0.endHandleLayerLink$1];
    }
    set endHandleLayerLink(value) {
      super.endHandleLayerLink = value;
    }
    get renderObject() {
      return this[S$0.renderObject$1];
    }
    set renderObject(value) {
      super.renderObject = value;
    }
    get onSelectionHandleChanged() {
      return this[S$0.onSelectionHandleChanged];
    }
    set onSelectionHandleChanged(value) {
      super.onSelectionHandleChanged = value;
    }
    get onSelectionHandleTapped() {
      return this[S$0.onSelectionHandleTapped$1];
    }
    set onSelectionHandleTapped(value) {
      super.onSelectionHandleTapped = value;
    }
    get selectionControls() {
      return this[S$0.selectionControls$1];
    }
    set selectionControls(value) {
      super.selectionControls = value;
    }
    get dragStartBehavior() {
      return this[S$0.dragStartBehavior$1];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    createState() {
      return new text_selection._TextSelectionHandleOverlayState.new();
    }
    get [S$0._visibility]() {
      switch (this.position) {
        case C[519] || CT.C519:
        {
          return this.renderObject.selectionStartInViewport;
        }
        case C[520] || CT.C520:
        {
          return this.renderObject.selectionEndInViewport;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  (text_selection._TextSelectionHandleOverlay.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    if (selection == null) dart.nullFailed(I[55], 674, 19, "selection");
    let position = opts && 'position' in opts ? opts.position : null;
    if (position == null) dart.nullFailed(I[55], 675, 19, "position");
    let startHandleLayerLink = opts && 'startHandleLayerLink' in opts ? opts.startHandleLayerLink : null;
    if (startHandleLayerLink == null) dart.nullFailed(I[55], 676, 19, "startHandleLayerLink");
    let endHandleLayerLink = opts && 'endHandleLayerLink' in opts ? opts.endHandleLayerLink : null;
    if (endHandleLayerLink == null) dart.nullFailed(I[55], 677, 19, "endHandleLayerLink");
    let renderObject = opts && 'renderObject' in opts ? opts.renderObject : null;
    if (renderObject == null) dart.nullFailed(I[55], 678, 19, "renderObject");
    let onSelectionHandleChanged = opts && 'onSelectionHandleChanged' in opts ? opts.onSelectionHandleChanged : null;
    if (onSelectionHandleChanged == null) dart.nullFailed(I[55], 679, 19, "onSelectionHandleChanged");
    let onSelectionHandleTapped = opts && 'onSelectionHandleTapped' in opts ? opts.onSelectionHandleTapped : null;
    let selectionControls = opts && 'selectionControls' in opts ? opts.selectionControls : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[522] || CT.C522;
    if (dragStartBehavior == null) dart.nullFailed(I[55], 682, 10, "dragStartBehavior");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.selection$2] = selection;
    this[S$0.position$1] = position;
    this[S$0.startHandleLayerLink$1] = startHandleLayerLink;
    this[S$0.endHandleLayerLink$1] = endHandleLayerLink;
    this[S$0.renderObject$1] = renderObject;
    this[S$0.onSelectionHandleChanged] = onSelectionHandleChanged;
    this[S$0.onSelectionHandleTapped$1] = onSelectionHandleTapped;
    this[S$0.selectionControls$1] = selectionControls;
    this[S$0.dragStartBehavior$1] = dragStartBehavior;
    text_selection._TextSelectionHandleOverlay.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text_selection._TextSelectionHandleOverlay.prototype;
  dart.addTypeTests(text_selection._TextSelectionHandleOverlay);
  dart.addTypeCaches(text_selection._TextSelectionHandleOverlay);
  dart.setMethodSignature(text_selection._TextSelectionHandleOverlay, () => ({
    __proto__: dart.getMethods(text_selection._TextSelectionHandleOverlay.__proto__),
    createState: dart.fnType(text_selection._TextSelectionHandleOverlayState, [])
  }));
  dart.setGetterSignature(text_selection._TextSelectionHandleOverlay, () => ({
    __proto__: dart.getGetters(text_selection._TextSelectionHandleOverlay.__proto__),
    [S$0._visibility]: change_notifier.ValueListenable$(core.bool)
  }));
  dart.setLibraryUri(text_selection._TextSelectionHandleOverlay, I[56]);
  dart.setFieldSignature(text_selection._TextSelectionHandleOverlay, () => ({
    __proto__: dart.getFields(text_selection._TextSelectionHandleOverlay.__proto__),
    selection: dart.finalFieldType(text_editing.TextSelection),
    position: dart.finalFieldType(text_selection._TextSelectionHandlePosition),
    startHandleLayerLink: dart.finalFieldType(layer.LayerLink),
    endHandleLayerLink: dart.finalFieldType(layer.LayerLink),
    renderObject: dart.finalFieldType(editable.RenderEditable),
    onSelectionHandleChanged: dart.finalFieldType(dart.fnType(dart.void, [text_editing.TextSelection])),
    onSelectionHandleTapped: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    selectionControls: dart.finalFieldType(dart.nullable(text_selection.TextSelectionControls)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior)
  }));
  const _is_SingleTickerProviderStateMixin_default = Symbol('_is_SingleTickerProviderStateMixin_default');
  ticker_provider.SingleTickerProviderStateMixin$ = dart.generic(T => {
    class SingleTickerProviderStateMixin extends framework.State$(T) {}
    SingleTickerProviderStateMixin[dart.mixinOn] = State => class SingleTickerProviderStateMixin extends State {
      createTicker(onTick) {
        if (onTick == null) dart.nullFailed(I[32], 115, 38, "onTick");
        if (!dart.test(dart.fn(() => {
          if (this[S$0._ticker] == null) return true;
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this[S$.$runtimeType]) + " is a SingleTickerProviderStateMixin but multiple tickers were created."), new assertions.ErrorDescription.new("A SingleTickerProviderStateMixin can only be used as a TickerProvider once."), new assertions.ErrorHint.new("If a State is used for multiple AnimationController objects, or if it is passed to other " + "objects and those objects might use it more than one time in total, then instead of " + "mixing in a SingleTickerProviderStateMixin, use a regular TickerProviderStateMixin.")])));
        }, T$.VoidTobool())())) dart.assertFailed(null, I[32], 116, 12, "() {\r\n      if (_ticker == null)\r\n        return true;\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('$runtimeType is a SingleTickerProviderStateMixin but multiple tickers were created.'),\r\n        ErrorDescription('A SingleTickerProviderStateMixin can only be used as a TickerProvider once.'),\r\n        ErrorHint(\r\n          'If a State is used for multiple AnimationController objects, or if it is passed to other '\r\n          'objects and those objects might use it more than one time in total, then instead of '\r\n          'mixing in a SingleTickerProviderStateMixin, use a regular TickerProviderStateMixin.',\r\n        ),\r\n      ]);\r\n    }()");
        this[S$0._ticker] = new ticker.Ticker.new(onTick, {debugLabel: true ? "created by " + dart.str(this) : null});
        return dart.nullCheck(this[S$0._ticker]);
      }
      dispose() {
        if (!dart.test(dart.fn(() => {
          if (this[S$0._ticker] == null || !dart.test(dart.nullCheck(this[S$0._ticker]).isActive)) return true;
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this) + " was disposed with an active Ticker."), new assertions.ErrorDescription.new(dart.str(this[S$.$runtimeType]) + " created a Ticker via its SingleTickerProviderStateMixin, but at the time " + "dispose() was called on the mixin, that Ticker was still active. The Ticker must " + "be disposed before calling super.dispose()."), new assertions.ErrorHint.new("Tickers used by AnimationControllers " + "should be disposed by calling dispose() on the AnimationController itself. " + "Otherwise, the ticker will leak."), dart.nullCheck(this[S$0._ticker]).describeForError("The offending ticker was")])));
        }, T$.VoidTobool())())) dart.assertFailed(null, I[32], 139, 12, "() {\r\n      if (_ticker == null || !_ticker!.isActive)\r\n        return true;\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('$this was disposed with an active Ticker.'),\r\n        ErrorDescription(\r\n          '$runtimeType created a Ticker via its SingleTickerProviderStateMixin, but at the time '\r\n          'dispose() was called on the mixin, that Ticker was still active. The Ticker must '\r\n          'be disposed before calling super.dispose().',\r\n        ),\r\n        ErrorHint(\r\n          'Tickers used by AnimationControllers '\r\n          'should be disposed by calling dispose() on the AnimationController itself. '\r\n          'Otherwise, the ticker will leak.',\r\n        ),\r\n        _ticker!.describeForError('The offending ticker was'),\r\n      ]);\r\n    }()");
        super.dispose();
      }
      didChangeDependencies() {
        if (this[S$0._ticker] != null) dart.nullCheck(this[S$0._ticker]).muted = !dart.test(ticker_provider.TickerMode.of(this.context));
        super.didChangeDependencies();
      }
      debugFillProperties(properties) {
        if (properties == null) dart.nullFailed(I[32], 168, 56, "properties");
        super.debugFillProperties(properties);
        let tickerDescription = null;
        if (this[S$0._ticker] != null) {
          if (dart.test(dart.nullCheck(this[S$0._ticker]).isActive) && dart.test(dart.nullCheck(this[S$0._ticker]).muted))
            tickerDescription = "active but muted";
          else if (dart.test(dart.nullCheck(this[S$0._ticker]).isActive))
            tickerDescription = "active";
          else if (dart.test(dart.nullCheck(this[S$0._ticker]).muted))
            tickerDescription = "inactive and muted";
          else
            tickerDescription = "inactive";
        }
        properties.add(new (T$.DiagnosticsPropertyOfTicker()).new("ticker", this[S$0._ticker], {description: tickerDescription, showSeparator: false, defaultValue: null}));
      }
    };
    (SingleTickerProviderStateMixin[dart.mixinNew] = function() {
      this[S$0._ticker] = null;
    }).prototype = SingleTickerProviderStateMixin.prototype;
    dart.addTypeTests(SingleTickerProviderStateMixin);
    SingleTickerProviderStateMixin.prototype[_is_SingleTickerProviderStateMixin_default] = true;
    dart.addTypeCaches(SingleTickerProviderStateMixin);
    SingleTickerProviderStateMixin[dart.implements] = () => [ticker.TickerProvider, framework.State$(T)];
    dart.setMethodSignature(SingleTickerProviderStateMixin, () => ({
      __proto__: dart.getMethods(SingleTickerProviderStateMixin.__proto__),
      createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])])
    }));
    dart.setLibraryUri(SingleTickerProviderStateMixin, I[33]);
    dart.setFieldSignature(SingleTickerProviderStateMixin, () => ({
      __proto__: dart.getFields(SingleTickerProviderStateMixin.__proto__),
      [S$0._ticker]: dart.fieldType(dart.nullable(ticker.Ticker))
    }));
    return SingleTickerProviderStateMixin;
  });
  ticker_provider.SingleTickerProviderStateMixin = ticker_provider.SingleTickerProviderStateMixin$();
  dart.addTypeTests(ticker_provider.SingleTickerProviderStateMixin, _is_SingleTickerProviderStateMixin_default);
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(text_selection._TextSelectionHandleOverlay) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(text_selection._TextSelectionHandleOverlay)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(text_selection._TextSelectionHandleOverlay));
  text_selection._TextSelectionHandleOverlayState = class _TextSelectionHandleOverlayState extends State_SingleTickerProviderStateMixin$36 {
    get [S$0._dragPosition]() {
      let t45;
      return dart.test(this[S$0.___TextSelectionHandleOverlayState__dragPosition_isSet]) ? (t45 = this[S$0.___TextSelectionHandleOverlayState__dragPosition], t45) : dart.throw(new _internal.LateError.fieldNI("_dragPosition"));
    }
    set [S$0._dragPosition](t45) {
      if (t45 == null) dart.nullFailed(I[55], 710, 15, "null");
      this[S$0.___TextSelectionHandleOverlayState__dragPosition_isSet] = true;
      this[S$0.___TextSelectionHandleOverlayState__dragPosition] = t45;
    }
    get [S$0._controller$1]() {
      let t46;
      return dart.test(this[S$0.___TextSelectionHandleOverlayState__controller_isSet]) ? (t46 = this[S$0.___TextSelectionHandleOverlayState__controller], t46) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [S$0._controller$1](t46) {
      if (t46 == null) dart.nullFailed(I[55], 712, 28, "null");
      this[S$0.___TextSelectionHandleOverlayState__controller_isSet] = true;
      this[S$0.___TextSelectionHandleOverlayState__controller] = t46;
    }
    get [S$0._opacity]() {
      return this[S$0._controller$1].view;
    }
    initState() {
      super.initState();
      this[S$0._controller$1] = new animation_controller.AnimationController.new({duration: text_selection.TextSelectionOverlay.fadeDuration, vsync: this});
      this[S$0._handleVisibilityChanged]();
      this.widget[S$0._visibility].addListener(dart.bind(this, S$0._handleVisibilityChanged));
    }
    [S$0._handleVisibilityChanged]() {
      if (dart.test(this.widget[S$0._visibility].value)) {
        this[S$0._controller$1].forward();
      } else {
        this[S$0._controller$1].reverse();
      }
    }
    didUpdateWidget(oldWidget) {
      text_selection._TextSelectionHandleOverlay.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[55], 734, 52, "oldWidget");
      super.didUpdateWidget(oldWidget);
      oldWidget[S$0._visibility].removeListener(dart.bind(this, S$0._handleVisibilityChanged));
      this[S$0._handleVisibilityChanged]();
      this.widget[S$0._visibility].addListener(dart.bind(this, S$0._handleVisibilityChanged));
    }
    dispose() {
      this.widget[S$0._visibility].removeListener(dart.bind(this, S$0._handleVisibilityChanged));
      this[S$0._controller$1].dispose();
      super.dispose();
    }
    [S$0._handleDragStart](details) {
      if (details == null) dart.nullFailed(I[55], 748, 42, "details");
      let handleSize = dart.nullCheck(this.widget.selectionControls).getHandleSize(this.widget.renderObject.preferredLineHeight);
      this[S$0._dragPosition] = details.globalPosition['+'](new ui.Offset.new(0.0, -dart.notNull(handleSize.height)));
    }
    [S$0._handleDragUpdate](details) {
      let t48, t47, t48$, t47$;
      if (details == null) dart.nullFailed(I[55], 755, 44, "details");
      this[S$0._dragPosition] = this[S$0._dragPosition]['+'](details.delta);
      let position = this.widget.renderObject.getPositionForPoint(this[S$0._dragPosition]);
      if (dart.test(this.widget.selection.isCollapsed)) {
        t47 = this.widget;
        t48 = new text_editing.TextSelection.fromPosition(position);
        t47.onSelectionHandleChanged(t48);
        return;
      }
      let newSelection = null;
      switch (this.widget.position) {
        case C[519] || CT.C519:
        {
          newSelection = new text_editing.TextSelection.new({baseOffset: position.offset, extentOffset: this.widget.selection.extentOffset});
          break;
        }
        case C[520] || CT.C520:
        {
          newSelection = new text_editing.TextSelection.new({baseOffset: this.widget.selection.baseOffset, extentOffset: position.offset});
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (dart.notNull(newSelection.baseOffset) >= dart.notNull(newSelection.extentOffset)) return;
      t47$ = this.widget;
      t48$ = newSelection;
      t47$.onSelectionHandleChanged(t48$);
    }
    [S$0._handleTap$2]() {
      let t47;
      t47 = this.widget.onSelectionHandleTapped;
      t47 == null ? null : t47();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[55], 791, 29, "context");
      let layerLink = null;
      let type = null;
      switch (this.widget.position) {
        case C[519] || CT.C519:
        {
          layerLink = this.widget.startHandleLayerLink;
          type = this[S$0._chooseType](this.widget.renderObject.textDirection, text_selection.TextSelectionHandleType.left, text_selection.TextSelectionHandleType.right);
          break;
        }
        case C[520] || CT.C520:
        {
          if (!!dart.test(this.widget.selection.isCollapsed)) dart.assertFailed(null, I[55], 806, 16, "!widget.selection.isCollapsed");
          layerLink = this.widget.endHandleLayerLink;
          type = this[S$0._chooseType](this.widget.renderObject.textDirection, text_selection.TextSelectionHandleType.right, text_selection.TextSelectionHandleType.left);
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let handleAnchor = dart.nullCheck(this.widget.selectionControls).getHandleAnchor(type, this.widget.renderObject.preferredLineHeight);
      let handleSize = dart.nullCheck(this.widget.selectionControls).getHandleSize(this.widget.renderObject.preferredLineHeight);
      let handleRect = new ui.Rect.fromLTWH(-dart.notNull(handleAnchor.dx), -dart.notNull(handleAnchor.dy), handleSize.width, handleSize.height);
      let interactiveRect = handleRect.expandToInclude(new ui.Rect.fromCircle({center: handleRect.center, radius: 48 / 2}));
      let padding = new stack.RelativeRect.fromLTRB(math.max(core.double, (dart.notNull(interactiveRect.width) - dart.notNull(handleRect.width)) / 2, 0.0), math.max(core.double, (dart.notNull(interactiveRect.height) - dart.notNull(handleRect.height)) / 2, 0.0), math.max(core.double, (dart.notNull(interactiveRect.width) - dart.notNull(handleRect.width)) / 2, 0.0), math.max(core.double, (dart.notNull(interactiveRect.height) - dart.notNull(handleRect.height)) / 2, 0.0));
      return new basic.CompositedTransformFollower.new({link: layerLink, offset: interactiveRect.topLeft, showWhenUnlinked: false, child: new transitions.FadeTransition.new({opacity: this[S$0._opacity], child: new container.Container.new({alignment: alignment$.Alignment.topLeft, width: interactiveRect.width, height: interactiveRect.height, child: new gesture_detector.GestureDetector.new({behavior: proxy_box.HitTestBehavior.translucent, dragStartBehavior: this.widget.dragStartBehavior, onPanStart: dart.bind(this, S$0._handleDragStart), onPanUpdate: dart.bind(this, S$0._handleDragUpdate), onTap: dart.bind(this, S$0._handleTap$2), child: new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({left: padding.left, top: padding.top, right: padding.right, bottom: padding.bottom}), child: dart.nullCheck(this.widget.selectionControls).buildHandle(context, type, this.widget.renderObject.preferredLineHeight), $creationLocationd_0dea112b090073317d4: C[561] || CT.C561}), $creationLocationd_0dea112b090073317d4: C[565] || CT.C565}), $creationLocationd_0dea112b090073317d4: C[573] || CT.C573}), $creationLocationd_0dea112b090073317d4: C[579] || CT.C579}), $creationLocationd_0dea112b090073317d4: C[583] || CT.C583});
    }
    [S$0._chooseType](textDirection, ltrType, rtlType) {
      if (textDirection == null) dart.nullFailed(I[55], 878, 19, "textDirection");
      if (ltrType == null) dart.nullFailed(I[55], 879, 29, "ltrType");
      if (rtlType == null) dart.nullFailed(I[55], 880, 29, "rtlType");
      if (dart.test(this.widget.selection.isCollapsed)) return text_selection.TextSelectionHandleType.collapsed;
      if (!(textDirection != null)) dart.assertFailed(null, I[55], 885, 12, "textDirection != null");
      switch (textDirection) {
        case C[65] || CT.C65:
        {
          return ltrType;
        }
        case C[64] || CT.C64:
        {
          return rtlType;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
  };
  (text_selection._TextSelectionHandleOverlayState.new = function() {
    this[S$0.___TextSelectionHandleOverlayState__dragPosition] = null;
    this[S$0.___TextSelectionHandleOverlayState__dragPosition_isSet] = false;
    this[S$0.___TextSelectionHandleOverlayState__controller] = null;
    this[S$0.___TextSelectionHandleOverlayState__controller_isSet] = false;
    text_selection._TextSelectionHandleOverlayState.__proto__.new.call(this);
    ;
  }).prototype = text_selection._TextSelectionHandleOverlayState.prototype;
  dart.addTypeTests(text_selection._TextSelectionHandleOverlayState);
  dart.addTypeCaches(text_selection._TextSelectionHandleOverlayState);
  dart.setMethodSignature(text_selection._TextSelectionHandleOverlayState, () => ({
    __proto__: dart.getMethods(text_selection._TextSelectionHandleOverlayState.__proto__),
    [S$0._handleVisibilityChanged]: dart.fnType(dart.void, []),
    [S$0._handleDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [S$0._handleDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [S$0._handleTap$2]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [S$0._chooseType]: dart.fnType(text_selection.TextSelectionHandleType, [ui.TextDirection, text_selection.TextSelectionHandleType, text_selection.TextSelectionHandleType])
  }));
  dart.setGetterSignature(text_selection._TextSelectionHandleOverlayState, () => ({
    __proto__: dart.getGetters(text_selection._TextSelectionHandleOverlayState.__proto__),
    [S$0._dragPosition]: ui.Offset,
    [S$0._controller$1]: animation_controller.AnimationController,
    [S$0._opacity]: animation.Animation$(core.double)
  }));
  dart.setSetterSignature(text_selection._TextSelectionHandleOverlayState, () => ({
    __proto__: dart.getSetters(text_selection._TextSelectionHandleOverlayState.__proto__),
    [S$0._dragPosition]: ui.Offset,
    [S$0._controller$1]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(text_selection._TextSelectionHandleOverlayState, I[56]);
  dart.setFieldSignature(text_selection._TextSelectionHandleOverlayState, () => ({
    __proto__: dart.getFields(text_selection._TextSelectionHandleOverlayState.__proto__),
    [S$0.___TextSelectionHandleOverlayState__dragPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [S$0.___TextSelectionHandleOverlayState__dragPosition_isSet]: dart.fieldType(core.bool),
    [S$0.___TextSelectionHandleOverlayState__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S$0.___TextSelectionHandleOverlayState__controller_isSet]: dart.fieldType(core.bool)
  }));
  text_selection.TextSelectionGestureDetectorBuilderDelegate = class TextSelectionGestureDetectorBuilderDelegate extends core.Object {};
  (text_selection.TextSelectionGestureDetectorBuilderDelegate.new = function() {
    ;
  }).prototype = text_selection.TextSelectionGestureDetectorBuilderDelegate.prototype;
  dart.addTypeTests(text_selection.TextSelectionGestureDetectorBuilderDelegate);
  dart.addTypeCaches(text_selection.TextSelectionGestureDetectorBuilderDelegate);
  dart.setLibraryUri(text_selection.TextSelectionGestureDetectorBuilderDelegate, I[56]);
  text_selection.TextSelectionGestureDetectorBuilder = class TextSelectionGestureDetectorBuilder extends core.Object {
    get delegate() {
      return this[S$0.delegate];
    }
    set delegate(value) {
      super.delegate = value;
    }
    get [S$0._lastSecondaryTapWasOnSelection]() {
      if (!(this.renderEditable.lastSecondaryTapDownPosition != null)) dart.assertFailed(null, I[55], 957, 12, "renderEditable.lastSecondaryTapDownPosition != null");
      if (this.renderEditable.selection == null) {
        return false;
      }
      let textPosition = this.renderEditable.getPositionForPoint(dart.nullCheck(this.renderEditable.lastSecondaryTapDownPosition));
      return dart.notNull(dart.nullCheck(this.renderEditable.selection).base.offset) <= dart.notNull(textPosition.offset) && dart.notNull(dart.nullCheck(this.renderEditable.selection).extent.offset) >= dart.notNull(textPosition.offset);
    }
    get shouldShowSelectionToolbar() {
      return this[S$0._shouldShowSelectionToolbar];
    }
    get editableText() {
      return dart.nullCheck(this.delegate.editableTextKey.currentState);
    }
    get renderEditable() {
      return this.editableText.renderEditable;
    }
    onTapDown(details) {
      if (details == null) dart.nullFailed(I[55], 997, 33, "details");
      this.renderEditable.handleTapDown(details);
      let kind = details.kind;
      this[S$0._shouldShowSelectionToolbar] = kind == null || kind == ui.PointerDeviceKind.touch || kind == ui.PointerDeviceKind.stylus;
    }
    onForcePressStart(details) {
      if (details == null) dart.nullFailed(I[55], 1021, 44, "details");
      if (!dart.test(this.delegate.forcePressEnabled)) dart.assertFailed(null, I[55], 1022, 12, "delegate.forcePressEnabled");
      this[S$0._shouldShowSelectionToolbar] = true;
      if (dart.test(this.delegate.selectionEnabled)) {
        this.renderEditable.selectWordsInRange({from: details.globalPosition, cause: text_input.SelectionChangedCause.forcePress});
      }
    }
    onForcePressEnd(details) {
      if (details == null) dart.nullFailed(I[55], 1044, 42, "details");
      if (!dart.test(this.delegate.forcePressEnabled)) dart.assertFailed(null, I[55], 1045, 12, "delegate.forcePressEnabled");
      this.renderEditable.selectWordsInRange({from: details.globalPosition, cause: text_input.SelectionChangedCause.forcePress});
      if (dart.test(this.shouldShowSelectionToolbar)) this.editableText.showToolbar();
    }
    onSingleTapUp(details) {
      if (details == null) dart.nullFailed(I[55], 1063, 35, "details");
      if (dart.test(this.delegate.selectionEnabled)) {
        this.renderEditable.selectWordEdge({cause: text_input.SelectionChangedCause.tap});
      }
    }
    onSingleTapCancel() {
    }
    onSingleLongTapStart(details) {
      if (details == null) dart.nullFailed(I[55], 1090, 51, "details");
      if (dart.test(this.delegate.selectionEnabled)) {
        this.renderEditable.selectPositionAt({from: details.globalPosition, cause: text_input.SelectionChangedCause.longPress});
      }
    }
    onSingleLongTapMoveUpdate(details) {
      if (details == null) dart.nullFailed(I[55], 1109, 61, "details");
      if (dart.test(this.delegate.selectionEnabled)) {
        this.renderEditable.selectPositionAt({from: details.globalPosition, cause: text_input.SelectionChangedCause.longPress});
      }
    }
    onSingleLongTapEnd(details) {
      if (details == null) dart.nullFailed(I[55], 1127, 47, "details");
      if (dart.test(this.shouldShowSelectionToolbar)) this.editableText.showToolbar();
    }
    onSecondaryTap() {
      if (dart.test(this.delegate.selectionEnabled)) {
        if (!dart.test(this[S$0._lastSecondaryTapWasOnSelection])) {
          this.renderEditable.selectWord({cause: text_input.SelectionChangedCause.tap});
        }
        if (dart.test(this.shouldShowSelectionToolbar)) {
          this.editableText.hideToolbar();
          this.editableText.showToolbar();
        }
      }
    }
    onSecondaryTapDown(details) {
      if (details == null) dart.nullFailed(I[55], 1156, 42, "details");
      this.renderEditable.handleSecondaryTapDown(details);
      this[S$0._shouldShowSelectionToolbar] = true;
    }
    onDoubleTapDown(details) {
      if (details == null) dart.nullFailed(I[55], 1171, 39, "details");
      if (dart.test(this.delegate.selectionEnabled)) {
        this.renderEditable.selectWord({cause: text_input.SelectionChangedCause.tap});
        if (dart.test(this.shouldShowSelectionToolbar)) this.editableText.showToolbar();
      }
    }
    onDragSelectionStart(details) {
      if (details == null) dart.nullFailed(I[55], 1188, 46, "details");
      if (!dart.test(this.delegate.selectionEnabled)) return;
      let kind = details.kind;
      this[S$0._shouldShowSelectionToolbar] = kind == null || kind == ui.PointerDeviceKind.touch || kind == ui.PointerDeviceKind.stylus;
      this.renderEditable.selectPositionAt({from: details.globalPosition, cause: text_input.SelectionChangedCause.drag});
    }
    onDragSelectionUpdate(startDetails, updateDetails) {
      if (startDetails == null) dart.nullFailed(I[55], 1212, 47, "startDetails");
      if (updateDetails == null) dart.nullFailed(I[55], 1212, 79, "updateDetails");
      if (!dart.test(this.delegate.selectionEnabled)) return;
      this.renderEditable.selectPositionAt({from: startDetails.globalPosition, to: updateDetails.globalPosition, cause: text_input.SelectionChangedCause.drag});
    }
    onDragSelectionEnd(details) {
      if (details == null) dart.nullFailed(I[55], 1231, 42, "details");
    }
    buildGestureDetector(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let behavior = opts && 'behavior' in opts ? opts.behavior : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[55], 1240, 21, "child");
      return new text_selection.TextSelectionGestureDetector.new({key: key, onTapDown: dart.bind(this, 'onTapDown'), onForcePressStart: dart.test(this.delegate.forcePressEnabled) ? dart.bind(this, 'onForcePressStart') : null, onForcePressEnd: dart.test(this.delegate.forcePressEnabled) ? dart.bind(this, 'onForcePressEnd') : null, onSecondaryTap: dart.bind(this, 'onSecondaryTap'), onSecondaryTapDown: dart.bind(this, 'onSecondaryTapDown'), onSingleTapUp: dart.bind(this, 'onSingleTapUp'), onSingleTapCancel: dart.bind(this, 'onSingleTapCancel'), onSingleLongTapStart: dart.bind(this, 'onSingleLongTapStart'), onSingleLongTapMoveUpdate: dart.bind(this, 'onSingleLongTapMoveUpdate'), onSingleLongTapEnd: dart.bind(this, 'onSingleLongTapEnd'), onDoubleTapDown: dart.bind(this, 'onDoubleTapDown'), onDragSelectionStart: dart.bind(this, 'onDragSelectionStart'), onDragSelectionUpdate: dart.bind(this, 'onDragSelectionUpdate'), onDragSelectionEnd: dart.bind(this, 'onDragSelectionEnd'), behavior: behavior, child: child, $creationLocationd_0dea112b090073317d4: C[589] || CT.C589});
    }
  };
  (text_selection.TextSelectionGestureDetectorBuilder.new = function(opts) {
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    if (delegate == null) dart.nullFailed(I[55], 944, 19, "delegate");
    this[S$0._shouldShowSelectionToolbar] = true;
    this[S$0.delegate] = delegate;
    if (!(delegate != null)) dart.assertFailed(null, I[55], 945, 15, "delegate != null");
    ;
  }).prototype = text_selection.TextSelectionGestureDetectorBuilder.prototype;
  dart.addTypeTests(text_selection.TextSelectionGestureDetectorBuilder);
  dart.addTypeCaches(text_selection.TextSelectionGestureDetectorBuilder);
  dart.setMethodSignature(text_selection.TextSelectionGestureDetectorBuilder, () => ({
    __proto__: dart.getMethods(text_selection.TextSelectionGestureDetectorBuilder.__proto__),
    onTapDown: dart.fnType(dart.void, [tap$.TapDownDetails]),
    onForcePressStart: dart.fnType(dart.void, [force_press.ForcePressDetails]),
    onForcePressEnd: dart.fnType(dart.void, [force_press.ForcePressDetails]),
    onSingleTapUp: dart.fnType(dart.void, [tap$.TapUpDetails]),
    onSingleTapCancel: dart.fnType(dart.void, []),
    onSingleLongTapStart: dart.fnType(dart.void, [long_press.LongPressStartDetails]),
    onSingleLongTapMoveUpdate: dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails]),
    onSingleLongTapEnd: dart.fnType(dart.void, [long_press.LongPressEndDetails]),
    onSecondaryTap: dart.fnType(dart.void, []),
    onSecondaryTapDown: dart.fnType(dart.void, [tap$.TapDownDetails]),
    onDoubleTapDown: dart.fnType(dart.void, [tap$.TapDownDetails]),
    onDragSelectionStart: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    onDragSelectionUpdate: dart.fnType(dart.void, [drag_details.DragStartDetails, drag_details.DragUpdateDetails]),
    onDragSelectionEnd: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    buildGestureDetector: dart.fnType(framework.Widget, [], {behavior: dart.nullable(proxy_box.HitTestBehavior), key: dart.nullable(key.Key)}, {child: framework.Widget})
  }));
  dart.setGetterSignature(text_selection.TextSelectionGestureDetectorBuilder, () => ({
    __proto__: dart.getGetters(text_selection.TextSelectionGestureDetectorBuilder.__proto__),
    [S$0._lastSecondaryTapWasOnSelection]: core.bool,
    shouldShowSelectionToolbar: core.bool,
    editableText: editable_text.EditableTextState,
    renderEditable: editable.RenderEditable
  }));
  dart.setLibraryUri(text_selection.TextSelectionGestureDetectorBuilder, I[56]);
  dart.setFieldSignature(text_selection.TextSelectionGestureDetectorBuilder, () => ({
    __proto__: dart.getFields(text_selection.TextSelectionGestureDetectorBuilder.__proto__),
    delegate: dart.finalFieldType(text_selection.TextSelectionGestureDetectorBuilderDelegate),
    [S$0._shouldShowSelectionToolbar]: dart.fieldType(core.bool)
  }));
  text_selection.TextSelectionGestureDetector = class TextSelectionGestureDetector extends framework.StatefulWidget {
    get onTapDown() {
      return this[S$0.onTapDown];
    }
    set onTapDown(value) {
      super.onTapDown = value;
    }
    get onForcePressStart() {
      return this[S$0.onForcePressStart];
    }
    set onForcePressStart(value) {
      super.onForcePressStart = value;
    }
    get onForcePressEnd() {
      return this[S$0.onForcePressEnd];
    }
    set onForcePressEnd(value) {
      super.onForcePressEnd = value;
    }
    get onSecondaryTap() {
      return this[S$0.onSecondaryTap];
    }
    set onSecondaryTap(value) {
      super.onSecondaryTap = value;
    }
    get onSecondaryTapDown() {
      return this[S$0.onSecondaryTapDown];
    }
    set onSecondaryTapDown(value) {
      super.onSecondaryTapDown = value;
    }
    get onSingleTapUp() {
      return this[S$0.onSingleTapUp];
    }
    set onSingleTapUp(value) {
      super.onSingleTapUp = value;
    }
    get onSingleTapCancel() {
      return this[S$0.onSingleTapCancel];
    }
    set onSingleTapCancel(value) {
      super.onSingleTapCancel = value;
    }
    get onSingleLongTapStart() {
      return this[S$0.onSingleLongTapStart];
    }
    set onSingleLongTapStart(value) {
      super.onSingleLongTapStart = value;
    }
    get onSingleLongTapMoveUpdate() {
      return this[S$0.onSingleLongTapMoveUpdate];
    }
    set onSingleLongTapMoveUpdate(value) {
      super.onSingleLongTapMoveUpdate = value;
    }
    get onSingleLongTapEnd() {
      return this[S$0.onSingleLongTapEnd];
    }
    set onSingleLongTapEnd(value) {
      super.onSingleLongTapEnd = value;
    }
    get onDoubleTapDown() {
      return this[S$0.onDoubleTapDown];
    }
    set onDoubleTapDown(value) {
      super.onDoubleTapDown = value;
    }
    get onDragSelectionStart() {
      return this[S$0.onDragSelectionStart];
    }
    set onDragSelectionStart(value) {
      super.onDragSelectionStart = value;
    }
    get onDragSelectionUpdate() {
      return this[S$0.onDragSelectionUpdate];
    }
    set onDragSelectionUpdate(value) {
      super.onDragSelectionUpdate = value;
    }
    get onDragSelectionEnd() {
      return this[S$0.onDragSelectionEnd];
    }
    set onDragSelectionEnd(value) {
      super.onDragSelectionEnd = value;
    }
    get behavior() {
      return this[S$0.behavior];
    }
    set behavior(value) {
      super.behavior = value;
    }
    get child() {
      return this[S$0.child$23];
    }
    set child(value) {
      super.child = value;
    }
    createState() {
      return new text_selection._TextSelectionGestureDetectorState.new();
    }
  };
  (text_selection.TextSelectionGestureDetector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let onTapDown = opts && 'onTapDown' in opts ? opts.onTapDown : null;
    let onForcePressStart = opts && 'onForcePressStart' in opts ? opts.onForcePressStart : null;
    let onForcePressEnd = opts && 'onForcePressEnd' in opts ? opts.onForcePressEnd : null;
    let onSecondaryTap = opts && 'onSecondaryTap' in opts ? opts.onSecondaryTap : null;
    let onSecondaryTapDown = opts && 'onSecondaryTapDown' in opts ? opts.onSecondaryTapDown : null;
    let onSingleTapUp = opts && 'onSingleTapUp' in opts ? opts.onSingleTapUp : null;
    let onSingleTapCancel = opts && 'onSingleTapCancel' in opts ? opts.onSingleTapCancel : null;
    let onSingleLongTapStart = opts && 'onSingleLongTapStart' in opts ? opts.onSingleLongTapStart : null;
    let onSingleLongTapMoveUpdate = opts && 'onSingleLongTapMoveUpdate' in opts ? opts.onSingleLongTapMoveUpdate : null;
    let onSingleLongTapEnd = opts && 'onSingleLongTapEnd' in opts ? opts.onSingleLongTapEnd : null;
    let onDoubleTapDown = opts && 'onDoubleTapDown' in opts ? opts.onDoubleTapDown : null;
    let onDragSelectionStart = opts && 'onDragSelectionStart' in opts ? opts.onDragSelectionStart : null;
    let onDragSelectionUpdate = opts && 'onDragSelectionUpdate' in opts ? opts.onDragSelectionUpdate : null;
    let onDragSelectionEnd = opts && 'onDragSelectionEnd' in opts ? opts.onDragSelectionEnd : null;
    let behavior = opts && 'behavior' in opts ? opts.behavior : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[55], 1298, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.onTapDown] = onTapDown;
    this[S$0.onForcePressStart] = onForcePressStart;
    this[S$0.onForcePressEnd] = onForcePressEnd;
    this[S$0.onSecondaryTap] = onSecondaryTap;
    this[S$0.onSecondaryTapDown] = onSecondaryTapDown;
    this[S$0.onSingleTapUp] = onSingleTapUp;
    this[S$0.onSingleTapCancel] = onSingleTapCancel;
    this[S$0.onSingleLongTapStart] = onSingleLongTapStart;
    this[S$0.onSingleLongTapMoveUpdate] = onSingleLongTapMoveUpdate;
    this[S$0.onSingleLongTapEnd] = onSingleLongTapEnd;
    this[S$0.onDoubleTapDown] = onDoubleTapDown;
    this[S$0.onDragSelectionStart] = onDragSelectionStart;
    this[S$0.onDragSelectionUpdate] = onDragSelectionUpdate;
    this[S$0.onDragSelectionEnd] = onDragSelectionEnd;
    this[S$0.behavior] = behavior;
    this[S$0.child$23] = child;
    if (!(child != null)) dart.assertFailed(null, I[55], 1299, 15, "child != null");
    text_selection.TextSelectionGestureDetector.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text_selection.TextSelectionGestureDetector.prototype;
  dart.addTypeTests(text_selection.TextSelectionGestureDetector);
  dart.addTypeCaches(text_selection.TextSelectionGestureDetector);
  dart.setMethodSignature(text_selection.TextSelectionGestureDetector, () => ({
    __proto__: dart.getMethods(text_selection.TextSelectionGestureDetector.__proto__),
    createState: dart.fnType(framework.State$(framework.StatefulWidget), [])
  }));
  dart.setLibraryUri(text_selection.TextSelectionGestureDetector, I[56]);
  dart.setFieldSignature(text_selection.TextSelectionGestureDetector, () => ({
    __proto__: dart.getFields(text_selection.TextSelectionGestureDetector.__proto__),
    onTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onForcePressStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [force_press.ForcePressDetails]))),
    onForcePressEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [force_press.ForcePressDetails]))),
    onSecondaryTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSecondaryTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onSingleTapUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapUpDetails]))),
    onSingleTapCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSingleLongTapStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressStartDetails]))),
    onSingleLongTapMoveUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails]))),
    onSingleLongTapEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressEndDetails]))),
    onDoubleTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onDragSelectionStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragStartDetails]))),
    onDragSelectionUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragStartDetails, drag_details.DragUpdateDetails]))),
    onDragSelectionEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragEndDetails]))),
    behavior: dart.finalFieldType(dart.nullable(proxy_box.HitTestBehavior)),
    child: dart.finalFieldType(framework.Widget)
  }));
  text_selection._TextSelectionGestureDetectorState = class _TextSelectionGestureDetectorState extends framework.State$(text_selection.TextSelectionGestureDetector) {
    dispose() {
      let t47, t47$;
      t47 = this[S$0._doubleTapTimer];
      t47 == null ? null : t47.cancel();
      t47$ = this[S$0._dragUpdateThrottleTimer];
      t47$ == null ? null : t47$.cancel();
      super.dispose();
    }
    [S$0._handleTapDown](details) {
      let t47, t47$;
      if (details == null) dart.nullFailed(I[55], 1389, 38, "details");
      t47 = this.widget.onTapDown;
      t47 == null ? null : t47(details);
      if (this[S$0._doubleTapTimer] != null && dart.test(this[S$0._isWithinDoubleTapTolerance](details.globalPosition))) {
        t47$ = this.widget.onDoubleTapDown;
        t47$ == null ? null : t47$(details);
        dart.nullCheck(this[S$0._doubleTapTimer]).cancel();
        this[S$0._doubleTapTimeout]();
        this[S$0._isDoubleTap] = true;
      }
    }
    [S$0._handleTapUp](details) {
      let t47;
      if (details == null) dart.nullFailed(I[55], 1406, 34, "details");
      if (!dart.test(this[S$0._isDoubleTap])) {
        t47 = this.widget.onSingleTapUp;
        t47 == null ? null : t47(details);
        this[S$0._lastTapOffset] = details.globalPosition;
        this[S$0._doubleTapTimer] = async.Timer.new(constants.kDoubleTapTimeout, dart.bind(this, S$0._doubleTapTimeout));
      }
      this[S$0._isDoubleTap] = false;
    }
    [S$0._handleTapCancel]() {
      let t47;
      t47 = this.widget.onSingleTapCancel;
      t47 == null ? null : t47();
    }
    [S$0._handleDragStart](details) {
      let t47;
      if (details == null) dart.nullFailed(I[55], 1423, 42, "details");
      if (!(this[S$0._lastDragStartDetails] == null)) dart.assertFailed(null, I[55], 1424, 12, "_lastDragStartDetails == null");
      this[S$0._lastDragStartDetails] = details;
      t47 = this.widget.onDragSelectionStart;
      t47 == null ? null : t47(details);
    }
    [S$0._handleDragUpdate](details) {
      if (details == null) dart.nullFailed(I[55], 1429, 44, "details");
      this[S$0._lastDragUpdateDetails] = details;
      this[S$0._dragUpdateThrottleTimer] == null ? this[S$0._dragUpdateThrottleTimer] = async.Timer.new(text_selection._kDragSelectionUpdateThrottle, dart.bind(this, S$0._handleDragUpdateThrottled)) : null;
    }
    [S$0._handleDragUpdateThrottled]() {
      let t47;
      if (!(this[S$0._lastDragStartDetails] != null)) dart.assertFailed(null, I[55], 1442, 12, "_lastDragStartDetails != null");
      if (!(this[S$0._lastDragUpdateDetails] != null)) dart.assertFailed(null, I[55], 1443, 12, "_lastDragUpdateDetails != null");
      t47 = this.widget.onDragSelectionUpdate;
      t47 == null ? null : t47(dart.nullCheck(this[S$0._lastDragStartDetails]), dart.nullCheck(this[S$0._lastDragUpdateDetails]));
      this[S$0._dragUpdateThrottleTimer] = null;
      this[S$0._lastDragUpdateDetails] = null;
    }
    [S$0._handleDragEnd](details) {
      let t47;
      if (details == null) dart.nullFailed(I[55], 1449, 38, "details");
      if (!(this[S$0._lastDragStartDetails] != null)) dart.assertFailed(null, I[55], 1450, 12, "_lastDragStartDetails != null");
      if (this[S$0._dragUpdateThrottleTimer] != null) {
        dart.nullCheck(this[S$0._dragUpdateThrottleTimer]).cancel();
        this[S$0._handleDragUpdateThrottled]();
      }
      t47 = this.widget.onDragSelectionEnd;
      t47 == null ? null : t47(details);
      this[S$0._dragUpdateThrottleTimer] = null;
      this[S$0._lastDragStartDetails] = null;
      this[S$0._lastDragUpdateDetails] = null;
    }
    [S$0._forcePressStarted](details) {
      let t47, t47$;
      if (details == null) dart.nullFailed(I[55], 1463, 45, "details");
      t47 = this[S$0._doubleTapTimer];
      t47 == null ? null : t47.cancel();
      this[S$0._doubleTapTimer] = null;
      t47$ = this.widget.onForcePressStart;
      t47$ == null ? null : t47$(details);
    }
    [S$0._forcePressEnded](details) {
      let t47;
      if (details == null) dart.nullFailed(I[55], 1469, 43, "details");
      t47 = this.widget.onForcePressEnd;
      t47 == null ? null : t47(details);
    }
    [S$0._handleLongPressStart](details) {
      if (details == null) dart.nullFailed(I[55], 1473, 52, "details");
      if (!dart.test(this[S$0._isDoubleTap]) && this.widget.onSingleLongTapStart != null) {
        dart.nullCheck(this.widget.onSingleLongTapStart)(details);
      }
    }
    [S$0._handleLongPressMoveUpdate](details) {
      if (details == null) dart.nullFailed(I[55], 1479, 62, "details");
      if (!dart.test(this[S$0._isDoubleTap]) && this.widget.onSingleLongTapMoveUpdate != null) {
        dart.nullCheck(this.widget.onSingleLongTapMoveUpdate)(details);
      }
    }
    [S$0._handleLongPressEnd](details) {
      if (details == null) dart.nullFailed(I[55], 1485, 48, "details");
      if (!dart.test(this[S$0._isDoubleTap]) && this.widget.onSingleLongTapEnd != null) {
        dart.nullCheck(this.widget.onSingleLongTapEnd)(details);
      }
      this[S$0._isDoubleTap] = false;
    }
    [S$0._doubleTapTimeout]() {
      this[S$0._doubleTapTimer] = null;
      this[S$0._lastTapOffset] = null;
    }
    [S$0._isWithinDoubleTapTolerance](secondTapOffset) {
      if (secondTapOffset == null) dart.nullFailed(I[55], 1497, 43, "secondTapOffset");
      if (!(secondTapOffset != null)) dart.assertFailed(null, I[55], 1498, 12, "secondTapOffset != null");
      if (this[S$0._lastTapOffset] == null) {
        return false;
      }
      let difference = secondTapOffset['-'](dart.nullCheck(this[S$0._lastTapOffset]));
      return dart.notNull(difference.distance) <= 100;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[55], 1508, 29, "context");
      let gestures = new (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer()).new();
      gestures[S$.$_set](dart.wrapType(text_selection._TransparentTapGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOf_TransparentTapGestureRecognizer()).new(dart.fn(() => new text_selection._TransparentTapGestureRecognizer.new({debugOwner: this}), T$.VoidTo_TransparentTapGestureRecognizer()), dart.fn(instance => {
        let t47;
        if (instance == null) dart.nullFailed(I[55], 1516, 41, "instance");
        t47 = instance;
        (() => {
          t47.onSecondaryTap = this.widget.onSecondaryTap;
          t47.onSecondaryTapDown = this.widget.onSecondaryTapDown;
          t47.onTapDown = dart.bind(this, S$0._handleTapDown);
          t47.onTapUp = dart.bind(this, S$0._handleTapUp);
          t47.onTapCancel = dart.bind(this, S$0._handleTapCancel);
          return t47;
        })();
      }, T$._TransparentTapGestureRecognizerTovoid())));
      if (this.widget.onSingleLongTapStart != null || this.widget.onSingleLongTapMoveUpdate != null || this.widget.onSingleLongTapEnd != null) {
        gestures[S$.$_set](dart.wrapType(long_press.LongPressGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfLongPressGestureRecognizer()).new(dart.fn(() => new long_press.LongPressGestureRecognizer.new({debugOwner: this, kind: ui.PointerDeviceKind.touch}), T$.VoidToLongPressGestureRecognizer()), dart.fn(instance => {
          let t47;
          if (instance == null) dart.nullFailed(I[55], 1531, 37, "instance");
          t47 = instance;
          (() => {
            t47.onLongPressStart = dart.bind(this, S$0._handleLongPressStart);
            t47.onLongPressMoveUpdate = dart.bind(this, S$0._handleLongPressMoveUpdate);
            t47.onLongPressEnd = dart.bind(this, S$0._handleLongPressEnd);
            return t47;
          })();
        }, T$.LongPressGestureRecognizerTovoid())));
      }
      if (this.widget.onDragSelectionStart != null || this.widget.onDragSelectionUpdate != null || this.widget.onDragSelectionEnd != null) {
        gestures[S$.$_set](dart.wrapType(monodrag.HorizontalDragGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfHorizontalDragGestureRecognizer()).new(dart.fn(() => new monodrag.HorizontalDragGestureRecognizer.new({debugOwner: this, kind: ui.PointerDeviceKind.mouse}), T$.VoidToHorizontalDragGestureRecognizer()), dart.fn(instance => {
          let t47;
          if (instance == null) dart.nullFailed(I[55], 1547, 42, "instance");
          t47 = instance;
          (() => {
            t47.dragStartBehavior = recognizer.DragStartBehavior.down;
            t47.onStart = dart.bind(this, S$0._handleDragStart);
            t47.onUpdate = dart.bind(this, S$0._handleDragUpdate);
            t47.onEnd = dart.bind(this, S$0._handleDragEnd);
            return t47;
          })();
        }, T$.HorizontalDragGestureRecognizerTovoid())));
      }
      if (this.widget.onForcePressStart != null || this.widget.onForcePressEnd != null) {
        gestures[S$.$_set](dart.wrapType(force_press.ForcePressGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfForcePressGestureRecognizer()).new(dart.fn(() => new force_press.ForcePressGestureRecognizer.new({debugOwner: this}), T$.VoidToForcePressGestureRecognizer()), dart.fn(instance => {
          let t47;
          if (instance == null) dart.nullFailed(I[55], 1562, 38, "instance");
          t47 = instance;
          (() => {
            t47.onStart = this.widget.onForcePressStart != null ? dart.bind(this, S$0._forcePressStarted) : null;
            t47.onEnd = this.widget.onForcePressEnd != null ? dart.bind(this, S$0._forcePressEnded) : null;
            return t47;
          })();
        }, T$.ForcePressGestureRecognizerTovoid())));
      }
      return new gesture_detector.RawGestureDetector.new({gestures: gestures, excludeFromSemantics: true, behavior: this.widget.behavior, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[608] || CT.C608});
    }
  };
  (text_selection._TextSelectionGestureDetectorState.new = function() {
    this[S$0._doubleTapTimer] = null;
    this[S$0._lastTapOffset] = null;
    this[S$0._isDoubleTap] = false;
    this[S$0._lastDragStartDetails] = null;
    this[S$0._lastDragUpdateDetails] = null;
    this[S$0._dragUpdateThrottleTimer] = null;
    text_selection._TextSelectionGestureDetectorState.__proto__.new.call(this);
    ;
  }).prototype = text_selection._TextSelectionGestureDetectorState.prototype;
  dart.addTypeTests(text_selection._TextSelectionGestureDetectorState);
  dart.addTypeCaches(text_selection._TextSelectionGestureDetectorState);
  dart.setMethodSignature(text_selection._TextSelectionGestureDetectorState, () => ({
    __proto__: dart.getMethods(text_selection._TextSelectionGestureDetectorState.__proto__),
    [S$0._handleTapDown]: dart.fnType(dart.void, [tap$.TapDownDetails]),
    [S$0._handleTapUp]: dart.fnType(dart.void, [tap$.TapUpDetails]),
    [S$0._handleTapCancel]: dart.fnType(dart.void, []),
    [S$0._handleDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [S$0._handleDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [S$0._handleDragUpdateThrottled]: dart.fnType(dart.void, []),
    [S$0._handleDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [S$0._forcePressStarted]: dart.fnType(dart.void, [force_press.ForcePressDetails]),
    [S$0._forcePressEnded]: dart.fnType(dart.void, [force_press.ForcePressDetails]),
    [S$0._handleLongPressStart]: dart.fnType(dart.void, [long_press.LongPressStartDetails]),
    [S$0._handleLongPressMoveUpdate]: dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails]),
    [S$0._handleLongPressEnd]: dart.fnType(dart.void, [long_press.LongPressEndDetails]),
    [S$0._doubleTapTimeout]: dart.fnType(dart.void, []),
    [S$0._isWithinDoubleTapTolerance]: dart.fnType(core.bool, [ui.Offset]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(text_selection._TextSelectionGestureDetectorState, I[56]);
  dart.setFieldSignature(text_selection._TextSelectionGestureDetectorState, () => ({
    __proto__: dart.getFields(text_selection._TextSelectionGestureDetectorState.__proto__),
    [S$0._doubleTapTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [S$0._lastTapOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [S$0._isDoubleTap]: dart.fieldType(core.bool),
    [S$0._lastDragStartDetails]: dart.fieldType(dart.nullable(drag_details.DragStartDetails)),
    [S$0._lastDragUpdateDetails]: dart.fieldType(dart.nullable(drag_details.DragUpdateDetails)),
    [S$0._dragUpdateThrottleTimer]: dart.fieldType(dart.nullable(async.Timer))
  }));
  text_selection._TransparentTapGestureRecognizer = class _TransparentTapGestureRecognizer extends tap$.TapGestureRecognizer {
    rejectGesture(pointer) {
      if (pointer == null) dart.nullFailed(I[55], 1594, 26, "pointer");
      if (this.state == recognizer.GestureRecognizerState.ready) {
        this.acceptGesture(pointer);
      } else {
        super.rejectGesture(pointer);
      }
    }
  };
  (text_selection._TransparentTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    text_selection._TransparentTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner});
    ;
  }).prototype = text_selection._TransparentTapGestureRecognizer.prototype;
  dart.addTypeTests(text_selection._TransparentTapGestureRecognizer);
  dart.addTypeCaches(text_selection._TransparentTapGestureRecognizer);
  dart.setLibraryUri(text_selection._TransparentTapGestureRecognizer, I[56]);
  text_selection.ClipboardStatus = class ClipboardStatus extends core.Object {
    toString() {
      return this[S$0._name$11];
    }
  };
  (text_selection.ClipboardStatus.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[55], 1708, 6, "index");
    if (_name == null) dart.nullFailed(I[55], 1708, 6, "_name");
    this.index = index;
    this[S$0._name$11] = _name;
    ;
  }).prototype = text_selection.ClipboardStatus.prototype;
  dart.addTypeTests(text_selection.ClipboardStatus);
  dart.addTypeCaches(text_selection.ClipboardStatus);
  dart.setLibraryUri(text_selection.ClipboardStatus, I[56]);
  dart.setFieldSignature(text_selection.ClipboardStatus, () => ({
    __proto__: dart.getFields(text_selection.ClipboardStatus.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_selection.ClipboardStatus, ['toString']);
  text_selection.ClipboardStatus.pasteable = C[619] || CT.C619;
  text_selection.ClipboardStatus.unknown = C[614] || CT.C614;
  text_selection.ClipboardStatus.notPasteable = C[620] || CT.C620;
  text_selection.ClipboardStatus.values = C[621] || CT.C621;
  const ValueNotifier_WidgetsBindingObserver$36 = class ValueNotifier_WidgetsBindingObserver extends change_notifier.ValueNotifier$(text_selection.ClipboardStatus) {};
  (ValueNotifier_WidgetsBindingObserver$36.new = function(_value) {
    ValueNotifier_WidgetsBindingObserver$36.__proto__.new.call(this, _value);
  }).prototype = ValueNotifier_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(ValueNotifier_WidgetsBindingObserver$36, binding$5.WidgetsBindingObserver);
  text_selection.ClipboardStatusNotifier = class ClipboardStatusNotifier extends ValueNotifier_WidgetsBindingObserver$36 {
    get disposed() {
      return this[S$0._disposed$2];
    }
    update() {
      return async.async(dart.void, (function* update() {
        switch (platform.defaultTargetPlatform) {
          case C[88] || CT.C88:
          {
            this.value = text_selection.ClipboardStatus.pasteable;
            return;
          }
          case C[84] || CT.C84:
          case C[85] || CT.C85:
          case C[86] || CT.C86:
          case C[89] || CT.C89:
          case C[87] || CT.C87:
          {
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        let data = null;
        try {
          data = (yield clipboard.Clipboard.getData("text/plain"));
        } catch (e) {
          let stacktrace = dart.getThrown(e);
          if (core.Object.is(stacktrace)) {
            if (dart.test(this[S$0._disposed$2]) || this.value == text_selection.ClipboardStatus.unknown) {
              return;
            }
            this.value = text_selection.ClipboardStatus.unknown;
            return;
          } else
            throw e;
        }
        let clipboardStatus = data != null && data.text != null && dart.nullCheck(data.text)[S$.$isNotEmpty] ? text_selection.ClipboardStatus.pasteable : text_selection.ClipboardStatus.notPasteable;
        if (dart.test(this[S$0._disposed$2]) || clipboardStatus == this.value) {
          return;
        }
        this.value = clipboardStatus;
      }).bind(this));
    }
    addListener(listener) {
      if (listener == null) dart.nullFailed(I[55], 1668, 33, "listener");
      if (!dart.test(this.hasListeners)) {
        dart.nullCheck(binding$5.WidgetsBinding.instance).addObserver(this);
      }
      if (this.value == text_selection.ClipboardStatus.unknown) {
        this.update();
      }
      super.addListener(listener);
    }
    removeListener(listener) {
      if (listener == null) dart.nullFailed(I[55], 1679, 36, "listener");
      super.removeListener(listener);
      if (!dart.test(this.hasListeners)) {
        dart.nullCheck(binding$5.WidgetsBinding.instance).removeObserver(this);
      }
    }
    didChangeAppLifecycleState(state) {
      if (state == null) dart.nullFailed(I[55], 1687, 53, "state");
      switch (state) {
        case C[615] || CT.C615:
        {
          this.update();
          break;
        }
        case C[616] || CT.C616:
        case C[617] || CT.C617:
        case C[618] || CT.C618:
        {
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    dispose() {
      super.dispose();
      dart.nullCheck(binding$5.WidgetsBinding.instance).removeObserver(this);
      this[S$0._disposed$2] = true;
    }
  };
  (text_selection.ClipboardStatusNotifier.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : C[614] || CT.C614;
    if (value == null) dart.nullFailed(I[55], 1617, 21, "value");
    this[S$0._disposed$2] = false;
    text_selection.ClipboardStatusNotifier.__proto__.new.call(this, value);
    ;
  }).prototype = text_selection.ClipboardStatusNotifier.prototype;
  dart.addTypeTests(text_selection.ClipboardStatusNotifier);
  dart.addTypeCaches(text_selection.ClipboardStatusNotifier);
  dart.setMethodSignature(text_selection.ClipboardStatusNotifier, () => ({
    __proto__: dart.getMethods(text_selection.ClipboardStatusNotifier.__proto__),
    update: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(text_selection.ClipboardStatusNotifier, () => ({
    __proto__: dart.getGetters(text_selection.ClipboardStatusNotifier.__proto__),
    disposed: core.bool
  }));
  dart.setLibraryUri(text_selection.ClipboardStatusNotifier, I[56]);
  dart.setFieldSignature(text_selection.ClipboardStatusNotifier, () => ({
    __proto__: dart.getFields(text_selection.ClipboardStatusNotifier.__proto__),
    [S$0._disposed$2]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(text_selection, {
    /*text_selection._kDragSelectionUpdateThrottle*/get _kDragSelectionUpdateThrottle() {
      return C[622] || CT.C622;
    }
  }, false);
  text_editing_action.TextEditingActionTarget = class TextEditingActionTarget extends core.Object {};
  (text_editing_action.TextEditingActionTarget.new = function() {
    ;
  }).prototype = text_editing_action.TextEditingActionTarget.prototype;
  dart.addTypeTests(text_editing_action.TextEditingActionTarget);
  dart.addTypeCaches(text_editing_action.TextEditingActionTarget);
  dart.setLibraryUri(text_editing_action.TextEditingActionTarget, I[46]);
  inherited_theme.InheritedTheme = class InheritedTheme extends framework.InheritedWidget {
    static captureAll(context, child, opts) {
      if (context == null) dart.nullFailed(I[57], 128, 41, "context");
      if (child == null) dart.nullFailed(I[57], 128, 57, "child");
      let to = opts && 'to' in opts ? opts.to : null;
      if (!(child != null)) dart.assertFailed(null, I[57], 129, 12, "child != null");
      if (!(context != null)) dart.assertFailed(null, I[57], 130, 12, "context != null");
      return inherited_theme.InheritedTheme.capture({from: context, to: to}).wrap(child);
    }
    static capture(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      if (from == null) dart.nullFailed(I[57], 149, 57, "from");
      let to = opts && 'to' in opts ? opts.to : null;
      if (!(from != null)) dart.assertFailed(null, I[57], 150, 12, "from != null");
      if (dart.equals(from, to)) {
        return new inherited_theme.CapturedThemes.__(C[623] || CT.C623);
      }
      let themes = T$.JSArrayOfInheritedTheme().of([]);
      let themeTypes = T$.LinkedHashSetOfType().new();
      let debugDidFindAncestor = null;
      let debugDidFindAncestor$35isSet = false;
      function debugDidFindAncestor$35get() {
        return debugDidFindAncestor$35isSet ? debugDidFindAncestor : dart.throw(new _internal.LateError.localNI("debugDidFindAncestor"));
      }
      dart.fn(debugDidFindAncestor$35get, T$.VoidTobool());
      function debugDidFindAncestor$35set(t51) {
        if (t51 == null) dart.nullFailed(I[57], 159, 15, "null");
        debugDidFindAncestor$35isSet = true;
        return debugDidFindAncestor = t51;
      }
      dart.fn(debugDidFindAncestor$35set, T$.boolTodynamic());
      if (!dart.test(dart.fn(() => {
        debugDidFindAncestor$35set(to == null);
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[57], 160, 12, "() {\r\n      debugDidFindAncestor = to == null;\r\n      return true;\r\n    }()");
      from.visitAncestorElements(dart.fn(ancestor => {
        if (ancestor == null) dart.nullFailed(I[57], 164, 41, "ancestor");
        if (dart.equals(ancestor, to)) {
          if (!dart.test(dart.fn(() => {
            debugDidFindAncestor$35set(true);
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[57], 166, 16, "() {\r\n          debugDidFindAncestor = true;\r\n          return true;\r\n        }()");
          return false;
        }
        if (framework.InheritedElement.is(ancestor) && inherited_theme.InheritedTheme.is(ancestor.widget)) {
          let theme = inherited_theme.InheritedTheme.as(ancestor.widget);
          let themeType = dart.runtimeType(theme);
          if (!dart.test(themeTypes.contains(themeType))) {
            themeTypes.add(themeType);
            themes[S$.$add](theme);
          }
        }
        return true;
      }, T$.ElementTobool()));
      if (!dart.test(debugDidFindAncestor$35get())) dart.assertFailed("The provided `to` context must be an ancestor of the `from` context.", I[57], 186, 12, "debugDidFindAncestor");
      return new inherited_theme.CapturedThemes.__(themes);
    }
  };
  (inherited_theme.InheritedTheme.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[57], 101, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    inherited_theme.InheritedTheme.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = inherited_theme.InheritedTheme.prototype;
  dart.addTypeTests(inherited_theme.InheritedTheme);
  dart.addTypeCaches(inherited_theme.InheritedTheme);
  dart.setLibraryUri(inherited_theme.InheritedTheme, I[58]);
  inherited_theme.CapturedThemes = class CapturedThemes extends core.Object {
    wrap(child) {
      if (child == null) dart.nullFailed(I[57], 201, 22, "child");
      return new inherited_theme._CaptureAll.new({themes: this[S$0._themes], child: child, $creationLocationd_0dea112b090073317d4: C[624] || CT.C624});
    }
  };
  (inherited_theme.CapturedThemes.__ = function(_themes) {
    if (_themes == null) dart.nullFailed(I[57], 196, 25, "_themes");
    this[S$0._themes] = _themes;
    ;
  }).prototype = inherited_theme.CapturedThemes.prototype;
  dart.addTypeTests(inherited_theme.CapturedThemes);
  dart.addTypeCaches(inherited_theme.CapturedThemes);
  dart.setMethodSignature(inherited_theme.CapturedThemes, () => ({
    __proto__: dart.getMethods(inherited_theme.CapturedThemes.__proto__),
    wrap: dart.fnType(framework.Widget, [framework.Widget])
  }));
  dart.setLibraryUri(inherited_theme.CapturedThemes, I[58]);
  dart.setFieldSignature(inherited_theme.CapturedThemes, () => ({
    __proto__: dart.getFields(inherited_theme.CapturedThemes.__proto__),
    [S$0._themes]: dart.finalFieldType(core.List$(inherited_theme.InheritedTheme))
  }));
  inherited_theme._CaptureAll = class _CaptureAll extends framework.StatelessWidget {
    get themes() {
      return this[S$0.themes];
    }
    set themes(value) {
      super.themes = value;
    }
    get child() {
      return this[S$0.child$24];
    }
    set child(value) {
      super.child = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[57], 217, 29, "context");
      let wrappedChild = this.child;
      for (let theme of this.themes)
        wrappedChild = theme.wrap(context, wrappedChild);
      return wrappedChild;
    }
  };
  (inherited_theme._CaptureAll.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let themes = opts && 'themes' in opts ? opts.themes : null;
    if (themes == null) dart.nullFailed(I[57], 209, 19, "themes");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[57], 210, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.themes] = themes;
    this[S$0.child$24] = child;
    if (!(themes != null)) dart.assertFailed(null, I[57], 211, 15, "themes != null");
    if (!(child != null)) dart.assertFailed(null, I[57], 211, 39, "child != null");
    inherited_theme._CaptureAll.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = inherited_theme._CaptureAll.prototype;
  dart.addTypeTests(inherited_theme._CaptureAll);
  dart.addTypeCaches(inherited_theme._CaptureAll);
  dart.setMethodSignature(inherited_theme._CaptureAll, () => ({
    __proto__: dart.getMethods(inherited_theme._CaptureAll.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(inherited_theme._CaptureAll, I[58]);
  dart.setFieldSignature(inherited_theme._CaptureAll, () => ({
    __proto__: dart.getFields(inherited_theme._CaptureAll.__proto__),
    themes: dart.finalFieldType(core.List$(inherited_theme.InheritedTheme)),
    child: dart.finalFieldType(framework.Widget)
  }));
  text.DefaultTextStyle = class DefaultTextStyle extends inherited_theme.InheritedTheme {
    get style() {
      return this[S$0.style];
    }
    set style(value) {
      super.style = value;
    }
    get textAlign() {
      return this[S$0.textAlign$1];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get softWrap() {
      return this[S$0.softWrap$1];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get overflow() {
      return this[S$0.overflow$1];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get maxLines() {
      return this[S$0.maxLines$1];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get textWidthBasis() {
      return this[S$0.textWidthBasis];
    }
    set textWidthBasis(value) {
      super.textWidthBasis = value;
    }
    get textHeightBehavior() {
      return this[S$0.textHeightBehavior];
    }
    set textHeightBehavior(value) {
      super.textHeightBehavior = value;
    }
    static merge(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
      let overflow = opts && 'overflow' in opts ? opts.overflow : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (child == null) dart.nullFailed(I[59], 97, 21, "child");
      if (!(child != null)) dart.assertFailed(null, I[59], 99, 12, "child != null");
      return new basic.Builder.new({builder: dart.fn(context => {
          let t53, t53$, t53$0, t53$1, t53$2;
          if (context == null) dart.nullFailed(I[59], 101, 30, "context");
          let parent = text.DefaultTextStyle.of(context);
          return new text.DefaultTextStyle.new({key: key, style: parent.style.merge(style), textAlign: (t53 = textAlign, t53 == null ? parent.textAlign : t53), softWrap: (t53$ = softWrap, t53$ == null ? parent.softWrap : t53$), overflow: (t53$0 = overflow, t53$0 == null ? parent.overflow : t53$0), maxLines: (t53$1 = maxLines, t53$1 == null ? parent.maxLines : t53$1), textWidthBasis: (t53$2 = textWidthBasis, t53$2 == null ? parent.textWidthBasis : t53$2), child: child, $creationLocationd_0dea112b090073317d4: C[632] || CT.C632});
        }, T$.BuildContextToDefaultTextStyle()), $creationLocationd_0dea112b090073317d4: C[642] || CT.C642});
    }
    static of(context) {
      let t53;
      if (context == null) dart.nullFailed(I[59], 166, 43, "context");
      t53 = context.dependOnInheritedWidgetOfExactType(text.DefaultTextStyle);
      return t53 == null ? C[645] || CT.C645 : t53;
    }
    updateShouldNotify(oldWidget) {
      text.DefaultTextStyle.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[59], 171, 44, "oldWidget");
      return !dart.equals(this.style, oldWidget.style) || this.textAlign != oldWidget.textAlign || this.softWrap != oldWidget.softWrap || this.overflow != oldWidget.overflow || this.maxLines != oldWidget.maxLines || this.textWidthBasis != oldWidget.textWidthBasis || !dart.equals(this.textHeightBehavior, oldWidget.textHeightBehavior);
    }
    wrap(context, child) {
      if (context == null) dart.nullFailed(I[59], 182, 28, "context");
      if (child == null) dart.nullFailed(I[59], 182, 44, "child");
      return new text.DefaultTextStyle.new({style: this.style, textAlign: this.textAlign, softWrap: this.softWrap, overflow: this.overflow, maxLines: this.maxLines, textWidthBasis: this.textWidthBasis, textHeightBehavior: this.textHeightBehavior, child: child, $creationLocationd_0dea112b090073317d4: C[647] || CT.C647});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[59], 196, 56, "properties");
      super.debugFillProperties(properties);
      this.style.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfTextAlign()).new("textAlign", this.textAlign, {defaultValue: null}));
      properties.add(new diagnostics$.FlagProperty.new("softWrap", {value: this.softWrap, ifTrue: "wrapping at box width", ifFalse: "no wrapping except at line break characters", showName: true}));
      properties.add(new (T$.EnumPropertyOfTextOverflow()).new("overflow", this.overflow, {defaultValue: null}));
      properties.add(new diagnostics$.IntProperty.new("maxLines", this.maxLines, {defaultValue: null}));
      properties.add(new (T$.EnumPropertyOfTextWidthBasis()).new("textWidthBasis", this.textWidthBasis, {defaultValue: text_painter.TextWidthBasis.parent}));
      properties.add(new (T$.DiagnosticsPropertyOfTextHeightBehavior()).new("textHeightBehavior", this.textHeightBehavior, {defaultValue: null}));
    }
  };
  (text.DefaultTextStyle.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let style = opts && 'style' in opts ? opts.style : null;
    if (style == null) dart.nullFailed(I[59], 41, 19, "style");
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    if (softWrap == null) dart.nullFailed(I[59], 43, 10, "softWrap");
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[487] || CT.C487;
    if (overflow == null) dart.nullFailed(I[59], 44, 10, "overflow");
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[628] || CT.C628;
    if (textWidthBasis == null) dart.nullFailed(I[59], 46, 10, "textWidthBasis");
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[59], 48, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.style] = style;
    this[S$0.textAlign$1] = textAlign;
    this[S$0.softWrap$1] = softWrap;
    this[S$0.overflow$1] = overflow;
    this[S$0.maxLines$1] = maxLines;
    this[S$0.textWidthBasis] = textWidthBasis;
    this[S$0.textHeightBehavior] = textHeightBehavior;
    if (!(style != null)) dart.assertFailed(null, I[59], 49, 15, "style != null");
    if (!(softWrap != null)) dart.assertFailed(null, I[59], 50, 15, "softWrap != null");
    if (!(overflow != null)) dart.assertFailed(null, I[59], 51, 15, "overflow != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[59], 52, 15, "maxLines == null || maxLines > 0");
    if (!(child != null)) dart.assertFailed(null, I[59], 53, 15, "child != null");
    if (!(textWidthBasis != null)) dart.assertFailed(null, I[59], 54, 15, "textWidthBasis != null");
    text.DefaultTextStyle.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text.DefaultTextStyle.prototype;
  (text.DefaultTextStyle.fallback = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.style] = C[629] || CT.C629;
    this[S$0.textAlign$1] = null;
    this[S$0.softWrap$1] = true;
    this[S$0.maxLines$1] = null;
    this[S$0.overflow$1] = paragraph.TextOverflow.clip;
    this[S$0.textWidthBasis] = text_painter.TextWidthBasis.parent;
    this[S$0.textHeightBehavior] = null;
    text.DefaultTextStyle.__proto__.new.call(this, {key: key, child: C[630] || CT.C630, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text.DefaultTextStyle.prototype;
  dart.addTypeTests(text.DefaultTextStyle);
  dart.addTypeCaches(text.DefaultTextStyle);
  dart.setMethodSignature(text.DefaultTextStyle, () => ({
    __proto__: dart.getMethods(text.DefaultTextStyle.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    wrap: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget])
  }));
  dart.setLibraryUri(text.DefaultTextStyle, I[60]);
  dart.setFieldSignature(text.DefaultTextStyle, () => ({
    __proto__: dart.getFields(text.DefaultTextStyle.__proto__),
    style: dart.finalFieldType(text_style.TextStyle),
    textAlign: dart.finalFieldType(dart.nullable(ui.TextAlign)),
    softWrap: dart.finalFieldType(core.bool),
    overflow: dart.finalFieldType(paragraph.TextOverflow),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    textWidthBasis: dart.finalFieldType(text_painter.TextWidthBasis),
    textHeightBehavior: dart.finalFieldType(dart.nullable(ui.TextHeightBehavior))
  }));
  text._NullWidget = class _NullWidget extends framework.StatelessWidget {
    build(context) {
      if (context == null) dart.nullFailed(I[59], 212, 29, "context");
      dart.throw(assertions.FlutterError.new("A DefaultTextStyle constructed with DefaultTextStyle.fallback cannot be incorporated into the widget tree, " + "it is meant only to provide a fallback value returned by DefaultTextStyle.of() " + "when no enclosing default text style is present in a BuildContext."));
    }
  };
  (text._NullWidget.new = function(opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    text._NullWidget.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text._NullWidget.prototype;
  dart.addTypeTests(text._NullWidget);
  dart.addTypeCaches(text._NullWidget);
  dart.setMethodSignature(text._NullWidget, () => ({
    __proto__: dart.getMethods(text._NullWidget.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(text._NullWidget, I[60]);
  text.DefaultTextHeightBehavior = class DefaultTextHeightBehavior extends inherited_theme.InheritedTheme {
    get textHeightBehavior() {
      return this[S$0.textHeightBehavior$1];
    }
    set textHeightBehavior(value) {
      super.textHeightBehavior = value;
    }
    static of(context) {
      let t53;
      if (context == null) dart.nullFailed(I[59], 256, 46, "context");
      t53 = context.dependOnInheritedWidgetOfExactType(text.DefaultTextHeightBehavior);
      return t53 == null ? null : t53.textHeightBehavior;
    }
    updateShouldNotify(oldWidget) {
      text.DefaultTextHeightBehavior.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[59], 261, 53, "oldWidget");
      return !dart.equals(this.textHeightBehavior, oldWidget.textHeightBehavior);
    }
    wrap(context, child) {
      if (context == null) dart.nullFailed(I[59], 266, 28, "context");
      if (child == null) dart.nullFailed(I[59], 266, 44, "child");
      return new text.DefaultTextHeightBehavior.new({textHeightBehavior: this.textHeightBehavior, child: child, $creationLocationd_0dea112b090073317d4: C[657] || CT.C657});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[59], 274, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfTextHeightBehavior()).new("textHeightBehavior", this.textHeightBehavior, {defaultValue: null}));
    }
  };
  (text.DefaultTextHeightBehavior.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    if (textHeightBehavior == null) dart.nullFailed(I[59], 238, 19, "textHeightBehavior");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[59], 239, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.textHeightBehavior$1] = textHeightBehavior;
    if (!(textHeightBehavior != null)) dart.assertFailed(null, I[59], 240, 16, "textHeightBehavior != null");
    if (!(child != null)) dart.assertFailed(null, I[59], 241, 16, "child != null");
    text.DefaultTextHeightBehavior.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text.DefaultTextHeightBehavior.prototype;
  dart.addTypeTests(text.DefaultTextHeightBehavior);
  dart.addTypeCaches(text.DefaultTextHeightBehavior);
  dart.setMethodSignature(text.DefaultTextHeightBehavior, () => ({
    __proto__: dart.getMethods(text.DefaultTextHeightBehavior.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    wrap: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget])
  }));
  dart.setLibraryUri(text.DefaultTextHeightBehavior, I[60]);
  dart.setFieldSignature(text.DefaultTextHeightBehavior, () => ({
    __proto__: dart.getFields(text.DefaultTextHeightBehavior.__proto__),
    textHeightBehavior: dart.finalFieldType(ui.TextHeightBehavior)
  }));
  text.Text = class Text extends framework.StatelessWidget {
    get data() {
      return this[S$0.data];
    }
    set data(value) {
      super.data = value;
    }
    get textSpan() {
      return this[S$0.textSpan];
    }
    set textSpan(value) {
      super.textSpan = value;
    }
    get style() {
      return this[S$0.style$1];
    }
    set style(value) {
      super.style = value;
    }
    get strutStyle() {
      return this[S$0.strutStyle];
    }
    set strutStyle(value) {
      super.strutStyle = value;
    }
    get textAlign() {
      return this[S$0.textAlign$2];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get textDirection() {
      return this[S$0.textDirection$3];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get locale() {
      return this[S$0.locale];
    }
    set locale(value) {
      super.locale = value;
    }
    get softWrap() {
      return this[S$0.softWrap$2];
    }
    set softWrap(value) {
      super.softWrap = value;
    }
    get overflow() {
      return this[S$0.overflow$2];
    }
    set overflow(value) {
      super.overflow = value;
    }
    get textScaleFactor() {
      return this[S$0.textScaleFactor];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get maxLines() {
      return this[S$0.maxLines$2];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get semanticsLabel() {
      return this[S$0.semanticsLabel$2];
    }
    set semanticsLabel(value) {
      super.semanticsLabel = value;
    }
    get textWidthBasis() {
      return this[S$0.textWidthBasis$1];
    }
    set textWidthBasis(value) {
      super.textWidthBasis = value;
    }
    get textHeightBehavior() {
      return this[S$0.textHeightBehavior$2];
    }
    set textHeightBehavior(value) {
      super.textHeightBehavior = value;
    }
    build(context) {
      let t53, t53$, t53$0, t53$1, t53$2, t53$3, t53$4, t53$5, t53$6;
      if (context == null) dart.nullFailed(I[59], 517, 29, "context");
      let defaultTextStyle = text.DefaultTextStyle.of(context);
      let effectiveTextStyle = this.style;
      if (this.style == null || dart.test(dart.nullCheck(this.style).inherit)) effectiveTextStyle = defaultTextStyle.style.merge(this.style);
      if (dart.test(media_query.MediaQuery.boldTextOverride(context))) effectiveTextStyle = dart.nullCheck(effectiveTextStyle).merge(C[661] || CT.C661);
      let result = new basic.RichText.new({textAlign: (t53$ = (t53 = this.textAlign, t53 == null ? defaultTextStyle.textAlign : t53), t53$ == null ? ui.TextAlign.start : t53$), textDirection: this.textDirection, locale: this.locale, softWrap: (t53$0 = this.softWrap, t53$0 == null ? defaultTextStyle.softWrap : t53$0), overflow: (t53$1 = this.overflow, t53$1 == null ? defaultTextStyle.overflow : t53$1), textScaleFactor: (t53$2 = this.textScaleFactor, t53$2 == null ? media_query.MediaQuery.textScaleFactorOf(context) : t53$2), maxLines: (t53$3 = this.maxLines, t53$3 == null ? defaultTextStyle.maxLines : t53$3), strutStyle: this.strutStyle, textWidthBasis: (t53$4 = this.textWidthBasis, t53$4 == null ? defaultTextStyle.textWidthBasis : t53$4), textHeightBehavior: (t53$6 = (t53$5 = this.textHeightBehavior, t53$5 == null ? defaultTextStyle.textHeightBehavior : t53$5), t53$6 == null ? text.DefaultTextHeightBehavior.of(context) : t53$6), text: new text_span.TextSpan.new({style: effectiveTextStyle, text: this.data, children: this.textSpan != null ? T$.JSArrayOfInlineSpan().of([dart.nullCheck(this.textSpan)]) : null}), $creationLocationd_0dea112b090073317d4: C[663] || CT.C663});
      if (this.semanticsLabel != null) {
        result = new basic.Semantics.new({textDirection: this.textDirection, label: this.semanticsLabel, child: new basic.ExcludeSemantics.new({child: result, $creationLocationd_0dea112b090073317d4: C[676] || CT.C676}), $creationLocationd_0dea112b090073317d4: C[679] || CT.C679});
      }
      return result;
    }
    debugFillProperties(properties) {
      let t53;
      if (properties == null) dart.nullFailed(I[59], 554, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.StringProperty.new("data", this.data, {showName: false}));
      if (this.textSpan != null) {
        properties.add(dart.nullCheck(this.textSpan).toDiagnosticsNode({name: "textSpan", style: diagnostics$.DiagnosticsTreeStyle.transition}));
      }
      t53 = this.style;
      t53 == null ? null : t53.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfTextAlign()).new("textAlign", this.textAlign, {defaultValue: null}));
      properties.add(new (T$.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection, {defaultValue: null}));
      properties.add(new (T$.DiagnosticsPropertyOfLocale()).new("locale", this.locale, {defaultValue: null}));
      properties.add(new diagnostics$.FlagProperty.new("softWrap", {value: this.softWrap, ifTrue: "wrapping at box width", ifFalse: "no wrapping except at line break characters", showName: true}));
      properties.add(new (T$.EnumPropertyOfTextOverflow()).new("overflow", this.overflow, {defaultValue: null}));
      properties.add(new diagnostics$.DoubleProperty.new("textScaleFactor", this.textScaleFactor, {defaultValue: null}));
      properties.add(new diagnostics$.IntProperty.new("maxLines", this.maxLines, {defaultValue: null}));
      properties.add(new (T$.EnumPropertyOfTextWidthBasis()).new("textWidthBasis", this.textWidthBasis, {defaultValue: null}));
      properties.add(new (T$.DiagnosticsPropertyOfTextHeightBehavior()).new("textHeightBehavior", this.textHeightBehavior, {defaultValue: null}));
      if (this.semanticsLabel != null) {
        properties.add(new diagnostics$.StringProperty.new("semanticsLabel", this.semanticsLabel));
      }
    }
  };
  (text.Text.new = function(data, opts) {
    if (data == null) dart.nullFailed(I[59], 363, 17, "data");
    let key = opts && 'key' in opts ? opts.key : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : null;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.data] = data;
    this[S$0.style$1] = style;
    this[S$0.strutStyle] = strutStyle;
    this[S$0.textAlign$2] = textAlign;
    this[S$0.textDirection$3] = textDirection;
    this[S$0.locale] = locale;
    this[S$0.softWrap$2] = softWrap;
    this[S$0.overflow$2] = overflow;
    this[S$0.textScaleFactor] = textScaleFactor;
    this[S$0.maxLines$2] = maxLines;
    this[S$0.semanticsLabel$2] = semanticsLabel;
    this[S$0.textWidthBasis$1] = textWidthBasis;
    this[S$0.textHeightBehavior$2] = textHeightBehavior;
    if (!(data != null)) dart.assertFailed("A non-null String must be provided to a Text widget.", I[59], 378, 10, "data != null");
    this[S$0.textSpan] = null;
    text.Text.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text.Text.prototype;
  (text.Text.rich = function(textSpan, opts) {
    if (textSpan == null) dart.nullFailed(I[59], 395, 21, "textSpan");
    let key = opts && 'key' in opts ? opts.key : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : null;
    let overflow = opts && 'overflow' in opts ? opts.overflow : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let semanticsLabel = opts && 'semanticsLabel' in opts ? opts.semanticsLabel : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : null;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.textSpan] = textSpan;
    this[S$0.style$1] = style;
    this[S$0.strutStyle] = strutStyle;
    this[S$0.textAlign$2] = textAlign;
    this[S$0.textDirection$3] = textDirection;
    this[S$0.locale] = locale;
    this[S$0.softWrap$2] = softWrap;
    this[S$0.overflow$2] = overflow;
    this[S$0.textScaleFactor] = textScaleFactor;
    this[S$0.maxLines$2] = maxLines;
    this[S$0.semanticsLabel$2] = semanticsLabel;
    this[S$0.textWidthBasis$1] = textWidthBasis;
    this[S$0.textHeightBehavior$2] = textHeightBehavior;
    if (!(textSpan != null)) dart.assertFailed("A non-null TextSpan must be provided to a Text.rich widget.", I[59], 410, 10, "textSpan != null");
    this[S$0.data] = null;
    text.Text.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = text.Text.prototype;
  dart.addTypeTests(text.Text);
  dart.addTypeCaches(text.Text);
  dart.setMethodSignature(text.Text, () => ({
    __proto__: dart.getMethods(text.Text.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(text.Text, I[60]);
  dart.setFieldSignature(text.Text, () => ({
    __proto__: dart.getFields(text.Text.__proto__),
    data: dart.finalFieldType(dart.nullable(core.String)),
    textSpan: dart.finalFieldType(dart.nullable(inline_span.InlineSpan)),
    style: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    strutStyle: dart.finalFieldType(dart.nullable(strut_style.StrutStyle)),
    textAlign: dart.finalFieldType(dart.nullable(ui.TextAlign)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    softWrap: dart.finalFieldType(dart.nullable(core.bool)),
    overflow: dart.finalFieldType(dart.nullable(paragraph.TextOverflow)),
    textScaleFactor: dart.finalFieldType(dart.nullable(core.double)),
    maxLines: dart.finalFieldType(dart.nullable(core.int)),
    semanticsLabel: dart.finalFieldType(dart.nullable(core.String)),
    textWidthBasis: dart.finalFieldType(dart.nullable(text_painter.TextWidthBasis)),
    textHeightBehavior: dart.finalFieldType(dart.nullable(ui.TextHeightBehavior))
  }));
  viewport.Viewport = class Viewport extends framework.MultiChildRenderObjectWidget {
    get axisDirection() {
      return this[S$0.axisDirection];
    }
    set axisDirection(value) {
      super.axisDirection = value;
    }
    get crossAxisDirection() {
      return this[S$0.crossAxisDirection];
    }
    set crossAxisDirection(value) {
      super.crossAxisDirection = value;
    }
    get anchor() {
      return this[S$0.anchor];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get offset() {
      return this[S$0.offset];
    }
    set offset(value) {
      super.offset = value;
    }
    get center() {
      return this[S$0.center];
    }
    set center(value) {
      super.center = value;
    }
    get cacheExtent() {
      return this[S$0.cacheExtent];
    }
    set cacheExtent(value) {
      super.cacheExtent = value;
    }
    get cacheExtentStyle() {
      return this[S$0.cacheExtentStyle];
    }
    set cacheExtentStyle(value) {
      super.cacheExtentStyle = value;
    }
    get clipBehavior() {
      return this[S$0.clipBehavior$1];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    static getDefaultCrossAxisDirection(context, axisDirection) {
      if (context == null) dart.nullFailed(I[61], 141, 66, "context");
      if (axisDirection == null) dart.nullFailed(I[61], 141, 89, "axisDirection");
      if (!(axisDirection != null)) dart.assertFailed(null, I[61], 142, 12, "axisDirection != null");
      switch (axisDirection) {
        case C[686] || CT.C686:
        {
          if (!dart.test(debug$0.debugCheckHasDirectionality(context, {why: "to determine the cross-axis direction when the viewport has an 'up' axisDirection", alternative: "Alternatively, consider specifying the 'crossAxisDirection' argument on the Viewport."}))) dart.assertFailed(null, I[61], 145, 16, "debugCheckHasDirectionality(\r\n          context,\r\n          why: 'to determine the cross-axis direction when the viewport has an \\'up\\' axisDirection',\r\n          alternative: 'Alternatively, consider specifying the \\'crossAxisDirection\\' argument on the Viewport.',\r\n        )");
          return basic_types.textDirectionToAxisDirection(basic.Directionality.of(context));
        }
        case C[687] || CT.C687:
        {
          return basic_types.AxisDirection.down;
        }
        case C[684] || CT.C684:
        {
          if (!dart.test(debug$0.debugCheckHasDirectionality(context, {why: "to determine the cross-axis direction when the viewport has a 'down' axisDirection", alternative: "Alternatively, consider specifying the 'crossAxisDirection' argument on the Viewport."}))) dart.assertFailed(null, I[61], 154, 16, "debugCheckHasDirectionality(\r\n          context,\r\n          why: 'to determine the cross-axis direction when the viewport has a \\'down\\' axisDirection',\r\n          alternative: 'Alternatively, consider specifying the \\'crossAxisDirection\\' argument on the Viewport.',\r\n        )");
          return basic_types.textDirectionToAxisDirection(basic.Directionality.of(context));
        }
        case C[688] || CT.C688:
        {
          return basic_types.AxisDirection.down;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    createRenderObject(context) {
      let t53;
      if (context == null) dart.nullFailed(I[61], 166, 50, "context");
      return new viewport$.RenderViewport.new({axisDirection: this.axisDirection, crossAxisDirection: (t53 = this.crossAxisDirection, t53 == null ? viewport.Viewport.getDefaultCrossAxisDirection(context, this.axisDirection) : t53), anchor: this.anchor, offset: this.offset, cacheExtent: this.cacheExtent, cacheExtentStyle: this.cacheExtentStyle, clipBehavior: this.clipBehavior});
    }
    updateRenderObject(context, renderObject) {
      let t54, t53;
      if (context == null) dart.nullFailed(I[61], 179, 40, "context");
      viewport$.RenderViewport.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[61], 179, 64, "renderObject");
      t53 = renderObject;
      (() => {
        t53.axisDirection = this.axisDirection;
        t53.crossAxisDirection = (t54 = this.crossAxisDirection, t54 == null ? viewport.Viewport.getDefaultCrossAxisDirection(context, this.axisDirection) : t54);
        t53.anchor = this.anchor;
        t53.offset = this.offset;
        t53.cacheExtent = this.cacheExtent;
        t53.cacheExtentStyle = this.cacheExtentStyle;
        t53.clipBehavior = this.clipBehavior;
        return t53;
      })();
    }
    createElement() {
      return new viewport._ViewportElement.new(this);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[61], 194, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfAxisDirection()).new("axisDirection", this.axisDirection));
      properties.add(new (T$.EnumPropertyOfAxisDirection()).new("crossAxisDirection", this.crossAxisDirection, {defaultValue: null}));
      properties.add(new diagnostics$.DoubleProperty.new("anchor", this.anchor));
      properties.add(new (T$.DiagnosticsPropertyOfViewportOffset()).new("offset", this.offset));
      if (this.center != null) {
        properties.add(new (T$.DiagnosticsPropertyOfKey()).new("center", this.center));
      } else if (dart.test(this.children[S$.$isNotEmpty]) && this.children[S$.$first].key != null) {
        properties.add(new (T$.DiagnosticsPropertyOfKey()).new("center", this.children[S$.$first].key, {tooltip: "implicit"}));
      }
      properties.add(new (T$.DiagnosticsPropertyOfdouble()).new("cacheExtent", this.cacheExtent));
      properties.add(new (T$.DiagnosticsPropertyOfCacheExtentStyle()).new("cacheExtentStyle", this.cacheExtentStyle));
    }
  };
  (viewport.Viewport.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C[684] || CT.C684;
    if (axisDirection == null) dart.nullFailed(I[61], 58, 10, "axisDirection");
    let crossAxisDirection = opts && 'crossAxisDirection' in opts ? opts.crossAxisDirection : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : 0;
    if (anchor == null) dart.nullFailed(I[61], 60, 10, "anchor");
    let offset = opts && 'offset' in opts ? opts.offset : null;
    if (offset == null) dart.nullFailed(I[61], 61, 19, "offset");
    let center = opts && 'center' in opts ? opts.center : null;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : null;
    let cacheExtentStyle = opts && 'cacheExtentStyle' in opts ? opts.cacheExtentStyle : C[685] || CT.C685;
    if (cacheExtentStyle == null) dart.nullFailed(I[61], 64, 10, "cacheExtentStyle");
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[500] || CT.C500;
    if (clipBehavior == null) dart.nullFailed(I[61], 65, 10, "clipBehavior");
    let slivers = opts && 'slivers' in opts ? opts.slivers : C[395] || CT.C395;
    if (slivers == null) dart.nullFailed(I[61], 66, 18, "slivers");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.axisDirection] = axisDirection;
    this[S$0.crossAxisDirection] = crossAxisDirection;
    this[S$0.anchor] = anchor;
    this[S$0.offset] = offset;
    this[S$0.center] = center;
    this[S$0.cacheExtent] = cacheExtent;
    this[S$0.cacheExtentStyle] = cacheExtentStyle;
    this[S$0.clipBehavior$1] = clipBehavior;
    if (!(offset != null)) dart.assertFailed(null, I[61], 67, 15, "offset != null");
    if (!(slivers != null)) dart.assertFailed(null, I[61], 68, 15, "slivers != null");
    if (!(center == null || slivers[S$.$where](dart.fn(child => {
      if (child == null) dart.nullFailed(I[61], 69, 55, "child");
      return dart.equals(child.key, center);
    }, T$.WidgetTobool()))[S$.$length] === 1)) dart.assertFailed(null, I[61], 69, 15, "center == null || slivers.where((Widget child) => child.key == center).length == 1");
    if (!(cacheExtentStyle != null)) dart.assertFailed(null, I[61], 70, 15, "cacheExtentStyle != null");
    if (!(cacheExtentStyle != viewport$.CacheExtentStyle.viewport || cacheExtent != null)) dart.assertFailed(null, I[61], 71, 15, "cacheExtentStyle != CacheExtentStyle.viewport || cacheExtent != null");
    if (!(clipBehavior != null)) dart.assertFailed(null, I[61], 72, 15, "clipBehavior != null");
    viewport.Viewport.__proto__.new.call(this, {key: key, children: slivers, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = viewport.Viewport.prototype;
  dart.addTypeTests(viewport.Viewport);
  dart.addTypeCaches(viewport.Viewport);
  dart.setMethodSignature(viewport.Viewport, () => ({
    __proto__: dart.getMethods(viewport.Viewport.__proto__),
    createRenderObject: dart.fnType(viewport$.RenderViewport, [framework.BuildContext]),
    createElement: dart.fnType(viewport._ViewportElement, [])
  }));
  dart.setLibraryUri(viewport.Viewport, I[62]);
  dart.setFieldSignature(viewport.Viewport, () => ({
    __proto__: dart.getFields(viewport.Viewport.__proto__),
    axisDirection: dart.finalFieldType(basic_types.AxisDirection),
    crossAxisDirection: dart.finalFieldType(dart.nullable(basic_types.AxisDirection)),
    anchor: dart.finalFieldType(core.double),
    offset: dart.finalFieldType(viewport_offset.ViewportOffset),
    center: dart.finalFieldType(dart.nullable(key.Key)),
    cacheExtent: dart.finalFieldType(dart.nullable(core.double)),
    cacheExtentStyle: dart.finalFieldType(viewport$.CacheExtentStyle),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  viewport._ViewportElement = class _ViewportElement extends framework.MultiChildRenderObjectElement {
    get widget() {
      return viewport.Viewport.as(super.widget);
    }
    get renderObject() {
      return viewport$.RenderViewport.as(super.renderObject);
    }
    mount(parent, newSlot) {
      super.mount(parent, newSlot);
      this[S$0._updateCenter]();
    }
    update(newWidget) {
      framework.MultiChildRenderObjectWidget.as(newWidget);
      if (newWidget == null) dart.nullFailed(I[61], 227, 44, "newWidget");
      super.update(newWidget);
      this[S$0._updateCenter]();
    }
    [S$0._updateCenter]() {
      if (this.widget.center != null) {
        this.renderObject.center = T$.RenderSliverN().as(this.children[S$0.$singleWhere](dart.fn(element => {
          if (element == null) dart.nullFailed(I[61], 236, 18, "element");
          return dart.equals(element.widget.key, this.widget.center);
        }, T$.ElementTobool())).renderObject);
      } else if (dart.test(this.children[S$.$isNotEmpty])) {
        this.renderObject.center = T$.RenderSliverN().as(this.children[S$.$first].renderObject);
      } else {
        this.renderObject.center = null;
      }
    }
    debugVisitOnstageChildren(visitor) {
      if (visitor == null) dart.nullFailed(I[61], 246, 49, "visitor");
      this.children[S$.$where](dart.fn(e => {
        if (e == null) dart.nullFailed(I[61], 247, 29, "e");
        let renderSliver = sliver.RenderSliver.as(dart.nullCheck(e.renderObject));
        return dart.nullCheck(renderSliver.geometry).visible;
      }, T$.ElementTobool()))[S$.$forEach](visitor);
    }
  };
  (viewport._ViewportElement.new = function(widget) {
    if (widget == null) dart.nullFailed(I[61], 212, 29, "widget");
    viewport._ViewportElement.__proto__.new.call(this, widget);
    ;
  }).prototype = viewport._ViewportElement.prototype;
  dart.addTypeTests(viewport._ViewportElement);
  dart.addTypeCaches(viewport._ViewportElement);
  dart.setMethodSignature(viewport._ViewportElement, () => ({
    __proto__: dart.getMethods(viewport._ViewportElement.__proto__),
    [S$0._updateCenter]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(viewport._ViewportElement, () => ({
    __proto__: dart.getGetters(viewport._ViewportElement.__proto__),
    widget: viewport.Viewport,
    renderObject: viewport$.RenderViewport
  }));
  dart.setLibraryUri(viewport._ViewportElement, I[62]);
  viewport.ShrinkWrappingViewport = class ShrinkWrappingViewport extends framework.MultiChildRenderObjectWidget {
    get axisDirection() {
      return this[S$0.axisDirection$1];
    }
    set axisDirection(value) {
      super.axisDirection = value;
    }
    get crossAxisDirection() {
      return this[S$0.crossAxisDirection$1];
    }
    set crossAxisDirection(value) {
      super.crossAxisDirection = value;
    }
    get offset() {
      return this[S$0.offset$1];
    }
    set offset(value) {
      super.offset = value;
    }
    get clipBehavior() {
      return this[S$0.clipBehavior$2];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    createRenderObject(context) {
      let t53;
      if (context == null) dart.nullFailed(I[61], 331, 64, "context");
      return new viewport$.RenderShrinkWrappingViewport.new({axisDirection: this.axisDirection, crossAxisDirection: (t53 = this.crossAxisDirection, t53 == null ? viewport.Viewport.getDefaultCrossAxisDirection(context, this.axisDirection) : t53), offset: this.offset, clipBehavior: this.clipBehavior});
    }
    updateRenderObject(context, renderObject) {
      let t54, t53;
      if (context == null) dart.nullFailed(I[61], 341, 40, "context");
      viewport$.RenderShrinkWrappingViewport.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[61], 341, 78, "renderObject");
      t53 = renderObject;
      (() => {
        t53.axisDirection = this.axisDirection;
        t53.crossAxisDirection = (t54 = this.crossAxisDirection, t54 == null ? viewport.Viewport.getDefaultCrossAxisDirection(context, this.axisDirection) : t54);
        t53.offset = this.offset;
        t53.clipBehavior = this.clipBehavior;
        return t53;
      })();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[61], 350, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfAxisDirection()).new("axisDirection", this.axisDirection));
      properties.add(new (T$.EnumPropertyOfAxisDirection()).new("crossAxisDirection", this.crossAxisDirection, {defaultValue: null}));
      properties.add(new (T$.DiagnosticsPropertyOfViewportOffset()).new("offset", this.offset));
    }
  };
  (viewport.ShrinkWrappingViewport.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C[684] || CT.C684;
    if (axisDirection == null) dart.nullFailed(I[61], 289, 10, "axisDirection");
    let crossAxisDirection = opts && 'crossAxisDirection' in opts ? opts.crossAxisDirection : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    if (offset == null) dart.nullFailed(I[61], 291, 19, "offset");
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[500] || CT.C500;
    if (clipBehavior == null) dart.nullFailed(I[61], 292, 10, "clipBehavior");
    let slivers = opts && 'slivers' in opts ? opts.slivers : C[395] || CT.C395;
    if (slivers == null) dart.nullFailed(I[61], 293, 18, "slivers");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.axisDirection$1] = axisDirection;
    this[S$0.crossAxisDirection$1] = crossAxisDirection;
    this[S$0.offset$1] = offset;
    this[S$0.clipBehavior$2] = clipBehavior;
    if (!(offset != null)) dart.assertFailed(null, I[61], 294, 15, "offset != null");
    viewport.ShrinkWrappingViewport.__proto__.new.call(this, {key: key, children: slivers, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = viewport.ShrinkWrappingViewport.prototype;
  dart.addTypeTests(viewport.ShrinkWrappingViewport);
  dart.addTypeCaches(viewport.ShrinkWrappingViewport);
  dart.setMethodSignature(viewport.ShrinkWrappingViewport, () => ({
    __proto__: dart.getMethods(viewport.ShrinkWrappingViewport.__proto__),
    createRenderObject: dart.fnType(viewport$.RenderShrinkWrappingViewport, [framework.BuildContext])
  }));
  dart.setLibraryUri(viewport.ShrinkWrappingViewport, I[62]);
  dart.setFieldSignature(viewport.ShrinkWrappingViewport, () => ({
    __proto__: dart.getFields(viewport.ShrinkWrappingViewport.__proto__),
    axisDirection: dart.finalFieldType(basic_types.AxisDirection),
    crossAxisDirection: dart.finalFieldType(dart.nullable(basic_types.AxisDirection)),
    offset: dart.finalFieldType(viewport_offset.ViewportOffset),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  scrollbar.ScrollbarPainter = class ScrollbarPainter extends change_notifier.ChangeNotifier {
    get fadeoutOpacityAnimation() {
      return this[S$0.fadeoutOpacityAnimation];
    }
    set fadeoutOpacityAnimation(value) {
      super.fadeoutOpacityAnimation = value;
    }
    get color() {
      return this[S$0._color];
    }
    set color(value) {
      if (value == null) dart.nullFailed(I[63], 103, 19, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 104, 12, "value != null");
      if (dart.equals(this.color, value)) return;
      this[S$0._color] = value;
      this.notifyListeners();
    }
    get trackColor() {
      return this[S$0._trackColor];
    }
    set trackColor(value) {
      if (value == null) dart.nullFailed(I[63], 115, 24, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 116, 12, "value != null");
      if (dart.equals(this.trackColor, value)) return;
      this[S$0._trackColor] = value;
      this.notifyListeners();
    }
    get trackBorderColor() {
      return this[S$0._trackBorderColor];
    }
    set trackBorderColor(value) {
      if (value == null) dart.nullFailed(I[63], 127, 30, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 128, 12, "value != null");
      if (dart.equals(this.trackBorderColor, value)) return;
      this[S$0._trackBorderColor] = value;
      this.notifyListeners();
    }
    get textDirection() {
      return this[S$0._textDirection$1];
    }
    set textDirection(value) {
      if (!(value != null)) dart.assertFailed(null, I[63], 142, 12, "value != null");
      if (this.textDirection == value) return;
      this[S$0._textDirection$1] = value;
      this.notifyListeners();
    }
    get thickness() {
      return this[S$0._thickness];
    }
    set thickness(value) {
      if (value == null) dart.nullFailed(I[63], 153, 24, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 154, 12, "value != null");
      if (this.thickness == value) return;
      this[S$0._thickness] = value;
      this.notifyListeners();
    }
    get mainAxisMargin() {
      return this[S$0._mainAxisMargin];
    }
    set mainAxisMargin(value) {
      if (value == null) dart.nullFailed(I[63], 173, 29, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 174, 12, "value != null");
      if (this.mainAxisMargin == value) return;
      this[S$0._mainAxisMargin] = value;
      this.notifyListeners();
    }
    get crossAxisMargin() {
      return this[S$0._crossAxisMargin];
    }
    set crossAxisMargin(value) {
      if (value == null) dart.nullFailed(I[63], 187, 30, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 188, 12, "value != null");
      if (this.crossAxisMargin == value) return;
      this[S$0._crossAxisMargin] = value;
      this.notifyListeners();
    }
    get radius() {
      return this[S$0._radius];
    }
    set radius(value) {
      if (dart.equals(this.radius, value)) return;
      this[S$0._radius] = value;
      this.notifyListeners();
    }
    get padding() {
      return this[S$0._padding];
    }
    set padding(value) {
      if (value == null) dart.nullFailed(I[63], 220, 26, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 221, 12, "value != null");
      if (dart.equals(this.padding, value)) return;
      this[S$0._padding] = value;
      this.notifyListeners();
    }
    get minLength() {
      return this[S$0._minLength];
    }
    set minLength(value) {
      if (value == null) dart.nullFailed(I[63], 243, 24, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 244, 12, "value != null");
      if (this.minLength == value) return;
      this[S$0._minLength] = value;
      this.notifyListeners();
    }
    get minOverscrollLength() {
      return this[S$0._minOverscrollLength];
    }
    set minOverscrollLength(value) {
      if (value == null) dart.nullFailed(I[63], 264, 34, "value");
      if (!(value != null)) dart.assertFailed(null, I[63], 265, 12, "value != null");
      if (this.minOverscrollLength == value) return;
      this[S$0._minOverscrollLength] = value;
      this.notifyListeners();
    }
    get [S$0._thumbOffset]() {
      let t53;
      return dart.test(this[S$0.__ScrollbarPainter__thumbOffset_isSet]) ? (t53 = this[S$0.__ScrollbarPainter__thumbOffset], t53) : dart.throw(new _internal.LateError.fieldNI("_thumbOffset"));
    }
    set [S$0._thumbOffset](t53) {
      if (t53 == null) dart.nullFailed(I[63], 277, 15, "null");
      this[S$0.__ScrollbarPainter__thumbOffset_isSet] = true;
      this[S$0.__ScrollbarPainter__thumbOffset] = t53;
    }
    update(metrics, axisDirection) {
      if (metrics == null) dart.nullFailed(I[63], 284, 19, "metrics");
      if (axisDirection == null) dart.nullFailed(I[63], 285, 19, "axisDirection");
      this[S$0._lastMetrics] = metrics;
      this[S$0._lastAxisDirection] = axisDirection;
      this.notifyListeners();
    }
    updateThickness(nextThickness, nextRadius) {
      if (nextThickness == null) dart.nullFailed(I[63], 293, 31, "nextThickness");
      if (nextRadius == null) dart.nullFailed(I[63], 293, 53, "nextRadius");
      this.thickness = nextThickness;
      this.radius = nextRadius;
    }
    get [S$0._paintThumb]() {
      let t54;
      t54 = ui.Paint.new();
      return (() => {
        t54.color = this.color.withOpacity(dart.notNull(this.color.opacity) * dart.notNull(this.fadeoutOpacityAnimation.value));
        return t54;
      })();
    }
    [S$0._paintTrack](opts) {
      let t54, t54$;
      let isBorder = opts && 'isBorder' in opts ? opts.isBorder : false;
      if (isBorder == null) dart.nullFailed(I[63], 303, 28, "isBorder");
      if (dart.test(isBorder)) {
        t54 = ui.Paint.new();
        return (() => {
          t54.color = this.trackBorderColor.withOpacity(dart.notNull(this.trackBorderColor.opacity) * dart.notNull(this.fadeoutOpacityAnimation.value));
          t54.style = ui.PaintingStyle.stroke;
          t54.strokeWidth = 1.0;
          return t54;
        })();
      }
      t54$ = ui.Paint.new();
      return (() => {
        t54$.color = this.trackColor.withOpacity(dart.notNull(this.trackColor.opacity) * dart.notNull(this.fadeoutOpacityAnimation.value));
        return t54$;
      })();
    }
    [S$0._paintScrollbar](canvas, size, thumbExtent, direction) {
      if (canvas == null) dart.nullFailed(I[63], 314, 31, "canvas");
      if (size == null) dart.nullFailed(I[63], 314, 44, "size");
      if (thumbExtent == null) dart.nullFailed(I[63], 314, 57, "thumbExtent");
      if (direction == null) dart.nullFailed(I[63], 314, 84, "direction");
      if (!(this.textDirection != null)) dart.assertFailed("A TextDirection must be provided before a Scrollbar can be painted.", I[63], 316, 7, "textDirection != null");
      let x = null;
      let y = null;
      let thumbSize = null;
      let trackSize = null;
      let trackOffset = null;
      switch (direction) {
        case C[684] || CT.C684:
        {
          thumbSize = new ui.Size.new(this.thickness, thumbExtent);
          trackSize = new ui.Size.new(dart.notNull(this.thickness) + 2 * dart.notNull(this.crossAxisMargin), this[S$0._trackExtent]);
          x = this.textDirection == ui.TextDirection.rtl ? dart.notNull(this.crossAxisMargin) + dart.notNull(this.padding.left) : dart.notNull(size.width) - dart.notNull(this.thickness) - dart.notNull(this.crossAxisMargin) - dart.notNull(this.padding.right);
          y = this[S$0._thumbOffset];
          trackOffset = new ui.Offset.new(dart.notNull(x) - dart.notNull(this.crossAxisMargin), 0.0);
          break;
        }
        case C[686] || CT.C686:
        {
          thumbSize = new ui.Size.new(this.thickness, thumbExtent);
          trackSize = new ui.Size.new(dart.notNull(this.thickness) + 2 * dart.notNull(this.crossAxisMargin), this[S$0._trackExtent]);
          x = this.textDirection == ui.TextDirection.rtl ? dart.notNull(this.crossAxisMargin) + dart.notNull(this.padding.left) : dart.notNull(size.width) - dart.notNull(this.thickness) - dart.notNull(this.crossAxisMargin) - dart.notNull(this.padding.right);
          y = this[S$0._thumbOffset];
          trackOffset = new ui.Offset.new(dart.notNull(x) - dart.notNull(this.crossAxisMargin), 0.0);
          break;
        }
        case C[688] || CT.C688:
        {
          thumbSize = new ui.Size.new(thumbExtent, this.thickness);
          x = this[S$0._thumbOffset];
          y = dart.notNull(size.height) - dart.notNull(this.thickness) - dart.notNull(this.crossAxisMargin) - dart.notNull(this.padding.bottom);
          trackSize = new ui.Size.new(this[S$0._trackExtent], dart.notNull(this.thickness) + 2 * dart.notNull(this.crossAxisMargin));
          trackOffset = new ui.Offset.new(0.0, dart.notNull(y) - dart.notNull(this.crossAxisMargin));
          break;
        }
        case C[687] || CT.C687:
        {
          thumbSize = new ui.Size.new(thumbExtent, this.thickness);
          trackSize = new ui.Size.new(this[S$0._trackExtent], dart.notNull(this.thickness) + 2 * dart.notNull(this.crossAxisMargin));
          x = this[S$0._thumbOffset];
          y = dart.notNull(size.height) - dart.notNull(this.thickness) - dart.notNull(this.crossAxisMargin) - dart.notNull(this.padding.bottom);
          trackOffset = new ui.Offset.new(0.0, dart.notNull(y) - dart.notNull(this.crossAxisMargin));
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      this[S$0._trackRect] = trackOffset['&'](trackSize);
      canvas.drawRect(dart.nullCheck(this[S$0._trackRect]), this[S$0._paintTrack]());
      canvas.drawLine(trackOffset, new ui.Offset.new(trackOffset.dx, dart.notNull(trackOffset.dy) + dart.notNull(this[S$0._trackExtent])), this[S$0._paintTrack]({isBorder: true}));
      this[S$0._thumbRect] = new ui.Offset.new(x, y)['&'](thumbSize);
      if (this.radius == null)
        canvas.drawRect(dart.nullCheck(this[S$0._thumbRect]), this[S$0._paintThumb]);
      else
        canvas.drawRRect(new ui.RRect.fromRectAndRadius(dart.nullCheck(this[S$0._thumbRect]), dart.nullCheck(this.radius)), this[S$0._paintThumb]);
    }
    [S$0._thumbExtent]() {
      let fractionVisible = ((dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).extentInside) - dart.notNull(this[S$0._mainAxisPadding])) / (dart.notNull(this[S$0._totalContentExtent]) - dart.notNull(this[S$0._mainAxisPadding])))[S$0.$clamp](0.0, 1.0);
      let thumbExtent = math.max(core.double, math.min(core.double, this[S$0._trackExtent], this.minOverscrollLength), dart.notNull(this[S$0._trackExtent]) * fractionVisible);
      let fractionOverscrolled = 1.0 - dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).extentInside) / dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).viewportDimension);
      let safeMinLength = math.min(core.double, this.minLength, this[S$0._trackExtent]);
      let newMinLength = dart.notNull(this[S$0._beforeExtent]) > 0 && dart.notNull(this[S$0._afterExtent]) > 0 ? safeMinLength : safeMinLength * (1.0 - fractionOverscrolled[S$0.$clamp](0.0, 0.2) / 0.2);
      return thumbExtent[S$0.$clamp](newMinLength, this[S$0._trackExtent]);
    }
    dispose() {
      this.fadeoutOpacityAnimation.removeListener(dart.bind(this, 'notifyListeners'));
      super.dispose();
    }
    get [S$0._isVertical]() {
      return this[S$0._lastAxisDirection] == basic_types.AxisDirection.down || this[S$0._lastAxisDirection] == basic_types.AxisDirection.up;
    }
    get [S$0._isReversed]() {
      return this[S$0._lastAxisDirection] == basic_types.AxisDirection.up || this[S$0._lastAxisDirection] == basic_types.AxisDirection.left;
    }
    get [S$0._beforeExtent]() {
      return dart.test(this[S$0._isReversed]) ? dart.nullCheck(this[S$0._lastMetrics]).extentAfter : dart.nullCheck(this[S$0._lastMetrics]).extentBefore;
    }
    get [S$0._afterExtent]() {
      return dart.test(this[S$0._isReversed]) ? dart.nullCheck(this[S$0._lastMetrics]).extentBefore : dart.nullCheck(this[S$0._lastMetrics]).extentAfter;
    }
    get [S$0._mainAxisPadding]() {
      return dart.test(this[S$0._isVertical]) ? this.padding.vertical : this.padding.horizontal;
    }
    get [S$0._trackExtent]() {
      return dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).viewportDimension) - 2 * dart.notNull(this.mainAxisMargin) - dart.notNull(this[S$0._mainAxisPadding]);
    }
    get [S$0._totalContentExtent]() {
      return dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).maxScrollExtent) - dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).minScrollExtent) + dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).viewportDimension);
    }
    getTrackToScroll(thumbOffsetLocal) {
      if (thumbOffsetLocal == null) dart.nullFailed(I[63], 436, 34, "thumbOffsetLocal");
      if (!(thumbOffsetLocal != null)) dart.assertFailed(null, I[63], 437, 12, "thumbOffsetLocal != null");
      let scrollableExtent = dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).maxScrollExtent) - dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).minScrollExtent);
      let thumbMovableExtent = dart.notNull(this[S$0._trackExtent]) - dart.notNull(this[S$0._thumbExtent]());
      return scrollableExtent * dart.notNull(thumbOffsetLocal) / thumbMovableExtent;
    }
    [S$0._getScrollToTrack](metrics, thumbExtent) {
      if (metrics == null) dart.nullFailed(I[63], 446, 42, "metrics");
      if (thumbExtent == null) dart.nullFailed(I[63], 446, 58, "thumbExtent");
      let scrollableExtent = dart.notNull(metrics.maxScrollExtent) - dart.notNull(metrics.minScrollExtent);
      let fractionPast = scrollableExtent > 0 ? ((dart.notNull(metrics.pixels) - dart.notNull(metrics.minScrollExtent)) / scrollableExtent)[S$0.$clamp](0.0, 1.0) : 0.0;
      return (dart.test(this[S$0._isReversed]) ? 1 - fractionPast : fractionPast) * (dart.notNull(this[S$0._trackExtent]) - dart.notNull(thumbExtent));
    }
    paint(canvas, size) {
      if (canvas == null) dart.nullFailed(I[63], 457, 21, "canvas");
      if (size == null) dart.nullFailed(I[63], 457, 34, "size");
      if (this[S$0._lastAxisDirection] == null || this[S$0._lastMetrics] == null || this.fadeoutOpacityAnimation.value === 0.0) return;
      if (dart.notNull(dart.nullCheck(this[S$0._lastMetrics]).viewportDimension) <= dart.notNull(this[S$0._mainAxisPadding]) || dart.notNull(this[S$0._trackExtent]) <= 0) {
        return;
      }
      let beforePadding = dart.test(this[S$0._isVertical]) ? this.padding.top : this.padding.left;
      let thumbExtent = this[S$0._thumbExtent]();
      let thumbOffsetLocal = this[S$0._getScrollToTrack](dart.nullCheck(this[S$0._lastMetrics]), thumbExtent);
      this[S$0._thumbOffset] = dart.notNull(thumbOffsetLocal) + dart.notNull(this.mainAxisMargin) + dart.notNull(beforePadding);
      if (dart.nullCheck(this[S$0._lastMetrics]).maxScrollExtent[S$0.$isInfinite]) return;
      return this[S$0._paintScrollbar](canvas, size, thumbExtent, dart.nullCheck(this[S$0._lastAxisDirection]));
    }
    hitTestInteractive(position, kind) {
      let t54;
      if (position == null) dart.nullFailed(I[63], 484, 34, "position");
      if (kind == null) dart.nullFailed(I[63], 484, 62, "kind");
      if (this[S$0._thumbRect] == null) {
        return false;
      }
      if (this.fadeoutOpacityAnimation.value === 0.0) {
        return false;
      }
      let interactiveRect = (t54 = this[S$0._trackRect], t54 == null ? dart.nullCheck(this[S$0._thumbRect]) : t54);
      switch (kind) {
        case C[691] || CT.C691:
        {
          let touchScrollbarRect = interactiveRect.expandToInclude(new ui.Rect.fromCircle({center: dart.nullCheck(this[S$0._thumbRect]).center, radius: 48 / 2}));
          return touchScrollbarRect.contains(position);
        }
        case C[692] || CT.C692:
        case C[693] || CT.C693:
        case C[694] || CT.C694:
        case C[695] || CT.C695:
        {
          return interactiveRect.contains(position);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    hitTestOnlyThumbInteractive(position, kind) {
      if (position == null) dart.nullFailed(I[63], 510, 43, "position");
      if (kind == null) dart.nullFailed(I[63], 510, 71, "kind");
      if (this[S$0._thumbRect] == null) {
        return false;
      }
      if (this.fadeoutOpacityAnimation.value === 0.0) {
        return false;
      }
      switch (kind) {
        case C[691] || CT.C691:
        {
          let touchThumbRect = dart.nullCheck(this[S$0._thumbRect]).expandToInclude(new ui.Rect.fromCircle({center: dart.nullCheck(this[S$0._thumbRect]).center, radius: 48 / 2}));
          return touchThumbRect.contains(position);
        }
        case C[692] || CT.C692:
        case C[693] || CT.C693:
        case C[694] || CT.C694:
        case C[695] || CT.C695:
        {
          return dart.nullCheck(this[S$0._thumbRect]).contains(position);
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    hitTest(position) {
      if (this[S$0._thumbRect] == null) {
        return null;
      }
      if (this.fadeoutOpacityAnimation.value === 0.0) {
        return false;
      }
      return dart.nullCheck(this[S$0._thumbRect]).contains(dart.nullCheck(position));
    }
    shouldRepaint(old) {
      scrollbar.ScrollbarPainter.as(old);
      if (old == null) dart.nullFailed(I[63], 547, 39, "old");
      return !dart.equals(this.color, old.color) || !dart.equals(this.trackColor, old.trackColor) || !dart.equals(this.trackBorderColor, old.trackBorderColor) || this.textDirection != old.textDirection || this.thickness != old.thickness || !dart.equals(this.fadeoutOpacityAnimation, old.fadeoutOpacityAnimation) || this.mainAxisMargin != old.mainAxisMargin || this.crossAxisMargin != old.crossAxisMargin || !dart.equals(this.radius, old.radius) || this.minLength != old.minLength || !dart.equals(this.padding, old.padding) || this.minOverscrollLength != old.minOverscrollLength;
    }
    shouldRebuildSemantics(oldDelegate) {
      custom_paint.CustomPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[63], 564, 45, "oldDelegate");
      return false;
    }
    get semanticsBuilder() {
      return null;
    }
    get [S$0._repaint$1]() {
      return T$.ListenableN().as(this[S$0.$noSuchMethod](new core._Invocation.getter(C[696] || CT.C696)));
    }
  };
  (scrollbar.ScrollbarPainter.new = function(opts) {
    let t53;
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[63], 63, 20, "color");
    let fadeoutOpacityAnimation = opts && 'fadeoutOpacityAnimation' in opts ? opts.fadeoutOpacityAnimation : null;
    if (fadeoutOpacityAnimation == null) dart.nullFailed(I[63], 64, 19, "fadeoutOpacityAnimation");
    let trackColor = opts && 'trackColor' in opts ? opts.trackColor : C[689] || CT.C689;
    if (trackColor == null) dart.nullFailed(I[63], 65, 11, "trackColor");
    let trackBorderColor = opts && 'trackBorderColor' in opts ? opts.trackBorderColor : C[689] || CT.C689;
    if (trackBorderColor == null) dart.nullFailed(I[63], 66, 11, "trackBorderColor");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : 6;
    if (thickness == null) dart.nullFailed(I[63], 68, 12, "thickness");
    let padding = opts && 'padding' in opts ? opts.padding : C[690] || CT.C690;
    if (padding == null) dart.nullFailed(I[63], 69, 16, "padding");
    let mainAxisMargin = opts && 'mainAxisMargin' in opts ? opts.mainAxisMargin : 0;
    if (mainAxisMargin == null) dart.nullFailed(I[63], 70, 12, "mainAxisMargin");
    let crossAxisMargin = opts && 'crossAxisMargin' in opts ? opts.crossAxisMargin : 0;
    if (crossAxisMargin == null) dart.nullFailed(I[63], 71, 12, "crossAxisMargin");
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let minLength = opts && 'minLength' in opts ? opts.minLength : 18;
    if (minLength == null) dart.nullFailed(I[63], 73, 12, "minLength");
    let minOverscrollLength = opts && 'minOverscrollLength' in opts ? opts.minOverscrollLength : null;
    this[S$0._lastMetrics] = null;
    this[S$0._lastAxisDirection] = null;
    this[S$0._thumbRect] = null;
    this[S$0._trackRect] = null;
    this[S$0.__ScrollbarPainter__thumbOffset] = null;
    this[S$0.__ScrollbarPainter__thumbOffset_isSet] = false;
    this[S$0.fadeoutOpacityAnimation] = fadeoutOpacityAnimation;
    if (!(color != null)) dart.assertFailed(null, I[63], 75, 15, "color != null");
    if (!(thickness != null)) dart.assertFailed(null, I[63], 76, 15, "thickness != null");
    if (!(fadeoutOpacityAnimation != null)) dart.assertFailed(null, I[63], 77, 15, "fadeoutOpacityAnimation != null");
    if (!(mainAxisMargin != null)) dart.assertFailed(null, I[63], 78, 15, "mainAxisMargin != null");
    if (!(crossAxisMargin != null)) dart.assertFailed(null, I[63], 79, 15, "crossAxisMargin != null");
    if (!(minLength != null)) dart.assertFailed(null, I[63], 80, 15, "minLength != null");
    if (!(dart.notNull(minLength) >= 0)) dart.assertFailed(null, I[63], 81, 15, "minLength >= 0");
    if (!(minOverscrollLength == null || dart.notNull(minOverscrollLength) <= dart.notNull(minLength))) dart.assertFailed(null, I[63], 82, 15, "minOverscrollLength == null || minOverscrollLength <= minLength");
    if (!(minOverscrollLength == null || dart.notNull(minOverscrollLength) >= 0)) dart.assertFailed(null, I[63], 83, 15, "minOverscrollLength == null || minOverscrollLength >= 0");
    if (!(padding != null)) dart.assertFailed(null, I[63], 84, 15, "padding != null");
    if (!dart.test(padding.isNonNegative)) dart.assertFailed(null, I[63], 85, 15, "padding.isNonNegative");
    this[S$0._color] = color;
    this[S$0._textDirection$1] = textDirection;
    this[S$0._thickness] = thickness;
    this[S$0._radius] = radius;
    this[S$0._padding] = padding;
    this[S$0._mainAxisMargin] = mainAxisMargin;
    this[S$0._crossAxisMargin] = crossAxisMargin;
    this[S$0._minLength] = minLength;
    this[S$0._trackColor] = trackColor;
    this[S$0._trackBorderColor] = trackBorderColor;
    this[S$0._minOverscrollLength] = (t53 = minOverscrollLength, t53 == null ? minLength : t53);
    scrollbar.ScrollbarPainter.__proto__.new.call(this);
    this.fadeoutOpacityAnimation.addListener(dart.bind(this, 'notifyListeners'));
  }).prototype = scrollbar.ScrollbarPainter.prototype;
  dart.addTypeTests(scrollbar.ScrollbarPainter);
  dart.addTypeCaches(scrollbar.ScrollbarPainter);
  scrollbar.ScrollbarPainter[dart.implements] = () => [custom_paint.CustomPainter];
  dart.setMethodSignature(scrollbar.ScrollbarPainter, () => ({
    __proto__: dart.getMethods(scrollbar.ScrollbarPainter.__proto__),
    update: dart.fnType(dart.void, [scroll_metrics.ScrollMetrics, basic_types.AxisDirection]),
    updateThickness: dart.fnType(dart.void, [core.double, ui.Radius]),
    [S$0._paintTrack]: dart.fnType(ui.Paint, [], {isBorder: core.bool}, {}),
    [S$0._paintScrollbar]: dart.fnType(dart.void, [ui.Canvas, ui.Size, core.double, basic_types.AxisDirection]),
    [S$0._thumbExtent]: dart.fnType(core.double, []),
    getTrackToScroll: dart.fnType(core.double, [core.double]),
    [S$0._getScrollToTrack]: dart.fnType(core.double, [scroll_metrics.ScrollMetrics, core.double]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    hitTestInteractive: dart.fnType(core.bool, [ui.Offset, ui.PointerDeviceKind]),
    hitTestOnlyThumbInteractive: dart.fnType(core.bool, [ui.Offset, ui.PointerDeviceKind]),
    hitTest: dart.fnType(dart.nullable(core.bool), [dart.nullable(ui.Offset)]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    shouldRebuildSemantics: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(scrollbar.ScrollbarPainter, () => ({
    __proto__: dart.getGetters(scrollbar.ScrollbarPainter.__proto__),
    color: ui.Color,
    trackColor: ui.Color,
    trackBorderColor: ui.Color,
    textDirection: dart.nullable(ui.TextDirection),
    thickness: core.double,
    mainAxisMargin: core.double,
    crossAxisMargin: core.double,
    radius: dart.nullable(ui.Radius),
    padding: edge_insets.EdgeInsets,
    minLength: core.double,
    minOverscrollLength: core.double,
    [S$0._thumbOffset]: core.double,
    [S$0._paintThumb]: ui.Paint,
    [S$0._isVertical]: core.bool,
    [S$0._isReversed]: core.bool,
    [S$0._beforeExtent]: core.double,
    [S$0._afterExtent]: core.double,
    [S$0._mainAxisPadding]: core.double,
    [S$0._trackExtent]: core.double,
    [S$0._totalContentExtent]: core.double,
    semanticsBuilder: dart.nullable(dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size])),
    [S$0._repaint$1]: dart.nullable(change_notifier.Listenable)
  }));
  dart.setSetterSignature(scrollbar.ScrollbarPainter, () => ({
    __proto__: dart.getSetters(scrollbar.ScrollbarPainter.__proto__),
    color: ui.Color,
    trackColor: ui.Color,
    trackBorderColor: ui.Color,
    textDirection: dart.nullable(ui.TextDirection),
    thickness: core.double,
    mainAxisMargin: core.double,
    crossAxisMargin: core.double,
    radius: dart.nullable(ui.Radius),
    padding: edge_insets.EdgeInsets,
    minLength: core.double,
    minOverscrollLength: core.double,
    [S$0._thumbOffset]: core.double
  }));
  dart.setLibraryUri(scrollbar.ScrollbarPainter, I[64]);
  dart.setFieldSignature(scrollbar.ScrollbarPainter, () => ({
    __proto__: dart.getFields(scrollbar.ScrollbarPainter.__proto__),
    [S$0._color]: dart.fieldType(ui.Color),
    [S$0._trackColor]: dart.fieldType(ui.Color),
    [S$0._trackBorderColor]: dart.fieldType(ui.Color),
    [S$0._textDirection$1]: dart.fieldType(dart.nullable(ui.TextDirection)),
    [S$0._thickness]: dart.fieldType(core.double),
    fadeoutOpacityAnimation: dart.finalFieldType(animation.Animation$(core.double)),
    [S$0._mainAxisMargin]: dart.fieldType(core.double),
    [S$0._crossAxisMargin]: dart.fieldType(core.double),
    [S$0._radius]: dart.fieldType(dart.nullable(ui.Radius)),
    [S$0._padding]: dart.fieldType(edge_insets.EdgeInsets),
    [S$0._minLength]: dart.fieldType(core.double),
    [S$0._minOverscrollLength]: dart.fieldType(core.double),
    [S$0._lastMetrics]: dart.fieldType(dart.nullable(scroll_metrics.ScrollMetrics)),
    [S$0._lastAxisDirection]: dart.fieldType(dart.nullable(basic_types.AxisDirection)),
    [S$0._thumbRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [S$0._trackRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [S$0.__ScrollbarPainter__thumbOffset]: dart.fieldType(dart.nullable(core.double)),
    [S$0.__ScrollbarPainter__thumbOffset_isSet]: dart.fieldType(core.bool)
  }));
  scrollbar.RawScrollbar = class RawScrollbar extends framework.StatefulWidget {
    get child() {
      return this[S$0.child$25];
    }
    set child(value) {
      super.child = value;
    }
    get controller() {
      return this[S$0.controller$1];
    }
    set controller(value) {
      super.controller = value;
    }
    get isAlwaysShown() {
      return this[S$0.isAlwaysShown];
    }
    set isAlwaysShown(value) {
      super.isAlwaysShown = value;
    }
    get radius() {
      return this[S$0.radius];
    }
    set radius(value) {
      super.radius = value;
    }
    get thickness() {
      return this[S$0.thickness];
    }
    set thickness(value) {
      super.thickness = value;
    }
    get thumbColor() {
      return this[S$0.thumbColor];
    }
    set thumbColor(value) {
      super.thumbColor = value;
    }
    get fadeDuration() {
      return this[S$0.fadeDuration];
    }
    set fadeDuration(value) {
      super.fadeDuration = value;
    }
    get timeToFade() {
      return this[S$0.timeToFade];
    }
    set timeToFade(value) {
      super.timeToFade = value;
    }
    get pressDuration() {
      return this[S$0.pressDuration];
    }
    set pressDuration(value) {
      super.pressDuration = value;
    }
    get notificationPredicate() {
      return this[S$0.notificationPredicate];
    }
    set notificationPredicate(value) {
      super.notificationPredicate = value;
    }
    get interactive() {
      return this[S$0.interactive];
    }
    set interactive(value) {
      super.interactive = value;
    }
    createState() {
      return new (T$.RawScrollbarStateOfRawScrollbar()).new();
    }
  };
  (scrollbar.RawScrollbar.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[63], 634, 19, "child");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let isAlwaysShown = opts && 'isAlwaysShown' in opts ? opts.isAlwaysShown : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let thumbColor = opts && 'thumbColor' in opts ? opts.thumbColor : null;
    let fadeDuration = opts && 'fadeDuration' in opts ? opts.fadeDuration : C[246] || CT.C246;
    if (fadeDuration == null) dart.nullFailed(I[63], 640, 10, "fadeDuration");
    let timeToFade = opts && 'timeToFade' in opts ? opts.timeToFade : C[697] || CT.C697;
    if (timeToFade == null) dart.nullFailed(I[63], 641, 10, "timeToFade");
    let pressDuration = opts && 'pressDuration' in opts ? opts.pressDuration : C[698] || CT.C698;
    if (pressDuration == null) dart.nullFailed(I[63], 642, 10, "pressDuration");
    let notificationPredicate = opts && 'notificationPredicate' in opts ? opts.notificationPredicate : C[699] || CT.C699;
    if (notificationPredicate == null) dart.nullFailed(I[63], 643, 10, "notificationPredicate");
    let interactive = opts && 'interactive' in opts ? opts.interactive : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.child$25] = child;
    this[S$0.controller$1] = controller;
    this[S$0.isAlwaysShown] = isAlwaysShown;
    this[S$0.radius] = radius;
    this[S$0.thickness] = thickness;
    this[S$0.thumbColor] = thumbColor;
    this[S$0.fadeDuration] = fadeDuration;
    this[S$0.timeToFade] = timeToFade;
    this[S$0.pressDuration] = pressDuration;
    this[S$0.notificationPredicate] = notificationPredicate;
    this[S$0.interactive] = interactive;
    if (!(child != null)) dart.assertFailed(null, I[63], 645, 15, "child != null");
    if (!(fadeDuration != null)) dart.assertFailed(null, I[63], 646, 15, "fadeDuration != null");
    if (!(timeToFade != null)) dart.assertFailed(null, I[63], 647, 15, "timeToFade != null");
    if (!(pressDuration != null)) dart.assertFailed(null, I[63], 648, 15, "pressDuration != null");
    scrollbar.RawScrollbar.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scrollbar.RawScrollbar.prototype;
  dart.addTypeTests(scrollbar.RawScrollbar);
  dart.addTypeCaches(scrollbar.RawScrollbar);
  dart.setMethodSignature(scrollbar.RawScrollbar, () => ({
    __proto__: dart.getMethods(scrollbar.RawScrollbar.__proto__),
    createState: dart.fnType(scrollbar.RawScrollbarState$(scrollbar.RawScrollbar), [])
  }));
  dart.setLibraryUri(scrollbar.RawScrollbar, I[64]);
  dart.setFieldSignature(scrollbar.RawScrollbar, () => ({
    __proto__: dart.getFields(scrollbar.RawScrollbar.__proto__),
    child: dart.finalFieldType(framework.Widget),
    controller: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController)),
    isAlwaysShown: dart.finalFieldType(dart.nullable(core.bool)),
    radius: dart.finalFieldType(dart.nullable(ui.Radius)),
    thickness: dart.finalFieldType(dart.nullable(core.double)),
    thumbColor: dart.finalFieldType(dart.nullable(ui.Color)),
    fadeDuration: dart.finalFieldType(core.Duration),
    timeToFade: dart.finalFieldType(core.Duration),
    pressDuration: dart.finalFieldType(core.Duration),
    notificationPredicate: dart.finalFieldType(dart.fnType(core.bool, [scroll_notification.ScrollNotification])),
    interactive: dart.finalFieldType(dart.nullable(core.bool))
  }));
  const _is_RawScrollbarState_default = Symbol('_is_RawScrollbarState_default');
  scrollbar.RawScrollbarState$ = dart.generic(T => {
    const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(T) {};
    (State_TickerProviderStateMixin$36.new = function() {
      ticker_provider.TickerProviderStateMixin$(T)[dart.mixinNew].call(this);
      State_TickerProviderStateMixin$36.__proto__.new.call(this);
    }).prototype = State_TickerProviderStateMixin$36.prototype;
    dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(T));
    class RawScrollbarState extends State_TickerProviderStateMixin$36 {
      get [S$0._fadeoutAnimationController]() {
        let t54;
        return dart.test(this[S$0.__RawScrollbarState__fadeoutAnimationController_isSet]) ? (t54 = this[S$0.__RawScrollbarState__fadeoutAnimationController], t54) : dart.throw(new _internal.LateError.fieldNI("_fadeoutAnimationController"));
      }
      set [S$0._fadeoutAnimationController](t54) {
        if (t54 == null) dart.nullFailed(I[63], 871, 28, "null");
        this[S$0.__RawScrollbarState__fadeoutAnimationController_isSet] = true;
        this[S$0.__RawScrollbarState__fadeoutAnimationController] = t54;
      }
      get [S$0._fadeoutOpacityAnimation]() {
        let t55;
        return dart.test(this[S$0.__RawScrollbarState__fadeoutOpacityAnimation_isSet]) ? (t55 = this[S$0.__RawScrollbarState__fadeoutOpacityAnimation], t55) : dart.throw(new _internal.LateError.fieldNI("_fadeoutOpacityAnimation"));
      }
      set [S$0._fadeoutOpacityAnimation](t55) {
        if (t55 == null) dart.nullFailed(I[63], 872, 26, "null");
        this[S$0.__RawScrollbarState__fadeoutOpacityAnimation_isSet] = true;
        this[S$0.__RawScrollbarState__fadeoutOpacityAnimation] = t55;
      }
      get scrollbarPainter() {
        let t56;
        return dart.test(this[S$0.__RawScrollbarState_scrollbarPainter_isSet]) ? (t56 = this[S$0.__RawScrollbarState_scrollbarPainter], t56) : dart.throw(new _internal.LateError.fieldNI("scrollbarPainter"));
      }
      set scrollbarPainter(t56) {
        if (t56 == null) dart.nullFailed(I[63], 882, 31, "null");
        if (dart.test(this[S$0.__RawScrollbarState_scrollbarPainter_isSet]))
          dart.throw(new _internal.LateError.fieldAI("scrollbarPainter"));
        else {
          this[S$0.__RawScrollbarState_scrollbarPainter_isSet] = true;
          this[S$0.__RawScrollbarState_scrollbarPainter] = t56;
        }
      }
      get showScrollbar() {
        let t57;
        t57 = this.widget.isAlwaysShown;
        return t57 == null ? false : t57;
      }
      get enableGestures() {
        let t57;
        t57 = this.widget.interactive;
        return t57 == null ? true : t57;
      }
      initState() {
        let t57, t57$;
        super.initState();
        this[S$0._fadeoutAnimationController] = new animation_controller.AnimationController.new({vsync: this, duration: this.widget.fadeDuration});
        this[S$0._fadeoutOpacityAnimation] = new animations.CurvedAnimation.new({parent: this[S$0._fadeoutAnimationController], curve: curves.Curves.fastOutSlowIn});
        this.scrollbarPainter = new scrollbar.ScrollbarPainter.new({color: (t57 = this.widget.thumbColor, t57 == null ? C[700] || CT.C700 : t57), thickness: (t57$ = this.widget.thickness, t57$ == null ? 6 : t57$), fadeoutOpacityAnimation: this[S$0._fadeoutOpacityAnimation]});
      }
      didChangeDependencies() {
        super.didChangeDependencies();
        this[S$0._maybeTriggerScrollbar]();
      }
      [S$0._maybeTriggerScrollbar]() {
        dart.nullCheck(binding$5.WidgetsBinding.instance).addPostFrameCallback(dart.fn(duration => {
          let t57, t57$;
          if (duration == null) dart.nullFailed(I[63], 941, 61, "duration");
          if (dart.test(this.showScrollbar)) {
            t57 = this[S$0._fadeoutTimer];
            t57 == null ? null : t57.cancel();
            let scrollController = (t57$ = this.widget.controller, t57$ == null ? primary_scroll_controller.PrimaryScrollController.of(this.context) : t57$);
            let tryPrimary = this.widget.controller == null;
            let controllerForError = tryPrimary ? "provided ScrollController" : "PrimaryScrollController";
            if (!(scrollController != null)) dart.assertFailed("A ScrollController is required when Scrollbar.isAlwaysShown is true. " + (tryPrimary ? "The Scrollbar was not provided a ScrollController, " + "and attempted to use the PrimaryScrollController, but none was found." : ""), I[63], 953, 11, "scrollController != null");
            if (!dart.test(dart.fn(() => {
              if (!dart.test(dart.nullCheck(scrollController).hasClients)) {
                dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The Scrollbar's ScrollController has no ScrollPosition attached."), new assertions.ErrorDescription.new("A Scrollbar cannot be painted without a ScrollPosition. "), new assertions.ErrorHint.new("The Scrollbar attempted to use the " + controllerForError + ". This " + "ScrollController should be associated with the ScrollView that " + "the Scrollbar is being applied to. " + (tryPrimary ? "A ScrollView with an Axis.vertical " + "ScrollDirection will automatically use the " + "PrimaryScrollController if the user has not provided a " + "ScrollController, but a ScrollDirection of Axis.horizontal will " + "not. To use the PrimaryScrollController explicitly, set ScrollView.primary " + "to true for the Scrollable widget." : "When providing your own ScrollController, ensure both the " + "Scrollbar and the Scrollable widget use the same one."))])));
              }
              return true;
            }, T$.VoidTobool())())) dart.assertFailed(null, I[63], 958, 17, "() {\r\n          if (!scrollController!.hasClients) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary(\r\n                'The Scrollbar\\'s ScrollController has no ScrollPosition attached.',\r\n              ),\r\n              ErrorDescription(\r\n                'A Scrollbar cannot be painted without a ScrollPosition. ',\r\n              ),\r\n              ErrorHint(\r\n                'The Scrollbar attempted to use the $controllerForError. This '\r\n                'ScrollController should be associated with the ScrollView that '\r\n                'the Scrollbar is being applied to. '\r\n                '${tryPrimary\r\n                  ? 'A ScrollView with an Axis.vertical '\r\n                    'ScrollDirection will automatically use the '\r\n                    'PrimaryScrollController if the user has not provided a '\r\n                    'ScrollController, but a ScrollDirection of Axis.horizontal will '\r\n                    'not. To use the PrimaryScrollController explicitly, set ScrollView.primary '\r\n                    'to true for the Scrollable widget.'\r\n                  : 'When providing your own ScrollController, ensure both the '\r\n                    'Scrollbar and the Scrollable widget use the same one.'\r\n                }',\r\n              ),\r\n            ]);\r\n          }\r\n          return true;\r\n        }()");
            if (!dart.test(dart.fn(() => {
              try {
                dart.nullCheck(scrollController).position;
              } catch (e) {
                let _ = dart.getThrown(e);
                if (core.Object.is(_)) {
                  dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("The " + controllerForError + " is currently attached to more than one " + "ScrollPosition."), new assertions.ErrorDescription.new("The Scrollbar requires a single ScrollPosition in order to be painted."), new assertions.ErrorHint.new("When Scrollbar.isAlwaysShown is true, the associated Scrollable " + "widgets must have unique ScrollControllers. " + (tryPrimary ? "The PrimaryScrollController is used by default for " + "ScrollViews with an Axis.vertical ScrollDirection, " + "unless the ScrollView has been provided its own " + "ScrollController. More than one Scrollable may have tried " + "to use the PrimaryScrollController of the current context." : "The provided ScrollController must be unique to a " + "Scrollable widget."))])));
                } else
                  throw e;
              }
              return true;
            }, T$.VoidTobool())())) dart.assertFailed(null, I[63], 986, 17, "() {\r\n          try {\r\n            scrollController!.position;\r\n          } catch (_) {\r\n            throw FlutterError.fromParts(<DiagnosticsNode>[\r\n              ErrorSummary(\r\n                'The $controllerForError is currently attached to more than one '\r\n                'ScrollPosition.',\r\n              ),\r\n              ErrorDescription(\r\n                'The Scrollbar requires a single ScrollPosition in order to be painted.',\r\n              ),\r\n              ErrorHint(\r\n                'When Scrollbar.isAlwaysShown is true, the associated Scrollable '\r\n                'widgets must have unique ScrollControllers. '\r\n                '${tryPrimary\r\n                  ? 'The PrimaryScrollController is used by default for '\r\n                    'ScrollViews with an Axis.vertical ScrollDirection, '\r\n                    'unless the ScrollView has been provided its own '\r\n                    'ScrollController. More than one Scrollable may have tried '\r\n                    'to use the PrimaryScrollController of the current context.'\r\n                  : 'The provided ScrollController must be unique to a '\r\n                    'Scrollable widget.'\r\n                }',\r\n              ),\r\n            ]);\r\n          }\r\n          return true;\r\n        }()");
            dart.nullCheck(scrollController).position.didUpdateScrollPositionBy(0.0);
          }
        }, T$.DurationTovoid()));
      }
      updateScrollbarPainter() {
        let t59, t59$, t58;
        t58 = this.scrollbarPainter;
        (() => {
          t58.color = (t59 = this.widget.thumbColor, t59 == null ? C[700] || CT.C700 : t59);
          t58.textDirection = basic.Directionality.of(this.context);
          t58.thickness = (t59$ = this.widget.thickness, t59$ == null ? 6 : t59$);
          t58.radius = this.widget.radius;
          t58.padding = media_query.MediaQuery.of(this.context).padding;
          return t58;
        })();
      }
      didUpdateWidget(oldWidget) {
        T.as(oldWidget);
        if (oldWidget == null) dart.nullFailed(I[63], 1036, 26, "oldWidget");
        super.didUpdateWidget(oldWidget);
        if (this.widget.isAlwaysShown != oldWidget.isAlwaysShown) {
          if (this.widget.isAlwaysShown === true) {
            this[S$0._maybeTriggerScrollbar]();
            this[S$0._fadeoutAnimationController].animateTo(1.0);
          } else {
            this[S$0._fadeoutAnimationController].reverse();
          }
        }
      }
      [S$0._updateScrollPosition](primaryDelta) {
        if (primaryDelta == null) dart.nullFailed(I[63], 1048, 37, "primaryDelta");
        if (!(this[S$0._currentController] != null)) dart.assertFailed(null, I[63], 1049, 12, "_currentController != null");
        let position = dart.nullCheck(this[S$0._currentController]).position;
        let scrollOffsetLocal = this.scrollbarPainter.getTrackToScroll(primaryDelta);
        let scrollOffsetGlobal = dart.notNull(scrollOffsetLocal) + dart.notNull(position.pixels);
        if (scrollOffsetGlobal !== position.pixels) {
          let physicsAdjustment = position.physics.applyBoundaryConditions(position, scrollOffsetGlobal);
          position.jumpTo(scrollOffsetGlobal - dart.notNull(physicsAdjustment));
        }
      }
      [S$0._maybeStartFadeoutTimer]() {
        let t58;
        if (!dart.test(this.showScrollbar)) {
          t58 = this[S$0._fadeoutTimer];
          t58 == null ? null : t58.cancel();
          this[S$0._fadeoutTimer] = async.Timer.new(this.widget.timeToFade, dart.fn(() => {
            this[S$0._fadeoutAnimationController].reverse();
            this[S$0._fadeoutTimer] = null;
          }, T$.VoidTovoid()));
        }
      }
      getScrollbarDirection() {
        if (!(this[S$0._currentController] != null)) dart.assertFailed(null, I[63], 1078, 12, "_currentController != null");
        if (dart.test(dart.nullCheck(this[S$0._currentController]).hasClients)) return dart.nullCheck(this[S$0._currentController]).position.axis;
        return null;
      }
      handleThumbPress() {
        let t58;
        if (this.getScrollbarDirection() == null) {
          return;
        }
        t58 = this[S$0._fadeoutTimer];
        t58 == null ? null : t58.cancel();
      }
      handleThumbPressStart(localPosition) {
        let t58, t58$;
        if (localPosition == null) dart.nullFailed(I[63], 1101, 37, "localPosition");
        this[S$0._currentController] = (t58 = this.widget.controller, t58 == null ? primary_scroll_controller.PrimaryScrollController.of(this.context) : t58);
        let direction = this.getScrollbarDirection();
        if (direction == null) {
          return;
        }
        t58$ = this[S$0._fadeoutTimer];
        t58$ == null ? null : t58$.cancel();
        this[S$0._fadeoutAnimationController].forward();
        switch (direction) {
          case C[454] || CT.C454:
          {
            this[S$0._dragScrollbarAxisPosition] = localPosition.dy;
            break;
          }
          case C[701] || CT.C701:
          {
            this[S$0._dragScrollbarAxisPosition] = localPosition.dx;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      handleThumbPressUpdate(localPosition) {
        if (localPosition == null) dart.nullFailed(I[63], 1124, 38, "localPosition");
        let direction = this.getScrollbarDirection();
        if (direction == null) {
          return;
        }
        switch (direction) {
          case C[454] || CT.C454:
          {
            this[S$0._updateScrollPosition](dart.notNull(localPosition.dy) - dart.nullCheck(this[S$0._dragScrollbarAxisPosition]));
            this[S$0._dragScrollbarAxisPosition] = localPosition.dy;
            break;
          }
          case C[701] || CT.C701:
          {
            this[S$0._updateScrollPosition](dart.notNull(localPosition.dx) - dart.nullCheck(this[S$0._dragScrollbarAxisPosition]));
            this[S$0._dragScrollbarAxisPosition] = localPosition.dx;
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      handleThumbPressEnd(localPosition, velocity) {
        if (localPosition == null) dart.nullFailed(I[63], 1144, 35, "localPosition");
        if (velocity == null) dart.nullFailed(I[63], 1144, 59, "velocity");
        let direction = this.getScrollbarDirection();
        if (direction == null) return;
        this[S$0._maybeStartFadeoutTimer]();
        this[S$0._dragScrollbarAxisPosition] = null;
        this[S$0._currentController] = null;
      }
      [S$0._handleTrackTapDown](details) {
        let t58, t58$;
        if (details == null) dart.nullFailed(I[63], 1153, 43, "details");
        this[S$0._currentController] = (t58 = this.widget.controller, t58 == null ? primary_scroll_controller.PrimaryScrollController.of(this.context) : t58);
        let scrollIncrement = null;
        let calculator = (t58$ = scrollable$.Scrollable.of(dart.nullCheck(dart.nullCheck(this[S$0._currentController]).position.context.notificationContext)), t58$ == null ? null : t58$.widget.incrementCalculator);
        if (calculator != null) {
          scrollIncrement = calculator(new scrollable$.ScrollIncrementDetails.new({type: scrollable$.ScrollIncrementType.page, metrics: dart.nullCheck(this[S$0._currentController]).position}));
        } else {
          scrollIncrement = 0.8 * dart.notNull(dart.nullCheck(this[S$0._currentController]).position.viewportDimension);
        }
        switch (dart.nullCheck(this[S$0._currentController]).position.axisDirection) {
          case C[686] || CT.C686:
          {
            if (dart.notNull(details.localPosition.dy) > dart.notNull(this.scrollbarPainter[S$0._thumbOffset])) scrollIncrement = -dart.notNull(scrollIncrement);
            break;
          }
          case C[684] || CT.C684:
          {
            if (dart.notNull(details.localPosition.dy) < dart.notNull(this.scrollbarPainter[S$0._thumbOffset])) scrollIncrement = -dart.notNull(scrollIncrement);
            break;
          }
          case C[687] || CT.C687:
          {
            if (dart.notNull(details.localPosition.dx) < dart.notNull(this.scrollbarPainter[S$0._thumbOffset])) scrollIncrement = -dart.notNull(scrollIncrement);
            break;
          }
          case C[688] || CT.C688:
          {
            if (dart.notNull(details.localPosition.dx) > dart.notNull(this.scrollbarPainter[S$0._thumbOffset])) scrollIncrement = -dart.notNull(scrollIncrement);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
        dart.nullCheck(this[S$0._currentController]).position.moveTo(dart.notNull(dart.nullCheck(this[S$0._currentController]).position.pixels) + dart.notNull(scrollIncrement), {duration: C[702] || CT.C702, curve: curves.Curves.easeInOut});
      }
      [S$0._handleScrollNotification](notification) {
        let t59, t58, t58$;
        if (notification == null) dart.nullFailed(I[63], 1201, 53, "notification");
        if (!dart.test((t58 = this.widget, t59 = notification, t58.notificationPredicate(t59)))) return false;
        let metrics = notification.metrics;
        if (dart.notNull(metrics.maxScrollExtent) <= dart.notNull(metrics.minScrollExtent)) return false;
        if (scroll_notification.ScrollUpdateNotification.is(notification) || scroll_notification.OverscrollNotification.is(notification)) {
          if (this[S$0._fadeoutAnimationController].status != animation.AnimationStatus.forward) this[S$0._fadeoutAnimationController].forward();
          t58$ = this[S$0._fadeoutTimer];
          t58$ == null ? null : t58$.cancel();
          this.scrollbarPainter.update(notification.metrics, notification.metrics.axisDirection);
        } else if (scroll_notification.ScrollEndNotification.is(notification)) {
          if (this[S$0._dragScrollbarAxisPosition] == null) this[S$0._maybeStartFadeoutTimer]();
        }
        return false;
      }
      get [S$0._gestures]() {
        let t58;
        let gestures = new (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer()).new();
        let controller = (t58 = this.widget.controller, t58 == null ? primary_scroll_controller.PrimaryScrollController.of(this.context) : t58);
        if (controller == null || !dart.test(this.enableGestures)) return gestures;
        gestures[S$.$_set](dart.wrapType(scrollbar._ThumbPressGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOf_ThumbPressGestureRecognizer()).new(dart.fn(() => new scrollbar._ThumbPressGestureRecognizer.new({debugOwner: this, customPaintKey: this[S$0._scrollbarPainterKey], pressDuration: this.widget.pressDuration}), T$.VoidTo_ThumbPressGestureRecognizer()), dart.fn(instance => {
          if (instance == null) dart.nullFailed(I[63], 1237, 41, "instance");
          instance.onLongPress = dart.bind(this, 'handleThumbPress');
          instance.onLongPressStart = dart.fn(details => {
            if (details == null) dart.nullFailed(I[63], 1239, 62, "details");
            return this.handleThumbPressStart(details.localPosition);
          }, T$.LongPressStartDetailsTovoid());
          instance.onLongPressMoveUpdate = dart.fn(details => {
            if (details == null) dart.nullFailed(I[63], 1240, 72, "details");
            return this.handleThumbPressUpdate(details.localPosition);
          }, T$.LongPressMoveUpdateDetailsTovoid());
          instance.onLongPressEnd = dart.fn(details => {
            if (details == null) dart.nullFailed(I[63], 1241, 58, "details");
            return this.handleThumbPressEnd(details.localPosition, details.velocity);
          }, T$.LongPressEndDetailsTovoid());
        }, T$._ThumbPressGestureRecognizerTovoid())));
        gestures[S$.$_set](dart.wrapType(scrollbar._TrackTapGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOf_TrackTapGestureRecognizer()).new(dart.fn(() => new scrollbar._TrackTapGestureRecognizer.new({debugOwner: this, customPaintKey: this[S$0._scrollbarPainterKey]}), T$.VoidTo_TrackTapGestureRecognizer()), dart.fn(instance => {
          if (instance == null) dart.nullFailed(I[63], 1251, 39, "instance");
          instance.onTapDown = dart.bind(this, S$0._handleTrackTapDown);
        }, T$._TrackTapGestureRecognizerTovoid())));
        return gestures;
      }
      isPointerOverTrack(position, kind) {
        if (position == null) dart.nullFailed(I[63], 1263, 34, "position");
        if (kind == null) dart.nullFailed(I[63], 1263, 62, "kind");
        if (this[S$0._scrollbarPainterKey].currentContext == null) {
          return false;
        }
        let localOffset = scrollbar._getLocalOffset(this[S$0._scrollbarPainterKey], position);
        return dart.test(this.scrollbarPainter.hitTestInteractive(localOffset, kind)) && !dart.test(this.scrollbarPainter.hitTestOnlyThumbInteractive(localOffset, kind));
      }
      isPointerOverThumb(position, kind) {
        if (position == null) dart.nullFailed(I[63], 1274, 34, "position");
        if (kind == null) dart.nullFailed(I[63], 1274, 62, "kind");
        if (this[S$0._scrollbarPainterKey].currentContext == null) {
          return false;
        }
        let localOffset = scrollbar._getLocalOffset(this[S$0._scrollbarPainterKey], position);
        return this.scrollbarPainter.hitTestOnlyThumbInteractive(localOffset, kind);
      }
      isPointerOverScrollbar(position, kind) {
        if (position == null) dart.nullFailed(I[63], 1284, 38, "position");
        if (kind == null) dart.nullFailed(I[63], 1284, 66, "kind");
        if (this[S$0._scrollbarPainterKey].currentContext == null) {
          return false;
        }
        let localOffset = scrollbar._getLocalOffset(this[S$0._scrollbarPainterKey], position);
        return this.scrollbarPainter.hitTestInteractive(localOffset, kind);
      }
      handleHover(event) {
        let t58;
        if (event == null) dart.nullFailed(I[63], 1302, 38, "event");
        if (dart.test(this.isPointerOverScrollbar(event.position, event.kind))) {
          this[S$0._hoverIsActive] = true;
          t58 = this[S$0._fadeoutTimer];
          t58 == null ? null : t58.cancel();
        } else if (dart.test(this[S$0._hoverIsActive])) {
          this[S$0._hoverIsActive] = false;
          this[S$0._maybeStartFadeoutTimer]();
        }
      }
      handleHoverExit(event) {
        if (event == null) dart.nullFailed(I[63], 1319, 41, "event");
        this[S$0._hoverIsActive] = false;
        this[S$0._maybeStartFadeoutTimer]();
      }
      dispose() {
        let t58;
        this[S$0._fadeoutAnimationController].dispose();
        t58 = this[S$0._fadeoutTimer];
        t58 == null ? null : t58.cancel();
        this.scrollbarPainter.dispose();
        super.dispose();
      }
      build(context) {
        if (context == null) dart.nullFailed(I[63], 1334, 29, "context");
        this.updateScrollbarPainter();
        return new (T$.NotificationListenerOfScrollNotification()).new({onNotification: dart.bind(this, S$0._handleScrollNotification), child: new basic.RepaintBoundary.new({child: new gesture_detector.RawGestureDetector.new({gestures: this[S$0._gestures], child: new basic.MouseRegion.new({onExit: dart.fn(event => {
                  if (event == null) dart.nullFailed(I[63], 1343, 39, "event");
                  switch (event.kind) {
                    case C[692] || CT.C692:
                    {
                      if (dart.test(this.enableGestures)) this.handleHoverExit(event);
                      break;
                    }
                    case C[693] || CT.C693:
                    case C[694] || CT.C694:
                    case C[695] || CT.C695:
                    case C[691] || CT.C691:
                    {
                      break;
                    }
                    default:
                    {
                      dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
                    }
                  }
                }, T$.PointerExitEventTovoid()), onHover: dart.fn(event => {
                  if (event == null) dart.nullFailed(I[63], 1356, 41, "event");
                  switch (event.kind) {
                    case C[692] || CT.C692:
                    {
                      if (dart.test(this.enableGestures)) this.handleHover(event);
                      break;
                    }
                    case C[693] || CT.C693:
                    case C[694] || CT.C694:
                    case C[695] || CT.C695:
                    case C[691] || CT.C691:
                    {
                      break;
                    }
                    default:
                    {
                      dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
                    }
                  }
                }, T$.PointerHoverEventTovoid()), child: new basic.CustomPaint.new({key: this[S$0._scrollbarPainterKey], foregroundPainter: this.scrollbarPainter, child: new basic.RepaintBoundary.new({child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[703] || CT.C703}), $creationLocationd_0dea112b090073317d4: C[706] || CT.C706}), $creationLocationd_0dea112b090073317d4: C[711] || CT.C711}), $creationLocationd_0dea112b090073317d4: C[716] || CT.C716}), $creationLocationd_0dea112b090073317d4: C[720] || CT.C720}), $creationLocationd_0dea112b090073317d4: C[723] || CT.C723});
      }
    }
    (RawScrollbarState.new = function() {
      this[S$0._dragScrollbarAxisPosition] = null;
      this[S$0._currentController] = null;
      this[S$0._fadeoutTimer] = null;
      this[S$0.__RawScrollbarState__fadeoutAnimationController] = null;
      this[S$0.__RawScrollbarState__fadeoutAnimationController_isSet] = false;
      this[S$0.__RawScrollbarState__fadeoutOpacityAnimation] = null;
      this[S$0.__RawScrollbarState__fadeoutOpacityAnimation_isSet] = false;
      this[S$0._scrollbarPainterKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
      this[S$0._hoverIsActive] = false;
      this[S$0.__RawScrollbarState_scrollbarPainter] = null;
      this[S$0.__RawScrollbarState_scrollbarPainter_isSet] = false;
      RawScrollbarState.__proto__.new.call(this);
      ;
    }).prototype = RawScrollbarState.prototype;
    dart.addTypeTests(RawScrollbarState);
    RawScrollbarState.prototype[_is_RawScrollbarState_default] = true;
    dart.addTypeCaches(RawScrollbarState);
    dart.setMethodSignature(RawScrollbarState, () => ({
      __proto__: dart.getMethods(RawScrollbarState.__proto__),
      [S$0._maybeTriggerScrollbar]: dart.fnType(dart.void, []),
      updateScrollbarPainter: dart.fnType(dart.void, []),
      [S$0._updateScrollPosition]: dart.fnType(dart.void, [core.double]),
      [S$0._maybeStartFadeoutTimer]: dart.fnType(dart.void, []),
      getScrollbarDirection: dart.fnType(dart.nullable(basic_types.Axis), []),
      handleThumbPress: dart.fnType(dart.void, []),
      handleThumbPressStart: dart.fnType(dart.void, [ui.Offset]),
      handleThumbPressUpdate: dart.fnType(dart.void, [ui.Offset]),
      handleThumbPressEnd: dart.fnType(dart.void, [ui.Offset, velocity_tracker.Velocity]),
      [S$0._handleTrackTapDown]: dart.fnType(dart.void, [tap$.TapDownDetails]),
      [S$0._handleScrollNotification]: dart.fnType(core.bool, [scroll_notification.ScrollNotification]),
      isPointerOverTrack: dart.fnType(core.bool, [ui.Offset, ui.PointerDeviceKind]),
      isPointerOverThumb: dart.fnType(core.bool, [ui.Offset, ui.PointerDeviceKind]),
      isPointerOverScrollbar: dart.fnType(core.bool, [ui.Offset, ui.PointerDeviceKind]),
      handleHover: dart.fnType(dart.void, [events.PointerHoverEvent]),
      handleHoverExit: dart.fnType(dart.void, [events.PointerExitEvent]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(RawScrollbarState, () => ({
      __proto__: dart.getGetters(RawScrollbarState.__proto__),
      [S$0._fadeoutAnimationController]: animation_controller.AnimationController,
      [S$0._fadeoutOpacityAnimation]: animation.Animation$(core.double),
      scrollbarPainter: scrollbar.ScrollbarPainter,
      showScrollbar: core.bool,
      enableGestures: core.bool,
      [S$0._gestures]: core.Map$(core.Type, gesture_detector.GestureRecognizerFactory$(recognizer.GestureRecognizer))
    }));
    dart.setSetterSignature(RawScrollbarState, () => ({
      __proto__: dart.getSetters(RawScrollbarState.__proto__),
      [S$0._fadeoutAnimationController]: animation_controller.AnimationController,
      [S$0._fadeoutOpacityAnimation]: animation.Animation$(core.double),
      scrollbarPainter: scrollbar.ScrollbarPainter
    }));
    dart.setLibraryUri(RawScrollbarState, I[64]);
    dart.setFieldSignature(RawScrollbarState, () => ({
      __proto__: dart.getFields(RawScrollbarState.__proto__),
      [S$0._dragScrollbarAxisPosition]: dart.fieldType(dart.nullable(core.double)),
      [S$0._currentController]: dart.fieldType(dart.nullable(scroll_controller.ScrollController)),
      [S$0._fadeoutTimer]: dart.fieldType(dart.nullable(async.Timer)),
      [S$0.__RawScrollbarState__fadeoutAnimationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
      [S$0.__RawScrollbarState__fadeoutAnimationController_isSet]: dart.fieldType(core.bool),
      [S$0.__RawScrollbarState__fadeoutOpacityAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
      [S$0.__RawScrollbarState__fadeoutOpacityAnimation_isSet]: dart.fieldType(core.bool),
      [S$0._scrollbarPainterKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
      [S$0._hoverIsActive]: dart.fieldType(core.bool),
      [S$0.__RawScrollbarState_scrollbarPainter]: dart.fieldType(dart.nullable(scrollbar.ScrollbarPainter)),
      [S$0.__RawScrollbarState_scrollbarPainter_isSet]: dart.fieldType(core.bool)
    }));
    return RawScrollbarState;
  });
  scrollbar.RawScrollbarState = scrollbar.RawScrollbarState$();
  dart.addTypeTests(scrollbar.RawScrollbarState, _is_RawScrollbarState_default);
  scrollbar._ThumbPressGestureRecognizer = class _ThumbPressGestureRecognizer extends long_press.LongPressGestureRecognizer {
    isPointerAllowed(event) {
      if (event == null) dart.nullFailed(I[63], 1401, 42, "event");
      if (!dart.test(this[S$0._hitTestInteractive](this[S$0._customPaintKey], event.position, event.kind))) {
        return false;
      }
      return super.isPointerAllowed(event);
    }
    [S$0._hitTestInteractive](customPaintKey, offset, kind) {
      if (customPaintKey == null) dart.nullFailed(I[63], 1408, 38, "customPaintKey");
      if (offset == null) dart.nullFailed(I[63], 1408, 61, "offset");
      if (kind == null) dart.nullFailed(I[63], 1408, 87, "kind");
      if (customPaintKey.currentContext == null) {
        return false;
      }
      let customPaint = basic.CustomPaint.as(dart.nullCheck(customPaintKey.currentContext).widget);
      let painter = scrollbar.ScrollbarPainter.as(dart.nullCheck(customPaint.foregroundPainter));
      let localOffset = scrollbar._getLocalOffset(customPaintKey, offset);
      return painter.hitTestOnlyThumbInteractive(localOffset, kind);
    }
  };
  (scrollbar._ThumbPressGestureRecognizer.new = function(opts) {
    let postAcceptSlopTolerance = opts && 'postAcceptSlopTolerance' in opts ? opts.postAcceptSlopTolerance : null;
    let kind = opts && 'kind' in opts ? opts.kind : null;
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    if (debugOwner == null) dart.nullFailed(I[63], 1387, 21, "debugOwner");
    let customPaintKey = opts && 'customPaintKey' in opts ? opts.customPaintKey : null;
    if (customPaintKey == null) dart.nullFailed(I[63], 1388, 24, "customPaintKey");
    let pressDuration = opts && 'pressDuration' in opts ? opts.pressDuration : null;
    if (pressDuration == null) dart.nullFailed(I[63], 1389, 23, "pressDuration");
    this[S$0._customPaintKey] = customPaintKey;
    scrollbar._ThumbPressGestureRecognizer.__proto__.new.call(this, {postAcceptSlopTolerance: postAcceptSlopTolerance, kind: kind, debugOwner: debugOwner, duration: pressDuration});
    ;
  }).prototype = scrollbar._ThumbPressGestureRecognizer.prototype;
  dart.addTypeTests(scrollbar._ThumbPressGestureRecognizer);
  dart.addTypeCaches(scrollbar._ThumbPressGestureRecognizer);
  dart.setMethodSignature(scrollbar._ThumbPressGestureRecognizer, () => ({
    __proto__: dart.getMethods(scrollbar._ThumbPressGestureRecognizer.__proto__),
    [S$0._hitTestInteractive]: dart.fnType(core.bool, [framework.GlobalKey$(framework.State$(framework.StatefulWidget)), ui.Offset, ui.PointerDeviceKind])
  }));
  dart.setLibraryUri(scrollbar._ThumbPressGestureRecognizer, I[64]);
  dart.setFieldSignature(scrollbar._ThumbPressGestureRecognizer, () => ({
    __proto__: dart.getFields(scrollbar._ThumbPressGestureRecognizer.__proto__),
    [S$0._customPaintKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))
  }));
  scrollbar._TrackTapGestureRecognizer = class _TrackTapGestureRecognizer extends tap$.TapGestureRecognizer {
    isPointerAllowed(event) {
      if (event == null) dart.nullFailed(I[63], 1431, 42, "event");
      if (!dart.test(this[S$0._hitTestInteractive](this[S$0._customPaintKey], event.position, event.kind))) {
        return false;
      }
      return super.isPointerAllowed(event);
    }
    [S$0._hitTestInteractive](customPaintKey, offset, kind) {
      if (customPaintKey == null) dart.nullFailed(I[63], 1438, 38, "customPaintKey");
      if (offset == null) dart.nullFailed(I[63], 1438, 61, "offset");
      if (kind == null) dart.nullFailed(I[63], 1438, 87, "kind");
      if (customPaintKey.currentContext == null) {
        return false;
      }
      let customPaint = basic.CustomPaint.as(dart.nullCheck(customPaintKey.currentContext).widget);
      let painter = scrollbar.ScrollbarPainter.as(dart.nullCheck(customPaint.foregroundPainter));
      let localOffset = scrollbar._getLocalOffset(customPaintKey, offset);
      return dart.test(painter.hitTestInteractive(localOffset, kind)) && !dart.test(painter.hitTestOnlyThumbInteractive(localOffset, kind));
    }
  };
  (scrollbar._TrackTapGestureRecognizer.new = function(opts) {
    let debugOwner = opts && 'debugOwner' in opts ? opts.debugOwner : null;
    if (debugOwner == null) dart.nullFailed(I[63], 1423, 21, "debugOwner");
    let customPaintKey = opts && 'customPaintKey' in opts ? opts.customPaintKey : null;
    if (customPaintKey == null) dart.nullFailed(I[63], 1424, 24, "customPaintKey");
    this[S$0._customPaintKey] = customPaintKey;
    scrollbar._TrackTapGestureRecognizer.__proto__.new.call(this, {debugOwner: debugOwner});
    ;
  }).prototype = scrollbar._TrackTapGestureRecognizer.prototype;
  dart.addTypeTests(scrollbar._TrackTapGestureRecognizer);
  dart.addTypeCaches(scrollbar._TrackTapGestureRecognizer);
  dart.setMethodSignature(scrollbar._TrackTapGestureRecognizer, () => ({
    __proto__: dart.getMethods(scrollbar._TrackTapGestureRecognizer.__proto__),
    [S$0._hitTestInteractive]: dart.fnType(core.bool, [framework.GlobalKey$(framework.State$(framework.StatefulWidget)), ui.Offset, ui.PointerDeviceKind])
  }));
  dart.setLibraryUri(scrollbar._TrackTapGestureRecognizer, I[64]);
  dart.setFieldSignature(scrollbar._TrackTapGestureRecognizer, () => ({
    __proto__: dart.getFields(scrollbar._TrackTapGestureRecognizer.__proto__),
    [S$0._customPaintKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))
  }));
  scrollbar._getLocalOffset = function _getLocalOffset(scrollbarPainterKey, position) {
    if (scrollbarPainterKey == null) dart.nullFailed(I[63], 1450, 34, "scrollbarPainterKey");
    if (position == null) dart.nullFailed(I[63], 1450, 62, "position");
    let renderBox = box$.RenderBox.as(dart.nullCheck(dart.nullCheck(scrollbarPainterKey.currentContext).findRenderObject()));
    return renderBox.globalToLocal(position);
  };
  dart.defineLazy(scrollbar, {
    /*scrollbar._kMinThumbExtent*/get _kMinThumbExtent() {
      return 18;
    },
    /*scrollbar._kMinInteractiveSize*/get _kMinInteractiveSize() {
      return 48;
    },
    /*scrollbar._kScrollbarThickness*/get _kScrollbarThickness() {
      return 6;
    },
    /*scrollbar._kScrollbarFadeDuration*/get _kScrollbarFadeDuration() {
      return C[246] || CT.C246;
    },
    /*scrollbar._kScrollbarTimeToFade*/get _kScrollbarTimeToFade() {
      return C[697] || CT.C697;
    }
  }, false);
  scroll_configuration.ScrollBehavior = class ScrollBehavior extends core.Object {
    copyWith(opts) {
      let scrollbars = opts && 'scrollbars' in opts ? opts.scrollbars : true;
      if (scrollbars == null) dart.nullFailed(I[65], 53, 10, "scrollbars");
      let overscroll = opts && 'overscroll' in opts ? opts.overscroll : true;
      if (overscroll == null) dart.nullFailed(I[65], 54, 10, "overscroll");
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return new scroll_configuration._WrappedScrollBehavior.new({delegate: this, scrollbar: scrollbars, overscrollIndicator: overscroll, physics: physics, platform: platform});
    }
    getPlatform(context) {
      if (context == null) dart.nullFailed(I[65], 70, 43, "context");
      return platform.defaultTargetPlatform;
    }
    buildViewportChrome(context, child, axisDirection) {
      if (context == null) dart.nullFailed(I[65], 84, 43, "context");
      if (child == null) dart.nullFailed(I[65], 84, 59, "child");
      if (axisDirection == null) dart.nullFailed(I[65], 84, 80, "axisDirection");
      switch (this.getPlatform(context)) {
        case C[88] || CT.C88:
        case C[86] || CT.C86:
        case C[89] || CT.C89:
        case C[87] || CT.C87:
        {
          return child;
        }
        case C[84] || CT.C84:
        case C[85] || CT.C85:
        {
          return new overscroll_indicator.GlowingOverscrollIndicator.new({child: child, axisDirection: axisDirection, color: scroll_configuration._kDefaultGlowColor, $creationLocationd_0dea112b090073317d4: C[727] || CT.C727});
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    buildScrollbar(context, child, details) {
      if (context == null) dart.nullFailed(I[65], 102, 38, "context");
      if (child == null) dart.nullFailed(I[65], 102, 54, "child");
      if (details == null) dart.nullFailed(I[65], 102, 79, "details");
      switch (this.getPlatform(context)) {
        case C[86] || CT.C86:
        case C[89] || CT.C89:
        case C[87] || CT.C87:
        {
          return new scrollbar.RawScrollbar.new({child: child, controller: details.controller, $creationLocationd_0dea112b090073317d4: C[732] || CT.C732});
        }
        case C[84] || CT.C84:
        case C[85] || CT.C85:
        case C[88] || CT.C88:
        {
          return child;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    buildOverscrollIndicator(context, child, details) {
      if (context == null) dart.nullFailed(I[65], 122, 48, "context");
      if (child == null) dart.nullFailed(I[65], 122, 64, "child");
      if (details == null) dart.nullFailed(I[65], 122, 89, "details");
      return this.buildViewportChrome(context, child, details.direction);
    }
    velocityTrackerBuilder(context) {
      if (context == null) dart.nullFailed(I[65], 146, 69, "context");
      switch (this.getPlatform(context)) {
        case C[88] || CT.C88:
        case C[89] || CT.C89:
        {
          return dart.fn(event => {
            if (event == null) dart.nullFailed(I[65], 150, 30, "event");
            return new velocity_tracker.IOSScrollViewFlingVelocityTracker.new(event.kind);
          }, T$.PointerEventToIOSScrollViewFlingVelocityTracker());
        }
        case C[84] || CT.C84:
        case C[85] || CT.C85:
        case C[86] || CT.C86:
        case C[87] || CT.C87:
        {
          return dart.fn(event => {
            if (event == null) dart.nullFailed(I[65], 155, 30, "event");
            return new velocity_tracker.VelocityTracker.withKind(event.kind);
          }, T$.PointerEventToVelocityTracker());
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    getScrollPhysics(context) {
      if (context == null) dart.nullFailed(I[65], 167, 47, "context");
      switch (this.getPlatform(context)) {
        case C[88] || CT.C88:
        case C[89] || CT.C89:
        {
          return scroll_configuration.ScrollBehavior._bouncingPhysics;
        }
        case C[84] || CT.C84:
        case C[85] || CT.C85:
        case C[86] || CT.C86:
        case C[87] || CT.C87:
        {
          return scroll_configuration.ScrollBehavior._clampingPhysics;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    shouldNotify(oldDelegate) {
      scroll_configuration.ScrollBehavior.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[65], 190, 46, "oldDelegate");
      return false;
    }
    toString() {
      return object.objectRuntimeType(this, "ScrollBehavior");
    }
  };
  (scroll_configuration.ScrollBehavior.new = function() {
    ;
  }).prototype = scroll_configuration.ScrollBehavior.prototype;
  dart.addTypeTests(scroll_configuration.ScrollBehavior);
  dart.addTypeCaches(scroll_configuration.ScrollBehavior);
  dart.setMethodSignature(scroll_configuration.ScrollBehavior, () => ({
    __proto__: dart.getMethods(scroll_configuration.ScrollBehavior.__proto__),
    copyWith: dart.fnType(scroll_configuration.ScrollBehavior, [], {overscroll: core.bool, physics: dart.nullable(scroll_physics.ScrollPhysics), platform: dart.nullable(platform.TargetPlatform), scrollbars: core.bool}, {}),
    getPlatform: dart.fnType(platform.TargetPlatform, [framework.BuildContext]),
    buildViewportChrome: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, basic_types.AxisDirection]),
    buildScrollbar: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, scrollable$.ScrollableDetails]),
    buildOverscrollIndicator: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, scrollable$.ScrollableDetails]),
    velocityTrackerBuilder: dart.fnType(dart.fnType(velocity_tracker.VelocityTracker, [events.PointerEvent]), [framework.BuildContext]),
    getScrollPhysics: dart.fnType(scroll_physics.ScrollPhysics, [framework.BuildContext]),
    shouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(scroll_configuration.ScrollBehavior, I[66]);
  dart.defineExtensionMethods(scroll_configuration.ScrollBehavior, ['toString']);
  dart.defineLazy(scroll_configuration.ScrollBehavior, {
    /*scroll_configuration.ScrollBehavior._bouncingPhysics*/get _bouncingPhysics() {
      return C[736] || CT.C736;
    },
    /*scroll_configuration.ScrollBehavior._clampingPhysics*/get _clampingPhysics() {
      return C[738] || CT.C738;
    }
  }, false);
  scroll_configuration._WrappedScrollBehavior = class _WrappedScrollBehavior extends core.Object {
    get delegate() {
      return this[S$0.delegate$1];
    }
    set delegate(value) {
      super.delegate = value;
    }
    get scrollbar() {
      return this[S$0.scrollbar];
    }
    set scrollbar(value) {
      super.scrollbar = value;
    }
    get overscrollIndicator() {
      return this[S$0.overscrollIndicator];
    }
    set overscrollIndicator(value) {
      super.overscrollIndicator = value;
    }
    get physics() {
      return this[S$0.physics];
    }
    set physics(value) {
      super.physics = value;
    }
    get platform() {
      return this[S$0.platform];
    }
    set platform(value) {
      super.platform = value;
    }
    buildOverscrollIndicator(context, child, details) {
      if (context == null) dart.nullFailed(I[65], 212, 48, "context");
      if (child == null) dart.nullFailed(I[65], 212, 64, "child");
      if (details == null) dart.nullFailed(I[65], 212, 89, "details");
      if (dart.test(this.overscrollIndicator)) return this.delegate.buildOverscrollIndicator(context, child, details);
      return child;
    }
    buildScrollbar(context, child, details) {
      if (context == null) dart.nullFailed(I[65], 219, 38, "context");
      if (child == null) dart.nullFailed(I[65], 219, 54, "child");
      if (details == null) dart.nullFailed(I[65], 219, 79, "details");
      if (dart.test(this.scrollbar)) return this.delegate.buildScrollbar(context, child, details);
      return child;
    }
    buildViewportChrome(context, child, axisDirection) {
      if (context == null) dart.nullFailed(I[65], 226, 43, "context");
      if (child == null) dart.nullFailed(I[65], 226, 59, "child");
      if (axisDirection == null) dart.nullFailed(I[65], 226, 80, "axisDirection");
      return this.delegate.buildViewportChrome(context, child, axisDirection);
    }
    copyWith(opts) {
      let scrollbars = opts && 'scrollbars' in opts ? opts.scrollbars : true;
      if (scrollbars == null) dart.nullFailed(I[65], 232, 10, "scrollbars");
      let overscroll = opts && 'overscroll' in opts ? opts.overscroll : true;
      if (overscroll == null) dart.nullFailed(I[65], 233, 10, "overscroll");
      let physics = opts && 'physics' in opts ? opts.physics : null;
      let platform = opts && 'platform' in opts ? opts.platform : null;
      return this.delegate.copyWith({scrollbars: scrollbars, overscroll: overscroll, physics: physics, platform: platform});
    }
    getPlatform(context) {
      let t58;
      if (context == null) dart.nullFailed(I[65], 246, 43, "context");
      t58 = this.platform;
      return t58 == null ? this.delegate.getPlatform(context) : t58;
    }
    getScrollPhysics(context) {
      let t58;
      if (context == null) dart.nullFailed(I[65], 251, 47, "context");
      t58 = this.physics;
      return t58 == null ? this.delegate.getScrollPhysics(context) : t58;
    }
    shouldNotify(oldDelegate) {
      scroll_configuration._WrappedScrollBehavior.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[65], 256, 44, "oldDelegate");
      return !dart.equals(dart.runtimeType(oldDelegate.delegate), dart.runtimeType(this.delegate)) || oldDelegate.scrollbar != this.scrollbar || oldDelegate.overscrollIndicator != this.overscrollIndicator || !dart.equals(oldDelegate.physics, this.physics) || oldDelegate.platform != this.platform || dart.test(this.delegate.shouldNotify(oldDelegate.delegate));
    }
    velocityTrackerBuilder(context) {
      if (context == null) dart.nullFailed(I[65], 266, 69, "context");
      return this.delegate.velocityTrackerBuilder(context);
    }
    toString() {
      return object.objectRuntimeType(this, "_WrappedScrollBehavior");
    }
  };
  (scroll_configuration._WrappedScrollBehavior.new = function(opts) {
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    if (delegate == null) dart.nullFailed(I[65], 198, 19, "delegate");
    let scrollbar = opts && 'scrollbar' in opts ? opts.scrollbar : true;
    if (scrollbar == null) dart.nullFailed(I[65], 199, 10, "scrollbar");
    let overscrollIndicator = opts && 'overscrollIndicator' in opts ? opts.overscrollIndicator : true;
    if (overscrollIndicator == null) dart.nullFailed(I[65], 200, 10, "overscrollIndicator");
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let platform = opts && 'platform' in opts ? opts.platform : null;
    this[S$0.delegate$1] = delegate;
    this[S$0.scrollbar] = scrollbar;
    this[S$0.overscrollIndicator] = overscrollIndicator;
    this[S$0.physics] = physics;
    this[S$0.platform] = platform;
    ;
  }).prototype = scroll_configuration._WrappedScrollBehavior.prototype;
  dart.addTypeTests(scroll_configuration._WrappedScrollBehavior);
  dart.addTypeCaches(scroll_configuration._WrappedScrollBehavior);
  scroll_configuration._WrappedScrollBehavior[dart.implements] = () => [scroll_configuration.ScrollBehavior];
  dart.setMethodSignature(scroll_configuration._WrappedScrollBehavior, () => ({
    __proto__: dart.getMethods(scroll_configuration._WrappedScrollBehavior.__proto__),
    buildOverscrollIndicator: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, scrollable$.ScrollableDetails]),
    buildScrollbar: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, scrollable$.ScrollableDetails]),
    buildViewportChrome: dart.fnType(framework.Widget, [framework.BuildContext, framework.Widget, basic_types.AxisDirection]),
    copyWith: dart.fnType(scroll_configuration.ScrollBehavior, [], {overscroll: core.bool, physics: dart.nullable(scroll_physics.ScrollPhysics), platform: dart.nullable(platform.TargetPlatform), scrollbars: core.bool}, {}),
    getPlatform: dart.fnType(platform.TargetPlatform, [framework.BuildContext]),
    getScrollPhysics: dart.fnType(scroll_physics.ScrollPhysics, [framework.BuildContext]),
    shouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    velocityTrackerBuilder: dart.fnType(dart.fnType(velocity_tracker.VelocityTracker, [events.PointerEvent]), [framework.BuildContext])
  }));
  dart.setLibraryUri(scroll_configuration._WrappedScrollBehavior, I[66]);
  dart.setFieldSignature(scroll_configuration._WrappedScrollBehavior, () => ({
    __proto__: dart.getFields(scroll_configuration._WrappedScrollBehavior.__proto__),
    delegate: dart.finalFieldType(scroll_configuration.ScrollBehavior),
    scrollbar: dart.finalFieldType(core.bool),
    overscrollIndicator: dart.finalFieldType(core.bool),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    platform: dart.finalFieldType(dart.nullable(platform.TargetPlatform))
  }));
  dart.defineExtensionMethods(scroll_configuration._WrappedScrollBehavior, ['toString']);
  scroll_configuration.ScrollConfiguration = class ScrollConfiguration extends framework.InheritedWidget {
    get behavior() {
      return this[S$0.behavior$1];
    }
    set behavior(value) {
      super.behavior = value;
    }
    static of(context) {
      let t58, t58$;
      if (context == null) dart.nullFailed(I[65], 295, 41, "context");
      let configuration = context.dependOnInheritedWidgetOfExactType(scroll_configuration.ScrollConfiguration);
      t58$ = (t58 = configuration, t58 == null ? null : t58.behavior);
      return t58$ == null ? C[739] || CT.C739 : t58$;
    }
    updateShouldNotify(oldWidget) {
      scroll_configuration.ScrollConfiguration.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[65], 301, 47, "oldWidget");
      if (!(this.behavior != null)) dart.assertFailed(null, I[65], 302, 12, "behavior != null");
      return !dart.equals(dart.runtimeType(this.behavior), dart.runtimeType(oldWidget.behavior)) || !dart.equals(this.behavior, oldWidget.behavior) && dart.test(this.behavior.shouldNotify(oldWidget.behavior));
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[65], 308, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfScrollBehavior()).new("behavior", this.behavior));
    }
  };
  (scroll_configuration.ScrollConfiguration.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let behavior = opts && 'behavior' in opts ? opts.behavior : null;
    if (behavior == null) dart.nullFailed(I[65], 284, 19, "behavior");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[65], 285, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.behavior$1] = behavior;
    scroll_configuration.ScrollConfiguration.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scroll_configuration.ScrollConfiguration.prototype;
  dart.addTypeTests(scroll_configuration.ScrollConfiguration);
  dart.addTypeCaches(scroll_configuration.ScrollConfiguration);
  dart.setMethodSignature(scroll_configuration.ScrollConfiguration, () => ({
    __proto__: dart.getMethods(scroll_configuration.ScrollConfiguration.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(scroll_configuration.ScrollConfiguration, I[66]);
  dart.setFieldSignature(scroll_configuration.ScrollConfiguration, () => ({
    __proto__: dart.getFields(scroll_configuration.ScrollConfiguration.__proto__),
    behavior: dart.finalFieldType(scroll_configuration.ScrollBehavior)
  }));
  dart.defineLazy(scroll_configuration, {
    /*scroll_configuration._kDefaultGlowColor*/get _kDefaultGlowColor() {
      return C[39] || CT.C39;
    }
  }, false);
  const _is_RestorableValue_default = Symbol('_is_RestorableValue_default');
  restoration_properties.RestorableValue$ = dart.generic(T => {
    class RestorableValue extends restoration$.RestorableProperty$(T) {
      get value() {
        if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[67], 116, 12, "isRegistered");
        return T.as(this[S$0._value$2]);
      }
      set value(newValue) {
        T.as(newValue);
        if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[67], 121, 12, "isRegistered");
        if (!dart.equals(newValue, this[S$0._value$2])) {
          let oldValue = this[S$0._value$2];
          this[S$0._value$2] = newValue;
          this.didUpdateValue(oldValue);
        }
      }
      initWithValue(value) {
        T.as(value);
        this[S$0._value$2] = value;
      }
    }
    (RestorableValue.new = function() {
      this[S$0._value$2] = null;
      RestorableValue.__proto__.new.call(this);
      ;
    }).prototype = RestorableValue.prototype;
    dart.addTypeTests(RestorableValue);
    RestorableValue.prototype[_is_RestorableValue_default] = true;
    dart.addTypeCaches(RestorableValue);
    dart.setMethodSignature(RestorableValue, () => ({
      __proto__: dart.getMethods(RestorableValue.__proto__),
      initWithValue: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RestorableValue, () => ({
      __proto__: dart.getGetters(RestorableValue.__proto__),
      value: T
    }));
    dart.setSetterSignature(RestorableValue, () => ({
      __proto__: dart.getSetters(RestorableValue.__proto__),
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RestorableValue, I[68]);
    dart.setFieldSignature(RestorableValue, () => ({
      __proto__: dart.getFields(RestorableValue.__proto__),
      [S$0._value$2]: dart.fieldType(dart.nullable(T))
    }));
    return RestorableValue;
  });
  restoration_properties.RestorableValue = restoration_properties.RestorableValue$();
  dart.addTypeTests(restoration_properties.RestorableValue, _is_RestorableValue_default);
  const _is__RestorablePrimitiveValueN_default = Symbol('_is__RestorablePrimitiveValueN_default');
  restoration_properties._RestorablePrimitiveValueN$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class _RestorablePrimitiveValueN extends restoration_properties.RestorableValue$(T) {
      createDefaultValue() {
        return this[S$0._defaultValue];
      }
      didUpdateValue(oldValue) {
        TN().as(oldValue);
        if (!dart.test(restoration.debugIsSerializableForRestoration(this.value))) dart.assertFailed(null, I[67], 160, 12, "debugIsSerializableForRestoration(value)");
        this.notifyListeners();
      }
      fromPrimitives(serialized) {
        return T.as(serialized);
      }
      toPrimitives() {
        return this.value;
      }
    }
    (_RestorablePrimitiveValueN.new = function(_defaultValue) {
      this[S$0._defaultValue] = _defaultValue;
      if (!dart.test(restoration.debugIsSerializableForRestoration(_defaultValue))) dart.assertFailed(null, I[67], 150, 14, "debugIsSerializableForRestoration(_defaultValue)");
      _RestorablePrimitiveValueN.__proto__.new.call(this);
      ;
    }).prototype = _RestorablePrimitiveValueN.prototype;
    dart.addTypeTests(_RestorablePrimitiveValueN);
    _RestorablePrimitiveValueN.prototype[_is__RestorablePrimitiveValueN_default] = true;
    dart.addTypeCaches(_RestorablePrimitiveValueN);
    dart.setMethodSignature(_RestorablePrimitiveValueN, () => ({
      __proto__: dart.getMethods(_RestorablePrimitiveValueN.__proto__),
      createDefaultValue: dart.fnType(T, []),
      didUpdateValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      fromPrimitives: dart.fnType(T, [dart.nullable(core.Object)]),
      toPrimitives: dart.fnType(dart.nullable(core.Object), [])
    }));
    dart.setLibraryUri(_RestorablePrimitiveValueN, I[68]);
    dart.setFieldSignature(_RestorablePrimitiveValueN, () => ({
      __proto__: dart.getFields(_RestorablePrimitiveValueN.__proto__),
      [S$0._defaultValue]: dart.finalFieldType(T)
    }));
    return _RestorablePrimitiveValueN;
  });
  restoration_properties._RestorablePrimitiveValueN = restoration_properties._RestorablePrimitiveValueN$();
  dart.addTypeTests(restoration_properties._RestorablePrimitiveValueN, _is__RestorablePrimitiveValueN_default);
  const _is__RestorablePrimitiveValue_default = Symbol('_is__RestorablePrimitiveValue_default');
  restoration_properties._RestorablePrimitiveValue$ = dart.generic(T => {
    class _RestorablePrimitiveValue extends restoration_properties._RestorablePrimitiveValueN$(T) {
      set value(value) {
        T.as(value);
        if (value == null) dart.nullFailed(I[67], 180, 15, "value");
        if (!(value != null)) dart.assertFailed(null, I[67], 181, 12, "value != null");
        super.value = value;
      }
      get value() {
        return super.value;
      }
      fromPrimitives(serialized) {
        if (!(serialized != null)) dart.assertFailed(null, I[67], 187, 12, "serialized != null");
        return super.fromPrimitives(serialized);
      }
      toPrimitives() {
        if (!(this.value != null)) dart.assertFailed(null, I[67], 193, 12, "value != null");
        return dart.nullCheck(super.toPrimitives());
      }
    }
    (_RestorablePrimitiveValue.new = function(_defaultValue) {
      if (_defaultValue == null) dart.nullFailed(I[67], 174, 31, "_defaultValue");
      if (!(_defaultValue != null)) dart.assertFailed(null, I[67], 175, 14, "_defaultValue != null");
      if (!dart.test(restoration.debugIsSerializableForRestoration(_defaultValue))) dart.assertFailed(null, I[67], 176, 14, "debugIsSerializableForRestoration(_defaultValue)");
      _RestorablePrimitiveValue.__proto__.new.call(this, _defaultValue);
      ;
    }).prototype = _RestorablePrimitiveValue.prototype;
    dart.addTypeTests(_RestorablePrimitiveValue);
    _RestorablePrimitiveValue.prototype[_is__RestorablePrimitiveValue_default] = true;
    dart.addTypeCaches(_RestorablePrimitiveValue);
    dart.setMethodSignature(_RestorablePrimitiveValue, () => ({
      __proto__: dart.getMethods(_RestorablePrimitiveValue.__proto__),
      toPrimitives: dart.fnType(core.Object, [])
    }));
    dart.setLibraryUri(_RestorablePrimitiveValue, I[68]);
    return _RestorablePrimitiveValue;
  });
  restoration_properties._RestorablePrimitiveValue = restoration_properties._RestorablePrimitiveValue$();
  dart.addTypeTests(restoration_properties._RestorablePrimitiveValue, _is__RestorablePrimitiveValue_default);
  const _is_RestorableNum_default = Symbol('_is_RestorableNum_default');
  restoration_properties.RestorableNum$ = dart.generic(T => {
    class RestorableNum extends restoration_properties._RestorablePrimitiveValue$(T) {}
    (RestorableNum.new = function(defaultValue) {
      if (defaultValue == null) dart.nullFailed(I[67], 223, 19, "defaultValue");
      if (!(defaultValue != null)) dart.assertFailed(null, I[67], 223, 42, "defaultValue != null");
      RestorableNum.__proto__.new.call(this, defaultValue);
      ;
    }).prototype = RestorableNum.prototype;
    dart.addTypeTests(RestorableNum);
    RestorableNum.prototype[_is_RestorableNum_default] = true;
    dart.addTypeCaches(RestorableNum);
    dart.setLibraryUri(RestorableNum, I[68]);
    return RestorableNum;
  });
  restoration_properties.RestorableNum = restoration_properties.RestorableNum$();
  dart.addTypeTests(restoration_properties.RestorableNum, _is_RestorableNum_default);
  restoration_properties.RestorableDouble = class RestorableDouble extends restoration_properties.RestorableNum$(core.double) {};
  (restoration_properties.RestorableDouble.new = function(defaultValue) {
    if (defaultValue == null) dart.nullFailed(I[67], 237, 27, "defaultValue");
    if (!(defaultValue != null)) dart.assertFailed(null, I[67], 237, 50, "defaultValue != null");
    restoration_properties.RestorableDouble.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableDouble.prototype;
  dart.addTypeTests(restoration_properties.RestorableDouble);
  dart.addTypeCaches(restoration_properties.RestorableDouble);
  dart.setLibraryUri(restoration_properties.RestorableDouble, I[68]);
  restoration_properties.RestorableInt = class RestorableInt extends restoration_properties.RestorableNum$(core.int) {};
  (restoration_properties.RestorableInt.new = function(defaultValue) {
    if (defaultValue == null) dart.nullFailed(I[67], 251, 21, "defaultValue");
    if (!(defaultValue != null)) dart.assertFailed(null, I[67], 251, 44, "defaultValue != null");
    restoration_properties.RestorableInt.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableInt.prototype;
  dart.addTypeTests(restoration_properties.RestorableInt);
  dart.addTypeCaches(restoration_properties.RestorableInt);
  dart.setLibraryUri(restoration_properties.RestorableInt, I[68]);
  restoration_properties.RestorableString = class RestorableString extends restoration_properties._RestorablePrimitiveValue$(core.String) {};
  (restoration_properties.RestorableString.new = function(defaultValue) {
    if (defaultValue == null) dart.nullFailed(I[67], 265, 27, "defaultValue");
    if (!(defaultValue != null)) dart.assertFailed(null, I[67], 265, 50, "defaultValue != null");
    restoration_properties.RestorableString.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableString.prototype;
  dart.addTypeTests(restoration_properties.RestorableString);
  dart.addTypeCaches(restoration_properties.RestorableString);
  dart.setLibraryUri(restoration_properties.RestorableString, I[68]);
  restoration_properties.RestorableBool = class RestorableBool extends restoration_properties._RestorablePrimitiveValue$(core.bool) {};
  (restoration_properties.RestorableBool.new = function(defaultValue) {
    if (defaultValue == null) dart.nullFailed(I[67], 279, 23, "defaultValue");
    if (!(defaultValue != null)) dart.assertFailed(null, I[67], 279, 46, "defaultValue != null");
    restoration_properties.RestorableBool.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableBool.prototype;
  dart.addTypeTests(restoration_properties.RestorableBool);
  dart.addTypeCaches(restoration_properties.RestorableBool);
  dart.setLibraryUri(restoration_properties.RestorableBool, I[68]);
  restoration_properties.RestorableBoolN = class RestorableBoolN extends restoration_properties._RestorablePrimitiveValueN$(dart.nullable(core.bool)) {};
  (restoration_properties.RestorableBoolN.new = function(defaultValue) {
    restoration_properties.RestorableBoolN.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableBoolN.prototype;
  dart.addTypeTests(restoration_properties.RestorableBoolN);
  dart.addTypeCaches(restoration_properties.RestorableBoolN);
  dart.setLibraryUri(restoration_properties.RestorableBoolN, I[68]);
  const _is_RestorableNumN_default = Symbol('_is_RestorableNumN_default');
  restoration_properties.RestorableNumN$ = dart.generic(T => {
    class RestorableNumN extends restoration_properties._RestorablePrimitiveValueN$(T) {}
    (RestorableNumN.new = function(defaultValue) {
      RestorableNumN.__proto__.new.call(this, defaultValue);
      ;
    }).prototype = RestorableNumN.prototype;
    dart.addTypeTests(RestorableNumN);
    RestorableNumN.prototype[_is_RestorableNumN_default] = true;
    dart.addTypeCaches(RestorableNumN);
    dart.setLibraryUri(RestorableNumN, I[68]);
    return RestorableNumN;
  });
  restoration_properties.RestorableNumN = restoration_properties.RestorableNumN$();
  dart.addTypeTests(restoration_properties.RestorableNumN, _is_RestorableNumN_default);
  restoration_properties.RestorableDoubleN = class RestorableDoubleN extends restoration_properties.RestorableNumN$(dart.nullable(core.double)) {};
  (restoration_properties.RestorableDoubleN.new = function(defaultValue) {
    restoration_properties.RestorableDoubleN.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableDoubleN.prototype;
  dart.addTypeTests(restoration_properties.RestorableDoubleN);
  dart.addTypeCaches(restoration_properties.RestorableDoubleN);
  dart.setLibraryUri(restoration_properties.RestorableDoubleN, I[68]);
  restoration_properties.RestorableIntN = class RestorableIntN extends restoration_properties.RestorableNumN$(dart.nullable(core.int)) {};
  (restoration_properties.RestorableIntN.new = function(defaultValue) {
    restoration_properties.RestorableIntN.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableIntN.prototype;
  dart.addTypeTests(restoration_properties.RestorableIntN);
  dart.addTypeCaches(restoration_properties.RestorableIntN);
  dart.setLibraryUri(restoration_properties.RestorableIntN, I[68]);
  restoration_properties.RestorableStringN = class RestorableStringN extends restoration_properties._RestorablePrimitiveValueN$(dart.nullable(core.String)) {};
  (restoration_properties.RestorableStringN.new = function(defaultValue) {
    restoration_properties.RestorableStringN.__proto__.new.call(this, defaultValue);
    ;
  }).prototype = restoration_properties.RestorableStringN.prototype;
  dart.addTypeTests(restoration_properties.RestorableStringN);
  dart.addTypeCaches(restoration_properties.RestorableStringN);
  dart.setLibraryUri(restoration_properties.RestorableStringN, I[68]);
  restoration_properties.RestorableDateTime = class RestorableDateTime extends restoration_properties.RestorableValue$(core.DateTime) {
    createDefaultValue() {
      return this[S$0._defaultValue];
    }
    didUpdateValue(oldValue) {
      T$.DateTimeN().as(oldValue);
      if (!dart.test(restoration.debugIsSerializableForRestoration(this.value.millisecondsSinceEpoch))) dart.assertFailed(null, I[67], 377, 12, "debugIsSerializableForRestoration(value.millisecondsSinceEpoch)");
      this.notifyListeners();
    }
    fromPrimitives(data) {
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.nullCheck(data)));
    }
    toPrimitives() {
      return this.value.millisecondsSinceEpoch;
    }
  };
  (restoration_properties.RestorableDateTime.new = function(defaultValue) {
    if (defaultValue == null) dart.nullFailed(I[67], 368, 31, "defaultValue");
    this[S$0._defaultValue] = defaultValue;
    restoration_properties.RestorableDateTime.__proto__.new.call(this);
    ;
  }).prototype = restoration_properties.RestorableDateTime.prototype;
  dart.addTypeTests(restoration_properties.RestorableDateTime);
  dart.addTypeCaches(restoration_properties.RestorableDateTime);
  dart.setMethodSignature(restoration_properties.RestorableDateTime, () => ({
    __proto__: dart.getMethods(restoration_properties.RestorableDateTime.__proto__),
    createDefaultValue: dart.fnType(core.DateTime, []),
    didUpdateValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    fromPrimitives: dart.fnType(core.DateTime, [dart.nullable(core.Object)]),
    toPrimitives: dart.fnType(dart.nullable(core.Object), [])
  }));
  dart.setLibraryUri(restoration_properties.RestorableDateTime, I[68]);
  dart.setFieldSignature(restoration_properties.RestorableDateTime, () => ({
    __proto__: dart.getFields(restoration_properties.RestorableDateTime.__proto__),
    [S$0._defaultValue]: dart.finalFieldType(core.DateTime)
  }));
  restoration_properties.RestorableDateTimeN = class RestorableDateTimeN extends restoration_properties.RestorableValue$(dart.nullable(core.DateTime)) {
    createDefaultValue() {
      return this[S$0._defaultValue];
    }
    didUpdateValue(oldValue) {
      let t58;
      T$.DateTimeN().as(oldValue);
      if (!dart.test(restoration.debugIsSerializableForRestoration((t58 = this.value, t58 == null ? null : t58.millisecondsSinceEpoch)))) dart.assertFailed(null, I[67], 405, 12, "debugIsSerializableForRestoration(value?.millisecondsSinceEpoch)");
      this.notifyListeners();
    }
    fromPrimitives(data) {
      return data != null ? new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data)) : null;
    }
    toPrimitives() {
      let t58;
      t58 = this.value;
      return t58 == null ? null : t58.millisecondsSinceEpoch;
    }
  };
  (restoration_properties.RestorableDateTimeN.new = function(defaultValue) {
    this[S$0._defaultValue] = defaultValue;
    restoration_properties.RestorableDateTimeN.__proto__.new.call(this);
    ;
  }).prototype = restoration_properties.RestorableDateTimeN.prototype;
  dart.addTypeTests(restoration_properties.RestorableDateTimeN);
  dart.addTypeCaches(restoration_properties.RestorableDateTimeN);
  dart.setMethodSignature(restoration_properties.RestorableDateTimeN, () => ({
    __proto__: dart.getMethods(restoration_properties.RestorableDateTimeN.__proto__),
    createDefaultValue: dart.fnType(dart.nullable(core.DateTime), []),
    didUpdateValue: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    fromPrimitives: dart.fnType(dart.nullable(core.DateTime), [dart.nullable(core.Object)]),
    toPrimitives: dart.fnType(dart.nullable(core.Object), [])
  }));
  dart.setLibraryUri(restoration_properties.RestorableDateTimeN, I[68]);
  dart.setFieldSignature(restoration_properties.RestorableDateTimeN, () => ({
    __proto__: dart.getFields(restoration_properties.RestorableDateTimeN.__proto__),
    [S$0._defaultValue]: dart.finalFieldType(dart.nullable(core.DateTime))
  }));
  const _is_RestorableListenable_default = Symbol('_is_RestorableListenable_default');
  restoration_properties.RestorableListenable$ = dart.generic(T => {
    class RestorableListenable extends restoration$.RestorableProperty$(T) {
      get value() {
        if (!dart.test(this.isRegistered)) dart.assertFailed(null, I[67], 439, 12, "isRegistered");
        return dart.nullCheck(this[S$0._value$2]);
      }
      initWithValue(value) {
        let t58;
        T.as(value);
        if (value == null) dart.nullFailed(I[67], 445, 24, "value");
        if (!(value != null)) dart.assertFailed(null, I[67], 446, 12, "value != null");
        t58 = this[S$0._value$2];
        t58 == null ? null : t58.removeListener(dart.bind(this, 'notifyListeners'));
        this[S$0._value$2] = value;
        dart.nullCheck(this[S$0._value$2]).addListener(dart.bind(this, 'notifyListeners'));
      }
      dispose() {
        let t58;
        super.dispose();
        t58 = this[S$0._value$2];
        t58 == null ? null : t58.removeListener(dart.bind(this, 'notifyListeners'));
      }
    }
    (RestorableListenable.new = function() {
      this[S$0._value$2] = null;
      RestorableListenable.__proto__.new.call(this);
      ;
    }).prototype = RestorableListenable.prototype;
    dart.addTypeTests(RestorableListenable);
    RestorableListenable.prototype[_is_RestorableListenable_default] = true;
    dart.addTypeCaches(RestorableListenable);
    dart.setMethodSignature(RestorableListenable, () => ({
      __proto__: dart.getMethods(RestorableListenable.__proto__),
      initWithValue: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RestorableListenable, () => ({
      __proto__: dart.getGetters(RestorableListenable.__proto__),
      value: T
    }));
    dart.setLibraryUri(RestorableListenable, I[68]);
    dart.setFieldSignature(RestorableListenable, () => ({
      __proto__: dart.getFields(RestorableListenable.__proto__),
      [S$0._value$2]: dart.fieldType(dart.nullable(T))
    }));
    return RestorableListenable;
  });
  restoration_properties.RestorableListenable = restoration_properties.RestorableListenable$();
  dart.addTypeTests(restoration_properties.RestorableListenable, _is_RestorableListenable_default);
  const _is_RestorableChangeNotifier_default = Symbol('_is_RestorableChangeNotifier_default');
  restoration_properties.RestorableChangeNotifier$ = dart.generic(T => {
    class RestorableChangeNotifier extends restoration_properties.RestorableListenable$(T) {
      initWithValue(value) {
        T.as(value);
        if (value == null) dart.nullFailed(I[67], 476, 24, "value");
        this[S$0._disposeOldValue]();
        super.initWithValue(value);
      }
      dispose() {
        this[S$0._disposeOldValue]();
        super.dispose();
      }
      [S$0._disposeOldValue]() {
        if (this[S$0._value$2] != null) {
          async.scheduleMicrotask(dart.bind(dart.nullCheck(this[S$0._value$2]), 'dispose'));
        }
      }
    }
    (RestorableChangeNotifier.new = function() {
      RestorableChangeNotifier.__proto__.new.call(this);
      ;
    }).prototype = RestorableChangeNotifier.prototype;
    dart.addTypeTests(RestorableChangeNotifier);
    RestorableChangeNotifier.prototype[_is_RestorableChangeNotifier_default] = true;
    dart.addTypeCaches(RestorableChangeNotifier);
    dart.setMethodSignature(RestorableChangeNotifier, () => ({
      __proto__: dart.getMethods(RestorableChangeNotifier.__proto__),
      [S$0._disposeOldValue]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(RestorableChangeNotifier, I[68]);
    return RestorableChangeNotifier;
  });
  restoration_properties.RestorableChangeNotifier = restoration_properties.RestorableChangeNotifier$();
  dart.addTypeTests(restoration_properties.RestorableChangeNotifier, _is_RestorableChangeNotifier_default);
  editable_text.TextEditingController = class TextEditingController extends change_notifier.ValueNotifier$(text_input.TextEditingValue) {
    get text() {
      return this.value.text;
    }
    set text(newText) {
      if (newText == null) dart.nullFailed(I[69], 169, 19, "newText");
      this.value = this.value.copyWith({text: newText, selection: C[740] || CT.C740, composing: ui.TextRange.empty});
    }
    set value(newValue) {
      text_input.TextEditingValue.as(newValue);
      if (newValue == null) dart.nullFailed(I[69], 178, 30, "newValue");
      if (!(!dart.test(newValue.composing.isValid) || dart.test(newValue.isComposingRangeValid))) dart.assertFailed("New TextEditingValue " + dart.str(newValue) + " has an invalid non-empty composing range " + dart.str(newValue.composing) + ". It is recommended to use a valid composing range, " + "even for readonly text fields", I[69], 180, 7, "!newValue.composing.isValid || newValue.isComposingRangeValid");
      super.value = newValue;
    }
    get value() {
      return super.value;
    }
    buildTextSpan(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      if (context == null) dart.nullFailed(I[69], 192, 49, "context");
      let style = opts && 'style' in opts ? opts.style : null;
      let withComposing = opts && 'withComposing' in opts ? opts.withComposing : null;
      if (withComposing == null) dart.nullFailed(I[69], 192, 91, "withComposing");
      if (!(!dart.test(this.value.composing.isValid) || !dart.test(withComposing) || dart.test(this.value.isComposingRangeValid))) dart.assertFailed(null, I[69], 193, 12, "!value.composing.isValid || !withComposing || value.isComposingRangeValid");
      if (!dart.test(this.value.isComposingRangeValid) || !dart.test(withComposing)) {
        return new text_span.TextSpan.new({style: style, text: this.text});
      }
      let composingStyle = dart.nullCheck(style).merge(C[742] || CT.C742);
      return new text_span.TextSpan.new({style: style, children: T$.JSArrayOfTextSpan().of([new text_span.TextSpan.new({text: this.value.composing.textBefore(this.value.text)}), new text_span.TextSpan.new({style: composingStyle, text: this.value.composing.textInside(this.value.text)}), new text_span.TextSpan.new({text: this.value.composing.textAfter(this.value.text)})])});
    }
    get selection() {
      return this.value.selection;
    }
    set selection(newSelection) {
      if (newSelection == null) dart.nullFailed(I[69], 233, 31, "newSelection");
      if (!dart.test(this.isSelectionWithinTextBounds(newSelection))) dart.throw(assertions.FlutterError.new("invalid text selection: " + dart.str(newSelection)));
      let newComposing = dart.test(newSelection.isCollapsed) && dart.test(this[S$0._isSelectionWithinComposingRange](newSelection)) ? this.value.composing : ui.TextRange.empty;
      this.value = this.value.copyWith({selection: newSelection, composing: newComposing});
    }
    clear() {
      this.value = C[744] || CT.C744;
    }
    clearComposing() {
      this.value = this.value.copyWith({composing: ui.TextRange.empty});
    }
    isSelectionWithinTextBounds(selection) {
      if (selection == null) dart.nullFailed(I[69], 271, 50, "selection");
      return dart.notNull(selection.start) <= this.text.length && dart.notNull(selection.end) <= this.text.length;
    }
    [S$0._isSelectionWithinComposingRange](selection) {
      if (selection == null) dart.nullFailed(I[69], 276, 55, "selection");
      return dart.notNull(selection.start) >= dart.notNull(this.value.composing.start) && dart.notNull(selection.end) <= dart.notNull(this.value.composing.end);
    }
  };
  (editable_text.TextEditingController.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    editable_text.TextEditingController.__proto__.new.call(this, text == null ? text_input.TextEditingValue.empty : new text_input.TextEditingValue.new({text: text}));
    ;
  }).prototype = editable_text.TextEditingController.prototype;
  (editable_text.TextEditingController.fromValue = function(value) {
    let t58;
    if (!(value == null || !dart.test(value.composing.isValid) || dart.test(value.isComposingRangeValid))) dart.assertFailed("New TextEditingValue " + dart.str(value) + " has an invalid non-empty composing range " + dart.str(value.composing) + ". It is recommended to use a valid composing range, " + "even for readonly text fields", I[69], 151, 9, "value == null || !value.composing.isValid || value.isComposingRangeValid");
    editable_text.TextEditingController.__proto__.new.call(this, (t58 = value, t58 == null ? text_input.TextEditingValue.empty : t58));
    ;
  }).prototype = editable_text.TextEditingController.prototype;
  dart.addTypeTests(editable_text.TextEditingController);
  dart.addTypeCaches(editable_text.TextEditingController);
  dart.setMethodSignature(editable_text.TextEditingController, () => ({
    __proto__: dart.getMethods(editable_text.TextEditingController.__proto__),
    buildTextSpan: dart.fnType(text_span.TextSpan, [], {style: dart.nullable(text_style.TextStyle)}, {context: framework.BuildContext, withComposing: core.bool}),
    clear: dart.fnType(dart.void, []),
    clearComposing: dart.fnType(dart.void, []),
    isSelectionWithinTextBounds: dart.fnType(core.bool, [text_editing.TextSelection]),
    [S$0._isSelectionWithinComposingRange]: dart.fnType(core.bool, [text_editing.TextSelection])
  }));
  dart.setGetterSignature(editable_text.TextEditingController, () => ({
    __proto__: dart.getGetters(editable_text.TextEditingController.__proto__),
    text: core.String,
    selection: text_editing.TextSelection
  }));
  dart.setSetterSignature(editable_text.TextEditingController, () => ({
    __proto__: dart.getSetters(editable_text.TextEditingController.__proto__),
    text: core.String,
    selection: text_editing.TextSelection
  }));
  dart.setLibraryUri(editable_text.TextEditingController, I[70]);
  restoration_properties.RestorableTextEditingController = class RestorableTextEditingController extends restoration_properties.RestorableChangeNotifier$(editable_text.TextEditingController) {
    static new(opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      return new restoration_properties.RestorableTextEditingController.fromValue(text == null ? text_input.TextEditingValue.empty : new text_input.TextEditingValue.new({text: text}));
    }
    createDefaultValue() {
      return new editable_text.TextEditingController.fromValue(this[S$0._initialValue]);
    }
    fromPrimitives(data) {
      return new editable_text.TextEditingController.new({text: core.String.as(dart.nullCheck(data))});
    }
    toPrimitives() {
      return this.value.text;
    }
  };
  (restoration_properties.RestorableTextEditingController.fromValue = function(value) {
    if (value == null) dart.nullFailed(I[67], 517, 62, "value");
    this[S$0._initialValue] = value;
    restoration_properties.RestorableTextEditingController.__proto__.new.call(this);
    ;
  }).prototype = restoration_properties.RestorableTextEditingController.prototype;
  dart.addTypeTests(restoration_properties.RestorableTextEditingController);
  dart.addTypeCaches(restoration_properties.RestorableTextEditingController);
  dart.setMethodSignature(restoration_properties.RestorableTextEditingController, () => ({
    __proto__: dart.getMethods(restoration_properties.RestorableTextEditingController.__proto__),
    createDefaultValue: dart.fnType(editable_text.TextEditingController, []),
    fromPrimitives: dart.fnType(editable_text.TextEditingController, [dart.nullable(core.Object)]),
    toPrimitives: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(restoration_properties.RestorableTextEditingController, I[68]);
  dart.setFieldSignature(restoration_properties.RestorableTextEditingController, () => ({
    __proto__: dart.getFields(restoration_properties.RestorableTextEditingController.__proto__),
    [S$0._initialValue]: dart.finalFieldType(text_input.TextEditingValue)
  }));
  restoration$.RestorationScope = class RestorationScope extends framework.StatefulWidget {
    get child() {
      return this[S$0.child$26];
    }
    set child(value) {
      super.child = value;
    }
    get restorationId() {
      return this[S$0.restorationId$1];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    static of(context) {
      let t58;
      if (context == null) dart.nullFailed(I[34], 77, 45, "context");
      t58 = context.dependOnInheritedWidgetOfExactType(restoration$.UnmanagedRestorationScope);
      return t58 == null ? null : t58.bucket;
    }
    createState() {
      return new restoration$._RestorationScopeState.new();
    }
  };
  (restoration$.RestorationScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[34], 62, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.restorationId$1] = restorationId;
    this[S$0.child$26] = child;
    if (!(child != null)) dart.assertFailed(null, I[34], 63, 15, "child != null");
    restoration$.RestorationScope.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = restoration$.RestorationScope.prototype;
  dart.addTypeTests(restoration$.RestorationScope);
  dart.addTypeCaches(restoration$.RestorationScope);
  dart.setMethodSignature(restoration$.RestorationScope, () => ({
    __proto__: dart.getMethods(restoration$.RestorationScope.__proto__),
    createState: dart.fnType(framework.State$(restoration$.RestorationScope), [])
  }));
  dart.setLibraryUri(restoration$.RestorationScope, I[35]);
  dart.setFieldSignature(restoration$.RestorationScope, () => ({
    __proto__: dart.getFields(restoration$.RestorationScope.__proto__),
    child: dart.finalFieldType(framework.Widget),
    restorationId: dart.finalFieldType(dart.nullable(core.String))
  }));
  const State_RestorationMixin$36$ = class State_RestorationMixin extends framework.State$(restoration$.RestorationScope) {};
  (State_RestorationMixin$36$.new = function() {
    restoration$.RestorationMixin$(restoration$.RestorationScope)[dart.mixinNew].call(this);
    State_RestorationMixin$36$.__proto__.new.call(this);
  }).prototype = State_RestorationMixin$36$.prototype;
  dart.applyMixin(State_RestorationMixin$36$, restoration$.RestorationMixin$(restoration$.RestorationScope));
  restoration$._RestorationScopeState = class _RestorationScopeState extends State_RestorationMixin$36$ {
    get restorationId() {
      return this.widget.restorationId;
    }
    restoreState(oldBucket, initialRestore) {
      if (initialRestore == null) dart.nullFailed(I[34], 105, 56, "initialRestore");
    }
    build(context) {
      if (context == null) dart.nullFailed(I[34], 111, 29, "context");
      return new restoration$.UnmanagedRestorationScope.new({bucket: this.bucket, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[747] || CT.C747});
    }
  };
  (restoration$._RestorationScopeState.new = function() {
    restoration$._RestorationScopeState.__proto__.new.call(this);
    ;
  }).prototype = restoration$._RestorationScopeState.prototype;
  dart.addTypeTests(restoration$._RestorationScopeState);
  dart.addTypeCaches(restoration$._RestorationScopeState);
  dart.setMethodSignature(restoration$._RestorationScopeState, () => ({
    __proto__: dart.getMethods(restoration$._RestorationScopeState.__proto__),
    restoreState: dart.fnType(dart.void, [dart.nullable(restoration.RestorationBucket), core.bool]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(restoration$._RestorationScopeState, () => ({
    __proto__: dart.getGetters(restoration$._RestorationScopeState.__proto__),
    restorationId: dart.nullable(core.String)
  }));
  dart.setLibraryUri(restoration$._RestorationScopeState, I[35]);
  restoration$.UnmanagedRestorationScope = class UnmanagedRestorationScope extends framework.InheritedWidget {
    get bucket() {
      return this[S$0.bucket];
    }
    set bucket(value) {
      super.bucket = value;
    }
    updateShouldNotify(oldWidget) {
      restoration$.UnmanagedRestorationScope.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[34], 162, 53, "oldWidget");
      return !dart.equals(oldWidget.bucket, this.bucket);
    }
  };
  (restoration$.UnmanagedRestorationScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[34], 152, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.bucket] = bucket;
    if (!(child != null)) dart.assertFailed(null, I[34], 153, 15, "child != null");
    restoration$.UnmanagedRestorationScope.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = restoration$.UnmanagedRestorationScope.prototype;
  dart.addTypeTests(restoration$.UnmanagedRestorationScope);
  dart.addTypeCaches(restoration$.UnmanagedRestorationScope);
  dart.setMethodSignature(restoration$.UnmanagedRestorationScope, () => ({
    __proto__: dart.getMethods(restoration$.UnmanagedRestorationScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(restoration$.UnmanagedRestorationScope, I[35]);
  dart.setFieldSignature(restoration$.UnmanagedRestorationScope, () => ({
    __proto__: dart.getFields(restoration$.UnmanagedRestorationScope.__proto__),
    bucket: dart.finalFieldType(dart.nullable(restoration.RestorationBucket))
  }));
  restoration$.RootRestorationScope = class RootRestorationScope extends framework.StatefulWidget {
    get child() {
      return this[S$0.child$27];
    }
    set child(value) {
      super.child = value;
    }
    get restorationId() {
      return this[S$0.restorationId$2];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    createState() {
      return new restoration$._RootRestorationScopeState.new();
    }
  };
  (restoration$.RootRestorationScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[34], 227, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S$0.restorationId$2] = restorationId;
    this[S$0.child$27] = child;
    if (!(child != null)) dart.assertFailed(null, I[34], 228, 15, "child != null");
    restoration$.RootRestorationScope.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = restoration$.RootRestorationScope.prototype;
  dart.addTypeTests(restoration$.RootRestorationScope);
  dart.addTypeCaches(restoration$.RootRestorationScope);
  dart.setMethodSignature(restoration$.RootRestorationScope, () => ({
    __proto__: dart.getMethods(restoration$.RootRestorationScope.__proto__),
    createState: dart.fnType(framework.State$(restoration$.RootRestorationScope), [])
  }));
  dart.setLibraryUri(restoration$.RootRestorationScope, I[35]);
  dart.setFieldSignature(restoration$.RootRestorationScope, () => ({
    __proto__: dart.getFields(restoration$.RootRestorationScope.__proto__),
    child: dart.finalFieldType(framework.Widget),
    restorationId: dart.finalFieldType(dart.nullable(core.String))
  }));
  restoration$._RootRestorationScopeState = class _RootRestorationScopeState extends framework.State$(restoration$.RootRestorationScope) {
    didChangeDependencies() {
      super.didChangeDependencies();
      this[S$0._ancestorBucket] = restoration$.RestorationScope.of(this.context);
      this[S$0._loadRootBucketIfNecessary]();
      this[S$0._okToRenderBlankContainer] == null ? this[S$0._okToRenderBlankContainer] = this.widget.restorationId != null && dart.test(this[S$0._needsRootBucketInserted]) : null;
    }
    didUpdateWidget(oldWidget) {
      restoration$.RootRestorationScope.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[34], 262, 45, "oldWidget");
      super.didUpdateWidget(oldWidget);
      this[S$0._loadRootBucketIfNecessary]();
    }
    get [S$0._needsRootBucketInserted]() {
      return this[S$0._ancestorBucket] == null;
    }
    get [S$0._isWaitingForRootBucket]() {
      return this.widget.restorationId != null && dart.test(this[S$0._needsRootBucketInserted]) && !dart.test(this[S$0._rootBucketValid]);
    }
    [S$0._loadRootBucketIfNecessary]() {
      if (dart.test(this[S$0._isWaitingForRootBucket]) && !dart.test(this[S$0._isLoadingRootBucket])) {
        this[S$0._isLoadingRootBucket] = true;
        dart.nullCheck(binding.RendererBinding.instance).deferFirstFrame();
        dart.nullCheck(binding$0.ServicesBinding.instance).restorationManager.rootBucket.then(core.Null, dart.fn(bucket => {
          this[S$0._isLoadingRootBucket] = false;
          if (dart.test(this.mounted)) {
            dart.nullCheck(binding$0.ServicesBinding.instance).restorationManager.addListener(dart.bind(this, S$0._replaceRootBucket));
            this.setState(dart.fn(() => {
              this[S$0._rootBucket] = bucket;
              this[S$0._rootBucketValid] = true;
              this[S$0._okToRenderBlankContainer] = false;
            }, T$.VoidTovoid()));
          }
          dart.nullCheck(binding.RendererBinding.instance).allowFirstFrame();
        }, T$.RestorationBucketNToNull()));
      }
    }
    [S$0._replaceRootBucket]() {
      this[S$0._rootBucketValid] = false;
      this[S$0._rootBucket] = null;
      dart.nullCheck(binding$0.ServicesBinding.instance).restorationManager.removeListener(dart.bind(this, S$0._replaceRootBucket));
      this[S$0._loadRootBucketIfNecessary]();
      if (!!dart.test(this[S$0._isWaitingForRootBucket])) dart.assertFailed(null, I[34], 299, 12, "!_isWaitingForRootBucket");
    }
    dispose() {
      if (dart.test(this[S$0._rootBucketValid])) {
        dart.nullCheck(binding$0.ServicesBinding.instance).restorationManager.removeListener(dart.bind(this, S$0._replaceRootBucket));
      }
      super.dispose();
    }
    build(context) {
      let t58;
      if (context == null) dart.nullFailed(I[34], 311, 29, "context");
      if (dart.nullCheck(this[S$0._okToRenderBlankContainer]) && dart.test(this[S$0._isWaitingForRootBucket])) {
        return C[751] || CT.C751;
      }
      return new restoration$.UnmanagedRestorationScope.new({bucket: (t58 = this[S$0._ancestorBucket], t58 == null ? this[S$0._rootBucket] : t58), child: new restoration$.RestorationScope.new({restorationId: this.widget.restorationId, child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[753] || CT.C753}), $creationLocationd_0dea112b090073317d4: C[757] || CT.C757});
    }
  };
  (restoration$._RootRestorationScopeState.new = function() {
    this[S$0._okToRenderBlankContainer] = null;
    this[S$0._rootBucketValid] = false;
    this[S$0._rootBucket] = null;
    this[S$0._ancestorBucket] = null;
    this[S$0._isLoadingRootBucket] = false;
    restoration$._RootRestorationScopeState.__proto__.new.call(this);
    ;
  }).prototype = restoration$._RootRestorationScopeState.prototype;
  dart.addTypeTests(restoration$._RootRestorationScopeState);
  dart.addTypeCaches(restoration$._RootRestorationScopeState);
  dart.setMethodSignature(restoration$._RootRestorationScopeState, () => ({
    __proto__: dart.getMethods(restoration$._RootRestorationScopeState.__proto__),
    [S$0._loadRootBucketIfNecessary]: dart.fnType(dart.void, []),
    [S$0._replaceRootBucket]: dart.fnType(dart.void, []),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(restoration$._RootRestorationScopeState, () => ({
    __proto__: dart.getGetters(restoration$._RootRestorationScopeState.__proto__),
    [S$0._needsRootBucketInserted]: core.bool,
    [S$0._isWaitingForRootBucket]: core.bool
  }));
  dart.setLibraryUri(restoration$._RootRestorationScopeState, I[35]);
  dart.setFieldSignature(restoration$._RootRestorationScopeState, () => ({
    __proto__: dart.getFields(restoration$._RootRestorationScopeState.__proto__),
    [S$0._okToRenderBlankContainer]: dart.fieldType(dart.nullable(core.bool)),
    [S$0._rootBucketValid]: dart.fieldType(core.bool),
    [S$0._rootBucket]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
    [S$0._ancestorBucket]: dart.fieldType(dart.nullable(restoration.RestorationBucket)),
    [S$0._isLoadingRootBucket]: dart.fieldType(core.bool)
  }));
  const ViewportOffset_ScrollMetrics$36 = class ViewportOffset_ScrollMetrics extends viewport_offset.ViewportOffset {};
  (ViewportOffset_ScrollMetrics$36.new = function() {
    ViewportOffset_ScrollMetrics$36.__proto__.new.call(this);
  }).prototype = ViewportOffset_ScrollMetrics$36.prototype;
  dart.applyMixin(ViewportOffset_ScrollMetrics$36, scroll_metrics.ScrollMetrics);
  scroll_position.ScrollPosition = class ScrollPosition extends ViewportOffset_ScrollMetrics$36 {
    get physics() {
      return this[S$0.physics$1];
    }
    set physics(value) {
      super.physics = value;
    }
    get context() {
      return this[S$0.context$1];
    }
    set context(value) {
      super.context = value;
    }
    get keepScrollOffset() {
      return this[S$0.keepScrollOffset];
    }
    set keepScrollOffset(value) {
      super.keepScrollOffset = value;
    }
    get debugLabel() {
      return this[S$0.debugLabel$1];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get isScrollingNotifier() {
      return this[S$0.isScrollingNotifier];
    }
    set isScrollingNotifier(value) {
      super.isScrollingNotifier = value;
    }
    get minScrollExtent() {
      return dart.nullCheck(this[S$0._minScrollExtent]);
    }
    get maxScrollExtent() {
      return dart.nullCheck(this[S$0._maxScrollExtent]);
    }
    get hasContentDimensions() {
      return this[S$0._minScrollExtent] != null && this[S$0._maxScrollExtent] != null;
    }
    get pixels() {
      return dart.nullCheck(this[S$0._pixels]);
    }
    get hasPixels() {
      return this[S$0._pixels] != null;
    }
    get viewportDimension() {
      return dart.nullCheck(this[S$0._viewportDimension]);
    }
    get hasViewportDimension() {
      return this[S$0._viewportDimension] != null;
    }
    get haveDimensions() {
      return this[S$0._haveDimensions];
    }
    absorb(other) {
      if (other == null) dart.nullFailed(I[72], 214, 30, "other");
      if (!(other != null)) dart.assertFailed(null, I[72], 215, 12, "other != null");
      if (!dart.equals(other.context, this.context)) dart.assertFailed(null, I[72], 216, 12, "other.context == context");
      if (!(this[S$0._pixels] == null)) dart.assertFailed(null, I[72], 217, 12, "_pixels == null");
      if (dart.test(other.hasContentDimensions)) {
        this[S$0._minScrollExtent] = other.minScrollExtent;
        this[S$0._maxScrollExtent] = other.maxScrollExtent;
      }
      if (dart.test(other.hasPixels)) {
        this[S$0._pixels] = other.pixels;
      }
      if (dart.test(other.hasViewportDimension)) {
        this[S$0._viewportDimension] = other.viewportDimension;
      }
      if (!(this.activity == null)) dart.assertFailed(null, I[72], 229, 12, "activity == null");
      if (!(other.activity != null)) dart.assertFailed(null, I[72], 230, 12, "other.activity != null");
      this[S$0._activity] = other.activity;
      other[S$0._activity] = null;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) dart.nullCheck(this.activity).resetActivity();
      this.context.setIgnorePointer(dart.nullCheck(this.activity).shouldIgnorePointer);
      this.isScrollingNotifier.value = dart.nullCheck(this.activity).isScrolling;
    }
    setPixels(newPixels) {
      if (newPixels == null) dart.nullFailed(I[72], 255, 27, "newPixels");
      if (!dart.test(this.hasPixels)) dart.assertFailed(null, I[72], 256, 12, "hasPixels");
      if (!(dart.nullCheck(binding$.SchedulerBinding.instance).schedulerPhase != binding$.SchedulerPhase.persistentCallbacks)) dart.assertFailed("A scrollable's position should not change during the build, layout, and paint phases, otherwise the rendering will be confused.", I[72], 257, 12, "SchedulerBinding.instance!.schedulerPhase != SchedulerPhase.persistentCallbacks");
      if (newPixels != this.pixels) {
        let overscroll = this.applyBoundaryConditions(newPixels);
        if (!dart.test(dart.fn(() => {
          let delta = dart.notNull(newPixels) - dart.notNull(this.pixels);
          if (overscroll[S$.$abs]() > delta[S$.$abs]()) {
            dart.throw(assertions.FlutterError.new(dart.str(this[S$.$runtimeType]) + ".applyBoundaryConditions returned invalid overscroll value.\n" + "setPixels() was called to change the scroll offset from " + dart.str(this.pixels) + " to " + dart.str(newPixels) + ".\n" + "That is a delta of " + dart.str(delta) + " units.\n" + dart.str(this[S$.$runtimeType]) + ".applyBoundaryConditions reported an overscroll of " + dart.str(overscroll) + " units."));
          }
          return true;
        }, T$.VoidTobool())())) dart.assertFailed(null, I[72], 260, 14, "() {\r\n        final double delta = newPixels - pixels;\r\n        if (overscroll.abs() > delta.abs()) {\r\n          throw FlutterError(\r\n            '$runtimeType.applyBoundaryConditions returned invalid overscroll value.\\n'\r\n            'setPixels() was called to change the scroll offset from $pixels to $newPixels.\\n'\r\n            'That is a delta of $delta units.\\n'\r\n            '$runtimeType.applyBoundaryConditions reported an overscroll of $overscroll units.',\r\n          );\r\n        }\r\n        return true;\r\n      }()");
        let oldPixels = this.pixels;
        this[S$0._pixels] = dart.notNull(newPixels) - dart.notNull(overscroll);
        if (this[S$0._pixels] != oldPixels) {
          this.notifyListeners();
          this.didUpdateScrollPositionBy(dart.notNull(this.pixels) - dart.notNull(oldPixels));
        }
        if (overscroll !== 0.0) {
          this.didOverscrollBy(overscroll);
          return overscroll;
        }
      }
      return 0.0;
    }
    correctPixels(value) {
      if (value == null) dart.nullFailed(I[72], 320, 29, "value");
      this[S$0._pixels] = value;
    }
    correctBy(correction) {
      if (correction == null) dart.nullFailed(I[72], 340, 25, "correction");
      if (!dart.test(this.hasPixels)) dart.assertFailed("An initial pixels value must exist by calling correctPixels on the ScrollPosition", I[72], 342, 7, "hasPixels");
      this[S$0._pixels] = dart.nullCheck(this[S$0._pixels]) + dart.notNull(correction);
      this[S$0._didChangeViewportDimensionOrReceiveCorrection] = true;
    }
    forcePixels(value) {
      if (value == null) dart.nullFailed(I[72], 372, 27, "value");
      if (!dart.test(this.hasPixels)) dart.assertFailed(null, I[72], 373, 12, "hasPixels");
      if (!(value != null)) dart.assertFailed(null, I[72], 374, 12, "value != null");
      this[S$0._impliedVelocity] = dart.notNull(value) - dart.notNull(this.pixels);
      this[S$0._pixels] = value;
      this.notifyListeners();
      dart.nullCheck(binding$.SchedulerBinding.instance).addPostFrameCallback(dart.fn(timeStamp => {
        if (timeStamp == null) dart.nullFailed(I[72], 378, 63, "timeStamp");
        this[S$0._impliedVelocity] = 0.0;
      }, T$.DurationTovoid()));
    }
    saveScrollOffset() {
      let t58;
      t58 = page_storage.PageStorage.of(this.context.storageContext);
      t58 == null ? null : t58.writeState(this.context.storageContext, this.pixels);
    }
    restoreScrollOffset() {
      let t58;
      if (!dart.test(this.hasPixels)) {
        let value = T$.doubleN().as((t58 = page_storage.PageStorage.of(this.context.storageContext), t58 == null ? null : t58.readState(this.context.storageContext)));
        if (value != null) this.correctPixels(value);
      }
    }
    restoreOffset(offset, opts) {
      if (offset == null) dart.nullFailed(I[72], 439, 29, "offset");
      let initialRestore = opts && 'initialRestore' in opts ? opts.initialRestore : false;
      if (initialRestore == null) dart.nullFailed(I[72], 439, 43, "initialRestore");
      if (!(initialRestore != null)) dart.assertFailed(null, I[72], 440, 12, "initialRestore != null");
      if (!(offset != null)) dart.assertFailed(null, I[72], 441, 12, "offset != null");
      if (dart.test(initialRestore)) {
        this.correctPixels(offset);
      } else {
        this.jumpTo(offset);
      }
    }
    saveOffset() {
      if (!dart.test(this.hasPixels)) dart.assertFailed(null, I[72], 458, 12, "hasPixels");
      this.context.saveOffset(this.pixels);
    }
    applyBoundaryConditions(value) {
      if (value == null) dart.nullFailed(I[72], 472, 41, "value");
      let result = this.physics.applyBoundaryConditions(this, value);
      if (!dart.test(dart.fn(() => {
        let delta = dart.notNull(value) - dart.notNull(this.pixels);
        if (result[S$.$abs]() > delta[S$.$abs]()) {
          dart.throw(assertions.FlutterError.new(dart.str(dart.runtimeType(this.physics)) + ".applyBoundaryConditions returned invalid overscroll value.\n" + "The method was called to consider a change from " + dart.str(this.pixels) + " to " + dart.str(value) + ", which is a " + "delta of " + delta[S$0.$toStringAsFixed](1) + " units. However, it returned an overscroll of " + result[S$0.$toStringAsFixed](1) + " units, which has a greater magnitude than the delta. " + "The applyBoundaryConditions method is only supposed to reduce the possible range " + "of movement, not increase it.\n" + "The scroll extents are " + dart.str(this.minScrollExtent) + " .. " + dart.str(this.maxScrollExtent) + ", and the " + "viewport dimension is " + dart.str(this.viewportDimension) + "."));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[72], 474, 12, "() {\r\n      final double delta = value - pixels;\r\n      if (result.abs() > delta.abs()) {\r\n        throw FlutterError(\r\n          '${physics.runtimeType}.applyBoundaryConditions returned invalid overscroll value.\\n'\r\n          'The method was called to consider a change from $pixels to $value, which is a '\r\n          'delta of ${delta.toStringAsFixed(1)} units. However, it returned an overscroll of '\r\n          '${result.toStringAsFixed(1)} units, which has a greater magnitude than the delta. '\r\n          'The applyBoundaryConditions method is only supposed to reduce the possible range '\r\n          'of movement, not increase it.\\n'\r\n          'The scroll extents are $minScrollExtent .. $maxScrollExtent, and the '\r\n          'viewport dimension is $viewportDimension.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      return result;
    }
    applyViewportDimension(viewportDimension) {
      if (viewportDimension == null) dart.nullFailed(I[72], 496, 38, "viewportDimension");
      if (this[S$0._viewportDimension] != viewportDimension) {
        this[S$0._viewportDimension] = viewportDimension;
        this[S$0._didChangeViewportDimensionOrReceiveCorrection] = true;
      }
      return true;
    }
    applyContentDimensions(minScrollExtent, maxScrollExtent) {
      if (minScrollExtent == null) dart.nullFailed(I[72], 511, 38, "minScrollExtent");
      if (maxScrollExtent == null) dart.nullFailed(I[72], 511, 62, "maxScrollExtent");
      if (!(minScrollExtent != null)) dart.assertFailed(null, I[72], 512, 12, "minScrollExtent != null");
      if (!(maxScrollExtent != null)) dart.assertFailed(null, I[72], 513, 12, "maxScrollExtent != null");
      if (!(this.haveDimensions === (this[S$0._lastMetrics$1] != null))) dart.assertFailed(null, I[72], 514, 12, "haveDimensions == (_lastMetrics != null)");
      if (!dart.test(utils.nearEqual(this[S$0._minScrollExtent], minScrollExtent, tolerance.Tolerance.defaultTolerance.distance)) || !dart.test(utils.nearEqual(this[S$0._maxScrollExtent], maxScrollExtent, tolerance.Tolerance.defaultTolerance.distance)) || dart.test(this[S$0._didChangeViewportDimensionOrReceiveCorrection])) {
        if (!(minScrollExtent != null)) dart.assertFailed(null, I[72], 518, 14, "minScrollExtent != null");
        if (!(maxScrollExtent != null)) dart.assertFailed(null, I[72], 519, 14, "maxScrollExtent != null");
        if (!(dart.notNull(minScrollExtent) <= dart.notNull(maxScrollExtent))) dart.assertFailed(null, I[72], 520, 14, "minScrollExtent <= maxScrollExtent");
        this[S$0._minScrollExtent] = minScrollExtent;
        this[S$0._maxScrollExtent] = maxScrollExtent;
        let currentMetrics = dart.test(this.haveDimensions) ? this.copyWith() : null;
        this[S$0._didChangeViewportDimensionOrReceiveCorrection] = false;
        this[S$0._pendingDimensions] = true;
        if (dart.test(this.haveDimensions) && !dart.test(this.correctForNewDimensions(dart.nullCheck(this[S$0._lastMetrics$1]), dart.nullCheck(currentMetrics)))) {
          return false;
        }
        this[S$0._haveDimensions] = true;
      }
      if (!dart.test(this.haveDimensions)) dart.assertFailed(null, I[72], 531, 12, "haveDimensions");
      if (dart.test(this[S$0._pendingDimensions])) {
        this.applyNewDimensions();
        this[S$0._pendingDimensions] = false;
      }
      if (!!dart.test(this[S$0._didChangeViewportDimensionOrReceiveCorrection])) dart.assertFailed("Use correctForNewDimensions() (and return true) to change the scroll offset during applyContentDimensions().", I[72], 536, 12, "!_didChangeViewportDimensionOrReceiveCorrection");
      this[S$0._lastMetrics$1] = this.copyWith();
      return true;
    }
    correctForNewDimensions(oldPosition, newPosition) {
      if (oldPosition == null) dart.nullFailed(I[72], 555, 46, "oldPosition");
      if (newPosition == null) dart.nullFailed(I[72], 555, 73, "newPosition");
      let newPixels = this.physics.adjustPositionForNewDimensions({oldPosition: oldPosition, newPosition: newPosition, isScrolling: dart.nullCheck(this.activity).isScrolling, velocity: dart.nullCheck(this.activity).velocity});
      if (newPixels != this.pixels) {
        this.correctPixels(newPixels);
        return false;
      }
      return true;
    }
    applyNewDimensions() {
      if (!dart.test(this.hasPixels)) dart.assertFailed(null, I[72], 591, 12, "hasPixels");
      if (!dart.test(this[S$0._pendingDimensions])) dart.assertFailed(null, I[72], 592, 12, "_pendingDimensions");
      dart.nullCheck(this.activity).applyNewDimensions();
      this[S$0._updateSemanticActions]();
    }
    [S$0._updateSemanticActions]() {
      let forward = null;
      let backward = null;
      switch (this.axisDirection) {
        case C[686] || CT.C686:
        {
          forward = ui.SemanticsAction.scrollDown;
          backward = ui.SemanticsAction.scrollUp;
          break;
        }
        case C[687] || CT.C687:
        {
          forward = ui.SemanticsAction.scrollLeft;
          backward = ui.SemanticsAction.scrollRight;
          break;
        }
        case C[684] || CT.C684:
        {
          forward = ui.SemanticsAction.scrollUp;
          backward = ui.SemanticsAction.scrollDown;
          break;
        }
        case C[688] || CT.C688:
        {
          forward = ui.SemanticsAction.scrollRight;
          backward = ui.SemanticsAction.scrollLeft;
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      let actions = T$.LinkedHashSetOfSemanticsAction().new();
      if (dart.notNull(this.pixels) > dart.notNull(this.minScrollExtent)) actions.add(backward);
      if (dart.notNull(this.pixels) < dart.notNull(this.maxScrollExtent)) actions.add(forward);
      if (dart.test(collections.setEquals(ui.SemanticsAction, actions, this[S$0._semanticActions]))) return;
      this[S$0._semanticActions] = actions;
      this.context.setSemanticsActions(dart.nullCheck(this[S$0._semanticActions]));
    }
    ensureVisible(object, opts) {
      if (object == null) dart.nullFailed(I[72], 660, 18, "object");
      let alignment = opts && 'alignment' in opts ? opts.alignment : 0;
      if (alignment == null) dart.nullFailed(I[72], 661, 12, "alignment");
      let duration = opts && 'duration' in opts ? opts.duration : C[698] || CT.C698;
      if (duration == null) dart.nullFailed(I[72], 662, 14, "duration");
      let curve = opts && 'curve' in opts ? opts.curve : C[761] || CT.C761;
      if (curve == null) dart.nullFailed(I[72], 663, 11, "curve");
      let alignmentPolicy = opts && 'alignmentPolicy' in opts ? opts.alignmentPolicy : C[762] || CT.C762;
      if (alignmentPolicy == null) dart.nullFailed(I[72], 664, 35, "alignmentPolicy");
      let targetRenderObject = opts && 'targetRenderObject' in opts ? opts.targetRenderObject : null;
      if (!(alignmentPolicy != null)) dart.assertFailed(null, I[72], 667, 12, "alignmentPolicy != null");
      if (!dart.test(object.attached)) dart.assertFailed(null, I[72], 668, 12, "object.attached");
      let viewport = dart.nullCheck(viewport$.RenderAbstractViewport.of(object));
      if (!(viewport !== null)) dart.assertFailed(null, I[72], 670, 12, "viewport != null");
      let targetRect = null;
      if (targetRenderObject != null && !dart.equals(targetRenderObject, object)) {
        targetRect = matrix_utils.MatrixUtils.transformRect(targetRenderObject.getTransformTo(object), object.paintBounds.intersect(targetRenderObject.paintBounds));
      }
      let target = null;
      switch (alignmentPolicy) {
        case C[762] || CT.C762:
        {
          target = viewport.getOffsetToReveal(object, alignment, {rect: targetRect}).offset[S$0.$clamp](this.minScrollExtent, this.maxScrollExtent);
          break;
        }
        case C[763] || CT.C763:
        {
          target = viewport.getOffsetToReveal(object, 1.0, {rect: targetRect}).offset[S$0.$clamp](this.minScrollExtent, this.maxScrollExtent);
          if (dart.notNull(target) < dart.notNull(this.pixels)) {
            target = this.pixels;
          }
          break;
        }
        case C[764] || CT.C764:
        {
          target = viewport.getOffsetToReveal(object, 0.0, {rect: targetRect}).offset[S$0.$clamp](this.minScrollExtent, this.maxScrollExtent);
          if (dart.notNull(target) > dart.notNull(this.pixels)) {
            target = this.pixels;
          }
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (target == this.pixels) return T$.FutureOfvoid().value();
      if (dart.equals(duration, core.Duration.zero)) {
        this.jumpTo(target);
        return T$.FutureOfvoid().value();
      }
      return this.animateTo(target, {duration: duration, curve: curve});
    }
    moveTo(to, opts) {
      if (to == null) dart.nullFailed(I[72], 788, 12, "to");
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      let clamp = opts && 'clamp' in opts ? opts.clamp : true;
      if (!(to != null)) dart.assertFailed(null, I[72], 793, 12, "to != null");
      if (!(clamp != null)) dart.assertFailed(null, I[72], 794, 12, "clamp != null");
      if (dart.nullCheck(clamp)) to = to[S$0.$clamp](this.minScrollExtent, this.maxScrollExtent);
      return super.moveTo(to, {duration: duration, curve: curve});
    }
    get allowImplicitScrolling() {
      return this.physics.allowImplicitScrolling;
    }
    get activity() {
      return this[S$0._activity];
    }
    beginActivity(newActivity) {
      if (newActivity == null) return;
      let wasScrolling = null;
      let oldIgnorePointer = null;
      if (this[S$0._activity] != null) {
        oldIgnorePointer = dart.nullCheck(this[S$0._activity]).shouldIgnorePointer;
        wasScrolling = dart.nullCheck(this[S$0._activity]).isScrolling;
        if (dart.test(wasScrolling) && !dart.test(newActivity.isScrolling)) this.didEndScroll();
        dart.nullCheck(this[S$0._activity]).dispose();
      } else {
        oldIgnorePointer = false;
        wasScrolling = false;
      }
      this[S$0._activity] = newActivity;
      if (oldIgnorePointer != dart.nullCheck(this.activity).shouldIgnorePointer) this.context.setIgnorePointer(dart.nullCheck(this.activity).shouldIgnorePointer);
      this.isScrollingNotifier.value = dart.nullCheck(this.activity).isScrolling;
      if (!dart.test(wasScrolling) && dart.test(dart.nullCheck(this[S$0._activity]).isScrolling)) this.didStartScroll();
    }
    didStartScroll() {
      dart.nullCheck(this.activity).dispatchScrollStartNotification(this.copyWith(), this.context.notificationContext);
    }
    didUpdateScrollPositionBy(delta) {
      if (delta == null) dart.nullFailed(I[72], 869, 41, "delta");
      dart.nullCheck(this.activity).dispatchScrollUpdateNotification(this.copyWith(), dart.nullCheck(this.context.notificationContext), delta);
    }
    didEndScroll() {
      dart.nullCheck(this.activity).dispatchScrollEndNotification(this.copyWith(), dart.nullCheck(this.context.notificationContext));
      this.saveOffset();
      if (dart.test(this.keepScrollOffset)) this.saveScrollOffset();
    }
    didOverscrollBy(value) {
      if (value == null) dart.nullFailed(I[72], 886, 31, "value");
      if (!dart.test(dart.nullCheck(this.activity).isScrolling)) dart.assertFailed(null, I[72], 887, 12, "activity!.isScrolling");
      dart.nullCheck(this.activity).dispatchOverscrollNotification(this.copyWith(), dart.nullCheck(this.context.notificationContext), value);
    }
    didUpdateScrollDirection(direction) {
      if (direction == null) dart.nullFailed(I[72], 894, 49, "direction");
      new scroll_notification.UserScrollNotification.new({metrics: this.copyWith(), context: dart.nullCheck(this.context.notificationContext), direction: direction}).dispatch(this.context.notificationContext);
    }
    recommendDeferredLoading(context) {
      if (context == null) dart.nullFailed(I[72], 908, 46, "context");
      if (!(context != null)) dart.assertFailed(null, I[72], 909, 12, "context != null");
      if (!(this.activity != null)) dart.assertFailed(null, I[72], 910, 12, "activity != null");
      if (!(dart.nullCheck(this.activity).velocity != null)) dart.assertFailed(null, I[72], 911, 12, "activity!.velocity != null");
      if (!(this[S$0._impliedVelocity] != null)) dart.assertFailed(null, I[72], 912, 12, "_impliedVelocity != null");
      return this.physics.recommendDeferredLoading(dart.notNull(dart.nullCheck(this.activity).velocity) + dart.notNull(this[S$0._impliedVelocity]), this.copyWith(), context);
    }
    dispose() {
      let t58;
      t58 = this.activity;
      t58 == null ? null : t58.dispose();
      this[S$0._activity] = null;
      super.dispose();
    }
    notifyListeners() {
      this[S$0._updateSemanticActions]();
      super.notifyListeners();
    }
    debugFillDescription(description) {
      let t58, t58$, t58$0;
      if (description == null) dart.nullFailed(I[72], 934, 42, "description");
      if (this.debugLabel != null) description[S$.$add](dart.nullCheck(this.debugLabel));
      super.debugFillDescription(description);
      description[S$.$add]("range: " + dart.str((t58 = this[S$0._minScrollExtent], t58 == null ? null : t58[S$0.$toStringAsFixed](1))) + ".." + dart.str((t58$ = this[S$0._maxScrollExtent], t58$ == null ? null : t58$[S$0.$toStringAsFixed](1))));
      description[S$.$add]("viewport: " + dart.str((t58$0 = this[S$0._viewportDimension], t58$0 == null ? null : t58$0[S$0.$toStringAsFixed](1))));
    }
  };
  (scroll_position.ScrollPosition.new = function(opts) {
    let physics = opts && 'physics' in opts ? opts.physics : null;
    if (physics == null) dart.nullFailed(I[72], 93, 19, "physics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[72], 94, 19, "context");
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    if (keepScrollOffset == null) dart.nullFailed(I[72], 95, 10, "keepScrollOffset");
    let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[S$0._minScrollExtent] = null;
    this[S$0._maxScrollExtent] = null;
    this[S$0._impliedVelocity] = 0.0;
    this[S$0._pixels] = null;
    this[S$0._viewportDimension] = null;
    this[S$0._haveDimensions] = false;
    this[S$0._didChangeViewportDimensionOrReceiveCorrection] = true;
    this[S$0._pendingDimensions] = false;
    this[S$0._lastMetrics$1] = null;
    this[S$0._semanticActions] = null;
    this[S$0.isScrollingNotifier] = new (T$.ValueNotifierOfbool()).new(false);
    this[S$0._activity] = null;
    this[S$0.physics$1] = physics;
    this[S$0.context$1] = context;
    this[S$0.keepScrollOffset] = keepScrollOffset;
    this[S$0.debugLabel$1] = debugLabel;
    if (!(physics != null)) dart.assertFailed(null, I[72], 98, 15, "physics != null");
    if (!(context != null)) dart.assertFailed(null, I[72], 99, 15, "context != null");
    if (!(context.vsync != null)) dart.assertFailed(null, I[72], 100, 15, "context.vsync != null");
    if (!(keepScrollOffset != null)) dart.assertFailed(null, I[72], 101, 15, "keepScrollOffset != null");
    scroll_position.ScrollPosition.__proto__.new.call(this);
    if (oldPosition != null) this.absorb(oldPosition);
    if (dart.test(this.keepScrollOffset)) this.restoreScrollOffset();
  }).prototype = scroll_position.ScrollPosition.prototype;
  dart.addTypeTests(scroll_position.ScrollPosition);
  dart.addTypeCaches(scroll_position.ScrollPosition);
  dart.setMethodSignature(scroll_position.ScrollPosition, () => ({
    __proto__: dart.getMethods(scroll_position.ScrollPosition.__proto__),
    absorb: dart.fnType(dart.void, [scroll_position.ScrollPosition]),
    setPixels: dart.fnType(core.double, [core.double]),
    correctPixels: dart.fnType(dart.void, [core.double]),
    correctBy: dart.fnType(dart.void, [core.double]),
    forcePixels: dart.fnType(dart.void, [core.double]),
    saveScrollOffset: dart.fnType(dart.void, []),
    restoreScrollOffset: dart.fnType(dart.void, []),
    restoreOffset: dart.fnType(dart.void, [core.double], {initialRestore: core.bool}, {}),
    saveOffset: dart.fnType(dart.void, []),
    applyBoundaryConditions: dart.fnType(core.double, [core.double]),
    applyViewportDimension: dart.fnType(core.bool, [core.double]),
    applyContentDimensions: dart.fnType(core.bool, [core.double, core.double]),
    correctForNewDimensions: dart.fnType(core.bool, [scroll_metrics.ScrollMetrics, scroll_metrics.ScrollMetrics]),
    applyNewDimensions: dart.fnType(dart.void, []),
    [S$0._updateSemanticActions]: dart.fnType(dart.void, []),
    ensureVisible: dart.fnType(async.Future$(dart.void), [object$.RenderObject], {alignment: core.double, alignmentPolicy: scroll_position.ScrollPositionAlignmentPolicy, curve: curves.Curve, duration: core.Duration, targetRenderObject: dart.nullable(object$.RenderObject)}, {}),
    beginActivity: dart.fnType(dart.void, [dart.nullable(scroll_activity.ScrollActivity)]),
    didStartScroll: dart.fnType(dart.void, []),
    didUpdateScrollPositionBy: dart.fnType(dart.void, [core.double]),
    didEndScroll: dart.fnType(dart.void, []),
    didOverscrollBy: dart.fnType(dart.void, [core.double]),
    didUpdateScrollDirection: dart.fnType(dart.void, [viewport_offset.ScrollDirection]),
    recommendDeferredLoading: dart.fnType(core.bool, [framework.BuildContext])
  }));
  dart.setGetterSignature(scroll_position.ScrollPosition, () => ({
    __proto__: dart.getGetters(scroll_position.ScrollPosition.__proto__),
    minScrollExtent: core.double,
    maxScrollExtent: core.double,
    hasContentDimensions: core.bool,
    pixels: core.double,
    hasPixels: core.bool,
    viewportDimension: core.double,
    hasViewportDimension: core.bool,
    haveDimensions: core.bool,
    allowImplicitScrolling: core.bool,
    activity: dart.nullable(scroll_activity.ScrollActivity)
  }));
  dart.setLibraryUri(scroll_position.ScrollPosition, I[73]);
  dart.setFieldSignature(scroll_position.ScrollPosition, () => ({
    __proto__: dart.getFields(scroll_position.ScrollPosition.__proto__),
    physics: dart.finalFieldType(scroll_physics.ScrollPhysics),
    context: dart.finalFieldType(scroll_context.ScrollContext),
    keepScrollOffset: dart.finalFieldType(core.bool),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    [S$0._minScrollExtent]: dart.fieldType(dart.nullable(core.double)),
    [S$0._maxScrollExtent]: dart.fieldType(dart.nullable(core.double)),
    [S$0._impliedVelocity]: dart.fieldType(core.double),
    [S$0._pixels]: dart.fieldType(dart.nullable(core.double)),
    [S$0._viewportDimension]: dart.fieldType(dart.nullable(core.double)),
    [S$0._haveDimensions]: dart.fieldType(core.bool),
    [S$0._didChangeViewportDimensionOrReceiveCorrection]: dart.fieldType(core.bool),
    [S$0._pendingDimensions]: dart.fieldType(core.bool),
    [S$0._lastMetrics$1]: dart.fieldType(dart.nullable(scroll_metrics.ScrollMetrics)),
    [S$0._semanticActions]: dart.fieldType(dart.nullable(core.Set$(ui.SemanticsAction))),
    isScrollingNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    [S$0._activity]: dart.fieldType(dart.nullable(scroll_activity.ScrollActivity))
  }));
  scroll_position_with_single_context.ScrollPositionWithSingleContext = class ScrollPositionWithSingleContext extends scroll_position.ScrollPosition {
    get axisDirection() {
      return this.context.axisDirection;
    }
    setPixels(newPixels) {
      if (newPixels == null) dart.nullFailed(I[71], 80, 27, "newPixels");
      if (!dart.test(dart.nullCheck(this.activity).isScrolling)) dart.assertFailed(null, I[71], 81, 12, "activity!.isScrolling");
      return super.setPixels(newPixels);
    }
    absorb(other) {
      if (other == null) dart.nullFailed(I[71], 86, 30, "other");
      super.absorb(other);
      if (!scroll_position_with_single_context.ScrollPositionWithSingleContext.is(other)) {
        this.goIdle();
        return;
      }
      dart.nullCheck(this.activity).updateDelegate(this);
      this[S$0._userScrollDirection] = other[S$0._userScrollDirection];
      if (!(this[S$0._currentDrag] == null)) dart.assertFailed(null, I[71], 94, 12, "_currentDrag == null");
      if (other[S$0._currentDrag] != null) {
        this[S$0._currentDrag] = other[S$0._currentDrag];
        dart.nullCheck(this[S$0._currentDrag]).updateDelegate(this);
        other[S$0._currentDrag] = null;
      }
    }
    applyNewDimensions() {
      super.applyNewDimensions();
      this.context.setCanDrag(this.physics.shouldAcceptUserOffset(this));
    }
    beginActivity(newActivity) {
      let t58;
      this[S$0._heldPreviousVelocity] = 0.0;
      if (newActivity == null) return;
      if (!dart.equals(newActivity.delegate, this)) dart.assertFailed(null, I[71], 113, 12, "newActivity.delegate == this");
      super.beginActivity(newActivity);
      t58 = this[S$0._currentDrag];
      t58 == null ? null : t58.dispose();
      this[S$0._currentDrag] = null;
      if (!dart.test(dart.nullCheck(this.activity).isScrolling)) this.updateUserScrollDirection(viewport_offset.ScrollDirection.idle);
    }
    applyUserOffset(delta) {
      if (delta == null) dart.nullFailed(I[71], 122, 31, "delta");
      this.updateUserScrollDirection(dart.notNull(delta) > 0.0 ? viewport_offset.ScrollDirection.forward : viewport_offset.ScrollDirection.reverse);
      this.setPixels(dart.notNull(this.pixels) - dart.notNull(this.physics.applyPhysicsToUserOffset(this, delta)));
    }
    goIdle() {
      this.beginActivity(new scroll_activity.IdleScrollActivity.new(this));
    }
    goBallistic(velocity) {
      if (velocity == null) dart.nullFailed(I[71], 142, 27, "velocity");
      if (!dart.test(this.hasPixels)) dart.assertFailed(null, I[71], 143, 12, "hasPixels");
      let simulation = this.physics.createBallisticSimulation(this, velocity);
      if (simulation != null) {
        this.beginActivity(new scroll_activity.BallisticScrollActivity.new(this, simulation, this.context.vsync));
      } else {
        this.goIdle();
      }
    }
    get userScrollDirection() {
      return this[S$0._userScrollDirection];
    }
    updateUserScrollDirection(value) {
      if (value == null) dart.nullFailed(I[71], 161, 50, "value");
      if (!(value != null)) dart.assertFailed(null, I[71], 162, 12, "value != null");
      if (this.userScrollDirection == value) return;
      this[S$0._userScrollDirection] = value;
      this.didUpdateScrollDirection(value);
    }
    animateTo(to, opts) {
      if (to == null) dart.nullFailed(I[71], 171, 12, "to");
      let duration = opts && 'duration' in opts ? opts.duration : null;
      if (duration == null) dart.nullFailed(I[71], 172, 23, "duration");
      let curve = opts && 'curve' in opts ? opts.curve : null;
      if (curve == null) dart.nullFailed(I[71], 173, 20, "curve");
      if (dart.test(utils.nearEqual(to, this.pixels, this.physics.tolerance.distance))) {
        this.jumpTo(to);
        return T$.FutureOfvoid().value();
      }
      let activity = new scroll_activity.DrivenScrollActivity.new(this, {from: this.pixels, to: to, duration: duration, curve: curve, vsync: this.context.vsync});
      this.beginActivity(activity);
      return activity.done;
    }
    jumpTo(value) {
      if (value == null) dart.nullFailed(I[71], 194, 22, "value");
      this.goIdle();
      if (this.pixels != value) {
        let oldPixels = this.pixels;
        this.forcePixels(value);
        this.didStartScroll();
        this.didUpdateScrollPositionBy(dart.notNull(this.pixels) - dart.notNull(oldPixels));
        this.didEndScroll();
      }
      this.goBallistic(0.0);
    }
    pointerScroll(delta) {
      if (delta == null) dart.nullFailed(I[71], 207, 29, "delta");
      if (!(delta !== 0.0)) dart.assertFailed(null, I[71], 208, 12, "delta != 0.0");
      let targetPixels = math.min(core.double, math.max(core.double, dart.notNull(this.pixels) + dart.notNull(delta), this.minScrollExtent), this.maxScrollExtent);
      if (targetPixels !== this.pixels) {
        this.goIdle();
        this.updateUserScrollDirection(-dart.notNull(delta) > 0.0 ? viewport_offset.ScrollDirection.forward : viewport_offset.ScrollDirection.reverse);
        let oldPixels = this.pixels;
        this.forcePixels(targetPixels);
        this.didStartScroll();
        this.didUpdateScrollPositionBy(dart.notNull(this.pixels) - dart.notNull(oldPixels));
        this.didEndScroll();
        this.goBallistic(0.0);
      }
    }
    jumpToWithoutSettling(value) {
      if (value == null) dart.nullFailed(I[71], 229, 37, "value");
      this.goIdle();
      if (this.pixels != value) {
        let oldPixels = this.pixels;
        this.forcePixels(value);
        this.didStartScroll();
        this.didUpdateScrollPositionBy(dart.notNull(this.pixels) - dart.notNull(oldPixels));
        this.didEndScroll();
      }
    }
    hold(holdCancelCallback) {
      if (holdCancelCallback == null) dart.nullFailed(I[71], 241, 42, "holdCancelCallback");
      let previousVelocity = dart.nullCheck(this.activity).velocity;
      let holdActivity = new scroll_activity.HoldScrollActivity.new({delegate: this, onHoldCanceled: holdCancelCallback});
      this.beginActivity(holdActivity);
      this[S$0._heldPreviousVelocity] = previousVelocity;
      return holdActivity;
    }
    drag(details, dragCancelCallback) {
      if (details == null) dart.nullFailed(I[71], 255, 30, "details");
      if (dragCancelCallback == null) dart.nullFailed(I[71], 255, 52, "dragCancelCallback");
      let drag = new scroll_activity.ScrollDragController.new({delegate: this, details: details, onDragCanceled: dragCancelCallback, carriedVelocity: this.physics.carriedMomentum(this[S$0._heldPreviousVelocity]), motionStartDistanceThreshold: this.physics.dragStartDistanceMotionThreshold});
      this.beginActivity(new scroll_activity.DragScrollActivity.new(this, drag));
      if (!(this[S$0._currentDrag] == null)) dart.assertFailed(null, I[71], 264, 12, "_currentDrag == null");
      this[S$0._currentDrag] = drag;
      return drag;
    }
    dispose() {
      let t58;
      t58 = this[S$0._currentDrag];
      t58 == null ? null : t58.dispose();
      this[S$0._currentDrag] = null;
      super.dispose();
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[71], 277, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add](dart.str(dart.runtimeType(this.context)));
      description[S$.$add](dart.str(this.physics));
      description[S$.$add](dart.str(this.activity));
      description[S$.$add](dart.str(this.userScrollDirection));
    }
  };
  (scroll_position_with_single_context.ScrollPositionWithSingleContext.new = function(opts) {
    let physics = opts && 'physics' in opts ? opts.physics : null;
    if (physics == null) dart.nullFailed(I[71], 50, 28, "physics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[71], 51, 28, "context");
    let initialPixels = opts && 'initialPixels' in opts ? opts.initialPixels : 0;
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    if (keepScrollOffset == null) dart.nullFailed(I[71], 53, 10, "keepScrollOffset");
    let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[S$0._heldPreviousVelocity] = 0.0;
    this[S$0._userScrollDirection] = viewport_offset.ScrollDirection.idle;
    this[S$0._currentDrag] = null;
    scroll_position_with_single_context.ScrollPositionWithSingleContext.__proto__.new.call(this, {physics: physics, context: context, keepScrollOffset: keepScrollOffset, oldPosition: oldPosition, debugLabel: debugLabel});
    if (!dart.test(this.hasPixels) && initialPixels != null) this.correctPixels(initialPixels);
    if (this.activity == null) this.goIdle();
    if (!(this.activity != null)) dart.assertFailed(null, I[71], 69, 12, "activity != null");
  }).prototype = scroll_position_with_single_context.ScrollPositionWithSingleContext.prototype;
  dart.addTypeTests(scroll_position_with_single_context.ScrollPositionWithSingleContext);
  dart.addTypeCaches(scroll_position_with_single_context.ScrollPositionWithSingleContext);
  scroll_position_with_single_context.ScrollPositionWithSingleContext[dart.implements] = () => [scroll_activity.ScrollActivityDelegate];
  dart.setMethodSignature(scroll_position_with_single_context.ScrollPositionWithSingleContext, () => ({
    __proto__: dart.getMethods(scroll_position_with_single_context.ScrollPositionWithSingleContext.__proto__),
    applyUserOffset: dart.fnType(dart.void, [core.double]),
    goIdle: dart.fnType(dart.void, []),
    goBallistic: dart.fnType(dart.void, [core.double]),
    updateUserScrollDirection: dart.fnType(dart.void, [viewport_offset.ScrollDirection]),
    animateTo: dart.fnType(async.Future$(dart.void), [core.double], {}, {curve: curves.Curve, duration: core.Duration}),
    jumpTo: dart.fnType(dart.void, [core.double]),
    pointerScroll: dart.fnType(dart.void, [core.double]),
    jumpToWithoutSettling: dart.fnType(dart.void, [core.double]),
    hold: dart.fnType(scroll_activity.ScrollHoldController, [dart.fnType(dart.void, [])]),
    drag: dart.fnType(drag.Drag, [drag_details.DragStartDetails, dart.fnType(dart.void, [])])
  }));
  dart.setGetterSignature(scroll_position_with_single_context.ScrollPositionWithSingleContext, () => ({
    __proto__: dart.getGetters(scroll_position_with_single_context.ScrollPositionWithSingleContext.__proto__),
    axisDirection: basic_types.AxisDirection,
    userScrollDirection: viewport_offset.ScrollDirection
  }));
  dart.setLibraryUri(scroll_position_with_single_context.ScrollPositionWithSingleContext, I[74]);
  dart.setFieldSignature(scroll_position_with_single_context.ScrollPositionWithSingleContext, () => ({
    __proto__: dart.getFields(scroll_position_with_single_context.ScrollPositionWithSingleContext.__proto__),
    [S$0._heldPreviousVelocity]: dart.fieldType(core.double),
    [S$0._userScrollDirection]: dart.fieldType(viewport_offset.ScrollDirection),
    [S$0._currentDrag]: dart.fieldType(dart.nullable(scroll_activity.ScrollDragController))
  }));
  scroll_activity.ScrollActivityDelegate = class ScrollActivityDelegate extends core.Object {};
  (scroll_activity.ScrollActivityDelegate.new = function() {
    ;
  }).prototype = scroll_activity.ScrollActivityDelegate.prototype;
  dart.addTypeTests(scroll_activity.ScrollActivityDelegate);
  dart.addTypeCaches(scroll_activity.ScrollActivityDelegate);
  dart.setLibraryUri(scroll_activity.ScrollActivityDelegate, I[75]);
  scroll_activity.ScrollActivity = class ScrollActivity extends core.Object {
    get delegate() {
      return this[S$0._delegate];
    }
    updateDelegate(value) {
      if (value == null) dart.nullFailed(I[76], 72, 46, "value");
      if (!!dart.equals(this[S$0._delegate], value)) dart.assertFailed(null, I[76], 73, 12, "_delegate != value");
      this[S$0._delegate] = value;
    }
    resetActivity() {
    }
    dispatchScrollStartNotification(metrics, context) {
      if (metrics == null) dart.nullFailed(I[76], 88, 54, "metrics");
      new scroll_notification.ScrollStartNotification.new({metrics: metrics, context: context}).dispatch(context);
    }
    dispatchScrollUpdateNotification(metrics, context, scrollDelta) {
      if (metrics == null) dart.nullFailed(I[76], 93, 55, "metrics");
      if (context == null) dart.nullFailed(I[76], 93, 77, "context");
      if (scrollDelta == null) dart.nullFailed(I[76], 93, 93, "scrollDelta");
      new scroll_notification.ScrollUpdateNotification.new({metrics: metrics, context: context, scrollDelta: scrollDelta}).dispatch(context);
    }
    dispatchOverscrollNotification(metrics, context, overscroll) {
      if (metrics == null) dart.nullFailed(I[76], 98, 53, "metrics");
      if (context == null) dart.nullFailed(I[76], 98, 75, "context");
      if (overscroll == null) dart.nullFailed(I[76], 98, 91, "overscroll");
      new scroll_notification.OverscrollNotification.new({metrics: metrics, context: context, overscroll: overscroll}).dispatch(context);
    }
    dispatchScrollEndNotification(metrics, context) {
      if (metrics == null) dart.nullFailed(I[76], 103, 52, "metrics");
      if (context == null) dart.nullFailed(I[76], 103, 74, "context");
      new scroll_notification.ScrollEndNotification.new({metrics: metrics, context: context}).dispatch(context);
    }
    applyNewDimensions() {
    }
    dispose() {
    }
    toString() {
      return diagnostics$.describeIdentity(this);
    }
  };
  (scroll_activity.ScrollActivity.new = function(_delegate) {
    if (_delegate == null) dart.nullFailed(I[76], 62, 23, "_delegate");
    this[S$0._delegate] = _delegate;
    ;
  }).prototype = scroll_activity.ScrollActivity.prototype;
  dart.addTypeTests(scroll_activity.ScrollActivity);
  dart.addTypeCaches(scroll_activity.ScrollActivity);
  dart.setMethodSignature(scroll_activity.ScrollActivity, () => ({
    __proto__: dart.getMethods(scroll_activity.ScrollActivity.__proto__),
    updateDelegate: dart.fnType(dart.void, [scroll_activity.ScrollActivityDelegate]),
    resetActivity: dart.fnType(dart.void, []),
    dispatchScrollStartNotification: dart.fnType(dart.void, [scroll_metrics.ScrollMetrics, dart.nullable(framework.BuildContext)]),
    dispatchScrollUpdateNotification: dart.fnType(dart.void, [scroll_metrics.ScrollMetrics, framework.BuildContext, core.double]),
    dispatchOverscrollNotification: dart.fnType(dart.void, [scroll_metrics.ScrollMetrics, framework.BuildContext, core.double]),
    dispatchScrollEndNotification: dart.fnType(dart.void, [scroll_metrics.ScrollMetrics, framework.BuildContext]),
    applyNewDimensions: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(scroll_activity.ScrollActivity, () => ({
    __proto__: dart.getGetters(scroll_activity.ScrollActivity.__proto__),
    delegate: scroll_activity.ScrollActivityDelegate
  }));
  dart.setLibraryUri(scroll_activity.ScrollActivity, I[75]);
  dart.setFieldSignature(scroll_activity.ScrollActivity, () => ({
    __proto__: dart.getFields(scroll_activity.ScrollActivity.__proto__),
    [S$0._delegate]: dart.fieldType(scroll_activity.ScrollActivityDelegate)
  }));
  dart.defineExtensionMethods(scroll_activity.ScrollActivity, ['toString']);
  scroll_activity.IdleScrollActivity = class IdleScrollActivity extends scroll_activity.ScrollActivity {
    applyNewDimensions() {
      this.delegate.goBallistic(0.0);
    }
    get shouldIgnorePointer() {
      return false;
    }
    get isScrolling() {
      return false;
    }
    get velocity() {
      return 0.0;
    }
  };
  (scroll_activity.IdleScrollActivity.new = function(delegate) {
    if (delegate == null) dart.nullFailed(I[76], 153, 45, "delegate");
    scroll_activity.IdleScrollActivity.__proto__.new.call(this, delegate);
    ;
  }).prototype = scroll_activity.IdleScrollActivity.prototype;
  dart.addTypeTests(scroll_activity.IdleScrollActivity);
  dart.addTypeCaches(scroll_activity.IdleScrollActivity);
  dart.setGetterSignature(scroll_activity.IdleScrollActivity, () => ({
    __proto__: dart.getGetters(scroll_activity.IdleScrollActivity.__proto__),
    shouldIgnorePointer: core.bool,
    isScrolling: core.bool,
    velocity: core.double
  }));
  dart.setLibraryUri(scroll_activity.IdleScrollActivity, I[75]);
  scroll_activity.ScrollHoldController = class ScrollHoldController extends core.Object {};
  (scroll_activity.ScrollHoldController.new = function() {
    ;
  }).prototype = scroll_activity.ScrollHoldController.prototype;
  dart.addTypeTests(scroll_activity.ScrollHoldController);
  dart.addTypeCaches(scroll_activity.ScrollHoldController);
  dart.setLibraryUri(scroll_activity.ScrollHoldController, I[75]);
  scroll_activity.HoldScrollActivity = class HoldScrollActivity extends scroll_activity.ScrollActivity {
    get onHoldCanceled() {
      return this[S$0.onHoldCanceled];
    }
    set onHoldCanceled(value) {
      super.onHoldCanceled = value;
    }
    get shouldIgnorePointer() {
      return false;
    }
    get isScrolling() {
      return false;
    }
    get velocity() {
      return 0.0;
    }
    cancel() {
      this.delegate.goBallistic(0.0);
    }
    dispose() {
      let t58;
      t58 = this.onHoldCanceled;
      t58 == null ? null : t58();
      super.dispose();
    }
  };
  (scroll_activity.HoldScrollActivity.new = function(opts) {
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    if (delegate == null) dart.nullFailed(I[76], 194, 37, "delegate");
    let onHoldCanceled = opts && 'onHoldCanceled' in opts ? opts.onHoldCanceled : null;
    this[S$0.onHoldCanceled] = onHoldCanceled;
    scroll_activity.HoldScrollActivity.__proto__.new.call(this, delegate);
    ;
  }).prototype = scroll_activity.HoldScrollActivity.prototype;
  dart.addTypeTests(scroll_activity.HoldScrollActivity);
  dart.addTypeCaches(scroll_activity.HoldScrollActivity);
  scroll_activity.HoldScrollActivity[dart.implements] = () => [scroll_activity.ScrollHoldController];
  dart.setMethodSignature(scroll_activity.HoldScrollActivity, () => ({
    __proto__: dart.getMethods(scroll_activity.HoldScrollActivity.__proto__),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(scroll_activity.HoldScrollActivity, () => ({
    __proto__: dart.getGetters(scroll_activity.HoldScrollActivity.__proto__),
    shouldIgnorePointer: core.bool,
    isScrolling: core.bool,
    velocity: core.double
  }));
  dart.setLibraryUri(scroll_activity.HoldScrollActivity, I[75]);
  dart.setFieldSignature(scroll_activity.HoldScrollActivity, () => ({
    __proto__: dart.getFields(scroll_activity.HoldScrollActivity.__proto__),
    onHoldCanceled: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  scroll_activity.ScrollDragController = class ScrollDragController extends core.Object {
    get onDragCanceled() {
      return this[S$0.onDragCanceled];
    }
    set onDragCanceled(value) {
      super.onDragCanceled = value;
    }
    get carriedVelocity() {
      return this[S$0.carriedVelocity];
    }
    set carriedVelocity(value) {
      super.carriedVelocity = value;
    }
    get motionStartDistanceThreshold() {
      return this[S$0.motionStartDistanceThreshold];
    }
    set motionStartDistanceThreshold(value) {
      super.motionStartDistanceThreshold = value;
    }
    get delegate() {
      return this[S$0._delegate];
    }
    get [S._reversed]() {
      return basic_types.axisDirectionIsReversed(this.delegate.axisDirection);
    }
    updateDelegate(value) {
      if (value == null) dart.nullFailed(I[76], 301, 46, "value");
      if (!!dart.equals(this[S$0._delegate], value)) dart.assertFailed(null, I[76], 302, 12, "_delegate != value");
      this[S$0._delegate] = value;
    }
    [S._maybeLoseMomentum](offset, timestamp) {
      if (offset == null) dart.nullFailed(I[76], 308, 34, "offset");
      if (dart.test(this[S._retainMomentum]) && offset === 0.0 && (timestamp == null || dart.test(timestamp['-'](dart.nullCheck(this[S._lastNonStationaryTimestamp]))['>'](scroll_activity.ScrollDragController.momentumRetainStationaryDurationThreshold)))) {
        this[S._retainMomentum] = false;
      }
    }
    [S._adjustForScrollStartThreshold](offset, timestamp) {
      if (offset == null) dart.nullFailed(I[76], 324, 48, "offset");
      if (timestamp == null) {
        return offset;
      }
      if (offset === 0.0) {
        if (this.motionStartDistanceThreshold != null && this[S._offsetSinceLastStop] == null && dart.test(timestamp['-'](dart.nullCheck(this[S._lastNonStationaryTimestamp]))['>'](scroll_activity.ScrollDragController.motionStoppedDurationThreshold))) {
          this[S._offsetSinceLastStop] = 0.0;
        }
        return 0.0;
      } else {
        if (this[S._offsetSinceLastStop] == null) {
          return offset;
        } else {
          this[S._offsetSinceLastStop] = dart.nullCheck(this[S._offsetSinceLastStop]) + dart.notNull(offset);
          if (dart.nullCheck(this[S._offsetSinceLastStop])[S$.$abs]() > dart.nullCheck(this.motionStartDistanceThreshold)) {
            this[S._offsetSinceLastStop] = null;
            if (offset[S$.$abs]() > 24) {
              return offset;
            } else {
              return math.min(core.double, dart.nullCheck(this.motionStartDistanceThreshold) / 3.0, offset[S$.$abs]()) * offset[S$.$sign];
            }
          } else {
            return 0.0;
          }
        }
      }
    }
    update(details) {
      if (details == null) dart.nullFailed(I[76], 370, 33, "details");
      if (!(details.primaryDelta != null)) dart.assertFailed(null, I[76], 371, 12, "details.primaryDelta != null");
      this[S._lastDetails] = details;
      let offset = dart.nullCheck(details.primaryDelta);
      if (offset !== 0.0) {
        this[S._lastNonStationaryTimestamp] = details.sourceTimeStamp;
      }
      this[S._maybeLoseMomentum](offset, details.sourceTimeStamp);
      offset = this[S._adjustForScrollStartThreshold](offset, details.sourceTimeStamp);
      if (offset === 0.0) {
        return;
      }
      if (dart.test(this[S._reversed])) offset = -dart.notNull(offset);
      this.delegate.applyUserOffset(offset);
    }
    end(details) {
      if (details == null) dart.nullFailed(I[76], 391, 27, "details");
      if (!(details.primaryVelocity != null)) dart.assertFailed(null, I[76], 392, 12, "details.primaryVelocity != null");
      let velocity = -dart.nullCheck(details.primaryVelocity);
      if (dart.test(this[S._reversed])) velocity = -velocity;
      this[S._lastDetails] = details;
      if (dart.test(this[S._retainMomentum])) {
        let isFlingingInSameDirection = velocity[S$.$sign] === dart.nullCheck(this.carriedVelocity)[S$.$sign];
        let isVelocityNotSubstantiallyLessThanCarriedMomentum = velocity[S$.$abs]() > dart.nullCheck(this.carriedVelocity)[S$.$abs]() * 0.5;
        if (isFlingingInSameDirection && isVelocityNotSubstantiallyLessThanCarriedMomentum) {
          velocity = velocity + dart.nullCheck(this.carriedVelocity);
        }
      }
      this.delegate.goBallistic(velocity);
    }
    cancel() {
      this.delegate.goBallistic(0.0);
    }
    dispose() {
      let t58;
      this[S._lastDetails] = null;
      t58 = this.onDragCanceled;
      t58 == null ? null : t58();
    }
    get lastDetails() {
      return this[S._lastDetails];
    }
    toString() {
      return diagnostics$.describeIdentity(this);
    }
  };
  (scroll_activity.ScrollDragController.new = function(opts) {
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    if (delegate == null) dart.nullFailed(I[76], 234, 37, "delegate");
    let details = opts && 'details' in opts ? opts.details : null;
    if (details == null) dart.nullFailed(I[76], 235, 31, "details");
    let onDragCanceled = opts && 'onDragCanceled' in opts ? opts.onDragCanceled : null;
    let carriedVelocity = opts && 'carriedVelocity' in opts ? opts.carriedVelocity : null;
    let motionStartDistanceThreshold = opts && 'motionStartDistanceThreshold' in opts ? opts.motionStartDistanceThreshold : null;
    this[S$0.onDragCanceled] = onDragCanceled;
    this[S$0.carriedVelocity] = carriedVelocity;
    this[S$0.motionStartDistanceThreshold] = motionStartDistanceThreshold;
    if (!(delegate != null)) dart.assertFailed(null, I[76], 239, 15, "delegate != null");
    if (!(details != null)) dart.assertFailed(null, I[76], 240, 15, "details != null");
    if (!(motionStartDistanceThreshold == null || dart.notNull(motionStartDistanceThreshold) > 0.0)) dart.assertFailed("motionStartDistanceThreshold must be a positive number or null", I[76], 242, 10, "motionStartDistanceThreshold == null || motionStartDistanceThreshold > 0.0");
    this[S$0._delegate] = delegate;
    this[S._lastDetails] = details;
    this[S._retainMomentum] = carriedVelocity != null && carriedVelocity !== 0.0;
    this[S._lastNonStationaryTimestamp] = details.sourceTimeStamp;
    this[S._offsetSinceLastStop] = motionStartDistanceThreshold == null ? null : 0.0;
    ;
  }).prototype = scroll_activity.ScrollDragController.prototype;
  dart.addTypeTests(scroll_activity.ScrollDragController);
  dart.addTypeCaches(scroll_activity.ScrollDragController);
  scroll_activity.ScrollDragController[dart.implements] = () => [drag.Drag];
  dart.setMethodSignature(scroll_activity.ScrollDragController, () => ({
    __proto__: dart.getMethods(scroll_activity.ScrollDragController.__proto__),
    updateDelegate: dart.fnType(dart.void, [scroll_activity.ScrollActivityDelegate]),
    [S._maybeLoseMomentum]: dart.fnType(dart.void, [core.double, dart.nullable(core.Duration)]),
    [S._adjustForScrollStartThreshold]: dart.fnType(core.double, [core.double, dart.nullable(core.Duration)]),
    update: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    end: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    cancel: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(scroll_activity.ScrollDragController, () => ({
    __proto__: dart.getGetters(scroll_activity.ScrollDragController.__proto__),
    delegate: scroll_activity.ScrollActivityDelegate,
    [S._reversed]: core.bool,
    lastDetails: dart.dynamic
  }));
  dart.setLibraryUri(scroll_activity.ScrollDragController, I[75]);
  dart.setFieldSignature(scroll_activity.ScrollDragController, () => ({
    __proto__: dart.getFields(scroll_activity.ScrollDragController.__proto__),
    [S$0._delegate]: dart.fieldType(scroll_activity.ScrollActivityDelegate),
    onDragCanceled: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    carriedVelocity: dart.finalFieldType(dart.nullable(core.double)),
    motionStartDistanceThreshold: dart.finalFieldType(dart.nullable(core.double)),
    [S._lastNonStationaryTimestamp]: dart.fieldType(dart.nullable(core.Duration)),
    [S._retainMomentum]: dart.fieldType(core.bool),
    [S._offsetSinceLastStop]: dart.fieldType(dart.nullable(core.double)),
    [S._lastDetails]: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(scroll_activity.ScrollDragController, ['toString']);
  dart.defineLazy(scroll_activity.ScrollDragController, {
    /*scroll_activity.ScrollDragController.momentumRetainStationaryDurationThreshold*/get momentumRetainStationaryDurationThreshold() {
      return C[765] || CT.C765;
    },
    /*scroll_activity.ScrollDragController.momentumRetainVelocityThresholdFactor*/get momentumRetainVelocityThresholdFactor() {
      return 0.5;
    },
    /*scroll_activity.ScrollDragController.motionStoppedDurationThreshold*/get motionStoppedDurationThreshold() {
      return C[622] || CT.C622;
    },
    /*scroll_activity.ScrollDragController._bigThresholdBreakDistance*/get _bigThresholdBreakDistance() {
      return 24;
    }
  }, false);
  scroll_activity.DragScrollActivity = class DragScrollActivity extends scroll_activity.ScrollActivity {
    dispatchScrollStartNotification(metrics, context) {
      if (metrics == null) dart.nullFailed(I[76], 455, 54, "metrics");
      let lastDetails = dart.nullCheck(this[S._controller$2]).lastDetails;
      if (!drag_details.DragStartDetails.is(lastDetails)) dart.assertFailed(null, I[76], 457, 12, "lastDetails is DragStartDetails");
      new scroll_notification.ScrollStartNotification.new({metrics: metrics, context: context, dragDetails: drag_details.DragStartDetails.as(lastDetails)}).dispatch(context);
    }
    dispatchScrollUpdateNotification(metrics, context, scrollDelta) {
      if (metrics == null) dart.nullFailed(I[76], 462, 55, "metrics");
      if (context == null) dart.nullFailed(I[76], 462, 77, "context");
      if (scrollDelta == null) dart.nullFailed(I[76], 462, 93, "scrollDelta");
      let lastDetails = dart.nullCheck(this[S._controller$2]).lastDetails;
      if (!drag_details.DragUpdateDetails.is(lastDetails)) dart.assertFailed(null, I[76], 464, 12, "lastDetails is DragUpdateDetails");
      new scroll_notification.ScrollUpdateNotification.new({metrics: metrics, context: context, scrollDelta: scrollDelta, dragDetails: drag_details.DragUpdateDetails.as(lastDetails)}).dispatch(context);
    }
    dispatchOverscrollNotification(metrics, context, overscroll) {
      if (metrics == null) dart.nullFailed(I[76], 469, 53, "metrics");
      if (context == null) dart.nullFailed(I[76], 469, 75, "context");
      if (overscroll == null) dart.nullFailed(I[76], 469, 91, "overscroll");
      let lastDetails = dart.nullCheck(this[S._controller$2]).lastDetails;
      if (!drag_details.DragUpdateDetails.is(lastDetails)) dart.assertFailed(null, I[76], 471, 12, "lastDetails is DragUpdateDetails");
      new scroll_notification.OverscrollNotification.new({metrics: metrics, context: context, overscroll: overscroll, dragDetails: drag_details.DragUpdateDetails.as(lastDetails)}).dispatch(context);
    }
    dispatchScrollEndNotification(metrics, context) {
      if (metrics == null) dart.nullFailed(I[76], 476, 52, "metrics");
      if (context == null) dart.nullFailed(I[76], 476, 74, "context");
      let lastDetails = dart.nullCheck(this[S._controller$2]).lastDetails;
      new scroll_notification.ScrollEndNotification.new({metrics: metrics, context: context, dragDetails: drag_details.DragEndDetails.is(lastDetails) ? lastDetails : null}).dispatch(context);
    }
    get shouldIgnorePointer() {
      return true;
    }
    get isScrolling() {
      return true;
    }
    get velocity() {
      return 0.0;
    }
    dispose() {
      this[S._controller$2] = null;
      super.dispose();
    }
    toString() {
      return dart.str(diagnostics$.describeIdentity(this)) + "(" + dart.str(this[S._controller$2]) + ")";
    }
  };
  (scroll_activity.DragScrollActivity.new = function(delegate, controller) {
    if (delegate == null) dart.nullFailed(I[76], 447, 28, "delegate");
    if (controller == null) dart.nullFailed(I[76], 448, 26, "controller");
    this[S._controller$2] = controller;
    scroll_activity.DragScrollActivity.__proto__.new.call(this, delegate);
    ;
  }).prototype = scroll_activity.DragScrollActivity.prototype;
  dart.addTypeTests(scroll_activity.DragScrollActivity);
  dart.addTypeCaches(scroll_activity.DragScrollActivity);
  dart.setGetterSignature(scroll_activity.DragScrollActivity, () => ({
    __proto__: dart.getGetters(scroll_activity.DragScrollActivity.__proto__),
    shouldIgnorePointer: core.bool,
    isScrolling: core.bool,
    velocity: core.double
  }));
  dart.setLibraryUri(scroll_activity.DragScrollActivity, I[75]);
  dart.setFieldSignature(scroll_activity.DragScrollActivity, () => ({
    __proto__: dart.getFields(scroll_activity.DragScrollActivity.__proto__),
    [S._controller$2]: dart.fieldType(dart.nullable(scroll_activity.ScrollDragController))
  }));
  dart.defineExtensionMethods(scroll_activity.DragScrollActivity, ['toString']);
  scroll_activity.BallisticScrollActivity = class BallisticScrollActivity extends scroll_activity.ScrollActivity {
    get [S._controller$2]() {
      let t58;
      return dart.test(this[S.__BallisticScrollActivity__controller_isSet]) ? (t58 = this[S.__BallisticScrollActivity__controller], t58) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [S._controller$2](t58) {
      if (t58 == null) dart.nullFailed(I[76], 540, 28, "null");
      this[S.__BallisticScrollActivity__controller_isSet] = true;
      this[S.__BallisticScrollActivity__controller] = t58;
    }
    resetActivity() {
      this.delegate.goBallistic(this.velocity);
    }
    applyNewDimensions() {
      this.delegate.goBallistic(this.velocity);
    }
    [S._tick]() {
      if (!dart.test(this.applyMoveTo(this[S._controller$2].value))) this.delegate.goIdle();
    }
    applyMoveTo(value) {
      if (value == null) dart.nullFailed(I[76], 565, 27, "value");
      return this.delegate.setPixels(value) === 0.0;
    }
    [S._end]() {
      this.delegate.goBallistic(0.0);
    }
    dispatchOverscrollNotification(metrics, context, overscroll) {
      if (metrics == null) dart.nullFailed(I[76], 574, 53, "metrics");
      if (context == null) dart.nullFailed(I[76], 574, 75, "context");
      if (overscroll == null) dart.nullFailed(I[76], 574, 91, "overscroll");
      new scroll_notification.OverscrollNotification.new({metrics: metrics, context: context, overscroll: overscroll, velocity: this.velocity}).dispatch(context);
    }
    get shouldIgnorePointer() {
      return true;
    }
    get isScrolling() {
      return true;
    }
    get velocity() {
      return this[S._controller$2].velocity;
    }
    dispose() {
      this[S._controller$2].dispose();
      super.dispose();
    }
    toString() {
      return dart.str(diagnostics$.describeIdentity(this)) + "(" + dart.str(this[S._controller$2]) + ")";
    }
  };
  (scroll_activity.BallisticScrollActivity.new = function(delegate, simulation, vsync) {
    let t58;
    if (delegate == null) dart.nullFailed(I[76], 527, 28, "delegate");
    if (simulation == null) dart.nullFailed(I[76], 528, 16, "simulation");
    if (vsync == null) dart.nullFailed(I[76], 529, 20, "vsync");
    this[S.__BallisticScrollActivity__controller] = null;
    this[S.__BallisticScrollActivity__controller_isSet] = false;
    scroll_activity.BallisticScrollActivity.__proto__.new.call(this, delegate);
    this[S._controller$2] = (t58 = new animation_controller.AnimationController.unbounded({debugLabel: true ? object.objectRuntimeType(this, "BallisticScrollActivity") : null, vsync: vsync}), (() => {
      t58.addListener(dart.bind(this, S._tick));
      t58.animateWith(simulation).whenComplete(dart.bind(this, S._end));
      return t58;
    })());
  }).prototype = scroll_activity.BallisticScrollActivity.prototype;
  dart.addTypeTests(scroll_activity.BallisticScrollActivity);
  dart.addTypeCaches(scroll_activity.BallisticScrollActivity);
  dart.setMethodSignature(scroll_activity.BallisticScrollActivity, () => ({
    __proto__: dart.getMethods(scroll_activity.BallisticScrollActivity.__proto__),
    [S._tick]: dart.fnType(dart.void, []),
    applyMoveTo: dart.fnType(core.bool, [core.double]),
    [S._end]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(scroll_activity.BallisticScrollActivity, () => ({
    __proto__: dart.getGetters(scroll_activity.BallisticScrollActivity.__proto__),
    [S._controller$2]: animation_controller.AnimationController,
    shouldIgnorePointer: core.bool,
    isScrolling: core.bool,
    velocity: core.double
  }));
  dart.setSetterSignature(scroll_activity.BallisticScrollActivity, () => ({
    __proto__: dart.getSetters(scroll_activity.BallisticScrollActivity.__proto__),
    [S._controller$2]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(scroll_activity.BallisticScrollActivity, I[75]);
  dart.setFieldSignature(scroll_activity.BallisticScrollActivity, () => ({
    __proto__: dart.getFields(scroll_activity.BallisticScrollActivity.__proto__),
    [S.__BallisticScrollActivity__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S.__BallisticScrollActivity__controller_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(scroll_activity.BallisticScrollActivity, ['toString']);
  scroll_activity.DrivenScrollActivity = class DrivenScrollActivity extends scroll_activity.ScrollActivity {
    get [S._completer]() {
      let t59;
      return dart.test(this[S.__DrivenScrollActivity__completer_isSet]) ? (t59 = this[S.__DrivenScrollActivity__completer], t59) : dart.throw(new _internal.LateError.fieldNI("_completer"));
    }
    set [S._completer](t59) {
      if (t59 == null) dart.nullFailed(I[76], 637, 30, "null");
      if (dart.test(this[S.__DrivenScrollActivity__completer_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_completer"));
      else {
        this[S.__DrivenScrollActivity__completer_isSet] = true;
        this[S.__DrivenScrollActivity__completer] = t59;
      }
    }
    get [S._controller$2]() {
      let t60;
      return dart.test(this[S.__DrivenScrollActivity__controller_isSet]) ? (t60 = this[S.__DrivenScrollActivity__controller], t60) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [S._controller$2](t60) {
      if (t60 == null) dart.nullFailed(I[76], 638, 34, "null");
      if (dart.test(this[S.__DrivenScrollActivity__controller_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_controller"));
      else {
        this[S.__DrivenScrollActivity__controller_isSet] = true;
        this[S.__DrivenScrollActivity__controller] = t60;
      }
    }
    get done() {
      return this[S._completer].future;
    }
    [S._tick]() {
      if (this.delegate.setPixels(this[S._controller$2].value) !== 0.0) this.delegate.goIdle();
    }
    [S._end]() {
      this.delegate.goBallistic(this.velocity);
    }
    dispatchOverscrollNotification(metrics, context, overscroll) {
      if (metrics == null) dart.nullFailed(I[76], 657, 53, "metrics");
      if (context == null) dart.nullFailed(I[76], 657, 75, "context");
      if (overscroll == null) dart.nullFailed(I[76], 657, 91, "overscroll");
      new scroll_notification.OverscrollNotification.new({metrics: metrics, context: context, overscroll: overscroll, velocity: this.velocity}).dispatch(context);
    }
    get shouldIgnorePointer() {
      return true;
    }
    get isScrolling() {
      return true;
    }
    get velocity() {
      return this[S._controller$2].velocity;
    }
    dispose() {
      this[S._completer].complete();
      this[S._controller$2].dispose();
      super.dispose();
    }
    toString() {
      return dart.str(diagnostics$.describeIdentity(this)) + "(" + dart.str(this[S._controller$2]) + ")";
    }
  };
  (scroll_activity.DrivenScrollActivity.new = function(delegate, opts) {
    let t59;
    if (delegate == null) dart.nullFailed(I[76], 614, 28, "delegate");
    let from = opts && 'from' in opts ? opts.from : null;
    if (from == null) dart.nullFailed(I[76], 615, 21, "from");
    let to = opts && 'to' in opts ? opts.to : null;
    if (to == null) dart.nullFailed(I[76], 616, 21, "to");
    let duration = opts && 'duration' in opts ? opts.duration : null;
    if (duration == null) dart.nullFailed(I[76], 617, 23, "duration");
    let curve = opts && 'curve' in opts ? opts.curve : null;
    if (curve == null) dart.nullFailed(I[76], 618, 20, "curve");
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(I[76], 619, 29, "vsync");
    this[S.__DrivenScrollActivity__completer] = null;
    this[S.__DrivenScrollActivity__completer_isSet] = false;
    this[S.__DrivenScrollActivity__controller] = null;
    this[S.__DrivenScrollActivity__controller_isSet] = false;
    if (!(from != null)) dart.assertFailed(null, I[76], 620, 15, "from != null");
    if (!(to != null)) dart.assertFailed(null, I[76], 621, 15, "to != null");
    if (!(duration != null)) dart.assertFailed(null, I[76], 622, 15, "duration != null");
    if (!dart.test(duration['>'](core.Duration.zero))) dart.assertFailed(null, I[76], 623, 15, "duration > Duration.zero");
    if (!(curve != null)) dart.assertFailed(null, I[76], 624, 15, "curve != null");
    scroll_activity.DrivenScrollActivity.__proto__.new.call(this, delegate);
    this[S._completer] = T$.CompleterOfvoid().new();
    this[S._controller$2] = (t59 = new animation_controller.AnimationController.unbounded({value: from, debugLabel: object.objectRuntimeType(this, "DrivenScrollActivity"), vsync: vsync}), (() => {
      t59.addListener(dart.bind(this, S._tick));
      t59.animateTo(to, {duration: duration, curve: curve}).whenComplete(dart.bind(this, S._end));
      return t59;
    })());
  }).prototype = scroll_activity.DrivenScrollActivity.prototype;
  dart.addTypeTests(scroll_activity.DrivenScrollActivity);
  dart.addTypeCaches(scroll_activity.DrivenScrollActivity);
  dart.setMethodSignature(scroll_activity.DrivenScrollActivity, () => ({
    __proto__: dart.getMethods(scroll_activity.DrivenScrollActivity.__proto__),
    [S._tick]: dart.fnType(dart.void, []),
    [S._end]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(scroll_activity.DrivenScrollActivity, () => ({
    __proto__: dart.getGetters(scroll_activity.DrivenScrollActivity.__proto__),
    [S._completer]: async.Completer$(dart.void),
    [S._controller$2]: animation_controller.AnimationController,
    done: async.Future$(dart.void),
    shouldIgnorePointer: core.bool,
    isScrolling: core.bool,
    velocity: core.double
  }));
  dart.setSetterSignature(scroll_activity.DrivenScrollActivity, () => ({
    __proto__: dart.getSetters(scroll_activity.DrivenScrollActivity.__proto__),
    [S._completer]: async.Completer$(dart.void),
    [S._controller$2]: animation_controller.AnimationController
  }));
  dart.setLibraryUri(scroll_activity.DrivenScrollActivity, I[75]);
  dart.setFieldSignature(scroll_activity.DrivenScrollActivity, () => ({
    __proto__: dart.getFields(scroll_activity.DrivenScrollActivity.__proto__),
    [S.__DrivenScrollActivity__completer]: dart.fieldType(dart.nullable(async.Completer$(dart.void))),
    [S.__DrivenScrollActivity__completer_isSet]: dart.fieldType(core.bool),
    [S.__DrivenScrollActivity__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S.__DrivenScrollActivity__controller_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(scroll_activity.DrivenScrollActivity, ['toString']);
  const _is_PageStorageKey_default = Symbol('_is_PageStorageKey_default');
  page_storage.PageStorageKey$ = dart.generic(T => {
    class PageStorageKey extends key.ValueKey$(T) {}
    (PageStorageKey.new = function(value) {
      PageStorageKey.__proto__.new.call(this, value);
      ;
    }).prototype = PageStorageKey.prototype;
    dart.addTypeTests(PageStorageKey);
    PageStorageKey.prototype[_is_PageStorageKey_default] = true;
    dart.addTypeCaches(PageStorageKey);
    dart.setLibraryUri(PageStorageKey, I[77]);
    return PageStorageKey;
  });
  page_storage.PageStorageKey = page_storage.PageStorageKey$();
  dart.addTypeTests(page_storage.PageStorageKey, _is_PageStorageKey_default);
  page_storage._StorageEntryIdentifier = class _StorageEntryIdentifier extends core.Object {
    get keys() {
      return this[S.keys];
    }
    set keys(value) {
      super.keys = value;
    }
    get isNotEmpty() {
      return this.keys[S$.$isNotEmpty];
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[S$.$runtimeType])) return false;
      return page_storage._StorageEntryIdentifier.is(other) && dart.test(collections.listEquals(page_storage.PageStorageKey, other.keys, this.keys));
    }
    get hashCode() {
      return ui.hashList(this.keys);
    }
    toString() {
      return "StorageEntryIdentifier(" + dart.str(this.keys[S$.$join](":")) + ")";
    }
  };
  (page_storage._StorageEntryIdentifier.new = function(keys) {
    if (keys == null) dart.nullFailed(I[78], 27, 38, "keys");
    this[S.keys] = keys;
    if (!(keys != null)) dart.assertFailed(null, I[78], 28, 14, "keys != null");
    ;
  }).prototype = page_storage._StorageEntryIdentifier.prototype;
  dart.addTypeTests(page_storage._StorageEntryIdentifier);
  dart.addTypeCaches(page_storage._StorageEntryIdentifier);
  dart.setGetterSignature(page_storage._StorageEntryIdentifier, () => ({
    __proto__: dart.getGetters(page_storage._StorageEntryIdentifier.__proto__),
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(page_storage._StorageEntryIdentifier, I[77]);
  dart.setFieldSignature(page_storage._StorageEntryIdentifier, () => ({
    __proto__: dart.getFields(page_storage._StorageEntryIdentifier.__proto__),
    keys: dart.finalFieldType(core.List$(page_storage.PageStorageKey))
  }));
  dart.defineExtensionMethods(page_storage._StorageEntryIdentifier, ['_equals', 'toString']);
  dart.defineExtensionAccessors(page_storage._StorageEntryIdentifier, ['hashCode']);
  page_storage.PageStorageBucket = class PageStorageBucket extends core.Object {
    static _maybeAddKey(context, keys) {
      if (context == null) dart.nullFailed(I[78], 56, 41, "context");
      if (keys == null) dart.nullFailed(I[78], 56, 80, "keys");
      let widget = context.widget;
      let key = widget.key;
      if (page_storage.PageStorageKey.is(key)) keys[S$.$add](key);
      return !page_storage.PageStorage.is(widget);
    }
    [S._allKeys](context) {
      if (context == null) dart.nullFailed(I[78], 64, 55, "context");
      let keys = T$.JSArrayOfPageStorageKey().of([]);
      if (dart.test(page_storage.PageStorageBucket._maybeAddKey(context, keys))) {
        context.visitAncestorElements(dart.fn(element => {
          if (element == null) dart.nullFailed(I[78], 67, 46, "element");
          return page_storage.PageStorageBucket._maybeAddKey(element, keys);
        }, T$.ElementTobool()));
      }
      return keys;
    }
    [S._computeIdentifier](context) {
      if (context == null) dart.nullFailed(I[78], 74, 59, "context");
      return new page_storage._StorageEntryIdentifier.new(this[S._allKeys](context));
    }
    writeState(context, data, opts) {
      if (context == null) dart.nullFailed(I[78], 88, 32, "context");
      let identifier = opts && 'identifier' in opts ? opts.identifier : null;
      this[S._storage] == null ? this[S._storage] = new (T$.LinkedMapOfObject$dynamic()).new() : null;
      if (identifier != null) {
        dart.nullCheck(this[S._storage])[S$.$_set](identifier, data);
      } else {
        let contextIdentifier = this[S._computeIdentifier](context);
        if (dart.test(contextIdentifier.isNotEmpty)) dart.nullCheck(this[S._storage])[S$.$_set](contextIdentifier, data);
      }
    }
    readState(context, opts) {
      if (context == null) dart.nullFailed(I[78], 107, 34, "context");
      let identifier = opts && 'identifier' in opts ? opts.identifier : null;
      if (this[S._storage] == null) return null;
      if (identifier != null) return dart.nullCheck(this[S._storage])[S$.$_get](identifier);
      let contextIdentifier = this[S._computeIdentifier](context);
      return dart.test(contextIdentifier.isNotEmpty) ? dart.nullCheck(this[S._storage])[S$.$_get](contextIdentifier) : null;
    }
  };
  (page_storage.PageStorageBucket.new = function() {
    this[S._storage] = null;
    ;
  }).prototype = page_storage.PageStorageBucket.prototype;
  dart.addTypeTests(page_storage.PageStorageBucket);
  dart.addTypeCaches(page_storage.PageStorageBucket);
  dart.setMethodSignature(page_storage.PageStorageBucket, () => ({
    __proto__: dart.getMethods(page_storage.PageStorageBucket.__proto__),
    [S._allKeys]: dart.fnType(core.List$(page_storage.PageStorageKey), [framework.BuildContext]),
    [S._computeIdentifier]: dart.fnType(page_storage._StorageEntryIdentifier, [framework.BuildContext]),
    writeState: dart.fnType(dart.void, [framework.BuildContext, dart.dynamic], {identifier: dart.nullable(core.Object)}, {}),
    readState: dart.fnType(dart.dynamic, [framework.BuildContext], {identifier: dart.nullable(core.Object)}, {})
  }));
  dart.setLibraryUri(page_storage.PageStorageBucket, I[77]);
  dart.setFieldSignature(page_storage.PageStorageBucket, () => ({
    __proto__: dart.getFields(page_storage.PageStorageBucket.__proto__),
    [S._storage]: dart.fieldType(dart.nullable(core.Map$(core.Object, dart.dynamic)))
  }));
  page_storage.PageStorage = class PageStorage extends framework.StatelessWidget {
    get child() {
      return this[S.child$28];
    }
    set child(value) {
      super.child = value;
    }
    get bucket() {
      return this[S.bucket$1];
    }
    set bucket(value) {
      super.bucket = value;
    }
    static of(context) {
      let t61;
      if (context == null) dart.nullFailed(I[78], 270, 45, "context");
      let widget = context.findAncestorWidgetOfExactType(page_storage.PageStorage);
      t61 = widget;
      return t61 == null ? null : t61.bucket;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[78], 276, 29, "context");
      return this.child;
    }
  };
  (page_storage.PageStorage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    if (bucket == null) dart.nullFailed(I[78], 248, 19, "bucket");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[78], 249, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.bucket$1] = bucket;
    this[S.child$28] = child;
    if (!(bucket != null)) dart.assertFailed(null, I[78], 250, 15, "bucket != null");
    page_storage.PageStorage.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = page_storage.PageStorage.prototype;
  dart.addTypeTests(page_storage.PageStorage);
  dart.addTypeCaches(page_storage.PageStorage);
  dart.setMethodSignature(page_storage.PageStorage, () => ({
    __proto__: dart.getMethods(page_storage.PageStorage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(page_storage.PageStorage, I[77]);
  dart.setFieldSignature(page_storage.PageStorage, () => ({
    __proto__: dart.getFields(page_storage.PageStorage.__proto__),
    child: dart.finalFieldType(framework.Widget),
    bucket: dart.finalFieldType(page_storage.PageStorageBucket)
  }));
  scroll_position.ScrollPositionAlignmentPolicy = class ScrollPositionAlignmentPolicy extends core.Object {
    toString() {
      return this[S$0._name$15];
    }
  };
  (scroll_position.ScrollPositionAlignmentPolicy.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[72], 24, 6, "index");
    if (_name == null) dart.nullFailed(I[72], 24, 6, "_name");
    this.index = index;
    this[S$0._name$15] = _name;
    ;
  }).prototype = scroll_position.ScrollPositionAlignmentPolicy.prototype;
  dart.addTypeTests(scroll_position.ScrollPositionAlignmentPolicy);
  dart.addTypeCaches(scroll_position.ScrollPositionAlignmentPolicy);
  dart.setLibraryUri(scroll_position.ScrollPositionAlignmentPolicy, I[73]);
  dart.setFieldSignature(scroll_position.ScrollPositionAlignmentPolicy, () => ({
    __proto__: dart.getFields(scroll_position.ScrollPositionAlignmentPolicy.__proto__),
    index: dart.finalFieldType(core.int),
    [S$0._name$15]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scroll_position.ScrollPositionAlignmentPolicy, ['toString']);
  scroll_position.ScrollPositionAlignmentPolicy.explicit = C[762] || CT.C762;
  scroll_position.ScrollPositionAlignmentPolicy.keepVisibleAtEnd = C[763] || CT.C763;
  scroll_position.ScrollPositionAlignmentPolicy.keepVisibleAtStart = C[764] || CT.C764;
  scroll_position.ScrollPositionAlignmentPolicy.values = C[766] || CT.C766;
  notification_listener.Notification = class Notification extends core.Object {
    visitAncestor(element) {
      if (element == null) dart.nullFailed(I[80], 118, 30, "element");
      if (framework.StatelessElement.is(element)) {
        let widget = element.widget;
        if (T$.NotificationListenerOfNotification().is(widget)) {
          if (dart.test(widget[S._dispatch](this, element))) return false;
        }
      }
      return true;
    }
    dispatch(target) {
      let t61;
      t61 = target;
      t61 == null ? null : t61.visitAncestorElements(dart.bind(this, 'visitAncestor'));
    }
    toString() {
      let description = T$.JSArrayOfString().of([]);
      this.debugFillDescription(description);
      return dart.str(object.objectRuntimeType(this, "Notification")) + "(" + dart.str(description[S$.$join](", ")) + ")";
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[80], 159, 42, "description");
    }
  };
  (notification_listener.Notification.new = function() {
    ;
  }).prototype = notification_listener.Notification.prototype;
  dart.addTypeTests(notification_listener.Notification);
  dart.addTypeCaches(notification_listener.Notification);
  dart.setMethodSignature(notification_listener.Notification, () => ({
    __proto__: dart.getMethods(notification_listener.Notification.__proto__),
    visitAncestor: dart.fnType(core.bool, [framework.Element]),
    dispatch: dart.fnType(dart.void, [dart.nullable(framework.BuildContext)]),
    debugFillDescription: dart.fnType(dart.void, [core.List$(core.String)])
  }));
  dart.setLibraryUri(notification_listener.Notification, I[81]);
  dart.defineExtensionMethods(notification_listener.Notification, ['toString']);
  scroll_notification.ViewportNotificationMixin = class ViewportNotificationMixin extends notification_listener.Notification {};
  scroll_notification.ViewportNotificationMixin[dart.mixinOn] = Notification => class ViewportNotificationMixin extends Notification {
    get [S._depth$2]() {
      return this[S._depth$1];
    }
    set [S._depth$2](value) {
      this[S._depth$1] = value;
    }
    get depth() {
      return this[S._depth$2];
    }
    visitAncestor(element) {
      if (element == null) dart.nullFailed(I[79], 28, 30, "element");
      if (framework.RenderObjectElement.is(element) && viewport$.RenderAbstractViewport.is(element.renderObject)) this[S._depth$2] = dart.notNull(this[S._depth$2]) + 1;
      return super.visitAncestor(element);
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 35, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add]("depth: " + dart.str(this.depth) + " (" + (this.depth === 0 ? "local" : "remote") + ")");
    }
  };
  (scroll_notification.ViewportNotificationMixin[dart.mixinNew] = function() {
    this[S._depth$1] = 0;
  }).prototype = scroll_notification.ViewportNotificationMixin.prototype;
  dart.addTypeTests(scroll_notification.ViewportNotificationMixin);
  dart.addTypeCaches(scroll_notification.ViewportNotificationMixin);
  scroll_notification.ViewportNotificationMixin[dart.implements] = () => [notification_listener.Notification];
  dart.setGetterSignature(scroll_notification.ViewportNotificationMixin, () => ({
    __proto__: dart.getGetters(scroll_notification.ViewportNotificationMixin.__proto__),
    depth: core.int
  }));
  dart.setLibraryUri(scroll_notification.ViewportNotificationMixin, I[82]);
  dart.setFieldSignature(scroll_notification.ViewportNotificationMixin, () => ({
    __proto__: dart.getFields(scroll_notification.ViewportNotificationMixin.__proto__),
    [S._depth$2]: dart.fieldType(core.int)
  }));
  notification_listener.LayoutChangedNotification = class LayoutChangedNotification extends notification_listener.Notification {};
  (notification_listener.LayoutChangedNotification.new = function() {
    notification_listener.LayoutChangedNotification.__proto__.new.call(this);
    ;
  }).prototype = notification_listener.LayoutChangedNotification.prototype;
  dart.addTypeTests(notification_listener.LayoutChangedNotification);
  dart.addTypeCaches(notification_listener.LayoutChangedNotification);
  dart.setLibraryUri(notification_listener.LayoutChangedNotification, I[81]);
  const LayoutChangedNotification_ViewportNotificationMixin$36 = class LayoutChangedNotification_ViewportNotificationMixin extends notification_listener.LayoutChangedNotification {};
  (LayoutChangedNotification_ViewportNotificationMixin$36.new = function() {
    scroll_notification.ViewportNotificationMixin[dart.mixinNew].call(this);
    LayoutChangedNotification_ViewportNotificationMixin$36.__proto__.new.call(this);
  }).prototype = LayoutChangedNotification_ViewportNotificationMixin$36.prototype;
  dart.applyMixin(LayoutChangedNotification_ViewportNotificationMixin$36, scroll_notification.ViewportNotificationMixin);
  scroll_notification.ScrollNotification = class ScrollNotification extends LayoutChangedNotification_ViewportNotificationMixin$36 {
    get metrics() {
      return this[S.metrics];
    }
    set metrics(value) {
      super.metrics = value;
    }
    get context() {
      return this[S.context$2];
    }
    set context(value) {
      super.context = value;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 97, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add](dart.str(this.metrics));
    }
  };
  (scroll_notification.ScrollNotification.new = function(opts) {
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[79], 82, 19, "metrics");
    let context = opts && 'context' in opts ? opts.context : null;
    this[S.metrics] = metrics;
    this[S.context$2] = context;
    scroll_notification.ScrollNotification.__proto__.new.call(this);
    ;
  }).prototype = scroll_notification.ScrollNotification.prototype;
  dart.addTypeTests(scroll_notification.ScrollNotification);
  dart.addTypeCaches(scroll_notification.ScrollNotification);
  dart.setLibraryUri(scroll_notification.ScrollNotification, I[82]);
  dart.setFieldSignature(scroll_notification.ScrollNotification, () => ({
    __proto__: dart.getFields(scroll_notification.ScrollNotification.__proto__),
    metrics: dart.finalFieldType(scroll_metrics.ScrollMetrics),
    context: dart.finalFieldType(dart.nullable(framework.BuildContext))
  }));
  scroll_notification.ScrollStartNotification = class ScrollStartNotification extends scroll_notification.ScrollNotification {
    get dragDetails() {
      return this[S.dragDetails];
    }
    set dragDetails(value) {
      super.dragDetails = value;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 124, 42, "description");
      super.debugFillDescription(description);
      if (this.dragDetails != null) description[S$.$add](dart.str(this.dragDetails));
    }
  };
  (scroll_notification.ScrollStartNotification.new = function(opts) {
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[79], 112, 28, "metrics");
    let context = opts && 'context' in opts ? opts.context : null;
    let dragDetails = opts && 'dragDetails' in opts ? opts.dragDetails : null;
    this[S.dragDetails] = dragDetails;
    scroll_notification.ScrollStartNotification.__proto__.new.call(this, {metrics: metrics, context: context});
    ;
  }).prototype = scroll_notification.ScrollStartNotification.prototype;
  dart.addTypeTests(scroll_notification.ScrollStartNotification);
  dart.addTypeCaches(scroll_notification.ScrollStartNotification);
  dart.setLibraryUri(scroll_notification.ScrollStartNotification, I[82]);
  dart.setFieldSignature(scroll_notification.ScrollStartNotification, () => ({
    __proto__: dart.getFields(scroll_notification.ScrollStartNotification.__proto__),
    dragDetails: dart.finalFieldType(dart.nullable(drag_details.DragStartDetails))
  }));
  scroll_notification.ScrollUpdateNotification = class ScrollUpdateNotification extends scroll_notification.ScrollNotification {
    get dragDetails() {
      return this[S.dragDetails$1];
    }
    set dragDetails(value) {
      super.dragDetails = value;
    }
    get scrollDelta() {
      return this[S.scrollDelta];
    }
    set scrollDelta(value) {
      super.scrollDelta = value;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 159, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add]("scrollDelta: " + dart.str(this.scrollDelta));
      if (this.dragDetails != null) description[S$.$add](dart.str(this.dragDetails));
    }
  };
  (scroll_notification.ScrollUpdateNotification.new = function(opts) {
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[79], 143, 28, "metrics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[79], 144, 27, "context");
    let dragDetails = opts && 'dragDetails' in opts ? opts.dragDetails : null;
    let scrollDelta = opts && 'scrollDelta' in opts ? opts.scrollDelta : null;
    this[S.dragDetails$1] = dragDetails;
    this[S.scrollDelta] = scrollDelta;
    scroll_notification.ScrollUpdateNotification.__proto__.new.call(this, {metrics: metrics, context: context});
    ;
  }).prototype = scroll_notification.ScrollUpdateNotification.prototype;
  dart.addTypeTests(scroll_notification.ScrollUpdateNotification);
  dart.addTypeCaches(scroll_notification.ScrollUpdateNotification);
  dart.setLibraryUri(scroll_notification.ScrollUpdateNotification, I[82]);
  dart.setFieldSignature(scroll_notification.ScrollUpdateNotification, () => ({
    __proto__: dart.getFields(scroll_notification.ScrollUpdateNotification.__proto__),
    dragDetails: dart.finalFieldType(dart.nullable(drag_details.DragUpdateDetails)),
    scrollDelta: dart.finalFieldType(dart.nullable(core.double))
  }));
  scroll_notification.OverscrollNotification = class OverscrollNotification extends scroll_notification.ScrollNotification {
    get dragDetails() {
      return this[S.dragDetails$2];
    }
    set dragDetails(value) {
      super.dragDetails = value;
    }
    get overscroll() {
      return this[S.overscroll];
    }
    set overscroll(value) {
      super.overscroll = value;
    }
    get velocity() {
      return this[S.velocity];
    }
    set velocity(value) {
      super.velocity = value;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 212, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add]("overscroll: " + this.overscroll[S$0.$toStringAsFixed](1));
      description[S$.$add]("velocity: " + this.velocity[S$0.$toStringAsFixed](1));
      if (this.dragDetails != null) description[S$.$add](dart.str(this.dragDetails));
    }
  };
  (scroll_notification.OverscrollNotification.new = function(opts) {
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[79], 180, 28, "metrics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[79], 181, 27, "context");
    let dragDetails = opts && 'dragDetails' in opts ? opts.dragDetails : null;
    let overscroll = opts && 'overscroll' in opts ? opts.overscroll : null;
    if (overscroll == null) dart.nullFailed(I[79], 183, 19, "overscroll");
    let velocity = opts && 'velocity' in opts ? opts.velocity : 0;
    if (velocity == null) dart.nullFailed(I[79], 184, 10, "velocity");
    this[S.dragDetails$2] = dragDetails;
    this[S.overscroll] = overscroll;
    this[S.velocity] = velocity;
    if (!(overscroll != null)) dart.assertFailed(null, I[79], 185, 15, "overscroll != null");
    if (!overscroll[S.$isFinite]) dart.assertFailed(null, I[79], 186, 15, "overscroll.isFinite");
    if (!(overscroll !== 0.0)) dart.assertFailed(null, I[79], 187, 15, "overscroll != 0.0");
    if (!(velocity != null)) dart.assertFailed(null, I[79], 188, 15, "velocity != null");
    scroll_notification.OverscrollNotification.__proto__.new.call(this, {metrics: metrics, context: context});
    ;
  }).prototype = scroll_notification.OverscrollNotification.prototype;
  dart.addTypeTests(scroll_notification.OverscrollNotification);
  dart.addTypeCaches(scroll_notification.OverscrollNotification);
  dart.setLibraryUri(scroll_notification.OverscrollNotification, I[82]);
  dart.setFieldSignature(scroll_notification.OverscrollNotification, () => ({
    __proto__: dart.getFields(scroll_notification.OverscrollNotification.__proto__),
    dragDetails: dart.finalFieldType(dart.nullable(drag_details.DragUpdateDetails)),
    overscroll: dart.finalFieldType(core.double),
    velocity: dart.finalFieldType(core.double)
  }));
  scroll_notification.ScrollEndNotification = class ScrollEndNotification extends scroll_notification.ScrollNotification {
    get dragDetails() {
      return this[S.dragDetails$3];
    }
    set dragDetails(value) {
      super.dragDetails = value;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 249, 42, "description");
      super.debugFillDescription(description);
      if (this.dragDetails != null) description[S$.$add](dart.str(this.dragDetails));
    }
  };
  (scroll_notification.ScrollEndNotification.new = function(opts) {
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[79], 230, 28, "metrics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[79], 231, 27, "context");
    let dragDetails = opts && 'dragDetails' in opts ? opts.dragDetails : null;
    this[S.dragDetails$3] = dragDetails;
    scroll_notification.ScrollEndNotification.__proto__.new.call(this, {metrics: metrics, context: context});
    ;
  }).prototype = scroll_notification.ScrollEndNotification.prototype;
  dart.addTypeTests(scroll_notification.ScrollEndNotification);
  dart.addTypeCaches(scroll_notification.ScrollEndNotification);
  dart.setLibraryUri(scroll_notification.ScrollEndNotification, I[82]);
  dart.setFieldSignature(scroll_notification.ScrollEndNotification, () => ({
    __proto__: dart.getFields(scroll_notification.ScrollEndNotification.__proto__),
    dragDetails: dart.finalFieldType(dart.nullable(drag_details.DragEndDetails))
  }));
  scroll_notification.UserScrollNotification = class UserScrollNotification extends scroll_notification.ScrollNotification {
    get direction() {
      return this[S.direction];
    }
    set direction(value) {
      super.direction = value;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[79], 275, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add]("direction: " + dart.str(this.direction));
    }
  };
  (scroll_notification.UserScrollNotification.new = function(opts) {
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[79], 266, 28, "metrics");
    let context = opts && 'context' in opts ? opts.context : null;
    if (context == null) dart.nullFailed(I[79], 267, 27, "context");
    let direction = opts && 'direction' in opts ? opts.direction : null;
    if (direction == null) dart.nullFailed(I[79], 268, 19, "direction");
    this[S.direction] = direction;
    scroll_notification.UserScrollNotification.__proto__.new.call(this, {metrics: metrics, context: context});
    ;
  }).prototype = scroll_notification.UserScrollNotification.prototype;
  dart.addTypeTests(scroll_notification.UserScrollNotification);
  dart.addTypeCaches(scroll_notification.UserScrollNotification);
  dart.setLibraryUri(scroll_notification.UserScrollNotification, I[82]);
  dart.setFieldSignature(scroll_notification.UserScrollNotification, () => ({
    __proto__: dart.getFields(scroll_notification.UserScrollNotification.__proto__),
    direction: dart.finalFieldType(viewport_offset.ScrollDirection)
  }));
  scroll_notification.defaultScrollNotificationPredicate = function defaultScrollNotificationPredicate(notification) {
    if (notification == null) dart.nullFailed(I[79], 288, 60, "notification");
    return notification.depth === 0;
  };
  overscroll_indicator.GlowingOverscrollIndicator = class GlowingOverscrollIndicator extends framework.StatefulWidget {
    get showLeading() {
      return this[S.showLeading];
    }
    set showLeading(value) {
      super.showLeading = value;
    }
    get showTrailing() {
      return this[S.showTrailing];
    }
    set showTrailing(value) {
      super.showTrailing = value;
    }
    get axisDirection() {
      return this[S.axisDirection$2];
    }
    set axisDirection(value) {
      super.axisDirection = value;
    }
    get color() {
      return this[S.color$2];
    }
    set color(value) {
      super.color = value;
    }
    get notificationPredicate() {
      return this[S.notificationPredicate$1];
    }
    set notificationPredicate(value) {
      super.notificationPredicate = value;
    }
    get child() {
      return this[S.child$29];
    }
    set child(value) {
      super.child = value;
    }
    get axis() {
      return basic_types.axisDirectionToAxis(this.axisDirection);
    }
    createState() {
      return new overscroll_indicator._GlowingOverscrollIndicatorState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[83], 200, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfAxisDirection()).new("axisDirection", this.axisDirection));
      let showDescription = null;
      if (dart.test(this.showLeading) && dart.test(this.showTrailing)) {
        showDescription = "both sides";
      } else if (dart.test(this.showLeading)) {
        showDescription = "leading side only";
      } else if (dart.test(this.showTrailing)) {
        showDescription = "trailing side only";
      } else {
        showDescription = "neither side (!)";
      }
      properties.add(new diagnostics$.MessageProperty.new("show", showDescription));
      properties.add(new colors.ColorProperty.new("color", this.color, {showName: false}));
    }
  };
  (overscroll_indicator.GlowingOverscrollIndicator.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let showLeading = opts && 'showLeading' in opts ? opts.showLeading : true;
    if (showLeading == null) dart.nullFailed(I[83], 133, 10, "showLeading");
    let showTrailing = opts && 'showTrailing' in opts ? opts.showTrailing : true;
    if (showTrailing == null) dart.nullFailed(I[83], 134, 10, "showTrailing");
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : null;
    if (axisDirection == null) dart.nullFailed(I[83], 135, 19, "axisDirection");
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[83], 136, 19, "color");
    let notificationPredicate = opts && 'notificationPredicate' in opts ? opts.notificationPredicate : C[699] || CT.C699;
    if (notificationPredicate == null) dart.nullFailed(I[83], 137, 10, "notificationPredicate");
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.showLeading] = showLeading;
    this[S.showTrailing] = showTrailing;
    this[S.axisDirection$2] = axisDirection;
    this[S.color$2] = color;
    this[S.notificationPredicate$1] = notificationPredicate;
    this[S.child$29] = child;
    if (!(showLeading != null)) dart.assertFailed(null, I[83], 139, 15, "showLeading != null");
    if (!(showTrailing != null)) dart.assertFailed(null, I[83], 140, 15, "showTrailing != null");
    if (!(axisDirection != null)) dart.assertFailed(null, I[83], 141, 15, "axisDirection != null");
    if (!(color != null)) dart.assertFailed(null, I[83], 142, 15, "color != null");
    if (!(notificationPredicate != null)) dart.assertFailed(null, I[83], 143, 15, "notificationPredicate != null");
    overscroll_indicator.GlowingOverscrollIndicator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overscroll_indicator.GlowingOverscrollIndicator.prototype;
  dart.addTypeTests(overscroll_indicator.GlowingOverscrollIndicator);
  dart.addTypeCaches(overscroll_indicator.GlowingOverscrollIndicator);
  dart.setMethodSignature(overscroll_indicator.GlowingOverscrollIndicator, () => ({
    __proto__: dart.getMethods(overscroll_indicator.GlowingOverscrollIndicator.__proto__),
    createState: dart.fnType(overscroll_indicator._GlowingOverscrollIndicatorState, [])
  }));
  dart.setGetterSignature(overscroll_indicator.GlowingOverscrollIndicator, () => ({
    __proto__: dart.getGetters(overscroll_indicator.GlowingOverscrollIndicator.__proto__),
    axis: basic_types.Axis
  }));
  dart.setLibraryUri(overscroll_indicator.GlowingOverscrollIndicator, I[84]);
  dart.setFieldSignature(overscroll_indicator.GlowingOverscrollIndicator, () => ({
    __proto__: dart.getFields(overscroll_indicator.GlowingOverscrollIndicator.__proto__),
    showLeading: dart.finalFieldType(core.bool),
    showTrailing: dart.finalFieldType(core.bool),
    axisDirection: dart.finalFieldType(basic_types.AxisDirection),
    color: dart.finalFieldType(ui.Color),
    notificationPredicate: dart.finalFieldType(dart.fnType(core.bool, [scroll_notification.ScrollNotification])),
    child: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  const State_TickerProviderStateMixin$36$0 = class State_TickerProviderStateMixin extends framework.State$(overscroll_indicator.GlowingOverscrollIndicator) {};
  (State_TickerProviderStateMixin$36$0.new = function() {
    ticker_provider.TickerProviderStateMixin$(overscroll_indicator.GlowingOverscrollIndicator)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$0.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$0.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$0, ticker_provider.TickerProviderStateMixin$(overscroll_indicator.GlowingOverscrollIndicator));
  overscroll_indicator._GlowingOverscrollIndicatorState = class _GlowingOverscrollIndicatorState extends State_TickerProviderStateMixin$36$0 {
    initState() {
      super.initState();
      this[S._leadingController] = new overscroll_indicator._GlowController.new({vsync: this, color: this.widget.color, axis: this.widget.axis});
      this[S._trailingController] = new overscroll_indicator._GlowController.new({vsync: this, color: this.widget.color, axis: this.widget.axis});
      this[S._leadingAndTrailingListener] = new change_notifier._MergingListenable.new(T$.JSArrayOfListenable().of([dart.nullCheck(this[S._leadingController]), dart.nullCheck(this[S._trailingController])]));
    }
    didUpdateWidget(oldWidget) {
      overscroll_indicator.GlowingOverscrollIndicator.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[83], 232, 51, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(oldWidget.color, this.widget.color) || oldWidget.axis != this.widget.axis) {
        dart.nullCheck(this[S._leadingController]).color = this.widget.color;
        dart.nullCheck(this[S._leadingController]).axis = this.widget.axis;
        dart.nullCheck(this[S._trailingController]).color = this.widget.color;
        dart.nullCheck(this[S._trailingController]).axis = this.widget.axis;
      }
    }
    [S._handleScrollNotification$1](notification) {
      let t62, t61;
      if (notification == null) dart.nullFailed(I[83], 245, 53, "notification");
      if (!dart.test((t61 = this.widget, t62 = notification, t61.notificationPredicate(t62)))) return false;
      dart.nullCheck(this[S._leadingController])[S._paintOffsetScrollPixels] = -math.min(core.double, dart.notNull(notification.metrics.pixels) - dart.notNull(notification.metrics.minScrollExtent), dart.nullCheck(this[S._leadingController])[S._paintOffset]);
      dart.nullCheck(this[S._trailingController])[S._paintOffsetScrollPixels] = -math.min(core.double, dart.notNull(notification.metrics.maxScrollExtent) - dart.notNull(notification.metrics.pixels), dart.nullCheck(this[S._trailingController])[S._paintOffset]);
      if (scroll_notification.OverscrollNotification.is(notification)) {
        let controller = null;
        if (dart.notNull(notification.overscroll) < 0.0) {
          controller = this[S._leadingController];
        } else if (dart.notNull(notification.overscroll) > 0.0) {
          controller = this[S._trailingController];
        } else {
          if (!false) dart.assertFailed(null, I[83], 271, 16, "false");
        }
        let isLeading = dart.equals(controller, this[S._leadingController]);
        if (!dart.equals(this[S._lastNotificationType], dart.wrapType(scroll_notification.OverscrollNotification))) {
          let confirmationNotification = new overscroll_indicator.OverscrollIndicatorNotification.new({leading: isLeading});
          confirmationNotification.dispatch(this.context);
          this[S._accepted][S$.$_set](isLeading, confirmationNotification[S._accepted]);
          if (dart.nullCheck(this[S._accepted][S$.$_get](isLeading))) {
            dart.nullCheck(controller)[S._paintOffset] = confirmationNotification.paintOffset;
          }
        }
        if (!(controller != null)) dart.assertFailed(null, I[83], 282, 14, "controller != null");
        if (!(notification.metrics.axis == this.widget.axis)) dart.assertFailed(null, I[83], 283, 14, "notification.metrics.axis == widget.axis");
        if (dart.nullCheck(this[S._accepted][S$.$_get](isLeading))) {
          if (notification.velocity !== 0.0) {
            if (!(notification.dragDetails == null)) dart.assertFailed(null, I[83], 286, 18, "notification.dragDetails == null");
            dart.nullCheck(controller).absorbImpact(notification.velocity[S$.$abs]());
          } else {
            if (!(notification.overscroll !== 0.0)) dart.assertFailed(null, I[83], 289, 18, "notification.overscroll != 0.0");
            if (notification.dragDetails != null) {
              if (!(dart.nullCheck(notification.dragDetails).globalPosition != null)) dart.assertFailed(null, I[83], 291, 20, "notification.dragDetails!.globalPosition != null");
              let renderer = box$.RenderBox.as(dart.nullCheck(dart.nullCheck(notification.context).findRenderObject()));
              if (!(renderer !== null)) dart.assertFailed(null, I[83], 293, 20, "renderer != null");
              if (!dart.test(renderer.hasSize)) dart.assertFailed(null, I[83], 294, 20, "renderer.hasSize");
              let size = renderer.size;
              let position = renderer.globalToLocal(dart.nullCheck(notification.dragDetails).globalPosition);
              switch (notification.metrics.axis) {
                case C[701] || CT.C701:
                {
                  dart.nullCheck(controller).pull(notification.overscroll[S$.$abs](), size.width, position.dy[S$0.$clamp](0.0, size.height), size.height);
                  break;
                }
                case C[454] || CT.C454:
                {
                  dart.nullCheck(controller).pull(notification.overscroll[S$.$abs](), size.height, position.dx[S$0.$clamp](0.0, size.width), size.width);
                  break;
                }
                default:
                {
                  dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
                }
              }
            }
          }
        }
      } else if (scroll_notification.ScrollEndNotification.is(notification) || scroll_notification.ScrollUpdateNotification.is(notification)) {
        if (dart.dload(notification, 'dragDetails') != null) {
          dart.nullCheck(this[S._leadingController]).scrollEnd();
          dart.nullCheck(this[S._trailingController]).scrollEnd();
        }
      }
      this[S._lastNotificationType] = dart.runtimeType(notification);
      return false;
    }
    dispose() {
      dart.nullCheck(this[S._leadingController]).dispose();
      dart.nullCheck(this[S._trailingController]).dispose();
      super.dispose();
    }
    build(context) {
      if (context == null) dart.nullFailed(I[83], 326, 29, "context");
      return new (T$.NotificationListenerOfScrollNotification()).new({onNotification: dart.bind(this, S._handleScrollNotification$1), child: new basic.RepaintBoundary.new({child: new basic.CustomPaint.new({foregroundPainter: new overscroll_indicator._GlowingOverscrollIndicatorPainter.new({leadingController: dart.test(this.widget.showLeading) ? this[S._leadingController] : null, trailingController: dart.test(this.widget.showTrailing) ? this[S._trailingController] : null, axisDirection: this.widget.axisDirection, repaint: this[S._leadingAndTrailingListener]}), child: new basic.RepaintBoundary.new({child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[767] || CT.C767}), $creationLocationd_0dea112b090073317d4: C[770] || CT.C770}), $creationLocationd_0dea112b090073317d4: C[774] || CT.C774}), $creationLocationd_0dea112b090073317d4: C[777] || CT.C777});
    }
  };
  (overscroll_indicator._GlowingOverscrollIndicatorState.new = function() {
    this[S._leadingController] = null;
    this[S._trailingController] = null;
    this[S._leadingAndTrailingListener] = null;
    this[S._lastNotificationType] = null;
    this[S._accepted] = new (T$.IdentityMapOfbool$bool()).from([false, true, true, true]);
    overscroll_indicator._GlowingOverscrollIndicatorState.__proto__.new.call(this);
    ;
  }).prototype = overscroll_indicator._GlowingOverscrollIndicatorState.prototype;
  dart.addTypeTests(overscroll_indicator._GlowingOverscrollIndicatorState);
  dart.addTypeCaches(overscroll_indicator._GlowingOverscrollIndicatorState);
  dart.setMethodSignature(overscroll_indicator._GlowingOverscrollIndicatorState, () => ({
    __proto__: dart.getMethods(overscroll_indicator._GlowingOverscrollIndicatorState.__proto__),
    [S._handleScrollNotification$1]: dart.fnType(core.bool, [scroll_notification.ScrollNotification]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(overscroll_indicator._GlowingOverscrollIndicatorState, I[84]);
  dart.setFieldSignature(overscroll_indicator._GlowingOverscrollIndicatorState, () => ({
    __proto__: dart.getFields(overscroll_indicator._GlowingOverscrollIndicatorState.__proto__),
    [S._leadingController]: dart.fieldType(dart.nullable(overscroll_indicator._GlowController)),
    [S._trailingController]: dart.fieldType(dart.nullable(overscroll_indicator._GlowController)),
    [S._leadingAndTrailingListener]: dart.fieldType(dart.nullable(change_notifier.Listenable)),
    [S._lastNotificationType]: dart.fieldType(dart.nullable(core.Type)),
    [S._accepted]: dart.finalFieldType(core.Map$(core.bool, core.bool))
  }));
  overscroll_indicator._GlowState = class _GlowState extends core.Object {
    toString() {
      return this[S._name$16];
    }
  };
  (overscroll_indicator._GlowState.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[83], 350, 6, "index");
    if (_name == null) dart.nullFailed(I[83], 350, 6, "_name");
    this.index = index;
    this[S._name$16] = _name;
    ;
  }).prototype = overscroll_indicator._GlowState.prototype;
  dart.addTypeTests(overscroll_indicator._GlowState);
  dart.addTypeCaches(overscroll_indicator._GlowState);
  dart.setLibraryUri(overscroll_indicator._GlowState, I[84]);
  dart.setFieldSignature(overscroll_indicator._GlowState, () => ({
    __proto__: dart.getFields(overscroll_indicator._GlowState.__proto__),
    index: dart.finalFieldType(core.int),
    [S._name$16]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(overscroll_indicator._GlowState, ['toString']);
  overscroll_indicator._GlowState.idle = C[781] || CT.C781;
  overscroll_indicator._GlowState.absorb = C[782] || CT.C782;
  overscroll_indicator._GlowState.pull = C[783] || CT.C783;
  overscroll_indicator._GlowState.recede = C[784] || CT.C784;
  overscroll_indicator._GlowState.values = C[785] || CT.C785;
  overscroll_indicator._GlowController = class _GlowController extends change_notifier.ChangeNotifier {
    get [S._glowController]() {
      let t61;
      return dart.test(this[S.___GlowController__glowController_isSet]) ? (t61 = this[S.___GlowController__glowController], t61) : dart.throw(new _internal.LateError.fieldNI("_glowController"));
    }
    set [S._glowController](t61) {
      if (t61 == null) dart.nullFailed(I[83], 375, 34, "null");
      if (dart.test(this[S.___GlowController__glowController_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_glowController"));
      else {
        this[S.___GlowController__glowController_isSet] = true;
        this[S.___GlowController__glowController] = t61;
      }
    }
    get [S._glowOpacity]() {
      let t62;
      return dart.test(this[S.___GlowController__glowOpacity_isSet]) ? (t62 = this[S.___GlowController__glowOpacity], t62) : dart.throw(new _internal.LateError.fieldNI("_glowOpacity"));
    }
    set [S._glowOpacity](t62) {
      if (t62 == null) dart.nullFailed(I[83], 382, 32, "null");
      if (dart.test(this[S.___GlowController__glowOpacity_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_glowOpacity"));
      else {
        this[S.___GlowController__glowOpacity_isSet] = true;
        this[S.___GlowController__glowOpacity] = t62;
      }
    }
    get [S._glowSize]() {
      let t63;
      return dart.test(this[S.___GlowController__glowSize_isSet]) ? (t63 = this[S.___GlowController__glowSize], t63) : dart.throw(new _internal.LateError.fieldNI("_glowSize"));
    }
    set [S._glowSize](t63) {
      if (t63 == null) dart.nullFailed(I[83], 384, 32, "null");
      if (dart.test(this[S.___GlowController__glowSize_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_glowSize"));
      else {
        this[S.___GlowController__glowSize_isSet] = true;
        this[S.___GlowController__glowSize] = t63;
      }
    }
    get [S._displacementTicker]() {
      let t64;
      return dart.test(this[S.___GlowController__displacementTicker_isSet]) ? (t64 = this[S.___GlowController__displacementTicker], t64) : dart.throw(new _internal.LateError.fieldNI("_displacementTicker"));
    }
    set [S._displacementTicker](t64) {
      if (t64 == null) dart.nullFailed(I[83], 387, 21, "null");
      if (dart.test(this[S.___GlowController__displacementTicker_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_displacementTicker"));
      else {
        this[S.___GlowController__displacementTicker_isSet] = true;
        this[S.___GlowController__displacementTicker] = t64;
      }
    }
    get color() {
      return this[S._color$1];
    }
    set color(value) {
      if (value == null) dart.nullFailed(I[83], 397, 19, "value");
      if (!(this.color != null)) dart.assertFailed(null, I[83], 398, 12, "color != null");
      if (dart.equals(this.color, value)) return;
      this[S._color$1] = value;
      this.notifyListeners();
    }
    get axis() {
      return this[S._axis];
    }
    set axis(value) {
      if (value == null) dart.nullFailed(I[83], 407, 17, "value");
      if (!(this.axis != null)) dart.assertFailed(null, I[83], 408, 12, "axis != null");
      if (this.axis == value) return;
      this[S._axis] = value;
      this.notifyListeners();
    }
    dispose() {
      let t65;
      this[S._glowController].dispose();
      this[S._displacementTicker].dispose();
      t65 = this[S._pullRecedeTimer];
      t65 == null ? null : t65.cancel();
      super.dispose();
    }
    absorbImpact(velocity) {
      let t65;
      if (velocity == null) dart.nullFailed(I[83], 442, 28, "velocity");
      if (!(dart.notNull(velocity) >= 0.0)) dart.assertFailed(null, I[83], 443, 12, "velocity >= 0.0");
      t65 = this[S._pullRecedeTimer];
      t65 == null ? null : t65.cancel();
      this[S._pullRecedeTimer] = null;
      velocity = velocity[S$0.$clamp](100, 10000);
      this[S._glowOpacityTween].begin = this[S._state] == overscroll_indicator._GlowState.idle ? 0.3 : this[S._glowOpacity].value;
      this[S._glowOpacityTween].end = (dart.notNull(velocity) * 0.00006)[S$0.$clamp](dart.nullCheck(this[S._glowOpacityTween].begin), 0.5);
      this[S._glowSizeTween].begin = this[S._glowSize].value;
      this[S._glowSizeTween].end = math.min(core.double, 0.025 + 7.5e-7 * dart.notNull(velocity) * dart.notNull(velocity), 1.0);
      this[S._glowController].duration = new core.Duration.new({milliseconds: (0.15 + dart.notNull(velocity) * 0.02)[S.$round]()});
      this[S._glowController].forward({from: 0.0});
      this[S._displacement] = 0.5;
      this[S._state] = overscroll_indicator._GlowState.absorb;
    }
    pull(overscroll, extent, crossAxisOffset, crossExtent) {
      let t65;
      if (overscroll == null) dart.nullFailed(I[83], 468, 20, "overscroll");
      if (extent == null) dart.nullFailed(I[83], 468, 39, "extent");
      if (crossAxisOffset == null) dart.nullFailed(I[83], 468, 54, "crossAxisOffset");
      if (crossExtent == null) dart.nullFailed(I[83], 468, 78, "crossExtent");
      t65 = this[S._pullRecedeTimer];
      t65 == null ? null : t65.cancel();
      this[S._pullDistance] = dart.notNull(this[S._pullDistance]) + dart.notNull(overscroll) / 200.0;
      this[S._glowOpacityTween].begin = this[S._glowOpacity].value;
      this[S._glowOpacityTween].end = math.min(core.double, dart.notNull(this[S._glowOpacity].value) + dart.notNull(overscroll) / dart.notNull(extent) * 0.8, 0.5);
      let height = math.min(core.double, extent, dart.notNull(crossExtent) * 0.20096189432249995);
      this[S._glowSizeTween].begin = this[S._glowSize].value;
      this[S._glowSizeTween].end = math.max(core.double, 1.0 - 1.0 / (0.7 * math.sqrt(dart.notNull(this[S._pullDistance]) * height)), this[S._glowSize].value);
      this[S._displacementTarget] = dart.notNull(crossAxisOffset) / dart.notNull(crossExtent);
      if (this[S._displacementTarget] != this[S._displacement]) {
        if (!dart.test(this[S._displacementTicker].isTicking)) {
          if (!(this[S._displacementTickerLastElapsed] == null)) dart.assertFailed(null, I[83], 479, 16, "_displacementTickerLastElapsed == null");
          this[S._displacementTicker].start();
        }
      } else {
        this[S._displacementTicker].stop();
        this[S._displacementTickerLastElapsed] = null;
      }
      this[S._glowController].duration = overscroll_indicator._GlowController._pullTime;
      if (this[S._state] != overscroll_indicator._GlowState.pull) {
        this[S._glowController].forward({from: 0.0});
        this[S._state] = overscroll_indicator._GlowState.pull;
      } else {
        if (!dart.test(this[S._glowController].isAnimating)) {
          if (!(this[S._glowController].value === 1.0)) dart.assertFailed(null, I[83], 492, 16, "_glowController.value == 1.0");
          this.notifyListeners();
        }
      }
      this[S._pullRecedeTimer] = async.Timer.new(overscroll_indicator._GlowController._pullHoldTime, dart.fn(() => this[S._recede](overscroll_indicator._GlowController._pullDecayTime), T$.VoidTovoid()));
    }
    scrollEnd() {
      if (this[S._state] == overscroll_indicator._GlowState.pull) this[S._recede](overscroll_indicator._GlowController._recedeTime);
    }
    [S._changePhase](status) {
      if (status == null) dart.nullFailed(I[83], 504, 37, "status");
      if (status != animation.AnimationStatus.completed) return;
      switch (this[S._state]) {
        case C[782] || CT.C782:
        {
          this[S._recede](overscroll_indicator._GlowController._recedeTime);
          break;
        }
        case C[784] || CT.C784:
        {
          this[S._state] = overscroll_indicator._GlowState.idle;
          this[S._pullDistance] = 0.0;
          break;
        }
        case C[783] || CT.C783:
        case C[781] || CT.C781:
        {
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    [S._recede](duration) {
      let t65;
      if (duration == null) dart.nullFailed(I[83], 521, 25, "duration");
      if (this[S._state] == overscroll_indicator._GlowState.recede || this[S._state] == overscroll_indicator._GlowState.idle) return;
      t65 = this[S._pullRecedeTimer];
      t65 == null ? null : t65.cancel();
      this[S._pullRecedeTimer] = null;
      this[S._glowOpacityTween].begin = this[S._glowOpacity].value;
      this[S._glowOpacityTween].end = 0.0;
      this[S._glowSizeTween].begin = this[S._glowSize].value;
      this[S._glowSizeTween].end = 0.0;
      this[S._glowController].duration = duration;
      this[S._glowController].forward({from: 0.0});
      this[S._state] = overscroll_indicator._GlowState.recede;
    }
    [S._tickDisplacement](elapsed) {
      if (elapsed == null) dart.nullFailed(I[83], 535, 35, "elapsed");
      if (this[S._displacementTickerLastElapsed] != null) {
        let t = (dart.notNull(elapsed.inMicroseconds) - dart.notNull(dart.nullCheck(this[S._displacementTickerLastElapsed]).inMicroseconds))[S.$toDouble]();
        this[S._displacement] = dart.notNull(this[S._displacementTarget]) - (dart.notNull(this[S._displacementTarget]) - dart.notNull(this[S._displacement])) * math.pow(2.0, -t / dart.notNull(overscroll_indicator._GlowController._crossAxisHalfTime.inMicroseconds));
        this.notifyListeners();
      }
      if (dart.test(utils.nearEqual(this[S._displacementTarget], this[S._displacement], tolerance.Tolerance.defaultTolerance.distance))) {
        this[S._displacementTicker].stop();
        this[S._displacementTickerLastElapsed] = null;
      } else {
        this[S._displacementTickerLastElapsed] = elapsed;
      }
    }
    paint(canvas, size) {
      let t65;
      if (canvas == null) dart.nullFailed(I[83], 549, 21, "canvas");
      if (size == null) dart.nullFailed(I[83], 549, 34, "size");
      if (this[S._glowOpacity].value === 0.0) return;
      let baseGlowScale = dart.notNull(size.width) > dart.notNull(size.height) ? dart.notNull(size.height) / dart.notNull(size.width) : 1.0;
      let radius = dart.notNull(size.width) * 3.0 / 2.0;
      let height = math.min(core.double, size.height, dart.notNull(size.width) * 0.20096189432249995);
      let scaleY = dart.notNull(this[S._glowSize].value) * baseGlowScale;
      let rect = new ui.Rect.fromLTWH(0.0, 0.0, size.width, height);
      let center = new ui.Offset.new(dart.notNull(size.width) / 2.0 * (0.5 + dart.notNull(this[S._displacement])), height - radius);
      let paint = (t65 = ui.Paint.new(), (() => {
        t65.color = this.color.withOpacity(this[S._glowOpacity].value);
        return t65;
      })());
      canvas.save();
      canvas.translate(0.0, dart.notNull(this[S._paintOffset]) + dart.notNull(this[S._paintOffsetScrollPixels]));
      canvas.scale(1.0, scaleY);
      canvas.clipRect(rect);
      canvas.drawCircle(center, radius, paint);
      canvas.restore();
    }
  };
  (overscroll_indicator._GlowController.new = function(opts) {
    let t61, t61$;
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(I[83], 354, 29, "vsync");
    let color = opts && 'color' in opts ? opts.color : null;
    if (color == null) dart.nullFailed(I[83], 355, 20, "color");
    let axis = opts && 'axis' in opts ? opts.axis : null;
    if (axis == null) dart.nullFailed(I[83], 356, 19, "axis");
    this[S._state] = overscroll_indicator._GlowState.idle;
    this[S.___GlowController__glowController] = null;
    this[S.___GlowController__glowController_isSet] = false;
    this[S._pullRecedeTimer] = null;
    this[S._paintOffset] = 0.0;
    this[S._paintOffsetScrollPixels] = 0.0;
    this[S._glowOpacityTween] = new (T$.TweenOfdouble()).new({begin: 0.0, end: 0.0});
    this[S.___GlowController__glowOpacity] = null;
    this[S.___GlowController__glowOpacity_isSet] = false;
    this[S._glowSizeTween] = new (T$.TweenOfdouble()).new({begin: 0.0, end: 0.0});
    this[S.___GlowController__glowSize] = null;
    this[S.___GlowController__glowSize_isSet] = false;
    this[S.___GlowController__displacementTicker] = null;
    this[S.___GlowController__displacementTicker_isSet] = false;
    this[S._displacementTickerLastElapsed] = null;
    this[S._displacementTarget] = 0.5;
    this[S._displacement] = 0.5;
    this[S._pullDistance] = 0.0;
    if (!(vsync != null)) dart.assertFailed(null, I[83], 357, 15, "vsync != null");
    if (!(color != null)) dart.assertFailed(null, I[83], 358, 15, "color != null");
    if (!(axis != null)) dart.assertFailed(null, I[83], 359, 15, "axis != null");
    this[S._color$1] = color;
    this[S._axis] = axis;
    overscroll_indicator._GlowController.__proto__.new.call(this);
    this[S._glowController] = (t61 = new animation_controller.AnimationController.new({vsync: vsync}), (() => {
      t61.addStatusListener(dart.bind(this, S._changePhase));
      return t61;
    })());
    let decelerator = (t61$ = new animations.CurvedAnimation.new({parent: this[S._glowController], curve: curves.Curves.decelerate}), (() => {
      t61$.addListener(dart.bind(this, 'notifyListeners'));
      return t61$;
    })());
    this[S._glowOpacity] = decelerator.drive(core.double, this[S._glowOpacityTween]);
    this[S._glowSize] = decelerator.drive(core.double, this[S._glowSizeTween]);
    this[S._displacementTicker] = vsync.createTicker(dart.bind(this, S._tickDisplacement));
  }).prototype = overscroll_indicator._GlowController.prototype;
  dart.addTypeTests(overscroll_indicator._GlowController);
  dart.addTypeCaches(overscroll_indicator._GlowController);
  dart.setMethodSignature(overscroll_indicator._GlowController, () => ({
    __proto__: dart.getMethods(overscroll_indicator._GlowController.__proto__),
    absorbImpact: dart.fnType(dart.void, [core.double]),
    pull: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    scrollEnd: dart.fnType(dart.void, []),
    [S._changePhase]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [S._recede]: dart.fnType(dart.void, [core.Duration]),
    [S._tickDisplacement]: dart.fnType(dart.void, [core.Duration]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size])
  }));
  dart.setGetterSignature(overscroll_indicator._GlowController, () => ({
    __proto__: dart.getGetters(overscroll_indicator._GlowController.__proto__),
    [S._glowController]: animation_controller.AnimationController,
    [S._glowOpacity]: animation.Animation$(core.double),
    [S._glowSize]: animation.Animation$(core.double),
    [S._displacementTicker]: ticker.Ticker,
    color: ui.Color,
    axis: basic_types.Axis
  }));
  dart.setSetterSignature(overscroll_indicator._GlowController, () => ({
    __proto__: dart.getSetters(overscroll_indicator._GlowController.__proto__),
    [S._glowController]: animation_controller.AnimationController,
    [S._glowOpacity]: animation.Animation$(core.double),
    [S._glowSize]: animation.Animation$(core.double),
    [S._displacementTicker]: ticker.Ticker,
    color: ui.Color,
    axis: basic_types.Axis
  }));
  dart.setLibraryUri(overscroll_indicator._GlowController, I[84]);
  dart.setFieldSignature(overscroll_indicator._GlowController, () => ({
    __proto__: dart.getFields(overscroll_indicator._GlowController.__proto__),
    [S._state]: dart.fieldType(overscroll_indicator._GlowState),
    [S.___GlowController__glowController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S.___GlowController__glowController_isSet]: dart.fieldType(core.bool),
    [S._pullRecedeTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [S._paintOffset]: dart.fieldType(core.double),
    [S._paintOffsetScrollPixels]: dart.fieldType(core.double),
    [S._glowOpacityTween]: dart.finalFieldType(tween.Tween$(core.double)),
    [S.___GlowController__glowOpacity]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [S.___GlowController__glowOpacity_isSet]: dart.fieldType(core.bool),
    [S._glowSizeTween]: dart.finalFieldType(tween.Tween$(core.double)),
    [S.___GlowController__glowSize]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [S.___GlowController__glowSize_isSet]: dart.fieldType(core.bool),
    [S.___GlowController__displacementTicker]: dart.fieldType(dart.nullable(ticker.Ticker)),
    [S.___GlowController__displacementTicker_isSet]: dart.fieldType(core.bool),
    [S._displacementTickerLastElapsed]: dart.fieldType(dart.nullable(core.Duration)),
    [S._displacementTarget]: dart.fieldType(core.double),
    [S._displacement]: dart.fieldType(core.double),
    [S._pullDistance]: dart.fieldType(core.double),
    [S._color$1]: dart.fieldType(ui.Color),
    [S._axis]: dart.fieldType(basic_types.Axis)
  }));
  dart.defineLazy(overscroll_indicator._GlowController, {
    /*overscroll_indicator._GlowController._recedeTime*/get _recedeTime() {
      return C[697] || CT.C697;
    },
    /*overscroll_indicator._GlowController._pullTime*/get _pullTime() {
      return C[786] || CT.C786;
    },
    /*overscroll_indicator._GlowController._pullHoldTime*/get _pullHoldTime() {
      return C[786] || CT.C786;
    },
    /*overscroll_indicator._GlowController._pullDecayTime*/get _pullDecayTime() {
      return C[787] || CT.C787;
    },
    /*overscroll_indicator._GlowController._crossAxisHalfTime*/get _crossAxisHalfTime() {
      return new core.Duration.new({microseconds: (1000000 / 60.0)[S.$round]()});
    },
    /*overscroll_indicator._GlowController._maxOpacity*/get _maxOpacity() {
      return 0.5;
    },
    /*overscroll_indicator._GlowController._pullOpacityGlowFactor*/get _pullOpacityGlowFactor() {
      return 0.8;
    },
    /*overscroll_indicator._GlowController._velocityGlowFactor*/get _velocityGlowFactor() {
      return 0.00006;
    },
    /*overscroll_indicator._GlowController._sqrt3*/get _sqrt3() {
      return 1.73205080757;
    },
    /*overscroll_indicator._GlowController._widthToHeightFactor*/get _widthToHeightFactor() {
      return 0.20096189432249995;
    },
    /*overscroll_indicator._GlowController._minVelocity*/get _minVelocity() {
      return 100;
    },
    /*overscroll_indicator._GlowController._maxVelocity*/get _maxVelocity() {
      return 10000;
    }
  }, false);
  overscroll_indicator._GlowingOverscrollIndicatorPainter = class _GlowingOverscrollIndicatorPainter extends custom_paint.CustomPainter {
    [S._paintSide](canvas, size, controller, axisDirection, growthDirection) {
      if (canvas == null) dart.nullFailed(I[83], 593, 26, "canvas");
      if (size == null) dart.nullFailed(I[83], 593, 39, "size");
      if (axisDirection == null) dart.nullFailed(I[83], 593, 88, "axisDirection");
      if (growthDirection == null) dart.nullFailed(I[83], 593, 119, "growthDirection");
      if (controller == null) return;
      switch (sliver.applyGrowthDirectionToAxisDirection(axisDirection, growthDirection)) {
        case C[686] || CT.C686:
        {
          controller.paint(canvas, size);
          break;
        }
        case C[684] || CT.C684:
        {
          canvas.save();
          canvas.translate(0.0, size.height);
          canvas.scale(1.0, -1.0);
          controller.paint(canvas, size);
          canvas.restore();
          break;
        }
        case C[688] || CT.C688:
        {
          canvas.save();
          canvas.rotate(1.5707963267948966);
          canvas.scale(1.0, -1.0);
          controller.paint(canvas, new ui.Size.new(size.height, size.width));
          canvas.restore();
          break;
        }
        case C[687] || CT.C687:
        {
          canvas.save();
          canvas.translate(size.width, 0.0);
          canvas.rotate(1.5707963267948966);
          controller.paint(canvas, new ui.Size.new(size.height, size.width));
          canvas.restore();
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
    }
    paint(canvas, size) {
      if (canvas == null) dart.nullFailed(I[83], 625, 21, "canvas");
      if (size == null) dart.nullFailed(I[83], 625, 34, "size");
      this[S._paintSide](canvas, size, this.leadingController, this.axisDirection, sliver.GrowthDirection.reverse);
      this[S._paintSide](canvas, size, this.trailingController, this.axisDirection, sliver.GrowthDirection.forward);
    }
    shouldRepaint(oldDelegate) {
      overscroll_indicator._GlowingOverscrollIndicatorPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[83], 631, 57, "oldDelegate");
      return !dart.equals(oldDelegate.leadingController, this.leadingController) || !dart.equals(oldDelegate.trailingController, this.trailingController);
    }
  };
  (overscroll_indicator._GlowingOverscrollIndicatorPainter.new = function(opts) {
    let leadingController = opts && 'leadingController' in opts ? opts.leadingController : null;
    let trailingController = opts && 'trailingController' in opts ? opts.trailingController : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : null;
    if (axisDirection == null) dart.nullFailed(I[83], 572, 19, "axisDirection");
    let repaint = opts && 'repaint' in opts ? opts.repaint : null;
    this.leadingController = leadingController;
    this.trailingController = trailingController;
    this.axisDirection = axisDirection;
    overscroll_indicator._GlowingOverscrollIndicatorPainter.__proto__.new.call(this, {repaint: repaint});
    ;
  }).prototype = overscroll_indicator._GlowingOverscrollIndicatorPainter.prototype;
  dart.addTypeTests(overscroll_indicator._GlowingOverscrollIndicatorPainter);
  dart.addTypeCaches(overscroll_indicator._GlowingOverscrollIndicatorPainter);
  dart.setMethodSignature(overscroll_indicator._GlowingOverscrollIndicatorPainter, () => ({
    __proto__: dart.getMethods(overscroll_indicator._GlowingOverscrollIndicatorPainter.__proto__),
    [S._paintSide]: dart.fnType(dart.void, [ui.Canvas, ui.Size, dart.nullable(overscroll_indicator._GlowController), basic_types.AxisDirection, sliver.GrowthDirection]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(overscroll_indicator._GlowingOverscrollIndicatorPainter, I[84]);
  dart.setFieldSignature(overscroll_indicator._GlowingOverscrollIndicatorPainter, () => ({
    __proto__: dart.getFields(overscroll_indicator._GlowingOverscrollIndicatorPainter.__proto__),
    leadingController: dart.finalFieldType(dart.nullable(overscroll_indicator._GlowController)),
    trailingController: dart.finalFieldType(dart.nullable(overscroll_indicator._GlowController)),
    axisDirection: dart.finalFieldType(basic_types.AxisDirection)
  }));
  dart.defineLazy(overscroll_indicator._GlowingOverscrollIndicatorPainter, {
    /*overscroll_indicator._GlowingOverscrollIndicatorPainter.piOver2*/get piOver2() {
      return 1.5707963267948966;
    }
  }, false);
  const Notification_ViewportNotificationMixin$36 = class Notification_ViewportNotificationMixin extends notification_listener.Notification {};
  (Notification_ViewportNotificationMixin$36.new = function() {
    scroll_notification.ViewportNotificationMixin[dart.mixinNew].call(this);
    Notification_ViewportNotificationMixin$36.__proto__.new.call(this);
  }).prototype = Notification_ViewportNotificationMixin$36.prototype;
  dart.applyMixin(Notification_ViewportNotificationMixin$36, scroll_notification.ViewportNotificationMixin);
  overscroll_indicator.OverscrollIndicatorNotification = class OverscrollIndicatorNotification extends Notification_ViewportNotificationMixin$36 {
    get leading() {
      return this[S.leading];
    }
    set leading(value) {
      super.leading = value;
    }
    get paintOffset() {
      return this[S.paintOffset];
    }
    set paintOffset(value) {
      this[S.paintOffset] = value;
    }
    disallowGlow() {
      this[S._accepted] = false;
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[83], 679, 42, "description");
      super.debugFillDescription(description);
      description[S$.$add]("side: " + (dart.test(this.leading) ? "leading edge" : "trailing edge"));
    }
  };
  (overscroll_indicator.OverscrollIndicatorNotification.new = function(opts) {
    let leading = opts && 'leading' in opts ? opts.leading : null;
    if (leading == null) dart.nullFailed(I[83], 652, 19, "leading");
    this[S.paintOffset] = 0.0;
    this[S._accepted] = true;
    this[S.leading] = leading;
    overscroll_indicator.OverscrollIndicatorNotification.__proto__.new.call(this);
    ;
  }).prototype = overscroll_indicator.OverscrollIndicatorNotification.prototype;
  dart.addTypeTests(overscroll_indicator.OverscrollIndicatorNotification);
  dart.addTypeCaches(overscroll_indicator.OverscrollIndicatorNotification);
  dart.setMethodSignature(overscroll_indicator.OverscrollIndicatorNotification, () => ({
    __proto__: dart.getMethods(overscroll_indicator.OverscrollIndicatorNotification.__proto__),
    disallowGlow: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(overscroll_indicator.OverscrollIndicatorNotification, I[84]);
  dart.setFieldSignature(overscroll_indicator.OverscrollIndicatorNotification, () => ({
    __proto__: dart.getFields(overscroll_indicator.OverscrollIndicatorNotification.__proto__),
    leading: dart.finalFieldType(core.bool),
    paintOffset: dart.fieldType(core.double),
    [S._accepted]: dart.fieldType(core.bool)
  }));
  scroll_physics.ScrollPhysics = class ScrollPhysics extends core.Object {
    get parent() {
      return this[S.parent$1];
    }
    set parent(value) {
      super.parent = value;
    }
    buildParent(ancestor) {
      let t65, t65$;
      t65$ = (t65 = this.parent, t65 == null ? null : t65.applyTo(ancestor));
      return t65$ == null ? ancestor : t65$;
    }
    applyTo(ancestor) {
      return new scroll_physics.ScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    applyPhysicsToUserOffset(position, offset) {
      if (position == null) dart.nullFailed(I[85], 160, 49, "position");
      if (offset == null) dart.nullFailed(I[85], 160, 66, "offset");
      if (this.parent == null) return offset;
      return dart.nullCheck(this.parent).applyPhysicsToUserOffset(position, offset);
    }
    shouldAcceptUserOffset(position) {
      if (position == null) dart.nullFailed(I[85], 175, 45, "position");
      if (this.parent == null) return position.pixels !== 0.0 || position.minScrollExtent != position.maxScrollExtent;
      return dart.nullCheck(this.parent).shouldAcceptUserOffset(position);
    }
    recommendDeferredLoading(velocity, metrics, context) {
      if (velocity == null) dart.nullFailed(I[85], 222, 40, "velocity");
      if (metrics == null) dart.nullFailed(I[85], 222, 64, "metrics");
      if (context == null) dart.nullFailed(I[85], 222, 86, "context");
      if (!(velocity != null)) dart.assertFailed(null, I[85], 223, 12, "velocity != null");
      if (!(metrics != null)) dart.assertFailed(null, I[85], 224, 12, "metrics != null");
      if (!(context != null)) dart.assertFailed(null, I[85], 225, 12, "context != null");
      if (this.parent == null) {
        let maxPhysicalPixels = dart.nullCheck(binding$5.WidgetsBinding.instance).window.physicalSize.longestSide;
        return velocity[S$.$abs]() > dart.notNull(maxPhysicalPixels);
      }
      return dart.nullCheck(this.parent).recommendDeferredLoading(velocity, metrics, context);
    }
    applyBoundaryConditions(position, value) {
      if (position == null) dart.nullFailed(I[85], 267, 48, "position");
      if (value == null) dart.nullFailed(I[85], 267, 65, "value");
      if (this.parent == null) return 0.0;
      return dart.nullCheck(this.parent).applyBoundaryConditions(position, value);
    }
    adjustPositionForNewDimensions(opts) {
      let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
      if (oldPosition == null) dart.nullFailed(I[85], 318, 28, "oldPosition");
      let newPosition = opts && 'newPosition' in opts ? opts.newPosition : null;
      if (newPosition == null) dart.nullFailed(I[85], 319, 28, "newPosition");
      let isScrolling = opts && 'isScrolling' in opts ? opts.isScrolling : null;
      if (isScrolling == null) dart.nullFailed(I[85], 320, 19, "isScrolling");
      let velocity = opts && 'velocity' in opts ? opts.velocity : null;
      if (velocity == null) dart.nullFailed(I[85], 321, 21, "velocity");
      if (this.parent == null) return newPosition.pixels;
      return dart.nullCheck(this.parent).adjustPositionForNewDimensions({oldPosition: oldPosition, newPosition: newPosition, isScrolling: isScrolling, velocity: velocity});
    }
    createBallisticSimulation(position, velocity) {
      if (position == null) dart.nullFailed(I[85], 340, 55, "position");
      if (velocity == null) dart.nullFailed(I[85], 340, 72, "velocity");
      if (this.parent == null) return null;
      return dart.nullCheck(this.parent).createBallisticSimulation(position, velocity);
    }
    get spring() {
      let t65, t65$;
      t65$ = (t65 = this.parent, t65 == null ? null : t65.spring);
      return t65$ == null ? scroll_physics.ScrollPhysics._kDefaultSpring : t65$;
    }
    get tolerance() {
      let t65, t65$;
      t65$ = (t65 = this.parent, t65 == null ? null : t65.tolerance);
      return t65$ == null ? scroll_physics.ScrollPhysics._kDefaultTolerance : t65$;
    }
    get minFlingDistance() {
      let t65, t65$;
      t65$ = (t65 = this.parent, t65 == null ? null : t65.minFlingDistance);
      return t65$ == null ? 18 : t65$;
    }
    get minFlingVelocity() {
      let t65, t65$;
      t65$ = (t65 = this.parent, t65 == null ? null : t65.minFlingVelocity);
      return t65$ == null ? 50 : t65$;
    }
    get maxFlingVelocity() {
      let t65, t65$;
      t65$ = (t65 = this.parent, t65 == null ? null : t65.maxFlingVelocity);
      return t65$ == null ? 8000 : t65$;
    }
    carriedMomentum(existingVelocity) {
      if (existingVelocity == null) dart.nullFailed(I[85], 399, 33, "existingVelocity");
      if (this.parent == null) return 0.0;
      return dart.nullCheck(this.parent).carriedMomentum(existingVelocity);
    }
    get dragStartDistanceMotionThreshold() {
      let t65;
      t65 = this.parent;
      return t65 == null ? null : t65.dragStartDistanceMotionThreshold;
    }
    get allowImplicitScrolling() {
      return true;
    }
    toString() {
      if (this.parent == null) return object.objectRuntimeType(this, "ScrollPhsyics");
      return dart.str(object.objectRuntimeType(this, "ScrollPhysics")) + " -> " + dart.str(this.parent);
    }
  };
  (scroll_physics.ScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    this[S.parent$1] = parent;
    ;
  }).prototype = scroll_physics.ScrollPhysics.prototype;
  dart.addTypeTests(scroll_physics.ScrollPhysics);
  dart.addTypeCaches(scroll_physics.ScrollPhysics);
  dart.setMethodSignature(scroll_physics.ScrollPhysics, () => ({
    __proto__: dart.getMethods(scroll_physics.ScrollPhysics.__proto__),
    buildParent: dart.fnType(dart.nullable(scroll_physics.ScrollPhysics), [dart.nullable(scroll_physics.ScrollPhysics)]),
    applyTo: dart.fnType(scroll_physics.ScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)]),
    applyPhysicsToUserOffset: dart.fnType(core.double, [scroll_metrics.ScrollMetrics, core.double]),
    shouldAcceptUserOffset: dart.fnType(core.bool, [scroll_metrics.ScrollMetrics]),
    recommendDeferredLoading: dart.fnType(core.bool, [core.double, scroll_metrics.ScrollMetrics, framework.BuildContext]),
    applyBoundaryConditions: dart.fnType(core.double, [scroll_metrics.ScrollMetrics, core.double]),
    adjustPositionForNewDimensions: dart.fnType(core.double, [], {}, {isScrolling: core.bool, newPosition: scroll_metrics.ScrollMetrics, oldPosition: scroll_metrics.ScrollMetrics, velocity: core.double}),
    createBallisticSimulation: dart.fnType(dart.nullable(simulation.Simulation), [scroll_metrics.ScrollMetrics, core.double]),
    carriedMomentum: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(scroll_physics.ScrollPhysics, () => ({
    __proto__: dart.getGetters(scroll_physics.ScrollPhysics.__proto__),
    spring: spring_simulation.SpringDescription,
    tolerance: tolerance.Tolerance,
    minFlingDistance: core.double,
    minFlingVelocity: core.double,
    maxFlingVelocity: core.double,
    dragStartDistanceMotionThreshold: dart.nullable(core.double),
    allowImplicitScrolling: core.bool
  }));
  dart.setLibraryUri(scroll_physics.ScrollPhysics, I[86]);
  dart.setFieldSignature(scroll_physics.ScrollPhysics, () => ({
    __proto__: dart.getFields(scroll_physics.ScrollPhysics.__proto__),
    parent: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics))
  }));
  dart.defineExtensionMethods(scroll_physics.ScrollPhysics, ['toString']);
  dart.defineLazy(scroll_physics.ScrollPhysics, {
    /*scroll_physics.ScrollPhysics._kDefaultSpring*/get _kDefaultSpring() {
      return new spring_simulation.SpringDescription.withDampingRatio({mass: 0.5, stiffness: 100.0, ratio: 1.1});
    },
    /*scroll_physics.ScrollPhysics._kDefaultTolerance*/get _kDefaultTolerance() {
      return new tolerance.Tolerance.new({velocity: 1.0 / (0.05 * dart.notNull(dart.nullCheck(binding$5.WidgetsBinding.instance).window.devicePixelRatio)), distance: 1.0 / dart.notNull(dart.nullCheck(binding$5.WidgetsBinding.instance).window.devicePixelRatio)});
    }
  }, false);
  scroll_physics.RangeMaintainingScrollPhysics = class RangeMaintainingScrollPhysics extends scroll_physics.ScrollPhysics {
    applyTo(ancestor) {
      return new scroll_physics.RangeMaintainingScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    adjustPositionForNewDimensions(opts) {
      let oldPosition = opts && 'oldPosition' in opts ? opts.oldPosition : null;
      if (oldPosition == null) dart.nullFailed(I[85], 491, 28, "oldPosition");
      let newPosition = opts && 'newPosition' in opts ? opts.newPosition : null;
      if (newPosition == null) dart.nullFailed(I[85], 492, 28, "newPosition");
      let isScrolling = opts && 'isScrolling' in opts ? opts.isScrolling : null;
      if (isScrolling == null) dart.nullFailed(I[85], 493, 19, "isScrolling");
      let velocity = opts && 'velocity' in opts ? opts.velocity : null;
      if (velocity == null) dart.nullFailed(I[85], 494, 21, "velocity");
      let maintainOverscroll = true;
      let enforceBoundary = true;
      if (velocity !== 0.0) {
        maintainOverscroll = false;
        enforceBoundary = false;
      }
      if (oldPosition.minScrollExtent == newPosition.minScrollExtent && oldPosition.maxScrollExtent == newPosition.maxScrollExtent) {
        maintainOverscroll = false;
      }
      if (oldPosition.pixels != newPosition.pixels) {
        maintainOverscroll = false;
        if (oldPosition.minScrollExtent[S.$isFinite] && oldPosition.maxScrollExtent[S.$isFinite] && newPosition.minScrollExtent[S.$isFinite] && newPosition.maxScrollExtent[S.$isFinite]) {
          enforceBoundary = false;
        }
      }
      if (dart.notNull(oldPosition.pixels) < dart.notNull(oldPosition.minScrollExtent) || dart.notNull(oldPosition.pixels) > dart.notNull(oldPosition.maxScrollExtent)) {
        enforceBoundary = false;
      }
      if (maintainOverscroll) {
        if (dart.notNull(oldPosition.pixels) < dart.notNull(oldPosition.minScrollExtent)) {
          let oldDelta = dart.notNull(oldPosition.minScrollExtent) - dart.notNull(oldPosition.pixels);
          return dart.notNull(newPosition.minScrollExtent) - oldDelta;
        }
        if (dart.notNull(oldPosition.pixels) > dart.notNull(oldPosition.maxScrollExtent)) {
          let oldDelta = dart.notNull(oldPosition.pixels) - dart.notNull(oldPosition.maxScrollExtent);
          return dart.notNull(newPosition.maxScrollExtent) + oldDelta;
        }
      }
      let result = super.adjustPositionForNewDimensions({oldPosition: oldPosition, newPosition: newPosition, isScrolling: isScrolling, velocity: velocity});
      if (enforceBoundary) {
        result = result[S$0.$clamp](newPosition.minScrollExtent, newPosition.maxScrollExtent);
      }
      return result;
    }
  };
  (scroll_physics.RangeMaintainingScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    scroll_physics.RangeMaintainingScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = scroll_physics.RangeMaintainingScrollPhysics.prototype;
  dart.addTypeTests(scroll_physics.RangeMaintainingScrollPhysics);
  dart.addTypeCaches(scroll_physics.RangeMaintainingScrollPhysics);
  dart.setMethodSignature(scroll_physics.RangeMaintainingScrollPhysics, () => ({
    __proto__: dart.getMethods(scroll_physics.RangeMaintainingScrollPhysics.__proto__),
    applyTo: dart.fnType(scroll_physics.RangeMaintainingScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)])
  }));
  dart.setLibraryUri(scroll_physics.RangeMaintainingScrollPhysics, I[86]);
  scroll_physics.BouncingScrollPhysics = class BouncingScrollPhysics extends scroll_physics.ScrollPhysics {
    applyTo(ancestor) {
      return new scroll_physics.BouncingScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    frictionFactor(overscrollFraction) {
      if (overscrollFraction == null) dart.nullFailed(I[85], 595, 32, "overscrollFraction");
      return 0.52 * math.pow(1 - dart.notNull(overscrollFraction), 2);
    }
    applyPhysicsToUserOffset(position, offset) {
      if (position == null) dart.nullFailed(I[85], 598, 49, "position");
      if (offset == null) dart.nullFailed(I[85], 598, 66, "offset");
      if (!(offset !== 0.0)) dart.assertFailed(null, I[85], 599, 12, "offset != 0.0");
      if (!(dart.notNull(position.minScrollExtent) <= dart.notNull(position.maxScrollExtent))) dart.assertFailed(null, I[85], 600, 12, "position.minScrollExtent <= position.maxScrollExtent");
      if (!dart.test(position.outOfRange)) return offset;
      let overscrollPastStart = math.max(core.double, dart.notNull(position.minScrollExtent) - dart.notNull(position.pixels), 0.0);
      let overscrollPastEnd = math.max(core.double, dart.notNull(position.pixels) - dart.notNull(position.maxScrollExtent), 0.0);
      let overscrollPast = math.max(core.double, overscrollPastStart, overscrollPastEnd);
      let easing = overscrollPastStart > 0.0 && dart.notNull(offset) < 0.0 || overscrollPastEnd > 0.0 && dart.notNull(offset) > 0.0;
      let friction = easing ? this.frictionFactor((overscrollPast - offset[S$.$abs]()) / dart.notNull(position.viewportDimension)) : this.frictionFactor(overscrollPast / dart.notNull(position.viewportDimension));
      let direction = offset[S$.$sign];
      return direction * dart.notNull(scroll_physics.BouncingScrollPhysics._applyFriction(overscrollPast, offset[S$.$abs](), friction));
    }
    static _applyFriction(extentOutside, absDelta, gamma) {
      if (extentOutside == null) dart.nullFailed(I[85], 620, 39, "extentOutside");
      if (absDelta == null) dart.nullFailed(I[85], 620, 61, "absDelta");
      if (gamma == null) dart.nullFailed(I[85], 620, 78, "gamma");
      if (!(dart.notNull(absDelta) > 0)) dart.assertFailed(null, I[85], 621, 12, "absDelta > 0");
      let total = 0.0;
      if (dart.notNull(extentOutside) > 0) {
        let deltaToLimit = dart.notNull(extentOutside) / dart.notNull(gamma);
        if (dart.notNull(absDelta) < deltaToLimit) return dart.notNull(absDelta) * dart.notNull(gamma);
        total = total + dart.notNull(extentOutside);
        absDelta = dart.notNull(absDelta) - deltaToLimit;
      }
      return total + dart.notNull(absDelta);
    }
    applyBoundaryConditions(position, value) {
      if (position == null) dart.nullFailed(I[85], 634, 48, "position");
      if (value == null) dart.nullFailed(I[85], 634, 65, "value");
      return 0.0;
    }
    createBallisticSimulation(position, velocity) {
      if (position == null) dart.nullFailed(I[85], 637, 55, "position");
      if (velocity == null) dart.nullFailed(I[85], 637, 72, "velocity");
      let tolerance = this.tolerance;
      if (velocity[S$.$abs]() >= dart.notNull(tolerance.velocity) || dart.test(position.outOfRange)) {
        return new scroll_simulation.BouncingScrollSimulation.new({spring: this.spring, position: position.pixels, velocity: velocity, leadingExtent: position.minScrollExtent, trailingExtent: position.maxScrollExtent, tolerance: tolerance});
      }
      return null;
    }
    get minFlingVelocity() {
      return 50 * 2.0;
    }
    carriedMomentum(existingVelocity) {
      if (existingVelocity == null) dart.nullFailed(I[85], 672, 33, "existingVelocity");
      return existingVelocity[S$.$sign] * math.min(core.num, 0.000816 * math.pow(existingVelocity[S$.$abs](), 1.967)[S.$toDouble](), 40000.0);
    }
    get dragStartDistanceMotionThreshold() {
      return 3.5;
    }
  };
  (scroll_physics.BouncingScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    scroll_physics.BouncingScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = scroll_physics.BouncingScrollPhysics.prototype;
  dart.addTypeTests(scroll_physics.BouncingScrollPhysics);
  dart.addTypeCaches(scroll_physics.BouncingScrollPhysics);
  dart.setMethodSignature(scroll_physics.BouncingScrollPhysics, () => ({
    __proto__: dart.getMethods(scroll_physics.BouncingScrollPhysics.__proto__),
    applyTo: dart.fnType(scroll_physics.BouncingScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)]),
    frictionFactor: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(scroll_physics.BouncingScrollPhysics, () => ({
    __proto__: dart.getGetters(scroll_physics.BouncingScrollPhysics.__proto__),
    dragStartDistanceMotionThreshold: core.double
  }));
  dart.setLibraryUri(scroll_physics.BouncingScrollPhysics, I[86]);
  scroll_physics.ClampingScrollPhysics = class ClampingScrollPhysics extends scroll_physics.ScrollPhysics {
    applyTo(ancestor) {
      return new scroll_physics.ClampingScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    applyBoundaryConditions(position, value) {
      if (position == null) dart.nullFailed(I[85], 710, 48, "position");
      if (value == null) dart.nullFailed(I[85], 710, 65, "value");
      if (!dart.test(dart.fn(() => {
        if (value == position.pixels) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this[S$.$runtimeType]) + ".applyBoundaryConditions() was called redundantly."), new assertions.ErrorDescription.new("The proposed new position, " + dart.str(value) + ", is exactly equal to the current position of the " + "given " + dart.str(dart.runtimeType(position)) + ", " + dart.str(position.pixels) + ".\n" + "The applyBoundaryConditions method should only be called when the value is " + "going to actually change the pixels, otherwise it is redundant."), new (T$.DiagnosticsPropertyOfScrollPhysics()).new("The physics object in question was", this, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty}), new (T$.DiagnosticsPropertyOfScrollMetrics()).new("The position object in question was", position, {style: diagnostics$.DiagnosticsTreeStyle.errorProperty})])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[85], 711, 12, "() {\r\n      if (value == position.pixels) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('$runtimeType.applyBoundaryConditions() was called redundantly.'),\r\n          ErrorDescription(\r\n            'The proposed new position, $value, is exactly equal to the current position of the '\r\n            'given ${position.runtimeType}, ${position.pixels}.\\n'\r\n            'The applyBoundaryConditions method should only be called when the value is '\r\n            'going to actually change the pixels, otherwise it is redundant.',\r\n          ),\r\n          DiagnosticsProperty<ScrollPhysics>('The physics object in question was', this, style: DiagnosticsTreeStyle.errorProperty),\r\n          DiagnosticsProperty<ScrollMetrics>('The position object in question was', position, style: DiagnosticsTreeStyle.errorProperty),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      if (dart.notNull(value) < dart.notNull(position.pixels) && dart.notNull(position.pixels) <= dart.notNull(position.minScrollExtent)) return dart.notNull(value) - dart.notNull(position.pixels);
      if (dart.notNull(position.maxScrollExtent) <= dart.notNull(position.pixels) && dart.notNull(position.pixels) < dart.notNull(value)) return dart.notNull(value) - dart.notNull(position.pixels);
      if (dart.notNull(value) < dart.notNull(position.minScrollExtent) && dart.notNull(position.minScrollExtent) < dart.notNull(position.pixels)) return dart.notNull(value) - dart.notNull(position.minScrollExtent);
      if (dart.notNull(position.pixels) < dart.notNull(position.maxScrollExtent) && dart.notNull(position.maxScrollExtent) < dart.notNull(value)) return dart.notNull(value) - dart.notNull(position.maxScrollExtent);
      return 0.0;
    }
    createBallisticSimulation(position, velocity) {
      if (position == null) dart.nullFailed(I[85], 739, 55, "position");
      if (velocity == null) dart.nullFailed(I[85], 739, 72, "velocity");
      let tolerance = this.tolerance;
      if (dart.test(position.outOfRange)) {
        let end = null;
        if (dart.notNull(position.pixels) > dart.notNull(position.maxScrollExtent)) end = position.maxScrollExtent;
        if (dart.notNull(position.pixels) < dart.notNull(position.minScrollExtent)) end = position.minScrollExtent;
        if (!(end != null)) dart.assertFailed(null, I[85], 747, 14, "end != null");
        return new spring_simulation.ScrollSpringSimulation.new(this.spring, position.pixels, dart.nullCheck(end), math.min(core.double, 0.0, velocity), {tolerance: tolerance});
      }
      if (velocity[S$.$abs]() < dart.notNull(tolerance.velocity)) return null;
      if (dart.notNull(velocity) > 0.0 && dart.notNull(position.pixels) >= dart.notNull(position.maxScrollExtent)) return null;
      if (dart.notNull(velocity) < 0.0 && dart.notNull(position.pixels) <= dart.notNull(position.minScrollExtent)) return null;
      return new scroll_simulation.ClampingScrollSimulation.new({position: position.pixels, velocity: velocity, tolerance: tolerance});
    }
  };
  (scroll_physics.ClampingScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    scroll_physics.ClampingScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = scroll_physics.ClampingScrollPhysics.prototype;
  dart.addTypeTests(scroll_physics.ClampingScrollPhysics);
  dart.addTypeCaches(scroll_physics.ClampingScrollPhysics);
  dart.setMethodSignature(scroll_physics.ClampingScrollPhysics, () => ({
    __proto__: dart.getMethods(scroll_physics.ClampingScrollPhysics.__proto__),
    applyTo: dart.fnType(scroll_physics.ClampingScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)])
  }));
  dart.setLibraryUri(scroll_physics.ClampingScrollPhysics, I[86]);
  scroll_physics.AlwaysScrollableScrollPhysics = class AlwaysScrollableScrollPhysics extends scroll_physics.ScrollPhysics {
    applyTo(ancestor) {
      return new scroll_physics.AlwaysScrollableScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    shouldAcceptUserOffset(position) {
      if (position == null) dart.nullFailed(I[85], 798, 45, "position");
      return true;
    }
  };
  (scroll_physics.AlwaysScrollableScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    scroll_physics.AlwaysScrollableScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = scroll_physics.AlwaysScrollableScrollPhysics.prototype;
  dart.addTypeTests(scroll_physics.AlwaysScrollableScrollPhysics);
  dart.addTypeCaches(scroll_physics.AlwaysScrollableScrollPhysics);
  dart.setMethodSignature(scroll_physics.AlwaysScrollableScrollPhysics, () => ({
    __proto__: dart.getMethods(scroll_physics.AlwaysScrollableScrollPhysics.__proto__),
    applyTo: dart.fnType(scroll_physics.AlwaysScrollableScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)])
  }));
  dart.setLibraryUri(scroll_physics.AlwaysScrollableScrollPhysics, I[86]);
  scroll_physics.NeverScrollableScrollPhysics = class NeverScrollableScrollPhysics extends scroll_physics.ScrollPhysics {
    applyTo(ancestor) {
      return new scroll_physics.NeverScrollableScrollPhysics.new({parent: this.buildParent(ancestor)});
    }
    shouldAcceptUserOffset(position) {
      if (position == null) dart.nullFailed(I[85], 821, 45, "position");
      return false;
    }
    get allowImplicitScrolling() {
      return false;
    }
  };
  (scroll_physics.NeverScrollableScrollPhysics.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    scroll_physics.NeverScrollableScrollPhysics.__proto__.new.call(this, {parent: parent});
    ;
  }).prototype = scroll_physics.NeverScrollableScrollPhysics.prototype;
  dart.addTypeTests(scroll_physics.NeverScrollableScrollPhysics);
  dart.addTypeCaches(scroll_physics.NeverScrollableScrollPhysics);
  dart.setMethodSignature(scroll_physics.NeverScrollableScrollPhysics, () => ({
    __proto__: dart.getMethods(scroll_physics.NeverScrollableScrollPhysics.__proto__),
    applyTo: dart.fnType(scroll_physics.NeverScrollableScrollPhysics, [dart.nullable(scroll_physics.ScrollPhysics)])
  }));
  dart.setLibraryUri(scroll_physics.NeverScrollableScrollPhysics, I[86]);
  ticker_provider.TickerMode = class TickerMode extends framework.StatelessWidget {
    get enabled() {
      return this[S.enabled$1];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get child() {
      return this[S.child$30];
    }
    set child(value) {
      super.child = value;
    }
    static of(context) {
      let t65, t65$;
      if (context == null) dart.nullFailed(I[32], 60, 31, "context");
      let widget = context.dependOnInheritedWidgetOfExactType(ticker_provider._EffectiveTickerMode);
      t65$ = (t65 = widget, t65 == null ? null : t65.enabled);
      return t65$ == null ? true : t65$;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[32], 66, 29, "context");
      return new ticker_provider._EffectiveTickerMode.new({enabled: dart.test(this.enabled) && dart.test(ticker_provider.TickerMode.of(context)), child: this.child, $creationLocationd_0dea112b090073317d4: C[788] || CT.C788});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[32], 74, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.FlagProperty.new("requested mode", {value: this.enabled, ifTrue: "enabled", ifFalse: "disabled", showName: true}));
    }
  };
  (ticker_provider.TickerMode.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    if (enabled == null) dart.nullFailed(I[32], 24, 19, "enabled");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[32], 25, 19, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.enabled$1] = enabled;
    this[S.child$30] = child;
    if (!(enabled != null)) dart.assertFailed(null, I[32], 26, 15, "enabled != null");
    ticker_provider.TickerMode.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = ticker_provider.TickerMode.prototype;
  dart.addTypeTests(ticker_provider.TickerMode);
  dart.addTypeCaches(ticker_provider.TickerMode);
  dart.setMethodSignature(ticker_provider.TickerMode, () => ({
    __proto__: dart.getMethods(ticker_provider.TickerMode.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(ticker_provider.TickerMode, I[33]);
  dart.setFieldSignature(ticker_provider.TickerMode, () => ({
    __proto__: dart.getFields(ticker_provider.TickerMode.__proto__),
    enabled: dart.finalFieldType(core.bool),
    child: dart.finalFieldType(framework.Widget)
  }));
  ticker_provider._EffectiveTickerMode = class _EffectiveTickerMode extends framework.InheritedWidget {
    get enabled() {
      return this[S.enabled$2];
    }
    set enabled(value) {
      super.enabled = value;
    }
    updateShouldNotify(oldWidget) {
      ticker_provider._EffectiveTickerMode.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[32], 91, 48, "oldWidget");
      return this.enabled != oldWidget.enabled;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[32], 94, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics$.FlagProperty.new("effective mode", {value: this.enabled, ifTrue: "enabled", ifFalse: "disabled", showName: true}));
    }
  };
  (ticker_provider._EffectiveTickerMode.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    if (enabled == null) dart.nullFailed(I[32], 83, 19, "enabled");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[32], 84, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.enabled$2] = enabled;
    if (!(enabled != null)) dart.assertFailed(null, I[32], 85, 15, "enabled != null");
    ticker_provider._EffectiveTickerMode.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = ticker_provider._EffectiveTickerMode.prototype;
  dart.addTypeTests(ticker_provider._EffectiveTickerMode);
  dart.addTypeCaches(ticker_provider._EffectiveTickerMode);
  dart.setMethodSignature(ticker_provider._EffectiveTickerMode, () => ({
    __proto__: dart.getMethods(ticker_provider._EffectiveTickerMode.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(ticker_provider._EffectiveTickerMode, I[33]);
  dart.setFieldSignature(ticker_provider._EffectiveTickerMode, () => ({
    __proto__: dart.getFields(ticker_provider._EffectiveTickerMode.__proto__),
    enabled: dart.finalFieldType(core.bool)
  }));
  ticker_provider._WidgetTicker = class _WidgetTicker extends ticker.Ticker {
    dispose() {
      this[S._creator][S$0._removeTicker](this);
      super.dispose();
    }
  };
  (ticker_provider._WidgetTicker.new = function(onTick, _creator, opts) {
    if (onTick == null) dart.nullFailed(I[32], 271, 32, "onTick");
    if (_creator == null) dart.nullFailed(I[32], 271, 45, "_creator");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[S._creator] = _creator;
    ticker_provider._WidgetTicker.__proto__.new.call(this, onTick, {debugLabel: debugLabel});
    ;
  }).prototype = ticker_provider._WidgetTicker.prototype;
  dart.addTypeTests(ticker_provider._WidgetTicker);
  dart.addTypeCaches(ticker_provider._WidgetTicker);
  dart.setLibraryUri(ticker_provider._WidgetTicker, I[33]);
  dart.setFieldSignature(ticker_provider._WidgetTicker, () => ({
    __proto__: dart.getFields(ticker_provider._WidgetTicker.__proto__),
    [S._creator]: dart.finalFieldType(ticker_provider.TickerProviderStateMixin$(framework.StatefulWidget))
  }));
  scroll_context.ScrollContext = class ScrollContext extends core.Object {};
  (scroll_context.ScrollContext.new = function() {
    ;
  }).prototype = scroll_context.ScrollContext.prototype;
  dart.addTypeTests(scroll_context.ScrollContext);
  dart.addTypeCaches(scroll_context.ScrollContext);
  dart.setLibraryUri(scroll_context.ScrollContext, I[87]);
  scroll_controller.ScrollController = class ScrollController extends change_notifier.ChangeNotifier {
    get keepScrollOffset() {
      return this[S.keepScrollOffset$1];
    }
    set keepScrollOffset(value) {
      super.keepScrollOffset = value;
    }
    get debugLabel() {
      return this[S.debugLabel$2];
    }
    set debugLabel(value) {
      super.debugLabel = value;
    }
    get initialScrollOffset() {
      return this[S._initialScrollOffset];
    }
    get positions() {
      return this[S._positions];
    }
    get hasClients() {
      return this[S._positions][S$.$isNotEmpty];
    }
    get position() {
      if (!dart.test(this[S._positions][S$.$isNotEmpty])) dart.assertFailed("ScrollController not attached to any scroll views.", I[88], 108, 12, "_positions.isNotEmpty");
      if (!(this[S._positions][S$.$length] === 1)) dart.assertFailed("ScrollController attached to multiple scroll views.", I[88], 109, 12, "_positions.length == 1");
      return this[S._positions][S$.$single];
    }
    get offset() {
      return this.position.pixels;
    }
    animateTo(offset, opts) {
      if (offset == null) dart.nullFailed(I[88], 148, 12, "offset");
      let duration = opts && 'duration' in opts ? opts.duration : null;
      if (duration == null) dart.nullFailed(I[88], 149, 23, "duration");
      let curve = opts && 'curve' in opts ? opts.curve : null;
      if (curve == null) dart.nullFailed(I[88], 150, 20, "curve");
      return async.async(dart.void, (function* animateTo() {
        if (!dart.test(this[S._positions][S$.$isNotEmpty])) dart.assertFailed("ScrollController not attached to any scroll views.", I[88], 152, 12, "_positions.isNotEmpty");
        yield async.Future.wait(dart.void, (() => {
          let t65 = T$.JSArrayOfFutureOfvoid().of([]);
          for (let i = 0; i < dart.notNull(this[S._positions][S$.$length]); i = i + 1)
            t65[S$.$add](this[S._positions][S$.$_get](i).animateTo(offset, {duration: duration, curve: curve}));
          return t65;
        })());
      }).bind(this));
    }
    jumpTo(value) {
      if (value == null) dart.nullFailed(I[88], 170, 22, "value");
      if (!dart.test(this[S._positions][S$.$isNotEmpty])) dart.assertFailed("ScrollController not attached to any scroll views.", I[88], 171, 12, "_positions.isNotEmpty");
      for (let position of T$.ListOfScrollPosition().from(this[S._positions]))
        position.jumpTo(value);
    }
    attach(position) {
      if (position == null) dart.nullFailed(I[88], 180, 30, "position");
      if (!!dart.test(this[S._positions][S$.$contains](position))) dart.assertFailed(null, I[88], 181, 12, "!_positions.contains(position)");
      this[S._positions][S$.$add](position);
      position.addListener(dart.bind(this, 'notifyListeners'));
    }
    detach(position) {
      if (position == null) dart.nullFailed(I[88], 190, 30, "position");
      if (!dart.test(this[S._positions][S$.$contains](position))) dart.assertFailed(null, I[88], 191, 12, "_positions.contains(position)");
      position.removeListener(dart.bind(this, 'notifyListeners'));
      this[S._positions][S$.$remove](position);
    }
    dispose() {
      for (let position of this[S._positions])
        position.removeListener(dart.bind(this, 'notifyListeners'));
      super.dispose();
    }
    createScrollPosition(physics, context, oldPosition) {
      if (physics == null) dart.nullFailed(I[88], 230, 19, "physics");
      if (context == null) dart.nullFailed(I[88], 231, 19, "context");
      return new scroll_position_with_single_context.ScrollPositionWithSingleContext.new({physics: physics, context: context, initialPixels: this.initialScrollOffset, keepScrollOffset: this.keepScrollOffset, oldPosition: oldPosition, debugLabel: this.debugLabel});
    }
    toString() {
      let description = T$.JSArrayOfString().of([]);
      this.debugFillDescription(description);
      return dart.str(diagnostics$.describeIdentity(this)) + "(" + dart.str(description[S$.$join](", ")) + ")";
    }
    debugFillDescription(description) {
      if (description == null) dart.nullFailed(I[88], 261, 42, "description");
      if (this.debugLabel != null) description[S$.$add](dart.nullCheck(this.debugLabel));
      if (this.initialScrollOffset !== 0.0) description[S$.$add]("initialScrollOffset: " + this.initialScrollOffset[S$0.$toStringAsFixed](1) + ", ");
      if (dart.test(this[S._positions][S$.$isEmpty])) {
        description[S$.$add]("no clients");
      } else if (this[S._positions][S$.$length] === 1) {
        description[S$.$add]("one client, offset " + this.offset[S$0.$toStringAsFixed](1));
      } else {
        description[S$.$add](dart.str(this[S._positions][S$.$length]) + " clients");
      }
    }
  };
  (scroll_controller.ScrollController.new = function(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : 0;
    if (initialScrollOffset == null) dart.nullFailed(I[88], 49, 12, "initialScrollOffset");
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    if (keepScrollOffset == null) dart.nullFailed(I[88], 50, 10, "keepScrollOffset");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[S._positions] = T$.JSArrayOfScrollPosition().of([]);
    this[S.keepScrollOffset$1] = keepScrollOffset;
    this[S.debugLabel$2] = debugLabel;
    if (!(initialScrollOffset != null)) dart.assertFailed(null, I[88], 52, 15, "initialScrollOffset != null");
    if (!(keepScrollOffset != null)) dart.assertFailed(null, I[88], 53, 15, "keepScrollOffset != null");
    this[S._initialScrollOffset] = initialScrollOffset;
    scroll_controller.ScrollController.__proto__.new.call(this);
    ;
  }).prototype = scroll_controller.ScrollController.prototype;
  dart.addTypeTests(scroll_controller.ScrollController);
  dart.addTypeCaches(scroll_controller.ScrollController);
  dart.setMethodSignature(scroll_controller.ScrollController, () => ({
    __proto__: dart.getMethods(scroll_controller.ScrollController.__proto__),
    animateTo: dart.fnType(async.Future$(dart.void), [core.double], {}, {curve: curves.Curve, duration: core.Duration}),
    jumpTo: dart.fnType(dart.void, [core.double]),
    attach: dart.fnType(dart.void, [scroll_position.ScrollPosition]),
    detach: dart.fnType(dart.void, [scroll_position.ScrollPosition]),
    createScrollPosition: dart.fnType(scroll_position.ScrollPosition, [scroll_physics.ScrollPhysics, scroll_context.ScrollContext, dart.nullable(scroll_position.ScrollPosition)]),
    debugFillDescription: dart.fnType(dart.void, [core.List$(core.String)])
  }));
  dart.setGetterSignature(scroll_controller.ScrollController, () => ({
    __proto__: dart.getGetters(scroll_controller.ScrollController.__proto__),
    initialScrollOffset: core.double,
    positions: core.Iterable$(scroll_position.ScrollPosition),
    hasClients: core.bool,
    position: scroll_position.ScrollPosition,
    offset: core.double
  }));
  dart.setLibraryUri(scroll_controller.ScrollController, I[89]);
  dart.setFieldSignature(scroll_controller.ScrollController, () => ({
    __proto__: dart.getFields(scroll_controller.ScrollController.__proto__),
    [S._initialScrollOffset]: dart.finalFieldType(core.double),
    keepScrollOffset: dart.finalFieldType(core.bool),
    debugLabel: dart.finalFieldType(dart.nullable(core.String)),
    [S._positions]: dart.finalFieldType(core.List$(scroll_position.ScrollPosition))
  }));
  dart.defineExtensionMethods(scroll_controller.ScrollController, ['toString']);
  scroll_controller.TrackingScrollController = class TrackingScrollController extends scroll_controller.ScrollController {
    get mostRecentlyUpdatedPosition() {
      return this[S._lastUpdated];
    }
    get initialScrollOffset() {
      let t66;
      t66 = this[S._lastUpdatedOffset];
      return t66 == null ? super.initialScrollOffset : t66;
    }
    attach(position) {
      if (position == null) dart.nullFailed(I[88], 349, 30, "position");
      super.attach(position);
      if (!!dart.test(this[S._positionToListener][S$.$containsKey](position))) dart.assertFailed(null, I[88], 351, 12, "!_positionToListener.containsKey(position)");
      this[S._positionToListener][S$.$_set](position, dart.fn(() => {
        this[S._lastUpdated] = position;
        this[S._lastUpdatedOffset] = position.pixels;
      }, T$.VoidTovoid()));
      position.addListener(dart.nullCheck(this[S._positionToListener][S$.$_get](position)));
    }
    detach(position) {
      if (position == null) dart.nullFailed(I[88], 360, 30, "position");
      super.detach(position);
      if (!dart.test(this[S._positionToListener][S$.$containsKey](position))) dart.assertFailed(null, I[88], 362, 12, "_positionToListener.containsKey(position)");
      position.removeListener(dart.nullCheck(this[S._positionToListener][S$.$_get](position)));
      this[S._positionToListener][S$.$remove](position);
      if (dart.equals(this[S._lastUpdated], position)) this[S._lastUpdated] = null;
      if (dart.test(this[S._positionToListener][S$.$isEmpty])) this[S._lastUpdatedOffset] = null;
    }
    dispose() {
      for (let position of this.positions) {
        if (!dart.test(this[S._positionToListener][S$.$containsKey](position))) dart.assertFailed(null, I[88], 374, 14, "_positionToListener.containsKey(position)");
        position.removeListener(dart.nullCheck(this[S._positionToListener][S$.$_get](position)));
      }
      super.dispose();
    }
  };
  (scroll_controller.TrackingScrollController.new = function(opts) {
    let initialScrollOffset = opts && 'initialScrollOffset' in opts ? opts.initialScrollOffset : 0;
    if (initialScrollOffset == null) dart.nullFailed(I[88], 321, 12, "initialScrollOffset");
    let keepScrollOffset = opts && 'keepScrollOffset' in opts ? opts.keepScrollOffset : true;
    if (keepScrollOffset == null) dart.nullFailed(I[88], 322, 10, "keepScrollOffset");
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[S._positionToListener] = new (T$.LinkedMapOfScrollPosition$VoidTovoid()).new();
    this[S._lastUpdated] = null;
    this[S._lastUpdatedOffset] = null;
    scroll_controller.TrackingScrollController.__proto__.new.call(this, {initialScrollOffset: initialScrollOffset, keepScrollOffset: keepScrollOffset, debugLabel: debugLabel});
    ;
  }).prototype = scroll_controller.TrackingScrollController.prototype;
  dart.addTypeTests(scroll_controller.TrackingScrollController);
  dart.addTypeCaches(scroll_controller.TrackingScrollController);
  dart.setGetterSignature(scroll_controller.TrackingScrollController, () => ({
    __proto__: dart.getGetters(scroll_controller.TrackingScrollController.__proto__),
    mostRecentlyUpdatedPosition: dart.nullable(scroll_position.ScrollPosition)
  }));
  dart.setLibraryUri(scroll_controller.TrackingScrollController, I[89]);
  dart.setFieldSignature(scroll_controller.TrackingScrollController, () => ({
    __proto__: dart.getFields(scroll_controller.TrackingScrollController.__proto__),
    [S._positionToListener]: dart.finalFieldType(core.Map$(scroll_position.ScrollPosition, dart.fnType(dart.void, []))),
    [S._lastUpdated]: dart.fieldType(dart.nullable(scroll_position.ScrollPosition)),
    [S._lastUpdatedOffset]: dart.fieldType(dart.nullable(core.double))
  }));
  primary_scroll_controller.PrimaryScrollController = class PrimaryScrollController extends framework.InheritedWidget {
    get controller() {
      return this[S.controller$2];
    }
    set controller(value) {
      super.controller = value;
    }
    static of(context) {
      let t66;
      if (context == null) dart.nullFailed(I[90], 61, 44, "context");
      let result = context.dependOnInheritedWidgetOfExactType(primary_scroll_controller.PrimaryScrollController);
      t66 = result;
      return t66 == null ? null : t66.controller;
    }
    updateShouldNotify(oldWidget) {
      primary_scroll_controller.PrimaryScrollController.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[90], 67, 51, "oldWidget");
      return !dart.equals(this.controller, oldWidget.controller);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[90], 70, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfScrollController()).new("controller", this.controller, {ifNull: "no controller", showName: false}));
    }
  };
  (primary_scroll_controller.PrimaryScrollController.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    if (controller == null) dart.nullFailed(I[90], 36, 36, "controller");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[90], 37, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.controller$2] = controller;
    if (!(controller != null)) dart.assertFailed(null, I[90], 38, 15, "controller != null");
    primary_scroll_controller.PrimaryScrollController.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = primary_scroll_controller.PrimaryScrollController.prototype;
  (primary_scroll_controller.PrimaryScrollController.none = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[90], 44, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.controller$2] = null;
    primary_scroll_controller.PrimaryScrollController.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = primary_scroll_controller.PrimaryScrollController.prototype;
  dart.addTypeTests(primary_scroll_controller.PrimaryScrollController);
  dart.addTypeCaches(primary_scroll_controller.PrimaryScrollController);
  dart.setMethodSignature(primary_scroll_controller.PrimaryScrollController, () => ({
    __proto__: dart.getMethods(primary_scroll_controller.PrimaryScrollController.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(primary_scroll_controller.PrimaryScrollController, I[91]);
  dart.setFieldSignature(primary_scroll_controller.PrimaryScrollController, () => ({
    __proto__: dart.getFields(primary_scroll_controller.PrimaryScrollController.__proto__),
    controller: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController))
  }));
  const _is_GestureRecognizerFactoryWithHandlers_default = Symbol('_is_GestureRecognizerFactoryWithHandlers_default');
  gesture_detector.GestureRecognizerFactoryWithHandlers$ = dart.generic(T => {
    class GestureRecognizerFactoryWithHandlers extends gesture_detector.GestureRecognizerFactory$(T) {
      get [S._constructor$1]() {
        return this[S._constructor];
      }
      set [S._constructor$1](value) {
        super[S._constructor$1] = value;
      }
      get [S._initializer$1]() {
        return this[S._initializer];
      }
      set [S._initializer$1](value) {
        super[S._initializer$1] = value;
      }
      _constructor() {
        return this[S._constructor$1]();
      }
      initializer(instance) {
        let t66;
        T.as(instance);
        if (instance == null) dart.nullFailed(I[21], 107, 22, "instance");
        t66 = instance;
        return this[S._initializer$1](t66);
      }
    }
    (GestureRecognizerFactoryWithHandlers.new = function(_constructor, _initializer) {
      if (_constructor == null) dart.nullFailed(I[21], 95, 51, "_constructor");
      if (_initializer == null) dart.nullFailed(I[21], 95, 70, "_initializer");
      this[S._constructor] = _constructor;
      this[S._initializer] = _initializer;
      if (!(_constructor != null)) dart.assertFailed(null, I[21], 96, 14, "_constructor != null");
      if (!(_initializer != null)) dart.assertFailed(null, I[21], 97, 14, "_initializer != null");
      GestureRecognizerFactoryWithHandlers.__proto__.new.call(this);
      ;
    }).prototype = GestureRecognizerFactoryWithHandlers.prototype;
    dart.addTypeTests(GestureRecognizerFactoryWithHandlers);
    GestureRecognizerFactoryWithHandlers.prototype[_is_GestureRecognizerFactoryWithHandlers_default] = true;
    dart.addTypeCaches(GestureRecognizerFactoryWithHandlers);
    dart.setMethodSignature(GestureRecognizerFactoryWithHandlers, () => ({
      __proto__: dart.getMethods(GestureRecognizerFactoryWithHandlers.__proto__),
      _constructor: dart.fnType(T, []),
      initializer: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(GestureRecognizerFactoryWithHandlers, I[20]);
    dart.setFieldSignature(GestureRecognizerFactoryWithHandlers, () => ({
      __proto__: dart.getFields(GestureRecognizerFactoryWithHandlers.__proto__),
      [S._constructor$1]: dart.finalFieldType(dart.fnType(T, [])),
      [S._initializer$1]: dart.finalFieldType(dart.fnType(dart.void, [T]))
    }));
    return GestureRecognizerFactoryWithHandlers;
  });
  gesture_detector.GestureRecognizerFactoryWithHandlers = gesture_detector.GestureRecognizerFactoryWithHandlers$();
  dart.addTypeTests(gesture_detector.GestureRecognizerFactoryWithHandlers, _is_GestureRecognizerFactoryWithHandlers_default);
  gesture_detector.GestureDetector = class GestureDetector extends framework.StatelessWidget {
    get child() {
      return this[S.child$31];
    }
    set child(value) {
      super.child = value;
    }
    get onTapDown() {
      return this[S.onTapDown$1];
    }
    set onTapDown(value) {
      super.onTapDown = value;
    }
    get onTapUp() {
      return this[S.onTapUp];
    }
    set onTapUp(value) {
      super.onTapUp = value;
    }
    get onTap() {
      return this[S.onTap];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onTapCancel() {
      return this[S.onTapCancel];
    }
    set onTapCancel(value) {
      super.onTapCancel = value;
    }
    get onSecondaryTap() {
      return this[S.onSecondaryTap$1];
    }
    set onSecondaryTap(value) {
      super.onSecondaryTap = value;
    }
    get onSecondaryTapDown() {
      return this[S.onSecondaryTapDown$1];
    }
    set onSecondaryTapDown(value) {
      super.onSecondaryTapDown = value;
    }
    get onSecondaryTapUp() {
      return this[S.onSecondaryTapUp];
    }
    set onSecondaryTapUp(value) {
      super.onSecondaryTapUp = value;
    }
    get onSecondaryTapCancel() {
      return this[S.onSecondaryTapCancel];
    }
    set onSecondaryTapCancel(value) {
      super.onSecondaryTapCancel = value;
    }
    get onTertiaryTapDown() {
      return this[S.onTertiaryTapDown];
    }
    set onTertiaryTapDown(value) {
      super.onTertiaryTapDown = value;
    }
    get onTertiaryTapUp() {
      return this[S.onTertiaryTapUp];
    }
    set onTertiaryTapUp(value) {
      super.onTertiaryTapUp = value;
    }
    get onTertiaryTapCancel() {
      return this[S.onTertiaryTapCancel];
    }
    set onTertiaryTapCancel(value) {
      super.onTertiaryTapCancel = value;
    }
    get onDoubleTapDown() {
      return this[S.onDoubleTapDown$1];
    }
    set onDoubleTapDown(value) {
      super.onDoubleTapDown = value;
    }
    get onDoubleTap() {
      return this[S.onDoubleTap];
    }
    set onDoubleTap(value) {
      super.onDoubleTap = value;
    }
    get onDoubleTapCancel() {
      return this[S.onDoubleTapCancel];
    }
    set onDoubleTapCancel(value) {
      super.onDoubleTapCancel = value;
    }
    get onLongPress() {
      return this[S.onLongPress];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    get onLongPressStart() {
      return this[S.onLongPressStart];
    }
    set onLongPressStart(value) {
      super.onLongPressStart = value;
    }
    get onLongPressMoveUpdate() {
      return this[S.onLongPressMoveUpdate];
    }
    set onLongPressMoveUpdate(value) {
      super.onLongPressMoveUpdate = value;
    }
    get onLongPressUp() {
      return this[S.onLongPressUp];
    }
    set onLongPressUp(value) {
      super.onLongPressUp = value;
    }
    get onLongPressEnd() {
      return this[S.onLongPressEnd];
    }
    set onLongPressEnd(value) {
      super.onLongPressEnd = value;
    }
    get onSecondaryLongPress() {
      return this[S.onSecondaryLongPress];
    }
    set onSecondaryLongPress(value) {
      super.onSecondaryLongPress = value;
    }
    get onSecondaryLongPressStart() {
      return this[S.onSecondaryLongPressStart];
    }
    set onSecondaryLongPressStart(value) {
      super.onSecondaryLongPressStart = value;
    }
    get onSecondaryLongPressMoveUpdate() {
      return this[S.onSecondaryLongPressMoveUpdate];
    }
    set onSecondaryLongPressMoveUpdate(value) {
      super.onSecondaryLongPressMoveUpdate = value;
    }
    get onSecondaryLongPressUp() {
      return this[S.onSecondaryLongPressUp];
    }
    set onSecondaryLongPressUp(value) {
      super.onSecondaryLongPressUp = value;
    }
    get onSecondaryLongPressEnd() {
      return this[S.onSecondaryLongPressEnd];
    }
    set onSecondaryLongPressEnd(value) {
      super.onSecondaryLongPressEnd = value;
    }
    get onVerticalDragDown() {
      return this[S.onVerticalDragDown];
    }
    set onVerticalDragDown(value) {
      super.onVerticalDragDown = value;
    }
    get onVerticalDragStart() {
      return this[S.onVerticalDragStart];
    }
    set onVerticalDragStart(value) {
      super.onVerticalDragStart = value;
    }
    get onVerticalDragUpdate() {
      return this[S.onVerticalDragUpdate];
    }
    set onVerticalDragUpdate(value) {
      super.onVerticalDragUpdate = value;
    }
    get onVerticalDragEnd() {
      return this[S.onVerticalDragEnd];
    }
    set onVerticalDragEnd(value) {
      super.onVerticalDragEnd = value;
    }
    get onVerticalDragCancel() {
      return this[S.onVerticalDragCancel];
    }
    set onVerticalDragCancel(value) {
      super.onVerticalDragCancel = value;
    }
    get onHorizontalDragDown() {
      return this[S.onHorizontalDragDown];
    }
    set onHorizontalDragDown(value) {
      super.onHorizontalDragDown = value;
    }
    get onHorizontalDragStart() {
      return this[S.onHorizontalDragStart];
    }
    set onHorizontalDragStart(value) {
      super.onHorizontalDragStart = value;
    }
    get onHorizontalDragUpdate() {
      return this[S.onHorizontalDragUpdate];
    }
    set onHorizontalDragUpdate(value) {
      super.onHorizontalDragUpdate = value;
    }
    get onHorizontalDragEnd() {
      return this[S.onHorizontalDragEnd];
    }
    set onHorizontalDragEnd(value) {
      super.onHorizontalDragEnd = value;
    }
    get onHorizontalDragCancel() {
      return this[S.onHorizontalDragCancel];
    }
    set onHorizontalDragCancel(value) {
      super.onHorizontalDragCancel = value;
    }
    get onPanDown() {
      return this[S.onPanDown];
    }
    set onPanDown(value) {
      super.onPanDown = value;
    }
    get onPanStart() {
      return this[S.onPanStart];
    }
    set onPanStart(value) {
      super.onPanStart = value;
    }
    get onPanUpdate() {
      return this[S.onPanUpdate];
    }
    set onPanUpdate(value) {
      super.onPanUpdate = value;
    }
    get onPanEnd() {
      return this[S.onPanEnd];
    }
    set onPanEnd(value) {
      super.onPanEnd = value;
    }
    get onPanCancel() {
      return this[S.onPanCancel];
    }
    set onPanCancel(value) {
      super.onPanCancel = value;
    }
    get onScaleStart() {
      return this[S.onScaleStart];
    }
    set onScaleStart(value) {
      super.onScaleStart = value;
    }
    get onScaleUpdate() {
      return this[S.onScaleUpdate];
    }
    set onScaleUpdate(value) {
      super.onScaleUpdate = value;
    }
    get onScaleEnd() {
      return this[S.onScaleEnd];
    }
    set onScaleEnd(value) {
      super.onScaleEnd = value;
    }
    get onForcePressStart() {
      return this[S.onForcePressStart$1];
    }
    set onForcePressStart(value) {
      super.onForcePressStart = value;
    }
    get onForcePressPeak() {
      return this[S.onForcePressPeak];
    }
    set onForcePressPeak(value) {
      super.onForcePressPeak = value;
    }
    get onForcePressUpdate() {
      return this[S.onForcePressUpdate];
    }
    set onForcePressUpdate(value) {
      super.onForcePressUpdate = value;
    }
    get onForcePressEnd() {
      return this[S.onForcePressEnd$1];
    }
    set onForcePressEnd(value) {
      super.onForcePressEnd = value;
    }
    get behavior() {
      return this[S.behavior$2];
    }
    set behavior(value) {
      super.behavior = value;
    }
    get excludeFromSemantics() {
      return this[S.excludeFromSemantics];
    }
    set excludeFromSemantics(value) {
      super.excludeFromSemantics = value;
    }
    get dragStartBehavior() {
      return this[S.dragStartBehavior$2];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[21], 761, 29, "context");
      let gestures = new (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer()).new();
      if (this.onTapDown != null || this.onTapUp != null || this.onTap != null || this.onTapCancel != null || this.onSecondaryTap != null || this.onSecondaryTapDown != null || this.onSecondaryTapUp != null || this.onSecondaryTapCancel != null || this.onTertiaryTapDown != null || this.onTertiaryTapUp != null || this.onTertiaryTapCancel != null) {
        gestures[S$.$_set](dart.wrapType(tap$.TapGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfTapGestureRecognizer()).new(dart.fn(() => new tap$.TapGestureRecognizer.new({debugOwner: this}), T$.VoidToTapGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 778, 31, "instance");
          t66 = instance;
          (() => {
            t66.onTapDown = this.onTapDown;
            t66.onTapUp = this.onTapUp;
            t66.onTap = this.onTap;
            t66.onTapCancel = this.onTapCancel;
            t66.onSecondaryTap = this.onSecondaryTap;
            t66.onSecondaryTapDown = this.onSecondaryTapDown;
            t66.onSecondaryTapUp = this.onSecondaryTapUp;
            t66.onSecondaryTapCancel = this.onSecondaryTapCancel;
            t66.onTertiaryTapDown = this.onTertiaryTapDown;
            t66.onTertiaryTapUp = this.onTertiaryTapUp;
            t66.onTertiaryTapCancel = this.onTertiaryTapCancel;
            return t66;
          })();
        }, T$.TapGestureRecognizerTovoid())));
      }
      if (this.onDoubleTap != null) {
        gestures[S$.$_set](dart.wrapType(multitap.DoubleTapGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfDoubleTapGestureRecognizer()).new(dart.fn(() => new multitap.DoubleTapGestureRecognizer.new({debugOwner: this}), T$.VoidToDoubleTapGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 798, 37, "instance");
          t66 = instance;
          (() => {
            t66.onDoubleTapDown = this.onDoubleTapDown;
            t66.onDoubleTap = this.onDoubleTap;
            t66.onDoubleTapCancel = this.onDoubleTapCancel;
            return t66;
          })();
        }, T$.DoubleTapGestureRecognizerTovoid())));
      }
      if (this.onLongPress != null || this.onLongPressUp != null || this.onLongPressStart != null || this.onLongPressMoveUpdate != null || this.onLongPressEnd != null || this.onSecondaryLongPress != null || this.onSecondaryLongPressUp != null || this.onSecondaryLongPressStart != null || this.onSecondaryLongPressMoveUpdate != null || this.onSecondaryLongPressEnd != null) {
        gestures[S$.$_set](dart.wrapType(long_press.LongPressGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfLongPressGestureRecognizer()).new(dart.fn(() => new long_press.LongPressGestureRecognizer.new({debugOwner: this}), T$.VoidToLongPressGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 819, 37, "instance");
          t66 = instance;
          (() => {
            t66.onLongPress = this.onLongPress;
            t66.onLongPressStart = this.onLongPressStart;
            t66.onLongPressMoveUpdate = this.onLongPressMoveUpdate;
            t66.onLongPressEnd = this.onLongPressEnd;
            t66.onLongPressUp = this.onLongPressUp;
            t66.onSecondaryLongPress = this.onSecondaryLongPress;
            t66.onSecondaryLongPressStart = this.onSecondaryLongPressStart;
            t66.onSecondaryLongPressMoveUpdate = this.onSecondaryLongPressMoveUpdate;
            t66.onSecondaryLongPressEnd = this.onSecondaryLongPressEnd;
            t66.onSecondaryLongPressUp = this.onSecondaryLongPressUp;
            return t66;
          })();
        }, T$.LongPressGestureRecognizerTovoid())));
      }
      if (this.onVerticalDragDown != null || this.onVerticalDragStart != null || this.onVerticalDragUpdate != null || this.onVerticalDragEnd != null || this.onVerticalDragCancel != null) {
        gestures[S$.$_set](dart.wrapType(monodrag.VerticalDragGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfVerticalDragGestureRecognizer()).new(dart.fn(() => new monodrag.VerticalDragGestureRecognizer.new({debugOwner: this}), T$.VoidToVerticalDragGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 842, 40, "instance");
          t66 = instance;
          (() => {
            t66.onDown = this.onVerticalDragDown;
            t66.onStart = this.onVerticalDragStart;
            t66.onUpdate = this.onVerticalDragUpdate;
            t66.onEnd = this.onVerticalDragEnd;
            t66.onCancel = this.onVerticalDragCancel;
            t66.dragStartBehavior = this.dragStartBehavior;
            return t66;
          })();
        }, T$.VerticalDragGestureRecognizerTovoid())));
      }
      if (this.onHorizontalDragDown != null || this.onHorizontalDragStart != null || this.onHorizontalDragUpdate != null || this.onHorizontalDragEnd != null || this.onHorizontalDragCancel != null) {
        gestures[S$.$_set](dart.wrapType(monodrag.HorizontalDragGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfHorizontalDragGestureRecognizer()).new(dart.fn(() => new monodrag.HorizontalDragGestureRecognizer.new({debugOwner: this}), T$.VoidToHorizontalDragGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 861, 42, "instance");
          t66 = instance;
          (() => {
            t66.onDown = this.onHorizontalDragDown;
            t66.onStart = this.onHorizontalDragStart;
            t66.onUpdate = this.onHorizontalDragUpdate;
            t66.onEnd = this.onHorizontalDragEnd;
            t66.onCancel = this.onHorizontalDragCancel;
            t66.dragStartBehavior = this.dragStartBehavior;
            return t66;
          })();
        }, T$.HorizontalDragGestureRecognizerTovoid())));
      }
      if (this.onPanDown != null || this.onPanStart != null || this.onPanUpdate != null || this.onPanEnd != null || this.onPanCancel != null) {
        gestures[S$.$_set](dart.wrapType(monodrag.PanGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfPanGestureRecognizer()).new(dart.fn(() => new monodrag.PanGestureRecognizer.new({debugOwner: this}), T$.VoidToPanGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 880, 31, "instance");
          t66 = instance;
          (() => {
            t66.onDown = this.onPanDown;
            t66.onStart = this.onPanStart;
            t66.onUpdate = this.onPanUpdate;
            t66.onEnd = this.onPanEnd;
            t66.onCancel = this.onPanCancel;
            t66.dragStartBehavior = this.dragStartBehavior;
            return t66;
          })();
        }, T$.PanGestureRecognizerTovoid())));
      }
      if (this.onScaleStart != null || this.onScaleUpdate != null || this.onScaleEnd != null) {
        gestures[S$.$_set](dart.wrapType(scale.ScaleGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfScaleGestureRecognizer()).new(dart.fn(() => new scale.ScaleGestureRecognizer.new({debugOwner: this}), T$.VoidToScaleGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 895, 33, "instance");
          t66 = instance;
          (() => {
            t66.onStart = this.onScaleStart;
            t66.onUpdate = this.onScaleUpdate;
            t66.onEnd = this.onScaleEnd;
            t66.dragStartBehavior = this.dragStartBehavior;
            return t66;
          })();
        }, T$.ScaleGestureRecognizerTovoid())));
      }
      if (this.onForcePressStart != null || this.onForcePressPeak != null || this.onForcePressUpdate != null || this.onForcePressEnd != null) {
        gestures[S$.$_set](dart.wrapType(force_press.ForcePressGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfForcePressGestureRecognizer()).new(dart.fn(() => new force_press.ForcePressGestureRecognizer.new({debugOwner: this}), T$.VoidToForcePressGestureRecognizer()), dart.fn(instance => {
          let t66;
          if (instance == null) dart.nullFailed(I[21], 911, 38, "instance");
          t66 = instance;
          (() => {
            t66.onStart = this.onForcePressStart;
            t66.onPeak = this.onForcePressPeak;
            t66.onUpdate = this.onForcePressUpdate;
            t66.onEnd = this.onForcePressEnd;
            return t66;
          })();
        }, T$.ForcePressGestureRecognizerTovoid())));
      }
      return new gesture_detector.RawGestureDetector.new({gestures: gestures, behavior: this.behavior, excludeFromSemantics: this.excludeFromSemantics, child: this.child, $creationLocationd_0dea112b090073317d4: C[792] || CT.C792});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[21], 930, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfDragStartBehavior()).new("startBehavior", this.dragStartBehavior));
    }
  };
  (gesture_detector.GestureDetector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let onTapDown = opts && 'onTapDown' in opts ? opts.onTapDown : null;
    let onTapUp = opts && 'onTapUp' in opts ? opts.onTapUp : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onTapCancel = opts && 'onTapCancel' in opts ? opts.onTapCancel : null;
    let onSecondaryTap = opts && 'onSecondaryTap' in opts ? opts.onSecondaryTap : null;
    let onSecondaryTapDown = opts && 'onSecondaryTapDown' in opts ? opts.onSecondaryTapDown : null;
    let onSecondaryTapUp = opts && 'onSecondaryTapUp' in opts ? opts.onSecondaryTapUp : null;
    let onSecondaryTapCancel = opts && 'onSecondaryTapCancel' in opts ? opts.onSecondaryTapCancel : null;
    let onTertiaryTapDown = opts && 'onTertiaryTapDown' in opts ? opts.onTertiaryTapDown : null;
    let onTertiaryTapUp = opts && 'onTertiaryTapUp' in opts ? opts.onTertiaryTapUp : null;
    let onTertiaryTapCancel = opts && 'onTertiaryTapCancel' in opts ? opts.onTertiaryTapCancel : null;
    let onDoubleTapDown = opts && 'onDoubleTapDown' in opts ? opts.onDoubleTapDown : null;
    let onDoubleTap = opts && 'onDoubleTap' in opts ? opts.onDoubleTap : null;
    let onDoubleTapCancel = opts && 'onDoubleTapCancel' in opts ? opts.onDoubleTapCancel : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onLongPressStart = opts && 'onLongPressStart' in opts ? opts.onLongPressStart : null;
    let onLongPressMoveUpdate = opts && 'onLongPressMoveUpdate' in opts ? opts.onLongPressMoveUpdate : null;
    let onLongPressUp = opts && 'onLongPressUp' in opts ? opts.onLongPressUp : null;
    let onLongPressEnd = opts && 'onLongPressEnd' in opts ? opts.onLongPressEnd : null;
    let onSecondaryLongPress = opts && 'onSecondaryLongPress' in opts ? opts.onSecondaryLongPress : null;
    let onSecondaryLongPressStart = opts && 'onSecondaryLongPressStart' in opts ? opts.onSecondaryLongPressStart : null;
    let onSecondaryLongPressMoveUpdate = opts && 'onSecondaryLongPressMoveUpdate' in opts ? opts.onSecondaryLongPressMoveUpdate : null;
    let onSecondaryLongPressUp = opts && 'onSecondaryLongPressUp' in opts ? opts.onSecondaryLongPressUp : null;
    let onSecondaryLongPressEnd = opts && 'onSecondaryLongPressEnd' in opts ? opts.onSecondaryLongPressEnd : null;
    let onVerticalDragDown = opts && 'onVerticalDragDown' in opts ? opts.onVerticalDragDown : null;
    let onVerticalDragStart = opts && 'onVerticalDragStart' in opts ? opts.onVerticalDragStart : null;
    let onVerticalDragUpdate = opts && 'onVerticalDragUpdate' in opts ? opts.onVerticalDragUpdate : null;
    let onVerticalDragEnd = opts && 'onVerticalDragEnd' in opts ? opts.onVerticalDragEnd : null;
    let onVerticalDragCancel = opts && 'onVerticalDragCancel' in opts ? opts.onVerticalDragCancel : null;
    let onHorizontalDragDown = opts && 'onHorizontalDragDown' in opts ? opts.onHorizontalDragDown : null;
    let onHorizontalDragStart = opts && 'onHorizontalDragStart' in opts ? opts.onHorizontalDragStart : null;
    let onHorizontalDragUpdate = opts && 'onHorizontalDragUpdate' in opts ? opts.onHorizontalDragUpdate : null;
    let onHorizontalDragEnd = opts && 'onHorizontalDragEnd' in opts ? opts.onHorizontalDragEnd : null;
    let onHorizontalDragCancel = opts && 'onHorizontalDragCancel' in opts ? opts.onHorizontalDragCancel : null;
    let onForcePressStart = opts && 'onForcePressStart' in opts ? opts.onForcePressStart : null;
    let onForcePressPeak = opts && 'onForcePressPeak' in opts ? opts.onForcePressPeak : null;
    let onForcePressUpdate = opts && 'onForcePressUpdate' in opts ? opts.onForcePressUpdate : null;
    let onForcePressEnd = opts && 'onForcePressEnd' in opts ? opts.onForcePressEnd : null;
    let onPanDown = opts && 'onPanDown' in opts ? opts.onPanDown : null;
    let onPanStart = opts && 'onPanStart' in opts ? opts.onPanStart : null;
    let onPanUpdate = opts && 'onPanUpdate' in opts ? opts.onPanUpdate : null;
    let onPanEnd = opts && 'onPanEnd' in opts ? opts.onPanEnd : null;
    let onPanCancel = opts && 'onPanCancel' in opts ? opts.onPanCancel : null;
    let onScaleStart = opts && 'onScaleStart' in opts ? opts.onScaleStart : null;
    let onScaleUpdate = opts && 'onScaleUpdate' in opts ? opts.onScaleUpdate : null;
    let onScaleEnd = opts && 'onScaleEnd' in opts ? opts.onScaleEnd : null;
    let behavior = opts && 'behavior' in opts ? opts.behavior : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    if (excludeFromSemantics == null) dart.nullFailed(I[21], 266, 10, "excludeFromSemantics");
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[522] || CT.C522;
    if (dragStartBehavior == null) dart.nullFailed(I[21], 267, 10, "dragStartBehavior");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.child$31] = child;
    this[S.onTapDown$1] = onTapDown;
    this[S.onTapUp] = onTapUp;
    this[S.onTap] = onTap;
    this[S.onTapCancel] = onTapCancel;
    this[S.onSecondaryTap$1] = onSecondaryTap;
    this[S.onSecondaryTapDown$1] = onSecondaryTapDown;
    this[S.onSecondaryTapUp] = onSecondaryTapUp;
    this[S.onSecondaryTapCancel] = onSecondaryTapCancel;
    this[S.onTertiaryTapDown] = onTertiaryTapDown;
    this[S.onTertiaryTapUp] = onTertiaryTapUp;
    this[S.onTertiaryTapCancel] = onTertiaryTapCancel;
    this[S.onDoubleTapDown$1] = onDoubleTapDown;
    this[S.onDoubleTap] = onDoubleTap;
    this[S.onDoubleTapCancel] = onDoubleTapCancel;
    this[S.onLongPress] = onLongPress;
    this[S.onLongPressStart] = onLongPressStart;
    this[S.onLongPressMoveUpdate] = onLongPressMoveUpdate;
    this[S.onLongPressUp] = onLongPressUp;
    this[S.onLongPressEnd] = onLongPressEnd;
    this[S.onSecondaryLongPress] = onSecondaryLongPress;
    this[S.onSecondaryLongPressStart] = onSecondaryLongPressStart;
    this[S.onSecondaryLongPressMoveUpdate] = onSecondaryLongPressMoveUpdate;
    this[S.onSecondaryLongPressUp] = onSecondaryLongPressUp;
    this[S.onSecondaryLongPressEnd] = onSecondaryLongPressEnd;
    this[S.onVerticalDragDown] = onVerticalDragDown;
    this[S.onVerticalDragStart] = onVerticalDragStart;
    this[S.onVerticalDragUpdate] = onVerticalDragUpdate;
    this[S.onVerticalDragEnd] = onVerticalDragEnd;
    this[S.onVerticalDragCancel] = onVerticalDragCancel;
    this[S.onHorizontalDragDown] = onHorizontalDragDown;
    this[S.onHorizontalDragStart] = onHorizontalDragStart;
    this[S.onHorizontalDragUpdate] = onHorizontalDragUpdate;
    this[S.onHorizontalDragEnd] = onHorizontalDragEnd;
    this[S.onHorizontalDragCancel] = onHorizontalDragCancel;
    this[S.onForcePressStart$1] = onForcePressStart;
    this[S.onForcePressPeak] = onForcePressPeak;
    this[S.onForcePressUpdate] = onForcePressUpdate;
    this[S.onForcePressEnd$1] = onForcePressEnd;
    this[S.onPanDown] = onPanDown;
    this[S.onPanStart] = onPanStart;
    this[S.onPanUpdate] = onPanUpdate;
    this[S.onPanEnd] = onPanEnd;
    this[S.onPanCancel] = onPanCancel;
    this[S.onScaleStart] = onScaleStart;
    this[S.onScaleUpdate] = onScaleUpdate;
    this[S.onScaleEnd] = onScaleEnd;
    this[S.behavior$2] = behavior;
    this[S.excludeFromSemantics] = excludeFromSemantics;
    this[S.dragStartBehavior$2] = dragStartBehavior;
    if (!(excludeFromSemantics != null)) dart.assertFailed(null, I[21], 268, 15, "excludeFromSemantics != null");
    if (!(dragStartBehavior != null)) dart.assertFailed(null, I[21], 269, 15, "dragStartBehavior != null");
    if (!dart.test(dart.fn(() => {
      let haveVerticalDrag = onVerticalDragStart != null || onVerticalDragUpdate != null || onVerticalDragEnd != null;
      let haveHorizontalDrag = onHorizontalDragStart != null || onHorizontalDragUpdate != null || onHorizontalDragEnd != null;
      let havePan = onPanStart != null || onPanUpdate != null || onPanEnd != null;
      let haveScale = onScaleStart != null || onScaleUpdate != null || onScaleEnd != null;
      if (havePan || haveScale) {
        if (havePan && haveScale) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Incorrect GestureDetector arguments."), new assertions.ErrorDescription.new("Having both a pan gesture recognizer and a scale gesture recognizer is redundant; scale is a superset of pan."), new assertions.ErrorHint.new("Just use the scale gesture recognizer.")])));
        }
        let recognizer = havePan ? "pan" : "scale";
        if (haveVerticalDrag && haveHorizontalDrag) {
          dart.throw(assertions.FlutterError.new("Incorrect GestureDetector arguments.\n" + "Simultaneously having a vertical drag gesture recognizer, a horizontal drag gesture recognizer, and a " + recognizer + " gesture recognizer " + "will result in the " + recognizer + " gesture recognizer being ignored, since the other two will catch all drags."));
        }
      }
      return true;
    }, T$.VoidTobool())())) dart.assertFailed(null, I[21], 270, 15, "() {\r\n         final bool haveVerticalDrag = onVerticalDragStart != null || onVerticalDragUpdate != null || onVerticalDragEnd != null;\r\n         final bool haveHorizontalDrag = onHorizontalDragStart != null || onHorizontalDragUpdate != null || onHorizontalDragEnd != null;\r\n         final bool havePan = onPanStart != null || onPanUpdate != null || onPanEnd != null;\r\n         final bool haveScale = onScaleStart != null || onScaleUpdate != null || onScaleEnd != null;\r\n         if (havePan || haveScale) {\r\n           if (havePan && haveScale) {\r\n             throw FlutterError.fromParts(<DiagnosticsNode>[\r\n               ErrorSummary('Incorrect GestureDetector arguments.'),\r\n               ErrorDescription(\r\n                 'Having both a pan gesture recognizer and a scale gesture recognizer is redundant; scale is a superset of pan.',\r\n               ),\r\n               ErrorHint('Just use the scale gesture recognizer.'),\r\n             ]);\r\n           }\r\n           final String recognizer = havePan ? 'pan' : 'scale';\r\n           if (haveVerticalDrag && haveHorizontalDrag) {\r\n             throw FlutterError(\r\n               'Incorrect GestureDetector arguments.\\n'\r\n               'Simultaneously having a vertical drag gesture recognizer, a horizontal drag gesture recognizer, and a $recognizer gesture recognizer '\r\n               'will result in the $recognizer gesture recognizer being ignored, since the other two will catch all drags.',\r\n             );\r\n           }\r\n         }\r\n         return true;\r\n       }()");
    gesture_detector.GestureDetector.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = gesture_detector.GestureDetector.prototype;
  dart.addTypeTests(gesture_detector.GestureDetector);
  dart.addTypeCaches(gesture_detector.GestureDetector);
  dart.setMethodSignature(gesture_detector.GestureDetector, () => ({
    __proto__: dart.getMethods(gesture_detector.GestureDetector.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(gesture_detector.GestureDetector, I[20]);
  dart.setFieldSignature(gesture_detector.GestureDetector, () => ({
    __proto__: dart.getFields(gesture_detector.GestureDetector.__proto__),
    child: dart.finalFieldType(dart.nullable(framework.Widget)),
    onTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onTapUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapUpDetails]))),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onTapCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSecondaryTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSecondaryTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onSecondaryTapUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapUpDetails]))),
    onSecondaryTapCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onTertiaryTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onTertiaryTapUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapUpDetails]))),
    onTertiaryTapCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDoubleTapDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [tap$.TapDownDetails]))),
    onDoubleTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDoubleTapCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onLongPress: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onLongPressStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressStartDetails]))),
    onLongPressMoveUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails]))),
    onLongPressUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onLongPressEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressEndDetails]))),
    onSecondaryLongPress: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSecondaryLongPressStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressStartDetails]))),
    onSecondaryLongPressMoveUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails]))),
    onSecondaryLongPressUp: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSecondaryLongPressEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [long_press.LongPressEndDetails]))),
    onVerticalDragDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragDownDetails]))),
    onVerticalDragStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragStartDetails]))),
    onVerticalDragUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragUpdateDetails]))),
    onVerticalDragEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragEndDetails]))),
    onVerticalDragCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onHorizontalDragDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragDownDetails]))),
    onHorizontalDragStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragStartDetails]))),
    onHorizontalDragUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragUpdateDetails]))),
    onHorizontalDragEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragEndDetails]))),
    onHorizontalDragCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onPanDown: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragDownDetails]))),
    onPanStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragStartDetails]))),
    onPanUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragUpdateDetails]))),
    onPanEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [drag_details.DragEndDetails]))),
    onPanCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onScaleStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [scale.ScaleStartDetails]))),
    onScaleUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [scale.ScaleUpdateDetails]))),
    onScaleEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [scale.ScaleEndDetails]))),
    onForcePressStart: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [force_press.ForcePressDetails]))),
    onForcePressPeak: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [force_press.ForcePressDetails]))),
    onForcePressUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [force_press.ForcePressDetails]))),
    onForcePressEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [force_press.ForcePressDetails]))),
    behavior: dart.finalFieldType(dart.nullable(proxy_box.HitTestBehavior)),
    excludeFromSemantics: dart.finalFieldType(core.bool),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior)
  }));
  gesture_detector.RawGestureDetector = class RawGestureDetector extends framework.StatefulWidget {
    get child() {
      return this[S.child$32];
    }
    set child(value) {
      super.child = value;
    }
    get gestures() {
      return this[S.gestures];
    }
    set gestures(value) {
      super.gestures = value;
    }
    get behavior() {
      return this[S.behavior$3];
    }
    set behavior(value) {
      super.behavior = value;
    }
    get excludeFromSemantics() {
      return this[S.excludeFromSemantics$1];
    }
    set excludeFromSemantics(value) {
      super.excludeFromSemantics = value;
    }
    get semantics() {
      return this[S.semantics];
    }
    set semantics(value) {
      super.semantics = value;
    }
    createState() {
      return new gesture_detector.RawGestureDetectorState.new();
    }
  };
  (gesture_detector.RawGestureDetector.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let gestures = opts && 'gestures' in opts ? opts.gestures : C[798] || CT.C798;
    if (gestures == null) dart.nullFailed(I[21], 985, 10, "gestures");
    let behavior = opts && 'behavior' in opts ? opts.behavior : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    if (excludeFromSemantics == null) dart.nullFailed(I[21], 987, 10, "excludeFromSemantics");
    let semantics = opts && 'semantics' in opts ? opts.semantics : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.child$32] = child;
    this[S.gestures] = gestures;
    this[S.behavior$3] = behavior;
    this[S.excludeFromSemantics$1] = excludeFromSemantics;
    this[S.semantics] = semantics;
    if (!(gestures != null)) dart.assertFailed(null, I[21], 989, 15, "gestures != null");
    if (!(excludeFromSemantics != null)) dart.assertFailed(null, I[21], 990, 15, "excludeFromSemantics != null");
    gesture_detector.RawGestureDetector.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = gesture_detector.RawGestureDetector.prototype;
  dart.addTypeTests(gesture_detector.RawGestureDetector);
  dart.addTypeCaches(gesture_detector.RawGestureDetector);
  dart.setMethodSignature(gesture_detector.RawGestureDetector, () => ({
    __proto__: dart.getMethods(gesture_detector.RawGestureDetector.__proto__),
    createState: dart.fnType(gesture_detector.RawGestureDetectorState, [])
  }));
  dart.setLibraryUri(gesture_detector.RawGestureDetector, I[20]);
  dart.setFieldSignature(gesture_detector.RawGestureDetector, () => ({
    __proto__: dart.getFields(gesture_detector.RawGestureDetector.__proto__),
    child: dart.finalFieldType(dart.nullable(framework.Widget)),
    gestures: dart.finalFieldType(core.Map$(core.Type, gesture_detector.GestureRecognizerFactory$(recognizer.GestureRecognizer))),
    behavior: dart.finalFieldType(dart.nullable(proxy_box.HitTestBehavior)),
    excludeFromSemantics: dart.finalFieldType(core.bool),
    semantics: dart.finalFieldType(dart.nullable(gesture_detector.SemanticsGestureDelegate))
  }));
  gesture_detector.RawGestureDetectorState = class RawGestureDetectorState extends framework.State$(gesture_detector.RawGestureDetector) {
    initState() {
      let t66;
      super.initState();
      this[S._semantics] = (t66 = this.widget.semantics, t66 == null ? new gesture_detector._DefaultSemanticsGestureDelegate.new(this) : t66);
      this[S._syncAll](this.widget.gestures);
    }
    didUpdateWidget(oldWidget) {
      let t66;
      gesture_detector.RawGestureDetector.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[21], 1104, 43, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (!(oldWidget.semantics == null && this.widget.semantics == null)) {
        this[S._semantics] = (t66 = this.widget.semantics, t66 == null ? new gesture_detector._DefaultSemanticsGestureDelegate.new(this) : t66);
      }
      this[S._syncAll](this.widget.gestures);
    }
    replaceGestureRecognizers(gestures) {
      if (gestures == null) dart.nullFailed(I[21], 1125, 70, "gestures");
      if (!dart.test(dart.fn(() => {
        if (!dart.test(dart.nullCheck(dart.nullCheck(this.context.findRenderObject()).owner).debugDoingLayout)) {
          dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("Unexpected call to replaceGestureRecognizers() method of RawGestureDetectorState."), new assertions.ErrorDescription.new("The replaceGestureRecognizers() method can only be called during the layout phase."), new assertions.ErrorHint.new("To set the gesture recognizers at other times, trigger a new build using setState() " + "and provide the new gesture recognizers as constructor arguments to the corresponding " + "RawGestureDetector or GestureDetector object.")])));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[21], 1126, 12, "() {\r\n      if (!context.findRenderObject()!.owner!.debugDoingLayout) {\r\n        throw FlutterError.fromParts(<DiagnosticsNode>[\r\n          ErrorSummary('Unexpected call to replaceGestureRecognizers() method of RawGestureDetectorState.'),\r\n          ErrorDescription('The replaceGestureRecognizers() method can only be called during the layout phase.'),\r\n          ErrorHint(\r\n            'To set the gesture recognizers at other times, trigger a new build using setState() '\r\n            'and provide the new gesture recognizers as constructor arguments to the corresponding '\r\n            'RawGestureDetector or GestureDetector object.',\r\n          ),\r\n        ]);\r\n      }\r\n      return true;\r\n    }()");
      this[S._syncAll](gestures);
      if (!dart.test(this.widget.excludeFromSemantics)) {
        let semanticsGestureHandler = proxy_box.RenderSemanticsGestureHandler.as(dart.nullCheck(this.context.findRenderObject()));
        this[S._updateSemanticsForRenderObject](semanticsGestureHandler);
      }
    }
    replaceSemanticsActions(actions) {
      if (actions == null) dart.nullFailed(I[21], 1158, 53, "actions");
      if (dart.test(this.widget.excludeFromSemantics)) return;
      let semanticsGestureHandler = T$.RenderSemanticsGestureHandlerN().as(this.context.findRenderObject());
      if (!dart.test(dart.fn(() => {
        if (semanticsGestureHandler == null) {
          dart.throw(assertions.FlutterError.new("Unexpected call to replaceSemanticsActions() method of RawGestureDetectorState.\n" + "The replaceSemanticsActions() method can only be called after the RenderSemanticsGestureHandler has been created."));
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[21], 1163, 12, "() {\r\n      if (semanticsGestureHandler == null) {\r\n        throw FlutterError(\r\n          'Unexpected call to replaceSemanticsActions() method of RawGestureDetectorState.\\n'\r\n          'The replaceSemanticsActions() method can only be called after the RenderSemanticsGestureHandler has been created.',\r\n        );\r\n      }\r\n      return true;\r\n    }()");
      dart.nullCheck(semanticsGestureHandler).validActions = actions;
    }
    dispose() {
      for (let recognizer of dart.nullCheck(this[S._recognizers])[S$.$values])
        recognizer.dispose();
      this[S._recognizers] = null;
      super.dispose();
    }
    [S._syncAll](gestures) {
      let t66;
      if (gestures == null) dart.nullFailed(I[21], 1184, 53, "gestures");
      if (!(this[S._recognizers] != null)) dart.assertFailed(null, I[21], 1185, 12, "_recognizers != null");
      let oldRecognizers = dart.nullCheck(this[S._recognizers]);
      this[S._recognizers] = new (T$.LinkedMapOfType$GestureRecognizer()).new();
      for (let type of gestures[S$.$keys]) {
        if (!(gestures[S$.$_get](type) != null)) dart.assertFailed(null, I[21], 1189, 14, "gestures[type] != null");
        if (!dart.test(dart.nullCheck(gestures[S$.$_get](type))[S$._debugAssertTypeMatches](type))) dart.assertFailed(null, I[21], 1190, 14, "gestures[type]!._debugAssertTypeMatches(type)");
        if (!!dart.test(dart.nullCheck(this[S._recognizers])[S$.$containsKey](type))) dart.assertFailed(null, I[21], 1191, 14, "!_recognizers!.containsKey(type)");
        dart.nullCheck(this[S._recognizers])[S$.$_set](type, (t66 = oldRecognizers[S$.$_get](type), t66 == null ? dart.nullCheck(gestures[S$.$_get](type))._constructor() : t66));
        if (!dart.equals(dart.runtimeType(dart.nullCheck(this[S._recognizers])[S$.$_get](type)), type)) dart.assertFailed("GestureRecognizerFactory of type " + dart.str(type) + " created a GestureRecognizer of type " + dart.str(dart.runtimeType(dart.nullCheck(this[S._recognizers])[S$.$_get](type))) + ". The GestureRecognizerFactory must be specialized with the type of the class that it returns from its constructor method.", I[21], 1193, 14, "_recognizers![type].runtimeType == type");
        dart.nullCheck(gestures[S$.$_get](type)).initializer(dart.nullCheck(dart.nullCheck(this[S._recognizers])[S$.$_get](type)));
      }
      for (let type of oldRecognizers[S$.$keys]) {
        if (!dart.test(dart.nullCheck(this[S._recognizers])[S$.$containsKey](type))) dart.nullCheck(oldRecognizers[S$.$_get](type)).dispose();
      }
    }
    [S._handlePointerDown$2](event) {
      if (event == null) dart.nullFailed(I[21], 1202, 44, "event");
      if (!(this[S._recognizers] != null)) dart.assertFailed(null, I[21], 1203, 12, "_recognizers != null");
      for (let recognizer of dart.nullCheck(this[S._recognizers])[S$.$values])
        recognizer.addPointer(event);
    }
    get [S._defaultBehavior]() {
      return this.widget.child == null ? proxy_box.HitTestBehavior.translucent : proxy_box.HitTestBehavior.deferToChild;
    }
    [S._updateSemanticsForRenderObject](renderObject) {
      if (renderObject == null) dart.nullFailed(I[21], 1212, 70, "renderObject");
      if (!!dart.test(this.widget.excludeFromSemantics)) dart.assertFailed(null, I[21], 1213, 12, "!widget.excludeFromSemantics");
      if (!(this[S._semantics] != null)) dart.assertFailed(null, I[21], 1214, 12, "_semantics != null");
      dart.nullCheck(this[S._semantics]).assignSemantics(renderObject);
    }
    build(context) {
      let t66, t66$;
      if (context == null) dart.nullFailed(I[21], 1219, 29, "context");
      let result = new basic.Listener.new({onPointerDown: dart.bind(this, S._handlePointerDown$2), behavior: (t66 = this.widget.behavior, t66 == null ? this[S._defaultBehavior] : t66), child: this.widget.child, $creationLocationd_0dea112b090073317d4: C[800] || CT.C800});
      if (!dart.test(this.widget.excludeFromSemantics)) {
        result = new gesture_detector._GestureSemantics.new({behavior: (t66$ = this.widget.behavior, t66$ == null ? this[S._defaultBehavior] : t66$), assignSemantics: dart.bind(this, S._updateSemanticsForRenderObject), child: result, $creationLocationd_0dea112b090073317d4: C[805] || CT.C805});
      }
      return result;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[21], 1236, 56, "properties");
      super.debugFillProperties(properties);
      if (this[S._recognizers] == null) {
        properties.add(diagnostics$.DiagnosticsNode.message("DISPOSED"));
      } else {
        let gestures = dart.nullCheck(this[S._recognizers])[S$.$values][S$.$map](core.String, dart.fn(recognizer => {
          if (recognizer == null) dart.nullFailed(I[21], 1241, 89, "recognizer");
          return recognizer.debugDescription;
        }, T$.GestureRecognizerToString()))[S$.$toList]();
        properties.add(new (T$.IterablePropertyOfString()).new("gestures", gestures, {ifEmpty: "<none>"}));
        properties.add(new (T$.IterablePropertyOfGestureRecognizer()).new("recognizers", dart.nullCheck(this[S._recognizers])[S$.$values], {level: diagnostics$.DiagnosticLevel.fine}));
        properties.add(new (T$.DiagnosticsPropertyOfbool()).new("excludeFromSemantics", this.widget.excludeFromSemantics, {defaultValue: false}));
        if (!dart.test(this.widget.excludeFromSemantics)) {
          properties.add(new (T$.DiagnosticsPropertyOfSemanticsGestureDelegate()).new("semantics", this.widget.semantics, {defaultValue: null}));
        }
      }
      properties.add(new (T$.EnumPropertyOfHitTestBehavior()).new("behavior", this.widget.behavior, {defaultValue: null}));
    }
  };
  (gesture_detector.RawGestureDetectorState.new = function() {
    this[S._recognizers] = C[799] || CT.C799;
    this[S._semantics] = null;
    gesture_detector.RawGestureDetectorState.__proto__.new.call(this);
    ;
  }).prototype = gesture_detector.RawGestureDetectorState.prototype;
  dart.addTypeTests(gesture_detector.RawGestureDetectorState);
  dart.addTypeCaches(gesture_detector.RawGestureDetectorState);
  dart.setMethodSignature(gesture_detector.RawGestureDetectorState, () => ({
    __proto__: dart.getMethods(gesture_detector.RawGestureDetectorState.__proto__),
    replaceGestureRecognizers: dart.fnType(dart.void, [core.Map$(core.Type, gesture_detector.GestureRecognizerFactory$(recognizer.GestureRecognizer))]),
    replaceSemanticsActions: dart.fnType(dart.void, [core.Set$(ui.SemanticsAction)]),
    [S._syncAll]: dart.fnType(dart.void, [core.Map$(core.Type, gesture_detector.GestureRecognizerFactory$(recognizer.GestureRecognizer))]),
    [S._handlePointerDown$2]: dart.fnType(dart.void, [events.PointerDownEvent]),
    [S._updateSemanticsForRenderObject]: dart.fnType(dart.void, [proxy_box.RenderSemanticsGestureHandler]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(gesture_detector.RawGestureDetectorState, () => ({
    __proto__: dart.getGetters(gesture_detector.RawGestureDetectorState.__proto__),
    [S._defaultBehavior]: proxy_box.HitTestBehavior
  }));
  dart.setLibraryUri(gesture_detector.RawGestureDetectorState, I[20]);
  dart.setFieldSignature(gesture_detector.RawGestureDetectorState, () => ({
    __proto__: dart.getFields(gesture_detector.RawGestureDetectorState.__proto__),
    [S._recognizers]: dart.fieldType(dart.nullable(core.Map$(core.Type, recognizer.GestureRecognizer))),
    [S._semantics]: dart.fieldType(dart.nullable(gesture_detector.SemanticsGestureDelegate))
  }));
  gesture_detector._GestureSemantics = class _GestureSemantics extends framework.SingleChildRenderObjectWidget {
    get behavior() {
      return this[S.behavior$4];
    }
    set behavior(value) {
      super.behavior = value;
    }
    get assignSemantics() {
      return this[S.assignSemantics];
    }
    set assignSemantics(value) {
      super.assignSemantics = value;
    }
    createRenderObject(context) {
      let t66, t66$;
      if (context == null) dart.nullFailed(I[21], 1268, 65, "context");
      let renderObject = (t66 = new proxy_box.RenderSemanticsGestureHandler.new(), (() => {
        t66.behavior = this.behavior;
        return t66;
      })());
      t66$ = renderObject;
      this.assignSemantics(t66$);
      return renderObject;
    }
    updateRenderObject(context, renderObject) {
      let t66;
      if (context == null) dart.nullFailed(I[21], 1276, 40, "context");
      proxy_box.RenderSemanticsGestureHandler.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[21], 1276, 79, "renderObject");
      renderObject.behavior = this.behavior;
      t66 = renderObject;
      this.assignSemantics(t66);
    }
  };
  (gesture_detector._GestureSemantics.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let behavior = opts && 'behavior' in opts ? opts.behavior : null;
    if (behavior == null) dart.nullFailed(I[21], 1259, 19, "behavior");
    let assignSemantics = opts && 'assignSemantics' in opts ? opts.assignSemantics : null;
    if (assignSemantics == null) dart.nullFailed(I[21], 1260, 19, "assignSemantics");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.behavior$4] = behavior;
    this[S.assignSemantics] = assignSemantics;
    if (!(assignSemantics != null)) dart.assertFailed(null, I[21], 1261, 15, "assignSemantics != null");
    gesture_detector._GestureSemantics.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = gesture_detector._GestureSemantics.prototype;
  dart.addTypeTests(gesture_detector._GestureSemantics);
  dart.addTypeCaches(gesture_detector._GestureSemantics);
  dart.setMethodSignature(gesture_detector._GestureSemantics, () => ({
    __proto__: dart.getMethods(gesture_detector._GestureSemantics.__proto__),
    createRenderObject: dart.fnType(proxy_box.RenderSemanticsGestureHandler, [framework.BuildContext])
  }));
  dart.setLibraryUri(gesture_detector._GestureSemantics, I[20]);
  dart.setFieldSignature(gesture_detector._GestureSemantics, () => ({
    __proto__: dart.getFields(gesture_detector._GestureSemantics.__proto__),
    behavior: dart.finalFieldType(proxy_box.HitTestBehavior),
    assignSemantics: dart.finalFieldType(dart.fnType(dart.void, [proxy_box.RenderSemanticsGestureHandler]))
  }));
  gesture_detector._DefaultSemanticsGestureDelegate = class _DefaultSemanticsGestureDelegate extends gesture_detector.SemanticsGestureDelegate {
    assignSemantics(renderObject) {
      let t66;
      if (renderObject == null) dart.nullFailed(I[21], 1318, 54, "renderObject");
      if (!!dart.test(this.detectorState.widget.excludeFromSemantics)) dart.assertFailed(null, I[21], 1319, 12, "!detectorState.widget.excludeFromSemantics");
      let recognizers = dart.nullCheck(this.detectorState[S._recognizers]);
      t66 = renderObject;
      (() => {
        t66.onTap = this[S._getTapHandler](recognizers);
        t66.onLongPress = this[S._getLongPressHandler](recognizers);
        t66.onHorizontalDragUpdate = this[S._getHorizontalDragUpdateHandler](recognizers);
        t66.onVerticalDragUpdate = this[S._getVerticalDragUpdateHandler](recognizers);
        return t66;
      })();
    }
    [S._getTapHandler](recognizers) {
      if (recognizers == null) dart.nullFailed(I[21], 1328, 67, "recognizers");
      let tap = T$.TapGestureRecognizerN().as(recognizers[S$.$_get](dart.wrapType(tap$.TapGestureRecognizer)));
      if (tap == null) return null;
      return dart.fn(() => {
        let t66, t66$, t66$0;
        if (!(tap != null)) dart.assertFailed(null, I[21], 1334, 14, "tap != null");
        t66 = tap.onTapDown;
        t66 == null ? null : t66(new tap$.TapDownDetails.new());
        t66$ = tap.onTapUp;
        t66$ == null ? null : t66$(new tap$.TapUpDetails.new({kind: ui.PointerDeviceKind.unknown}));
        t66$0 = tap.onTap;
        t66$0 == null ? null : t66$0();
      }, T$.VoidTovoid());
    }
    [S._getLongPressHandler](recognizers) {
      if (recognizers == null) dart.nullFailed(I[21], 1341, 79, "recognizers");
      let longPress = T$.LongPressGestureRecognizerN().as(recognizers[S$.$_get](dart.wrapType(long_press.LongPressGestureRecognizer)));
      if (longPress == null) return null;
      return dart.fn(() => {
        let t66, t66$, t66$0, t66$1;
        t66 = longPress.onLongPressStart;
        t66 == null ? null : t66(C[810] || CT.C810);
        t66$ = longPress.onLongPress;
        t66$ == null ? null : t66$();
        t66$0 = longPress.onLongPressEnd;
        t66$0 == null ? null : t66$0(C[811] || CT.C811);
        t66$1 = longPress.onLongPressUp;
        t66$1 == null ? null : t66$1();
      }, T$.VoidTovoid());
    }
    [S._getHorizontalDragUpdateHandler](recognizers) {
      if (recognizers == null) dart.nullFailed(I[21], 1354, 91, "recognizers");
      let horizontal = T$.HorizontalDragGestureRecognizerN().as(recognizers[S$.$_get](dart.wrapType(monodrag.HorizontalDragGestureRecognizer)));
      let pan = T$.PanGestureRecognizerN().as(recognizers[S$.$_get](dart.wrapType(monodrag.PanGestureRecognizer)));
      let horizontalHandler = horizontal == null ? null : dart.fn(details => {
        let t66, t66$, t66$0, t66$1;
        if (details == null) dart.nullFailed(I[21], 1360, 26, "details");
        t66 = horizontal.onDown;
        t66 == null ? null : t66(new drag_details.DragDownDetails.new());
        t66$ = horizontal.onStart;
        t66$ == null ? null : t66$(new drag_details.DragStartDetails.new());
        t66$0 = horizontal.onUpdate;
        t66$0 == null ? null : t66$0(details);
        t66$1 = horizontal.onEnd;
        t66$1 == null ? null : t66$1(new drag_details.DragEndDetails.new({primaryVelocity: 0.0}));
      }, T$.DragUpdateDetailsTovoid());
      let panHandler = pan == null ? null : dart.fn(details => {
        let t66, t66$, t66$0, t66$1;
        if (details == null) dart.nullFailed(I[21], 1369, 26, "details");
        t66 = pan.onDown;
        t66 == null ? null : t66(new drag_details.DragDownDetails.new());
        t66$ = pan.onStart;
        t66$ == null ? null : t66$(new drag_details.DragStartDetails.new());
        t66$0 = pan.onUpdate;
        t66$0 == null ? null : t66$0(details);
        t66$1 = pan.onEnd;
        t66$1 == null ? null : t66$1(new drag_details.DragEndDetails.new());
      }, T$.DragUpdateDetailsTovoid());
      if (horizontalHandler == null && panHandler == null) return null;
      return dart.fn(details => {
        if (details == null) dart.nullFailed(I[21], 1378, 31, "details");
        if (horizontalHandler != null) horizontalHandler(details);
        if (panHandler != null) panHandler(details);
      }, T$.DragUpdateDetailsTovoid());
    }
    [S._getVerticalDragUpdateHandler](recognizers) {
      if (recognizers == null) dart.nullFailed(I[21], 1386, 89, "recognizers");
      let vertical = T$.VerticalDragGestureRecognizerN().as(recognizers[S$.$_get](dart.wrapType(monodrag.VerticalDragGestureRecognizer)));
      let pan = T$.PanGestureRecognizerN().as(recognizers[S$.$_get](dart.wrapType(monodrag.PanGestureRecognizer)));
      let verticalHandler = vertical == null ? null : dart.fn(details => {
        let t66, t66$, t66$0, t66$1;
        if (details == null) dart.nullFailed(I[21], 1392, 26, "details");
        t66 = vertical.onDown;
        t66 == null ? null : t66(new drag_details.DragDownDetails.new());
        t66$ = vertical.onStart;
        t66$ == null ? null : t66$(new drag_details.DragStartDetails.new());
        t66$0 = vertical.onUpdate;
        t66$0 == null ? null : t66$0(details);
        t66$1 = vertical.onEnd;
        t66$1 == null ? null : t66$1(new drag_details.DragEndDetails.new({primaryVelocity: 0.0}));
      }, T$.DragUpdateDetailsTovoid());
      let panHandler = pan == null ? null : dart.fn(details => {
        let t66, t66$, t66$0, t66$1;
        if (details == null) dart.nullFailed(I[21], 1401, 26, "details");
        t66 = pan.onDown;
        t66 == null ? null : t66(new drag_details.DragDownDetails.new());
        t66$ = pan.onStart;
        t66$ == null ? null : t66$(new drag_details.DragStartDetails.new());
        t66$0 = pan.onUpdate;
        t66$0 == null ? null : t66$0(details);
        t66$1 = pan.onEnd;
        t66$1 == null ? null : t66$1(new drag_details.DragEndDetails.new());
      }, T$.DragUpdateDetailsTovoid());
      if (verticalHandler == null && panHandler == null) return null;
      return dart.fn(details => {
        if (details == null) dart.nullFailed(I[21], 1410, 31, "details");
        if (verticalHandler != null) verticalHandler(details);
        if (panHandler != null) panHandler(details);
      }, T$.DragUpdateDetailsTovoid());
    }
  };
  (gesture_detector._DefaultSemanticsGestureDelegate.new = function(detectorState) {
    if (detectorState == null) dart.nullFailed(I[21], 1313, 41, "detectorState");
    this.detectorState = detectorState;
    gesture_detector._DefaultSemanticsGestureDelegate.__proto__.new.call(this);
    ;
  }).prototype = gesture_detector._DefaultSemanticsGestureDelegate.prototype;
  dart.addTypeTests(gesture_detector._DefaultSemanticsGestureDelegate);
  dart.addTypeCaches(gesture_detector._DefaultSemanticsGestureDelegate);
  dart.setMethodSignature(gesture_detector._DefaultSemanticsGestureDelegate, () => ({
    __proto__: dart.getMethods(gesture_detector._DefaultSemanticsGestureDelegate.__proto__),
    assignSemantics: dart.fnType(dart.void, [proxy_box.RenderSemanticsGestureHandler]),
    [S._getTapHandler]: dart.fnType(dart.nullable(dart.fnType(dart.void, [])), [core.Map$(core.Type, recognizer.GestureRecognizer)]),
    [S._getLongPressHandler]: dart.fnType(dart.nullable(dart.fnType(dart.void, [])), [core.Map$(core.Type, recognizer.GestureRecognizer)]),
    [S._getHorizontalDragUpdateHandler]: dart.fnType(dart.nullable(dart.fnType(dart.void, [drag_details.DragUpdateDetails])), [core.Map$(core.Type, recognizer.GestureRecognizer)]),
    [S._getVerticalDragUpdateHandler]: dart.fnType(dart.nullable(dart.fnType(dart.void, [drag_details.DragUpdateDetails])), [core.Map$(core.Type, recognizer.GestureRecognizer)])
  }));
  dart.setLibraryUri(gesture_detector._DefaultSemanticsGestureDelegate, I[20]);
  dart.setFieldSignature(gesture_detector._DefaultSemanticsGestureDelegate, () => ({
    __proto__: dart.getFields(gesture_detector._DefaultSemanticsGestureDelegate.__proto__),
    detectorState: dart.finalFieldType(gesture_detector.RawGestureDetectorState)
  }));
  scrollable$.Scrollable = class Scrollable extends framework.StatefulWidget {
    get axisDirection() {
      return this[S.axisDirection$3];
    }
    set axisDirection(value) {
      super.axisDirection = value;
    }
    get controller() {
      return this[S.controller$3];
    }
    set controller(value) {
      super.controller = value;
    }
    get physics() {
      return this[S.physics$2];
    }
    set physics(value) {
      super.physics = value;
    }
    get viewportBuilder() {
      return this[S.viewportBuilder];
    }
    set viewportBuilder(value) {
      super.viewportBuilder = value;
    }
    get incrementCalculator() {
      return this[S.incrementCalculator];
    }
    set incrementCalculator(value) {
      super.incrementCalculator = value;
    }
    get excludeFromSemantics() {
      return this[S.excludeFromSemantics$2];
    }
    set excludeFromSemantics(value) {
      super.excludeFromSemantics = value;
    }
    get semanticChildCount() {
      return this[S.semanticChildCount];
    }
    set semanticChildCount(value) {
      super.semanticChildCount = value;
    }
    get dragStartBehavior() {
      return this[S.dragStartBehavior$3];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    get restorationId() {
      return this[S.restorationId$3];
    }
    set restorationId(value) {
      super.restorationId = value;
    }
    get scrollBehavior() {
      return this[S.scrollBehavior];
    }
    set scrollBehavior(value) {
      super.scrollBehavior = value;
    }
    get axis() {
      return basic_types.axisDirectionToAxis(this.axisDirection);
    }
    createState() {
      return new scrollable$.ScrollableState.new();
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[92], 267, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.EnumPropertyOfAxisDirection()).new("axisDirection", this.axisDirection));
      properties.add(new (T$.DiagnosticsPropertyOfScrollPhysics()).new("physics", this.physics));
      properties.add(new diagnostics$.StringProperty.new("restorationId", this.restorationId));
    }
    static of(context) {
      let t66;
      if (context == null) dart.nullFailed(I[92], 284, 43, "context");
      let widget = context.dependOnInheritedWidgetOfExactType(scrollable$._ScrollableScope);
      t66 = widget;
      return t66 == null ? null : t66.scrollable;
    }
    static recommendDeferredLoadingForContext(context) {
      let t66;
      if (context == null) dart.nullFailed(I[92], 302, 63, "context");
      let widget = T$._ScrollableScopeN().as((t66 = context.getElementForInheritedWidgetOfExactType(scrollable$._ScrollableScope), t66 == null ? null : t66.widget));
      if (widget == null) {
        return false;
      }
      return widget.position.recommendDeferredLoading(context);
    }
    static ensureVisible(context, opts) {
      let t66;
      if (context == null) dart.nullFailed(I[92], 313, 18, "context");
      let alignment = opts && 'alignment' in opts ? opts.alignment : 0;
      if (alignment == null) dart.nullFailed(I[92], 314, 12, "alignment");
      let duration = opts && 'duration' in opts ? opts.duration : C[698] || CT.C698;
      if (duration == null) dart.nullFailed(I[92], 315, 14, "duration");
      let curve = opts && 'curve' in opts ? opts.curve : C[761] || CT.C761;
      if (curve == null) dart.nullFailed(I[92], 316, 11, "curve");
      let alignmentPolicy = opts && 'alignmentPolicy' in opts ? opts.alignmentPolicy : C[762] || CT.C762;
      if (alignmentPolicy == null) dart.nullFailed(I[92], 317, 35, "alignmentPolicy");
      let futures = T$.JSArrayOfFutureOfvoid().of([]);
      let targetRenderObject = null;
      let scrollable = scrollable$.Scrollable.of(context);
      while (scrollable != null) {
        futures[S$.$add](scrollable.position.ensureVisible(dart.nullCheck(context.findRenderObject()), {alignment: alignment, duration: duration, curve: curve, alignmentPolicy: alignmentPolicy, targetRenderObject: targetRenderObject}));
        targetRenderObject = (t66 = targetRenderObject, t66 == null ? context.findRenderObject() : t66);
        context = scrollable.context;
        scrollable = scrollable$.Scrollable.of(context);
      }
      if (dart.test(futures[S$.$isEmpty]) || dart.equals(duration, core.Duration.zero)) return T$.FutureOfvoid().value();
      if (futures[S$.$length] === 1) return futures[S$.$single];
      return async.Future.wait(dart.void, futures).then(dart.void, dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[92], 348, 62, "_");
        return null;
      }, T$.ListOfvoidToNull()));
    }
  };
  (scrollable$.Scrollable.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C[684] || CT.C684;
    if (axisDirection == null) dart.nullFailed(I[92], 84, 10, "axisDirection");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let viewportBuilder = opts && 'viewportBuilder' in opts ? opts.viewportBuilder : null;
    if (viewportBuilder == null) dart.nullFailed(I[92], 87, 19, "viewportBuilder");
    let incrementCalculator = opts && 'incrementCalculator' in opts ? opts.incrementCalculator : null;
    let excludeFromSemantics = opts && 'excludeFromSemantics' in opts ? opts.excludeFromSemantics : false;
    if (excludeFromSemantics == null) dart.nullFailed(I[92], 89, 10, "excludeFromSemantics");
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C[522] || CT.C522;
    if (dragStartBehavior == null) dart.nullFailed(I[92], 91, 10, "dragStartBehavior");
    let restorationId = opts && 'restorationId' in opts ? opts.restorationId : null;
    let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.axisDirection$3] = axisDirection;
    this[S.controller$3] = controller;
    this[S.physics$2] = physics;
    this[S.viewportBuilder] = viewportBuilder;
    this[S.incrementCalculator] = incrementCalculator;
    this[S.excludeFromSemantics$2] = excludeFromSemantics;
    this[S.semanticChildCount] = semanticChildCount;
    this[S.dragStartBehavior$3] = dragStartBehavior;
    this[S.restorationId$3] = restorationId;
    this[S.scrollBehavior] = scrollBehavior;
    if (!(axisDirection != null)) dart.assertFailed(null, I[92], 94, 15, "axisDirection != null");
    if (!(dragStartBehavior != null)) dart.assertFailed(null, I[92], 95, 15, "dragStartBehavior != null");
    if (!(viewportBuilder != null)) dart.assertFailed(null, I[92], 96, 15, "viewportBuilder != null");
    if (!(excludeFromSemantics != null)) dart.assertFailed(null, I[92], 97, 15, "excludeFromSemantics != null");
    if (!(semanticChildCount == null || dart.notNull(semanticChildCount) >= 0)) dart.assertFailed(null, I[92], 98, 15, "semanticChildCount == null || semanticChildCount >= 0");
    scrollable$.Scrollable.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scrollable$.Scrollable.prototype;
  dart.addTypeTests(scrollable$.Scrollable);
  dart.addTypeCaches(scrollable$.Scrollable);
  dart.setMethodSignature(scrollable$.Scrollable, () => ({
    __proto__: dart.getMethods(scrollable$.Scrollable.__proto__),
    createState: dart.fnType(scrollable$.ScrollableState, [])
  }));
  dart.setGetterSignature(scrollable$.Scrollable, () => ({
    __proto__: dart.getGetters(scrollable$.Scrollable.__proto__),
    axis: basic_types.Axis
  }));
  dart.setLibraryUri(scrollable$.Scrollable, I[93]);
  dart.setFieldSignature(scrollable$.Scrollable, () => ({
    __proto__: dart.getFields(scrollable$.Scrollable.__proto__),
    axisDirection: dart.finalFieldType(basic_types.AxisDirection),
    controller: dart.finalFieldType(dart.nullable(scroll_controller.ScrollController)),
    physics: dart.finalFieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    viewportBuilder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, viewport_offset.ViewportOffset])),
    incrementCalculator: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [scrollable$.ScrollIncrementDetails]))),
    excludeFromSemantics: dart.finalFieldType(core.bool),
    semanticChildCount: dart.finalFieldType(dart.nullable(core.int)),
    dragStartBehavior: dart.finalFieldType(recognizer.DragStartBehavior),
    restorationId: dart.finalFieldType(dart.nullable(core.String)),
    scrollBehavior: dart.finalFieldType(dart.nullable(scroll_configuration.ScrollBehavior))
  }));
  scrollable$._ScrollableScope = class _ScrollableScope extends framework.InheritedWidget {
    get scrollable() {
      return this[S.scrollable];
    }
    set scrollable(value) {
      super.scrollable = value;
    }
    get position() {
      return this[S.position$2];
    }
    set position(value) {
      super.position = value;
    }
    updateShouldNotify(old) {
      scrollable$._ScrollableScope.as(old);
      if (old == null) dart.nullFailed(I[92], 368, 44, "old");
      return !dart.equals(this.position, old.position);
    }
  };
  (scrollable$._ScrollableScope.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollable = opts && 'scrollable' in opts ? opts.scrollable : null;
    if (scrollable == null) dart.nullFailed(I[92], 357, 19, "scrollable");
    let position = opts && 'position' in opts ? opts.position : null;
    if (position == null) dart.nullFailed(I[92], 358, 19, "position");
    let child = opts && 'child' in opts ? opts.child : null;
    if (child == null) dart.nullFailed(I[92], 359, 21, "child");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.scrollable] = scrollable;
    this[S.position$2] = position;
    if (!(scrollable != null)) dart.assertFailed(null, I[92], 360, 15, "scrollable != null");
    if (!(child != null)) dart.assertFailed(null, I[92], 361, 15, "child != null");
    scrollable$._ScrollableScope.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scrollable$._ScrollableScope.prototype;
  dart.addTypeTests(scrollable$._ScrollableScope);
  dart.addTypeCaches(scrollable$._ScrollableScope);
  dart.setMethodSignature(scrollable$._ScrollableScope, () => ({
    __proto__: dart.getMethods(scrollable$._ScrollableScope.__proto__),
    updateShouldNotify: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(scrollable$._ScrollableScope, I[93]);
  dart.setFieldSignature(scrollable$._ScrollableScope, () => ({
    __proto__: dart.getFields(scrollable$._ScrollableScope.__proto__),
    scrollable: dart.finalFieldType(scrollable$.ScrollableState),
    position: dart.finalFieldType(scroll_position.ScrollPosition)
  }));
  const State_TickerProviderStateMixin$36$1 = class State_TickerProviderStateMixin extends framework.State$(scrollable$.Scrollable) {};
  (State_TickerProviderStateMixin$36$1.new = function() {
    ticker_provider.TickerProviderStateMixin$(scrollable$.Scrollable)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$1.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$1.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$1, ticker_provider.TickerProviderStateMixin$(scrollable$.Scrollable));
  const State_RestorationMixin$36$0 = class State_RestorationMixin extends State_TickerProviderStateMixin$36$1 {};
  (State_RestorationMixin$36$0.new = function() {
    restoration$.RestorationMixin$(scrollable$.Scrollable)[dart.mixinNew].call(this);
    State_RestorationMixin$36$0.__proto__.new.call(this);
  }).prototype = State_RestorationMixin$36$0.prototype;
  dart.applyMixin(State_RestorationMixin$36$0, restoration$.RestorationMixin$(scrollable$.Scrollable));
  scrollable$.ScrollableState = class ScrollableState extends State_RestorationMixin$36$0 {
    get position() {
      return dart.nullCheck(this[S._position]);
    }
    get axisDirection() {
      return this.widget.axisDirection;
    }
    get [S._configuration]() {
      let t66;
      return dart.test(this[S.__ScrollableState__configuration_isSet]) ? (t66 = this[S.__ScrollableState__configuration], t66) : dart.throw(new _internal.LateError.fieldNI("_configuration"));
    }
    set [S._configuration](t66) {
      if (t66 == null) dart.nullFailed(I[92], 398, 23, "null");
      this[S.__ScrollableState__configuration_isSet] = true;
      this[S.__ScrollableState__configuration] = t66;
    }
    get [S._effectiveScrollController]() {
      let t67;
      t67 = this.widget.controller;
      return t67 == null ? dart.nullCheck(this[S._fallbackScrollController]) : t67;
    }
    [S._updatePosition]() {
      let t67;
      this[S._configuration] = (t67 = this.widget.scrollBehavior, t67 == null ? scroll_configuration.ScrollConfiguration.of(this.context) : t67);
      this[S._physics] = this[S._configuration].getScrollPhysics(this.context);
      if (this.widget.physics != null) {
        this[S._physics] = dart.nullCheck(this.widget.physics).applyTo(this[S._physics]);
      } else if (this.widget.scrollBehavior != null) {
        this[S._physics] = dart.nullCheck(this.widget.scrollBehavior).getScrollPhysics(this.context).applyTo(this[S._physics]);
      }
      let oldPosition = this[S._position];
      if (oldPosition != null) {
        this[S._effectiveScrollController].detach(oldPosition);
        async.scheduleMicrotask(dart.bind(oldPosition, 'dispose'));
      }
      this[S._position] = this[S._effectiveScrollController].createScrollPosition(dart.nullCheck(this[S._physics]), this, oldPosition);
      if (!(this[S._position] != null)) dart.assertFailed(null, I[92], 423, 12, "_position != null");
      this[S._effectiveScrollController].attach(this.position);
    }
    restoreState(oldBucket, initialRestore) {
      if (initialRestore == null) dart.nullFailed(I[92], 428, 56, "initialRestore");
      this.registerForRestoration(this[S._persistedScrollOffset], "offset");
      if (!(this[S._position] != null)) dart.assertFailed(null, I[92], 430, 12, "_position != null");
      if (this[S._persistedScrollOffset].value != null) {
        this.position.restoreOffset(dart.nullCheck(this[S._persistedScrollOffset].value), {initialRestore: initialRestore});
      }
    }
    saveOffset(offset) {
      if (offset == null) dart.nullFailed(I[92], 437, 26, "offset");
      if (!dart.test(restoration.debugIsSerializableForRestoration(offset))) dart.assertFailed(null, I[92], 438, 12, "debugIsSerializableForRestoration(offset)");
      this[S._persistedScrollOffset].value = offset;
      dart.nullCheck(binding$0.ServicesBinding.instance).restorationManager.flushData();
    }
    initState() {
      if (this.widget.controller == null) this[S._fallbackScrollController] = new scroll_controller.ScrollController.new();
      super.initState();
    }
    didChangeDependencies() {
      this[S._updatePosition]();
      super.didChangeDependencies();
    }
    [S._shouldUpdatePosition](oldWidget) {
      let t68, t67, t68$, t67$, t67$0, t67$1, t67$2, t67$3, t67$4, t67$5;
      if (oldWidget == null) dart.nullFailed(I[92], 458, 41, "oldWidget");
      let newPhysics = (t67 = this.widget.physics, t67 == null ? (t68 = this.widget.scrollBehavior, t68 == null ? null : t68.getScrollPhysics(this.context)) : t67);
      let oldPhysics = (t67$ = oldWidget.physics, t67$ == null ? (t68$ = oldWidget.scrollBehavior, t68$ == null ? null : t68$.getScrollPhysics(this.context)) : t67$);
      do {
        if (!dart.equals((t67$0 = newPhysics, t67$0 == null ? null : dart.runtimeType(t67$0)), (t67$1 = oldPhysics, t67$1 == null ? null : dart.runtimeType(t67$1)))) return true;
        newPhysics = (t67$2 = newPhysics, t67$2 == null ? null : t67$2.parent);
        oldPhysics = (t67$3 = oldPhysics, t67$3 == null ? null : t67$3.parent);
      } while (newPhysics != null || oldPhysics != null);
      return !dart.equals((t67$4 = this.widget.controller, t67$4 == null ? null : dart.runtimeType(t67$4)), (t67$5 = oldWidget.controller, t67$5 == null ? null : dart.runtimeType(t67$5)));
    }
    didUpdateWidget(oldWidget) {
      let t67;
      scrollable$.Scrollable.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[92], 472, 35, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (!dart.equals(this.widget.controller, oldWidget.controller)) {
        if (oldWidget.controller == null) {
          if (!(this[S._fallbackScrollController] != null)) dart.assertFailed(null, I[92], 479, 16, "_fallbackScrollController !=  null");
          if (!(this.widget.controller != null)) dart.assertFailed(null, I[92], 480, 16, "widget.controller != null");
          dart.nullCheck(this[S._fallbackScrollController]).detach(this.position);
          dart.nullCheck(this[S._fallbackScrollController]).dispose();
          this[S._fallbackScrollController] = null;
        } else {
          t67 = oldWidget.controller;
          t67 == null ? null : t67.detach(this.position);
          if (this.widget.controller == null) {
            this[S._fallbackScrollController] = new scroll_controller.ScrollController.new();
          }
        }
        this[S._effectiveScrollController].attach(this.position);
      }
      if (dart.test(this[S._shouldUpdatePosition](oldWidget))) this[S._updatePosition]();
    }
    dispose() {
      let t67, t67$;
      if (this.widget.controller != null) {
        dart.nullCheck(this.widget.controller).detach(this.position);
      } else {
        t67 = this[S._fallbackScrollController];
        t67 == null ? null : t67.detach(this.position);
        t67$ = this[S._fallbackScrollController];
        t67$ == null ? null : t67$.dispose();
      }
      this.position.dispose();
      this[S._persistedScrollOffset].dispose();
      super.dispose();
    }
    setSemanticsActions(actions) {
      if (actions == null) dart.nullFailed(I[92], 522, 49, "actions");
      if (this[S._gestureDetectorKey].currentState != null) dart.nullCheck(this[S._gestureDetectorKey].currentState).replaceSemanticsActions(actions);
    }
    setCanDrag(canDrag) {
      if (canDrag == null) dart.nullFailed(I[92], 542, 24, "canDrag");
      if (canDrag == this[S._lastCanDrag] && (!dart.test(canDrag) || this.widget.axis == this[S._lastAxisDirection$1])) return;
      if (!dart.test(canDrag)) {
        this[S._gestureRecognizers] = C[798] || CT.C798;
        this[S._handleDragCancel]();
      } else {
        switch (this.widget.axis) {
          case C[454] || CT.C454:
          {
            this[S._gestureRecognizers] = new (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer()).from([dart.wrapType(monodrag.VerticalDragGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfVerticalDragGestureRecognizer()).new(dart.fn(() => new monodrag.VerticalDragGestureRecognizer.new(), T$.VoidToVerticalDragGestureRecognizer()), dart.fn(instance => {
                let t68, t68$, t68$0, t67;
                if (instance == null) dart.nullFailed(I[92], 557, 46, "instance");
                t67 = instance;
                (() => {
                  t67.onDown = dart.bind(this, S._handleDragDown);
                  t67.onStart = dart.bind(this, S._handleDragStart$1);
                  t67.onUpdate = dart.bind(this, S._handleDragUpdate$1);
                  t67.onEnd = dart.bind(this, S._handleDragEnd$1);
                  t67.onCancel = dart.bind(this, S._handleDragCancel);
                  t67.minFlingDistance = (t68 = this[S._physics], t68 == null ? null : t68.minFlingDistance);
                  t67.minFlingVelocity = (t68$ = this[S._physics], t68$ == null ? null : t68$.minFlingVelocity);
                  t67.maxFlingVelocity = (t68$0 = this[S._physics], t68$0 == null ? null : t68$0.maxFlingVelocity);
                  t67.velocityTrackerBuilder = this[S._configuration].velocityTrackerBuilder(this.context);
                  t67.dragStartBehavior = this.widget.dragStartBehavior;
                  return t67;
                })();
              }, T$.VerticalDragGestureRecognizerTovoid()))]);
            break;
          }
          case C[701] || CT.C701:
          {
            this[S._gestureRecognizers] = new (T$.LinkedMapOfType$GestureRecognizerFactoryOfGestureRecognizer()).from([dart.wrapType(monodrag.HorizontalDragGestureRecognizer), new (T$.GestureRecognizerFactoryWithHandlersOfHorizontalDragGestureRecognizer()).new(dart.fn(() => new monodrag.HorizontalDragGestureRecognizer.new(), T$.VoidToHorizontalDragGestureRecognizer()), dart.fn(instance => {
                let t68, t68$, t68$0, t67;
                if (instance == null) dart.nullFailed(I[92], 577, 48, "instance");
                t67 = instance;
                (() => {
                  t67.onDown = dart.bind(this, S._handleDragDown);
                  t67.onStart = dart.bind(this, S._handleDragStart$1);
                  t67.onUpdate = dart.bind(this, S._handleDragUpdate$1);
                  t67.onEnd = dart.bind(this, S._handleDragEnd$1);
                  t67.onCancel = dart.bind(this, S._handleDragCancel);
                  t67.minFlingDistance = (t68 = this[S._physics], t68 == null ? null : t68.minFlingDistance);
                  t67.minFlingVelocity = (t68$ = this[S._physics], t68$ == null ? null : t68$.minFlingVelocity);
                  t67.maxFlingVelocity = (t68$0 = this[S._physics], t68$0 == null ? null : t68$0.maxFlingVelocity);
                  t67.velocityTrackerBuilder = this[S._configuration].velocityTrackerBuilder(this.context);
                  t67.dragStartBehavior = this.widget.dragStartBehavior;
                  return t67;
                })();
              }, T$.HorizontalDragGestureRecognizerTovoid()))]);
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
      this[S._lastCanDrag] = canDrag;
      this[S._lastAxisDirection$1] = this.widget.axis;
      if (this[S._gestureDetectorKey].currentState != null) dart.nullCheck(this[S._gestureDetectorKey].currentState).replaceGestureRecognizers(this[S._gestureRecognizers]);
    }
    get vsync() {
      return this;
    }
    setIgnorePointer(value) {
      if (value == null) dart.nullFailed(I[92], 606, 30, "value");
      if (this[S._shouldIgnorePointer] == value) return;
      this[S._shouldIgnorePointer] = value;
      if (this[S._ignorePointerKey$1].currentContext != null) {
        let renderBox = proxy_box.RenderIgnorePointer.as(dart.nullCheck(dart.nullCheck(this[S._ignorePointerKey$1].currentContext).findRenderObject()));
        renderBox.ignoring = this[S._shouldIgnorePointer];
      }
    }
    get notificationContext() {
      return this[S._gestureDetectorKey].currentContext;
    }
    get storageContext() {
      return this.context;
    }
    [S._handleDragDown](details) {
      if (details == null) dart.nullFailed(I[92], 627, 40, "details");
      if (!(this[S._drag] == null)) dart.assertFailed(null, I[92], 628, 12, "_drag == null");
      if (!(this[S._hold] == null)) dart.assertFailed(null, I[92], 629, 12, "_hold == null");
      this[S._hold] = this.position.hold(dart.bind(this, S._disposeHold));
    }
    [S._handleDragStart$1](details) {
      if (details == null) dart.nullFailed(I[92], 633, 42, "details");
      if (!(this[S._drag] == null)) dart.assertFailed(null, I[92], 637, 12, "_drag == null");
      this[S._drag] = this.position.drag(details, dart.bind(this, S._disposeDrag));
      if (!(this[S._drag] != null)) dart.assertFailed(null, I[92], 639, 12, "_drag != null");
      if (!(this[S._hold] == null)) dart.assertFailed(null, I[92], 640, 12, "_hold == null");
    }
    [S._handleDragUpdate$1](details) {
      let t67;
      if (details == null) dart.nullFailed(I[92], 643, 44, "details");
      if (!(this[S._hold] == null || this[S._drag] == null)) dart.assertFailed(null, I[92], 645, 12, "_hold == null || _drag == null");
      t67 = this[S._drag];
      t67 == null ? null : t67.update(details);
    }
    [S._handleDragEnd$1](details) {
      let t67;
      if (details == null) dart.nullFailed(I[92], 649, 38, "details");
      if (!(this[S._hold] == null || this[S._drag] == null)) dart.assertFailed(null, I[92], 651, 12, "_hold == null || _drag == null");
      t67 = this[S._drag];
      t67 == null ? null : t67.end(details);
      if (!(this[S._drag] == null)) dart.assertFailed(null, I[92], 653, 12, "_drag == null");
    }
    [S._handleDragCancel]() {
      let t67, t67$;
      if (!(this[S._hold] == null || this[S._drag] == null)) dart.assertFailed(null, I[92], 659, 12, "_hold == null || _drag == null");
      t67 = this[S._hold];
      t67 == null ? null : t67.cancel();
      t67$ = this[S._drag];
      t67$ == null ? null : t67$.cancel();
      if (!(this[S._hold] == null)) dart.assertFailed(null, I[92], 662, 12, "_hold == null");
      if (!(this[S._drag] == null)) dart.assertFailed(null, I[92], 663, 12, "_drag == null");
    }
    [S._disposeHold]() {
      this[S._hold] = null;
    }
    [S._disposeDrag]() {
      this[S._drag] = null;
    }
    [S._targetScrollOffsetForPointerScroll](delta) {
      if (delta == null) dart.nullFailed(I[92], 678, 53, "delta");
      return math.min(core.double, math.max(core.double, dart.notNull(this.position.pixels) + dart.notNull(delta), this.position.minScrollExtent), this.position.maxScrollExtent);
    }
    [S._pointerSignalEventDelta](event) {
      if (event == null) dart.nullFailed(I[92], 687, 54, "event");
      let delta = this.widget.axis == basic_types.Axis.horizontal ? event.scrollDelta.dx : event.scrollDelta.dy;
      if (dart.test(basic_types.axisDirectionIsReversed(this.widget.axisDirection))) {
        delta = dart.notNull(delta) * -1;
      }
      return delta;
    }
    [S._receivedPointerSignal](event) {
      if (event == null) dart.nullFailed(I[92], 698, 50, "event");
      if (events.PointerScrollEvent.is(event) && this[S._position] != null) {
        if (this[S._physics] != null && !dart.test(dart.nullCheck(this[S._physics]).shouldAcceptUserOffset(this.position))) {
          return;
        }
        let delta = this[S._pointerSignalEventDelta](event);
        let targetScrollOffset = this[S._targetScrollOffsetForPointerScroll](delta);
        if (delta !== 0.0 && targetScrollOffset != this.position.pixels) {
          dart.nullCheck(binding$1.GestureBinding.instance).pointerSignalResolver.register(event, dart.bind(this, S._handlePointerScroll));
        }
      }
    }
    [S._handlePointerScroll](event) {
      if (event == null) dart.nullFailed(I[92], 712, 42, "event");
      if (!events.PointerScrollEvent.is(event)) dart.assertFailed(null, I[92], 713, 12, "event is PointerScrollEvent");
      let delta = this[S._pointerSignalEventDelta](events.PointerScrollEvent.as(event));
      let targetScrollOffset = this[S._targetScrollOffsetForPointerScroll](delta);
      if (delta !== 0.0 && targetScrollOffset != this.position.pixels) {
        this.position.pointerScroll(delta);
      }
    }
    build(context) {
      let t69, t68, t67;
      if (context == null) dart.nullFailed(I[92], 724, 29, "context");
      if (!(this[S._position] != null)) dart.assertFailed(null, I[92], 725, 12, "_position != null");
      let result = new scrollable$._ScrollableScope.new({scrollable: this, position: this.position, child: new basic.Listener.new({onPointerSignal: dart.bind(this, S._receivedPointerSignal), child: new gesture_detector.RawGestureDetector.new({key: this[S._gestureDetectorKey], gestures: this[S._gestureRecognizers], behavior: proxy_box.HitTestBehavior.opaque, excludeFromSemantics: this.widget.excludeFromSemantics, child: new basic.Semantics.new({explicitChildNodes: !dart.test(this.widget.excludeFromSemantics), child: new basic.IgnorePointer.new({key: this[S._ignorePointerKey$1], ignoring: this[S._shouldIgnorePointer], ignoringSemantics: false, child: (t67 = this.widget, t68 = context, t69 = this.position, t67.viewportBuilder(t68, t69)), $creationLocationd_0dea112b090073317d4: C[813] || CT.C813}), $creationLocationd_0dea112b090073317d4: C[819] || CT.C819}), $creationLocationd_0dea112b090073317d4: C[823] || CT.C823}), $creationLocationd_0dea112b090073317d4: C[830] || CT.C830}), $creationLocationd_0dea112b090073317d4: C[834] || CT.C834});
      if (!dart.test(this.widget.excludeFromSemantics)) {
        result = new scrollable$._ScrollSemantics.new({key: this[S._scrollSemanticsKey], child: result, position: this.position, allowImplicitScrolling: dart.nullCheck(this[S._physics]).allowImplicitScrolling, semanticChildCount: this.widget.semanticChildCount, $creationLocationd_0dea112b090073317d4: C[839] || CT.C839});
      }
      let details = new scrollable$.ScrollableDetails.new({direction: this.widget.axisDirection, controller: this[S._effectiveScrollController]});
      return this[S._configuration].buildScrollbar(context, this[S._configuration].buildOverscrollIndicator(context, result, details), details);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[92], 781, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T$.DiagnosticsPropertyOfScrollPosition()).new("position", this.position));
      properties.add(new (T$.DiagnosticsPropertyOfScrollPhysics()).new("effective physics", this[S._physics]));
    }
    get restorationId() {
      return this.widget.restorationId;
    }
  };
  (scrollable$.ScrollableState.new = function() {
    this[S._position] = null;
    this[S._persistedScrollOffset] = new scrollable$._RestorableScrollOffset.new();
    this[S.__ScrollableState__configuration] = null;
    this[S.__ScrollableState__configuration_isSet] = false;
    this[S._physics] = null;
    this[S._fallbackScrollController] = null;
    this[S._scrollSemanticsKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
    this[S._gestureDetectorKey] = T$.GlobalKeyOfRawGestureDetectorState().new();
    this[S._ignorePointerKey$1] = T$.GlobalKeyOfStateOfStatefulWidget().new();
    this[S._gestureRecognizers] = C[798] || CT.C798;
    this[S._shouldIgnorePointer] = false;
    this[S._lastCanDrag] = null;
    this[S._lastAxisDirection$1] = null;
    this[S._drag] = null;
    this[S._hold] = null;
    scrollable$.ScrollableState.__proto__.new.call(this);
    ;
  }).prototype = scrollable$.ScrollableState.prototype;
  dart.addTypeTests(scrollable$.ScrollableState);
  dart.addTypeCaches(scrollable$.ScrollableState);
  scrollable$.ScrollableState[dart.implements] = () => [scroll_context.ScrollContext];
  dart.setMethodSignature(scrollable$.ScrollableState, () => ({
    __proto__: dart.getMethods(scrollable$.ScrollableState.__proto__),
    [S._updatePosition]: dart.fnType(dart.void, []),
    restoreState: dart.fnType(dart.void, [dart.nullable(restoration.RestorationBucket), core.bool]),
    saveOffset: dart.fnType(dart.void, [core.double]),
    [S._shouldUpdatePosition]: dart.fnType(core.bool, [scrollable$.Scrollable]),
    setSemanticsActions: dart.fnType(dart.void, [core.Set$(ui.SemanticsAction)]),
    setCanDrag: dart.fnType(dart.void, [core.bool]),
    setIgnorePointer: dart.fnType(dart.void, [core.bool]),
    [S._handleDragDown]: dart.fnType(dart.void, [drag_details.DragDownDetails]),
    [S._handleDragStart$1]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [S._handleDragUpdate$1]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [S._handleDragEnd$1]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [S._handleDragCancel]: dart.fnType(dart.void, []),
    [S._disposeHold]: dart.fnType(dart.void, []),
    [S._disposeDrag]: dart.fnType(dart.void, []),
    [S._targetScrollOffsetForPointerScroll]: dart.fnType(core.double, [core.double]),
    [S._pointerSignalEventDelta]: dart.fnType(core.double, [events.PointerScrollEvent]),
    [S._receivedPointerSignal]: dart.fnType(dart.void, [events.PointerSignalEvent]),
    [S._handlePointerScroll]: dart.fnType(dart.void, [events.PointerEvent]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(scrollable$.ScrollableState, () => ({
    __proto__: dart.getGetters(scrollable$.ScrollableState.__proto__),
    position: scroll_position.ScrollPosition,
    axisDirection: basic_types.AxisDirection,
    [S._configuration]: scroll_configuration.ScrollBehavior,
    [S._effectiveScrollController]: scroll_controller.ScrollController,
    vsync: ticker.TickerProvider,
    notificationContext: dart.nullable(framework.BuildContext),
    storageContext: framework.BuildContext,
    restorationId: dart.nullable(core.String)
  }));
  dart.setSetterSignature(scrollable$.ScrollableState, () => ({
    __proto__: dart.getSetters(scrollable$.ScrollableState.__proto__),
    [S._configuration]: scroll_configuration.ScrollBehavior
  }));
  dart.setLibraryUri(scrollable$.ScrollableState, I[93]);
  dart.setFieldSignature(scrollable$.ScrollableState, () => ({
    __proto__: dart.getFields(scrollable$.ScrollableState.__proto__),
    [S._position]: dart.fieldType(dart.nullable(scroll_position.ScrollPosition)),
    [S._persistedScrollOffset]: dart.finalFieldType(scrollable$._RestorableScrollOffset),
    [S.__ScrollableState__configuration]: dart.fieldType(dart.nullable(scroll_configuration.ScrollBehavior)),
    [S.__ScrollableState__configuration_isSet]: dart.fieldType(core.bool),
    [S._physics]: dart.fieldType(dart.nullable(scroll_physics.ScrollPhysics)),
    [S._fallbackScrollController]: dart.fieldType(dart.nullable(scroll_controller.ScrollController)),
    [S._scrollSemanticsKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [S._gestureDetectorKey]: dart.finalFieldType(framework.GlobalKey$(gesture_detector.RawGestureDetectorState)),
    [S._ignorePointerKey$1]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [S._gestureRecognizers]: dart.fieldType(core.Map$(core.Type, gesture_detector.GestureRecognizerFactory$(recognizer.GestureRecognizer))),
    [S._shouldIgnorePointer]: dart.fieldType(core.bool),
    [S._lastCanDrag]: dart.fieldType(dart.nullable(core.bool)),
    [S._lastAxisDirection$1]: dart.fieldType(dart.nullable(basic_types.Axis)),
    [S._drag]: dart.fieldType(dart.nullable(drag.Drag)),
    [S._hold]: dart.fieldType(dart.nullable(scroll_activity.ScrollHoldController))
  }));
  scrollable$.ScrollableDetails = class ScrollableDetails extends core.Object {
    get direction() {
      return this[S.direction$1];
    }
    set direction(value) {
      super.direction = value;
    }
    get controller() {
      return this[S.controller$4];
    }
    set controller(value) {
      super.controller = value;
    }
  };
  (scrollable$.ScrollableDetails.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : null;
    if (direction == null) dart.nullFailed(I[92], 801, 19, "direction");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    if (controller == null) dart.nullFailed(I[92], 802, 19, "controller");
    this[S.direction$1] = direction;
    this[S.controller$4] = controller;
    ;
  }).prototype = scrollable$.ScrollableDetails.prototype;
  dart.addTypeTests(scrollable$.ScrollableDetails);
  dart.addTypeCaches(scrollable$.ScrollableDetails);
  dart.setLibraryUri(scrollable$.ScrollableDetails, I[93]);
  dart.setFieldSignature(scrollable$.ScrollableDetails, () => ({
    __proto__: dart.getFields(scrollable$.ScrollableDetails.__proto__),
    direction: dart.finalFieldType(basic_types.AxisDirection),
    controller: dart.finalFieldType(scroll_controller.ScrollController)
  }));
  scrollable$._ScrollSemantics = class _ScrollSemantics extends framework.SingleChildRenderObjectWidget {
    get position() {
      return this[S.position$3];
    }
    set position(value) {
      super.position = value;
    }
    get allowImplicitScrolling() {
      return this[S.allowImplicitScrolling];
    }
    set allowImplicitScrolling(value) {
      super.allowImplicitScrolling = value;
    }
    get semanticChildCount() {
      return this[S.semanticChildCount$1];
    }
    set semanticChildCount(value) {
      super.semanticChildCount = value;
    }
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[92], 848, 58, "context");
      return new scrollable$._RenderScrollSemantics.new({position: this.position, allowImplicitScrolling: this.allowImplicitScrolling, semanticChildCount: this.semanticChildCount});
    }
    updateRenderObject(context, renderObject) {
      let t67;
      if (context == null) dart.nullFailed(I[92], 857, 40, "context");
      scrollable$._RenderScrollSemantics.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[92], 857, 72, "renderObject");
      t67 = renderObject;
      (() => {
        t67.allowImplicitScrolling = this.allowImplicitScrolling;
        t67.position = this.position;
        t67.semanticChildCount = this.semanticChildCount;
        return t67;
      })();
    }
  };
  (scrollable$._ScrollSemantics.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let position = opts && 'position' in opts ? opts.position : null;
    if (position == null) dart.nullFailed(I[92], 835, 19, "position");
    let allowImplicitScrolling = opts && 'allowImplicitScrolling' in opts ? opts.allowImplicitScrolling : null;
    if (allowImplicitScrolling == null) dart.nullFailed(I[92], 836, 19, "allowImplicitScrolling");
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[S.position$3] = position;
    this[S.allowImplicitScrolling] = allowImplicitScrolling;
    this[S.semanticChildCount$1] = semanticChildCount;
    if (!(position != null)) dart.assertFailed(null, I[92], 839, 15, "position != null");
    if (!(semanticChildCount == null || dart.notNull(semanticChildCount) >= 0)) dart.assertFailed(null, I[92], 840, 15, "semanticChildCount == null || semanticChildCount >= 0");
    scrollable$._ScrollSemantics.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scrollable$._ScrollSemantics.prototype;
  dart.addTypeTests(scrollable$._ScrollSemantics);
  dart.addTypeCaches(scrollable$._ScrollSemantics);
  dart.setMethodSignature(scrollable$._ScrollSemantics, () => ({
    __proto__: dart.getMethods(scrollable$._ScrollSemantics.__proto__),
    createRenderObject: dart.fnType(scrollable$._RenderScrollSemantics, [framework.BuildContext])
  }));
  dart.setLibraryUri(scrollable$._ScrollSemantics, I[93]);
  dart.setFieldSignature(scrollable$._ScrollSemantics, () => ({
    __proto__: dart.getFields(scrollable$._ScrollSemantics.__proto__),
    position: dart.finalFieldType(scroll_position.ScrollPosition),
    allowImplicitScrolling: dart.finalFieldType(core.bool),
    semanticChildCount: dart.finalFieldType(dart.nullable(core.int))
  }));
  scrollable$._RenderScrollSemantics = class _RenderScrollSemantics extends proxy_box.RenderProxyBox {
    get position() {
      return this[S._position];
    }
    set position(value) {
      if (value == null) dart.nullFailed(I[92], 882, 31, "value");
      if (!(value != null)) dart.assertFailed(null, I[92], 883, 12, "value != null");
      if (dart.equals(value, this[S._position])) return;
      this[S._position].removeListener(dart.bind(this, 'markNeedsSemanticsUpdate'));
      this[S._position] = value;
      this[S._position].addListener(dart.bind(this, 'markNeedsSemanticsUpdate'));
      this.markNeedsSemanticsUpdate();
    }
    get allowImplicitScrolling() {
      return this[S._allowImplicitScrolling];
    }
    set allowImplicitScrolling(value) {
      if (value == null) dart.nullFailed(I[92], 895, 35, "value");
      if (value == this[S._allowImplicitScrolling]) return;
      this[S._allowImplicitScrolling] = value;
      this.markNeedsSemanticsUpdate();
    }
    get semanticChildCount() {
      return this[S._semanticChildCount];
    }
    set semanticChildCount(value) {
      if (value == this.semanticChildCount) return;
      this[S._semanticChildCount] = value;
      this.markNeedsSemanticsUpdate();
    }
    describeSemanticsConfiguration(config) {
      let t67;
      if (config == null) dart.nullFailed(I[92], 912, 62, "config");
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = true;
      if (dart.test(this.position.haveDimensions)) {
        t67 = config;
        (() => {
          t67.hasImplicitScrolling = this.allowImplicitScrolling;
          t67.scrollPosition = this[S._position].pixels;
          t67.scrollExtentMax = this[S._position].maxScrollExtent;
          t67.scrollExtentMin = this[S._position].minScrollExtent;
          t67.scrollChildCount = this.semanticChildCount;
          return t67;
        })();
      }
    }
    assembleSemanticsNode(node, config, children) {
      let t67;
      if (node == null) dart.nullFailed(I[92], 928, 44, "node");
      if (config == null) dart.nullFailed(I[92], 928, 73, "config");
      if (children == null) dart.nullFailed(I[92], 928, 105, "children");
      if (dart.test(children[S$.$isEmpty]) || !dart.test(children[S$.$first].isTagged(viewport$.RenderViewport.useTwoPaneSemantics))) {
        super.assembleSemanticsNode(node, config, children);
        return;
      }
      this[S._innerNode] == null ? this[S._innerNode] = new semantics.SemanticsNode.new({showOnScreen: dart.bind(this, 'showOnScreen')}) : null;
      t67 = dart.nullCheck(this[S._innerNode]);
      (() => {
        t67.isMergedIntoParent = node.isPartOfNodeMerging;
        t67.rect = node.rect;
        return t67;
      })();
      let firstVisibleIndex = null;
      let excluded = T$.JSArrayOfSemanticsNode().of([dart.nullCheck(this[S._innerNode])]);
      let included = T$.JSArrayOfSemanticsNode().of([]);
      for (let child of children) {
        if (!dart.test(child.isTagged(viewport$.RenderViewport.useTwoPaneSemantics))) dart.assertFailed(null, I[92], 943, 14, "child.isTagged(RenderViewport.useTwoPaneSemantics)");
        if (dart.test(child.isTagged(viewport$.RenderViewport.excludeFromScrolling))) {
          excluded[S$.$add](child);
        } else {
          if (!dart.test(child.hasFlag(ui.SemanticsFlag.isHidden))) firstVisibleIndex == null ? firstVisibleIndex = child.indexInParent : null;
          included[S$.$add](child);
        }
      }
      config.scrollIndex = firstVisibleIndex;
      node.updateWith({config: null, childrenInInversePaintOrder: excluded});
      dart.nullCheck(this[S._innerNode]).updateWith({config: config, childrenInInversePaintOrder: included});
    }
    clearSemantics() {
      super.clearSemantics();
      this[S._innerNode] = null;
    }
  };
  (scrollable$._RenderScrollSemantics.new = function(opts) {
    let position = opts && 'position' in opts ? opts.position : null;
    if (position == null) dart.nullFailed(I[92], 867, 29, "position");
    let allowImplicitScrolling = opts && 'allowImplicitScrolling' in opts ? opts.allowImplicitScrolling : null;
    if (allowImplicitScrolling == null) dart.nullFailed(I[92], 868, 19, "allowImplicitScrolling");
    let semanticChildCount = opts && 'semanticChildCount' in opts ? opts.semanticChildCount : null;
    let child = opts && 'child' in opts ? opts.child : null;
    this[S._innerNode] = null;
    this[S._position] = position;
    this[S._allowImplicitScrolling] = allowImplicitScrolling;
    this[S._semanticChildCount] = semanticChildCount;
    if (!(position != null)) dart.assertFailed(null, I[92], 874, 15, "position != null");
    scrollable$._RenderScrollSemantics.__proto__.new.call(this, child);
    position.addListener(dart.bind(this, 'markNeedsSemanticsUpdate'));
  }).prototype = scrollable$._RenderScrollSemantics.prototype;
  dart.addTypeTests(scrollable$._RenderScrollSemantics);
  dart.addTypeCaches(scrollable$._RenderScrollSemantics);
  dart.setGetterSignature(scrollable$._RenderScrollSemantics, () => ({
    __proto__: dart.getGetters(scrollable$._RenderScrollSemantics.__proto__),
    position: scroll_position.ScrollPosition,
    allowImplicitScrolling: core.bool,
    semanticChildCount: dart.nullable(core.int)
  }));
  dart.setSetterSignature(scrollable$._RenderScrollSemantics, () => ({
    __proto__: dart.getSetters(scrollable$._RenderScrollSemantics.__proto__),
    position: scroll_position.ScrollPosition,
    allowImplicitScrolling: core.bool,
    semanticChildCount: dart.nullable(core.int)
  }));
  dart.setLibraryUri(scrollable$._RenderScrollSemantics, I[93]);
  dart.setFieldSignature(scrollable$._RenderScrollSemantics, () => ({
    __proto__: dart.getFields(scrollable$._RenderScrollSemantics.__proto__),
    [S._position]: dart.fieldType(scroll_position.ScrollPosition),
    [S._allowImplicitScrolling]: dart.fieldType(core.bool),
    [S._semanticChildCount]: dart.fieldType(dart.nullable(core.int)),
    [S._innerNode]: dart.fieldType(dart.nullable(semantics.SemanticsNode))
  }));
  scrollable$.ScrollIncrementType = class ScrollIncrementType extends core.Object {
    toString() {
      return this[S._name$17];
    }
  };
  (scrollable$.ScrollIncrementType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[92], 986, 6, "index");
    if (_name == null) dart.nullFailed(I[92], 986, 6, "_name");
    this.index = index;
    this[S._name$17] = _name;
    ;
  }).prototype = scrollable$.ScrollIncrementType.prototype;
  dart.addTypeTests(scrollable$.ScrollIncrementType);
  dart.addTypeCaches(scrollable$.ScrollIncrementType);
  dart.setLibraryUri(scrollable$.ScrollIncrementType, I[93]);
  dart.setFieldSignature(scrollable$.ScrollIncrementType, () => ({
    __proto__: dart.getFields(scrollable$.ScrollIncrementType.__proto__),
    index: dart.finalFieldType(core.int),
    [S._name$17]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scrollable$.ScrollIncrementType, ['toString']);
  scrollable$.ScrollIncrementType.line = C[846] || CT.C846;
  scrollable$.ScrollIncrementType.page = C[847] || CT.C847;
  scrollable$.ScrollIncrementType.values = C[848] || CT.C848;
  scrollable$.ScrollIncrementDetails = class ScrollIncrementDetails extends core.Object {
    get type() {
      return this[S.type];
    }
    set type(value) {
      super.type = value;
    }
    get metrics() {
      return this[S.metrics$1];
    }
    set metrics(value) {
      super.metrics = value;
    }
  };
  (scrollable$.ScrollIncrementDetails.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    if (type == null) dart.nullFailed(I[92], 1014, 19, "type");
    let metrics = opts && 'metrics' in opts ? opts.metrics : null;
    if (metrics == null) dart.nullFailed(I[92], 1015, 19, "metrics");
    this[S.type] = type;
    this[S.metrics$1] = metrics;
    if (!(type != null)) dart.assertFailed(null, I[92], 1016, 16, "type != null");
    if (!(metrics != null)) dart.assertFailed(null, I[92], 1017, 16, "metrics != null");
    ;
  }).prototype = scrollable$.ScrollIncrementDetails.prototype;
  dart.addTypeTests(scrollable$.ScrollIncrementDetails);
  dart.addTypeCaches(scrollable$.ScrollIncrementDetails);
  dart.setLibraryUri(scrollable$.ScrollIncrementDetails, I[93]);
  dart.setFieldSignature(scrollable$.ScrollIncrementDetails, () => ({
    __proto__: dart.getFields(scrollable$.ScrollIncrementDetails.__proto__),
    type: dart.finalFieldType(scrollable$.ScrollIncrementType),
    metrics: dart.finalFieldType(scroll_metrics.ScrollMetrics)
  }));
  scrollable$.ScrollIntent = class ScrollIntent extends actions$.Intent {
    get direction() {
      return this[S.direction$2];
    }
    set direction(value) {
      super.direction = value;
    }
    get type() {
      return this[S.type$1];
    }
    set type(value) {
      super.type = value;
    }
  };
  (scrollable$.ScrollIntent.new = function(opts) {
    let direction = opts && 'direction' in opts ? opts.direction : null;
    if (direction == null) dart.nullFailed(I[92], 1038, 19, "direction");
    let type = opts && 'type' in opts ? opts.type : C[846] || CT.C846;
    if (type == null) dart.nullFailed(I[92], 1039, 10, "type");
    this[S.direction$2] = direction;
    this[S.type$1] = type;
    if (!(direction != null)) dart.assertFailed(null, I[92], 1040, 16, "direction != null");
    if (!(type != null)) dart.assertFailed(null, I[92], 1041, 16, "type != null");
    scrollable$.ScrollIntent.__proto__.new.call(this);
    ;
  }).prototype = scrollable$.ScrollIntent.prototype;
  dart.addTypeTests(scrollable$.ScrollIntent);
  dart.addTypeCaches(scrollable$.ScrollIntent);
  dart.setLibraryUri(scrollable$.ScrollIntent, I[93]);
  dart.setFieldSignature(scrollable$.ScrollIntent, () => ({
    __proto__: dart.getFields(scrollable$.ScrollIntent.__proto__),
    direction: dart.finalFieldType(basic_types.AxisDirection),
    type: dart.finalFieldType(scrollable$.ScrollIncrementType)
  }));
  scrollable$.ScrollAction = class ScrollAction extends actions$.Action$(scrollable$.ScrollIntent) {
    isEnabled(intent) {
      scrollable$.ScrollIntent.as(intent);
      if (intent == null) dart.nullFailed(I[92], 1064, 31, "intent");
      let focus = focus_manager.primaryFocus;
      let contextIsValid = focus != null && focus.context != null;
      if (contextIsValid) {
        if (scrollable$.Scrollable.of(dart.nullCheck(focus.context)) != null) return true;
        if (primary_scroll_controller.PrimaryScrollController.of(dart.nullCheck(focus.context)) != null) {
          let primaryScrollController = primary_scroll_controller.PrimaryScrollController.of(dart.nullCheck(focus.context));
          return primaryScrollController != null && dart.test(primaryScrollController.hasClients) && primaryScrollController.position.context.notificationContext != null && scrollable$.Scrollable.of(dart.nullCheck(primaryScrollController.position.context.notificationContext)) != null;
        }
      }
      return false;
    }
    [S._calculateScrollIncrement](state, opts) {
      if (state == null) dart.nullFailed(I[92], 1090, 52, "state");
      let type = opts && 'type' in opts ? opts.type : C[846] || CT.C846;
      if (type == null) dart.nullFailed(I[92], 1090, 81, "type");
      if (!(type != null)) dart.assertFailed(null, I[92], 1091, 12, "type != null");
      if (!(state.position != null)) dart.assertFailed(null, I[92], 1092, 12, "state.position != null");
      if (!dart.test(state.position.hasPixels)) dart.assertFailed(null, I[92], 1093, 12, "state.position.hasPixels");
      if (!(state.position.viewportDimension != null)) dart.assertFailed(null, I[92], 1094, 12, "state.position.viewportDimension != null");
      if (!(state.position.maxScrollExtent != null)) dart.assertFailed(null, I[92], 1095, 12, "state.position.maxScrollExtent != null");
      if (!(state.position.minScrollExtent != null)) dart.assertFailed(null, I[92], 1096, 12, "state.position.minScrollExtent != null");
      if (!(state[S._physics] == null || dart.test(dart.nullCheck(state[S._physics]).shouldAcceptUserOffset(state.position)))) dart.assertFailed(null, I[92], 1097, 12, "state._physics == null || state._physics!.shouldAcceptUserOffset(state.position)");
      if (state.widget.incrementCalculator != null) {
        return dart.nullCheck(state.widget.incrementCalculator